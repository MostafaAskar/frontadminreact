[{"/home/mostafa/Magde/new/frontadminreact/src/index.js":"1","/home/mostafa/Magde/new/frontadminreact/src/app.js":"2","/home/mostafa/Magde/new/frontadminreact/src/redux/store.js":"3","/home/mostafa/Magde/new/frontadminreact/src/context/context.js":"4","/home/mostafa/Magde/new/frontadminreact/src/context/report.js":"5","/home/mostafa/Magde/new/frontadminreact/src/components/pageLoading.js":"6","/home/mostafa/Magde/new/frontadminreact/src/firebase.js":"7","/home/mostafa/Magde/new/frontadminreact/src/redux/rootReducer.js":"8","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/chat.js":"9","/home/mostafa/Magde/new/frontadminreact/src/context/path-logout.js":"10","/home/mostafa/Magde/new/frontadminreact/src/context/protected-route.js":"11","/home/mostafa/Magde/new/frontadminreact/src/components/loading.js":"12","/home/mostafa/Magde/new/frontadminreact/src/layout/welcome-layout.js":"13","/home/mostafa/Magde/new/frontadminreact/src/configs/i18next.js":"14","/home/mostafa/Magde/new/frontadminreact/src/layout/app-layout.js":"15","/home/mostafa/Magde/new/frontadminreact/src/services/rest/information.js":"16","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/global-settings.js":"17","/home/mostafa/Magde/new/frontadminreact/src/views/welcome/welcome.js":"18","/home/mostafa/Magde/new/frontadminreact/src/views/login/index.js":"19","/home/mostafa/Magde/new/frontadminreact/src/views/not-found/index.js":"20","/home/mostafa/Magde/new/frontadminreact/src/providers.js":"21","/home/mostafa/Magde/new/frontadminreact/src/configs/app-global.js":"22","/home/mostafa/Magde/new/frontadminreact/src/services/chat.js":"23","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/auth.js":"24","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/cart.js":"25","/home/mostafa/Magde/new/frontadminreact/src/services/seller/user.js":"26","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/formLang.js":"27","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/menu.js":"28","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/order.js":"29","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/category.js":"30","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/brand.js":"31","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/banner.js":"32","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/product.js":"33","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/restourant.js":"34","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/unit.js":"35","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/orders.js":"36","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/currency.js":"37","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/discount.js":"38","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveries.js":"39","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/notification.js":"40","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/blog.js":"41","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryman.js":"42","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/extraGroup.js":"43","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/user.js":"44","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/extraValue.js":"45","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/payment.js":"46","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/invite.js":"47","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/client.js":"48","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/faq.js":"49","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/transaction.js":"50","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/allShops.js":"51","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/backup.js":"52","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/productReview.js":"53","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/orderReview.js":"54","/home/mostafa/Magde/new/frontadminreact/src/routes/index.js":"55","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/wallet.js":"56","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/globalSettings.js":"57","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/myShop.js":"58","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/payoutRequests.js":"59","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/theme.js":"60","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/role.js":"61","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/languages.js":"62","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/point.js":"63","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/orderStatus.js":"64","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop.js":"65","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopCategory.js":"66","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/product-bonus.js":"67","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/subscriber.js":"68","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-bonus.js":"69","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/messegeSubscriber.js":"70","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/storeis.js":"71","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/emailProvider.js":"72","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopWorkingDays.js":"73","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopClosedDays.js":"74","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/refund.js":"75","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/sum.js":"76","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/count.js":"77","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/branch.js":"78","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/delivery-statistic.js":"79","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/addons.js":"80","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/topCustomers.js":"81","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopTag.js":"82","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/topProducts.js":"83","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/orderSales.js":"84","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/orderCounts.js":"85","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/products.js":"86","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/categories.js":"87","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/stock.js":"88","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/order.js":"89","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/revenue.js":"90","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/overview.js":"91","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/extras.js":"92","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/sellerOrders.js":"93","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/adminPayouts.js":"94","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryboyReview.js":"95","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/bonus-list.js":"96","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/sellerCoupons.js":"97","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/coupon.js":"98","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/paymentPayload.js":"99","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/todo.js":"100","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/sms-geteways.js":"101","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/box.js":"102","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/career-category.js":"103","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/menuCategory.js":"104","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/recipe-category.js":"105","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/reciept.js":"106","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/career.js":"107","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/pages.js":"108","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/waiterOrder.js":"109","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-zone.js":"110","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-tables.js":"111","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-time.js":"112","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking.js":"113","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/landing-page.js":"114","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-list.js":"115","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcelOrders.js":"116","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcelTypes.js":"117","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/advert.js":"118","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcel-option.js":"119","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-ads.js":"120","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcelReview.js":"121","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/request-models.js":"122","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/paymentToPartners.js":"123","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/propertyGroup.js":"124","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-reviews.js":"125","/home/mostafa/Magde/new/frontadminreact/src/configs/theme-config.js":"126","/home/mostafa/Magde/new/frontadminreact/src/services/installation.js":"127","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-locations.js":"128","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/propertyValue.js":"129","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/delivery-point.js":"130","/home/mostafa/Magde/new/frontadminreact/src/components/tab-menu.js":"131","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/warehouse.js":"132","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/delivery-price.js":"133","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryman-request.js":"134","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/looks.js":"135","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/gallery.js":"136","/home/mostafa/Magde/new/frontadminreact/src/components/sidebar.js":"137","/home/mostafa/Magde/new/frontadminreact/src/components/footer.js":"138","/home/mostafa/Magde/new/frontadminreact/src/services/languages.js":"139","/home/mostafa/Magde/new/frontadminreact/src/components/subscriptions-date.js":"140","/home/mostafa/Magde/new/frontadminreact/src/configs/menu-config.js":"141","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/country.js":"142","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/city.js":"143","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/region.js":"144","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/area.js":"145","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-float.js":"146","/home/mostafa/Magde/new/frontadminreact/src/views/chat/chat-icons.js":"147","/home/mostafa/Magde/new/frontadminreact/src/services/request.js":"148","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/steps.js":"149","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/project-info.js":"150","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/database-info.js":"151","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/user-info.js":"152","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/license.js":"153","/home/mostafa/Magde/new/frontadminreact/src/services/auth.js":"154","/home/mostafa/Magde/new/frontadminreact/src/components/recaptcha.js":"155","/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/project-access-info.js":"156","/home/mostafa/Magde/new/frontadminreact/src/configs/app-locale.js":"157","/home/mostafa/Magde/new/frontadminreact/src/helpers/useBodyClass.js":"158","/home/mostafa/Magde/new/frontadminreact/src/helpers/projectTitle.js":"159","/home/mostafa/Magde/new/frontadminreact/src/services/category.js":"160","/home/mostafa/Magde/new/frontadminreact/src/services/brand.js":"161","/home/mostafa/Magde/new/frontadminreact/src/services/banner.js":"162","/home/mostafa/Magde/new/frontadminreact/src/services/product.js":"163","/home/mostafa/Magde/new/frontadminreact/src/services/restaurant.js":"164","/home/mostafa/Magde/new/frontadminreact/src/services/unit.js":"165","/home/mostafa/Magde/new/frontadminreact/src/services/order.js":"166","/home/mostafa/Magde/new/frontadminreact/src/services/currency.js":"167","/home/mostafa/Magde/new/frontadminreact/src/services/delivery.js":"168","/home/mostafa/Magde/new/frontadminreact/src/services/blog.js":"169","/home/mostafa/Magde/new/frontadminreact/src/services/user.js":"170","/home/mostafa/Magde/new/frontadminreact/src/services/extra.js":"171","/home/mostafa/Magde/new/frontadminreact/src/services/payment.js":"172","/home/mostafa/Magde/new/frontadminreact/src/services/seller/category.js":"173","/home/mostafa/Magde/new/frontadminreact/src/services/seller/brands.js":"174","/home/mostafa/Magde/new/frontadminreact/src/services/rest/product.js":"175","/home/mostafa/Magde/new/frontadminreact/src/services/seller/product.js":"176","/home/mostafa/Magde/new/frontadminreact/src/services/seller/order.js":"177","/home/mostafa/Magde/new/frontadminreact/src/services/rest/currency.js":"178","/home/mostafa/Magde/new/frontadminreact/src/services/seller/discount.js":"179","/home/mostafa/Magde/new/frontadminreact/src/services/seller/extras.js":"180","/home/mostafa/Magde/new/frontadminreact/src/services/faq.js":"181","/home/mostafa/Magde/new/frontadminreact/src/services/transaction.js":"182","/home/mostafa/Magde/new/frontadminreact/src/services/review.js":"183","/home/mostafa/Magde/new/frontadminreact/src/services/rest/payment.js":"184","/home/mostafa/Magde/new/frontadminreact/src/services/seller/payment.js":"185","/home/mostafa/Magde/new/frontadminreact/src/services/seller/invites.js":"186","/home/mostafa/Magde/new/frontadminreact/src/services/seller/transaction.js":"187","/home/mostafa/Magde/new/frontadminreact/src/services/seller/review.js":"188","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryman/order.js":"189","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/app.js":"190","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/addon.js":"191","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/banner.js":"192","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/blog.js":"193","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/career-category.js":"194","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/brand.js":"195","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/career.js":"196","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/category.js":"197","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/coupon.js":"198","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/email-provider.js":"199","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/deliveries.js":"200","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/currency.js":"201","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/extras.js":"202","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/faq.js":"203","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/food.js":"204","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/gallery.js":"205","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/language.js":"206","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/message-subscriber.js":"207","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/notification.js":"208","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/order.js":"209","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/pages.js":"210","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/payment-payloads.js":"211","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/recept.js":"212","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/recipe-categories.js":"213","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/refunds.js":"214","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/restaurant.js":"215","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/reviews.js":"216","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/settings.js":"217","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/shop-tag.js":"218","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/shop.js":"219","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/smsPayloads.js":"220","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/subscriptions.js":"221","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/unit.js":"222","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/user.js":"223","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/report.js":"224","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/landing-page.js":"225","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/parcelOrder.js":"226","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/advert.js":"227","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/shop-ads.js":"228","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/payment-to-partners.js":"229","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/property.js":"230","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/delivery-point.js":"231","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/deliveryzone.js":"232","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/delivery-pricing.js":"233","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/warehouse.js":"234","/home/mostafa/Magde/new/frontadminreact/src/routes/admin/looks.js":"235","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/addon.js":"236","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/app.js":"237","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/bonus.js":"238","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/booking-tables.js":"239","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/booking-time.js":"240","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/booking-zone.js":"241","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/branch.js":"242","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/brand.js":"243","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/category.js":"244","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/discounts.js":"245","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/extras.js":"246","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/food.js":"247","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/gallery.js":"248","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/order.js":"249","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/payments.js":"250","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/recept-category.js":"251","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/recept.js":"252","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/refunds.js":"253","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/report.js":"254","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/reviews.js":"255","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/story.js":"256","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/subscriptions.js":"257","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/advert.js":"258","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/wallet.js":"259","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/payment-from-partner.js":"260","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/property.js":"261","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/coupons.js":"262","/home/mostafa/Magde/new/frontadminreact/src/services/settings.js":"263","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/looks.js":"264","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/delivery-price.js":"265","/home/mostafa/Magde/new/frontadminreact/src/routes/seller/deliverymen.js":"266","/home/mostafa/Magde/new/frontadminreact/src/services/wallet.js":"267","/home/mostafa/Magde/new/frontadminreact/src/services/orderStatus.js":"268","/home/mostafa/Magde/new/frontadminreact/src/services/points.js":"269","/home/mostafa/Magde/new/frontadminreact/src/services/shop.js":"270","/home/mostafa/Magde/new/frontadminreact/src/services/subscriber.js":"271","/home/mostafa/Magde/new/frontadminreact/src/services/messageSubscriber.js":"272","/home/mostafa/Magde/new/frontadminreact/src/services/seller/bonus.js":"273","/home/mostafa/Magde/new/frontadminreact/src/services/seller/wallet.js":"274","/home/mostafa/Magde/new/frontadminreact/src/services/storeis.js":"275","/home/mostafa/Magde/new/frontadminreact/src/services/emailSettings.js":"276","/home/mostafa/Magde/new/frontadminreact/src/services/seller/shopBonus.js":"277","/home/mostafa/Magde/new/frontadminreact/src/services/seller/storeis.js":"278","/home/mostafa/Magde/new/frontadminreact/src/services/seller/shop.js":"279","/home/mostafa/Magde/new/frontadminreact/src/services/closedDays.js":"280","/home/mostafa/Magde/new/frontadminreact/src/services/workingDays.js":"281","/home/mostafa/Magde/new/frontadminreact/src/routes/waiter/app.js":"282","/home/mostafa/Magde/new/frontadminreact/src/services/refund.js":"283","/home/mostafa/Magde/new/frontadminreact/src/routes/waiter/order.js":"284","/home/mostafa/Magde/new/frontadminreact/src/services/statistics.js":"285","/home/mostafa/Magde/new/frontadminreact/src/services/seller/refund.js":"286","/home/mostafa/Magde/new/frontadminreact/src/services/seller/branch.js":"287","/home/mostafa/Magde/new/frontadminreact/src/services/seller/statistics.js":"288","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryman/statistics.js":"289","/home/mostafa/Magde/new/frontadminreact/src/services/shopTag.js":"290","/home/mostafa/Magde/new/frontadminreact/src/services/payout.js":"291","/home/mostafa/Magde/new/frontadminreact/src/services/reports.js":"292","/home/mostafa/Magde/new/frontadminreact/src/services/bonus.js":"293","/home/mostafa/Magde/new/frontadminreact/src/services/paymentPayload.js":"294","/home/mostafa/Magde/new/frontadminreact/src/services/smsPayloads.js":"295","/home/mostafa/Magde/new/frontadminreact/src/services/box.js":"296","/home/mostafa/Magde/new/frontadminreact/src/services/reciept.js":"297","/home/mostafa/Magde/new/frontadminreact/src/services/seller/reports.js":"298","/home/mostafa/Magde/new/frontadminreact/src/services/seller/box.js":"299","/home/mostafa/Magde/new/frontadminreact/src/services/coupon.js":"300","/home/mostafa/Magde/new/frontadminreact/src/services/pages.js":"301","/home/mostafa/Magde/new/frontadminreact/src/services/career.js":"302","/home/mostafa/Magde/new/frontadminreact/src/services/waiter/statistics.js":"303","/home/mostafa/Magde/new/frontadminreact/src/services/seller/coupon.js":"304","/home/mostafa/Magde/new/frontadminreact/src/services/seller/reciept.js":"305","/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking-zone.js":"306","/home/mostafa/Magde/new/frontadminreact/src/services/waiter/order.js":"307","/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking-time.js":"308","/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking-table.js":"309","/home/mostafa/Magde/new/frontadminreact/src/services/landingPage.js":"310","/home/mostafa/Magde/new/frontadminreact/src/services/parcelOrder.js":"311","/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking.js":"312","/home/mostafa/Magde/new/frontadminreact/src/services/parcelType.js":"313","/home/mostafa/Magde/new/frontadminreact/src/services/parcel-option.js":"314","/home/mostafa/Magde/new/frontadminreact/src/services/advert.js":"315","/home/mostafa/Magde/new/frontadminreact/src/services/shop-ads.js":"316","/home/mostafa/Magde/new/frontadminreact/src/services/request-models.js":"317","/home/mostafa/Magde/new/frontadminreact/src/services/seller/advert.js":"318","/home/mostafa/Magde/new/frontadminreact/src/services/seller/request-models.js":"319","/home/mostafa/Magde/new/frontadminreact/src/services/property.js":"320","/home/mostafa/Magde/new/frontadminreact/src/services/shop-locations.js":"321","/home/mostafa/Magde/new/frontadminreact/src/services/payment-to-partner.js":"322","/home/mostafa/Magde/new/frontadminreact/src/services/seller/property.js":"323","/home/mostafa/Magde/new/frontadminreact/src/services/seller/payment-from-partner.js":"324","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryman/payment-from-partner.js":"325","/home/mostafa/Magde/new/frontadminreact/src/services/delivery-point.js":"326","/home/mostafa/Magde/new/frontadminreact/src/services/seller/shop-locations.js":"327","/home/mostafa/Magde/new/frontadminreact/src/components/notificationBar.js":"328","/home/mostafa/Magde/new/frontadminreact/src/components/lang-modal.js":"329","/home/mostafa/Magde/new/frontadminreact/src/components/theme-configurator.js":"330","/home/mostafa/Magde/new/frontadminreact/src/services/warehouse.js":"331","/home/mostafa/Magde/new/frontadminreact/src/services/delivery-price.js":"332","/home/mostafa/Magde/new/frontadminreact/src/services/gallery.js":"333","/home/mostafa/Magde/new/frontadminreact/src/components/nav-profile.js":"334","/home/mostafa/Magde/new/frontadminreact/src/helpers/getSystemIcons.js":"335","/home/mostafa/Magde/new/frontadminreact/src/helpers/useDidUpdate.js":"336","/home/mostafa/Magde/new/frontadminreact/src/components/image-upload-single.js":"337","/home/mostafa/Magde/new/frontadminreact/src/components/modal.js":"338","/home/mostafa/Magde/new/frontadminreact/src/services/seller/delivery-price.js":"339","/home/mostafa/Magde/new/frontadminreact/src/services/seller/banner.js":"340","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/country.js":"341","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/city.js":"342","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/region.js":"343","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/area.js":"344","/home/mostafa/Magde/new/frontadminreact/src/redux/selectors/chatSelector.js":"345","/home/mostafa/Magde/new/frontadminreact/src/services/requestWithoutTimeout.js":"346","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-import.js":"347","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-clone.js":"348","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-edit.js":"349","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-add.js":"350","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-clone.js":"351","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-add.js":"352","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-edit.js":"353","/home/mostafa/Magde/new/frontadminreact/src/views/blog/blog-clone.js":"354","/home/mostafa/Magde/new/frontadminreact/src/views/blog/blog-add.js":"355","/home/mostafa/Magde/new/frontadminreact/src/views/blog/blog-edit.js":"356","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-clone.js":"357","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-edit.js":"358","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-add.js":"359","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brand-import.js":"360","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brands-clone.js":"361","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brands-edit.js":"362","/home/mostafa/Magde/new/frontadminreact/src/views/career/career-clone.js":"363","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brands-add.js":"364","/home/mostafa/Magde/new/frontadminreact/src/views/career/career-edit.js":"365","/home/mostafa/Magde/new/frontadminreact/src/views/career/career-add.js":"366","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-import.js":"367","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-clone.js":"368","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-request-edit.js":"369","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-show.js":"370","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-edit.js":"371","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-add.js":"372","/home/mostafa/Magde/new/frontadminreact/src/views/chat/index.js":"373","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/coupon-edit.js":"374","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/coupon-add.js":"375","/home/mostafa/Magde/new/frontadminreact/src/views/email-provider/email-edit.js":"376","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-orders/order-details.js":"377","/home/mostafa/Magde/new/frontadminreact/src/views/email-provider/email-add.js":"378","/home/mostafa/Magde/new/frontadminreact/src/views/addons/index.js":"379","/home/mostafa/Magde/new/frontadminreact/src/views/banners/index.js":"380","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-payment-from-partners/copleted-list.js":"381","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-statistics/delivery-statistics.js":"382","/home/mostafa/Magde/new/frontadminreact/src/views/blog/index.js":"383","/home/mostafa/Magde/new/frontadminreact/src/views/catalog/index.js":"384","/home/mostafa/Magde/new/frontadminreact/src/views/payout-requests/index.js":"385","/home/mostafa/Magde/new/frontadminreact/src/views/bonus/index.js":"386","/home/mostafa/Magde/new/frontadminreact/src/views/subscriber/index.js":"387","/home/mostafa/Magde/new/frontadminreact/src/views/transactions/index.js":"388","/home/mostafa/Magde/new/frontadminreact/src/views/email-subscribers/index.js":"389","/home/mostafa/Magde/new/frontadminreact/src/views/story/index.js":"390","/home/mostafa/Magde/new/frontadminreact/src/views/booking-file-upload/index.js":"391","/home/mostafa/Magde/new/frontadminreact/src/views/cashback/index.js":"392","/home/mostafa/Magde/new/frontadminreact/src/components/check.js":"393","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/index.js":"394","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/index.js":"395","/home/mostafa/Magde/new/frontadminreact/src/views/menu-categories/index.js":"396","/home/mostafa/Magde/new/frontadminreact/src/views/admin-payouts/index.js":"397","/home/mostafa/Magde/new/frontadminreact/src/views/brands/index.js":"398","/home/mostafa/Magde/new/frontadminreact/src/views/career/index.js":"399","/home/mostafa/Magde/new/frontadminreact/src/views/categories/index.js":"400","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/index.js":"401","/home/mostafa/Magde/new/frontadminreact/src/views/email-provider/index.js":"402","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/index.js":"403","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-orders/index.js":"404","/home/mostafa/Magde/new/frontadminreact/src/views/career-map/index.js":"405","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-request/index.js":"406","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-edit.js":"407","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-add-role.js":"408","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/delivery-map-orders.js":"409","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-orders/order-delivery.js":"410","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/deliveriesMap.js":"411","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryList/deliveriesList.js":"412","/home/mostafa/Magde/new/frontadminreact/src/views/currencies/currency-edit.js":"413","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-detail.js":"414","/home/mostafa/Magde/new/frontadminreact/src/views/currencies/currencies-add.js":"415","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-edit.js":"416","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-import.js":"417","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-clone.js":"418","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-edit.js":"419","/home/mostafa/Magde/new/frontadminreact/src/views/products/products-add.js":"420","/home/mostafa/Magde/new/frontadminreact/src/views/faq/faq-edit.js":"421","/home/mostafa/Magde/new/frontadminreact/src/views/faq/faq-add.js":"422","/home/mostafa/Magde/new/frontadminreact/src/views/gallery/gallery-languages.js":"423","/home/mostafa/Magde/new/frontadminreact/src/views/languages/language-add.js":"424","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/subciribed-edit.js":"425","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/subciribed-add.js":"426","/home/mostafa/Magde/new/frontadminreact/src/views/notification/notification-clone.js":"427","/home/mostafa/Magde/new/frontadminreact/src/views/notification/notification-edit.js":"428","/home/mostafa/Magde/new/frontadminreact/src/views/notification/notification-add.js":"429","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-value.js":"430","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-group.js":"431","/home/mostafa/Magde/new/frontadminreact/src/views/order/replace-product.js":"432","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-edit.js":"433","/home/mostafa/Magde/new/frontadminreact/src/views/order/seller-order-details.js":"434","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-details.js":"435","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-board.js":"436","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-list.js":"437","/home/mostafa/Magde/new/frontadminreact/src/views/order/seller-order-list.js":"438","/home/mostafa/Magde/new/frontadminreact/src/views/pages/page-edit.js":"439","/home/mostafa/Magde/new/frontadminreact/src/views/pages/page-add.js":"440","/home/mostafa/Magde/new/frontadminreact/src/views/payment-payloads/payload-edit.js":"441","/home/mostafa/Magde/new/frontadminreact/src/views/payment-payloads/payload-add.js":"442","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-edit.js":"443","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-import.js":"444","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-add.js":"445","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-clone.js":"446","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-edit.js":"447","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-add.js":"448","/home/mostafa/Magde/new/frontadminreact/src/views/refund/refund-details.js":"449","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-clone.js":"450","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-add.js":"451","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-edit.js":"452","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-orders/index.js":"453","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/parcelReviews.js":"454","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/deliveryBoyReviews.js":"455","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/productReviews.js":"456","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/orderReviews.js":"457","/home/mostafa/Magde/new/frontadminreact/src/views/currencies/index.js":"458","/home/mostafa/Magde/new/frontadminreact/src/views/faq/index.js":"459","/home/mostafa/Magde/new/frontadminreact/src/views/settings/socialSettings.js":"460","/home/mostafa/Magde/new/frontadminreact/src/views/settings/app-setting.js":"461","/home/mostafa/Magde/new/frontadminreact/src/views/settings/firebaseConfig.js":"462","/home/mostafa/Magde/new/frontadminreact/src/views/settings/referral-setting.js":"463","/home/mostafa/Magde/new/frontadminreact/src/views/privacy/terms.js":"464","/home/mostafa/Magde/new/frontadminreact/src/views/products/index.js":"465","/home/mostafa/Magde/new/frontadminreact/src/views/gallery/index.js":"466","/home/mostafa/Magde/new/frontadminreact/src/views/delivery/index.js":"467","/home/mostafa/Magde/new/frontadminreact/src/views/extras/index.js":"468","/home/mostafa/Magde/new/frontadminreact/src/views/privacy/policy.js":"469","/home/mostafa/Magde/new/frontadminreact/src/views/languages/index.js":"470","/home/mostafa/Magde/new/frontadminreact/src/views/notification/index.js":"471","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/index.js":"472","/home/mostafa/Magde/new/frontadminreact/src/views/pages/index.js":"473","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/index.js":"474","/home/mostafa/Magde/new/frontadminreact/src/views/payment-payloads/index.js":"475","/home/mostafa/Magde/new/frontadminreact/src/views/settings/settings.js":"476","/home/mostafa/Magde/new/frontadminreact/src/views/translations/import.js":"477","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/index.js":"478","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/index.js":"479","/home/mostafa/Magde/new/frontadminreact/src/views/refund/index.js":"480","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/index.js":"481","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/tag-clone.js":"482","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/tag-add.js":"483","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/tag-edit.js":"484","/home/mostafa/Magde/new/frontadminreact/src/views/order-status/index.js":"485","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shop-clone.js":"486","/home/mostafa/Magde/new/frontadminreact/src/views/payments/index.js":"487","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shop-edit.js":"488","/home/mostafa/Magde/new/frontadminreact/src/views/update/index.js":"489","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shops-add.js":"490","/home/mostafa/Magde/new/frontadminreact/src/views/sms-payload/sms-add.js":"491","/home/mostafa/Magde/new/frontadminreact/src/views/system-information/index.js":"492","/home/mostafa/Magde/new/frontadminreact/src/views/sms-payload/sms-edit.js":"493","/home/mostafa/Magde/new/frontadminreact/src/views/translations/index.js":"494","/home/mostafa/Magde/new/frontadminreact/src/views/subscriptions/subscriptions-edit.js":"495","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-clone.js":"496","/home/mostafa/Magde/new/frontadminreact/src/views/user/role-list.js":"497","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-detail.js":"498","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-add.js":"499","/home/mostafa/Magde/new/frontadminreact/src/views/user/admin.js":"500","/home/mostafa/Magde/new/frontadminreact/src/views/user/user.js":"501","/home/mostafa/Magde/new/frontadminreact/src/views/cache/index.js":"502","/home/mostafa/Magde/new/frontadminreact/src/views/backup/index.js":"503","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/index.js":"504","/home/mostafa/Magde/new/frontadminreact/src/views/shops/index.js":"505","/home/mostafa/Magde/new/frontadminreact/src/views/units/unit-edit.js":"506","/home/mostafa/Magde/new/frontadminreact/src/views/units/unit-add.js":"507","/home/mostafa/Magde/new/frontadminreact/src/views/sms-payload/index.js":"508","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-order-edit.js":"509","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-order-add.js":"510","/home/mostafa/Magde/new/frontadminreact/src/views/landing-page/landing-page-edit.js":"511","/home/mostafa/Magde/new/frontadminreact/src/views/shop-reviews/index.js":"512","/home/mostafa/Magde/new/frontadminreact/src/views/landing-page/landing-page-add.js":"513","/home/mostafa/Magde/new/frontadminreact/src/views/units/index.js":"514","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/option-edit.js":"515","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-types/parcel-type.js":"516","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/option-add.js":"517","/home/mostafa/Magde/new/frontadminreact/src/views/subscriptions/index.js":"518","/home/mostafa/Magde/new/frontadminreact/src/views/advert/advert-add.js":"519","/home/mostafa/Magde/new/frontadminreact/src/views/user/index.js":"520","/home/mostafa/Magde/new/frontadminreact/src/views/advert/advert-edit.js":"521","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/shop-ads-edit.js":"522","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/copleted-list.js":"523","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/list.js":"524","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/main.js":"525","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/price-edit.js":"526","/home/mostafa/Magde/new/frontadminreact/src/views/wallet/index.js":"527","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/price-add.js":"528","/home/mostafa/Magde/new/frontadminreact/src/views/report-extras/index.js":"529","/home/mostafa/Magde/new/frontadminreact/src/views/report-stock/index.js":"530","/home/mostafa/Magde/new/frontadminreact/src/views/report-categories/index.js":"531","/home/mostafa/Magde/new/frontadminreact/src/views/landing-page/index.js":"532","/home/mostafa/Magde/new/frontadminreact/src/views/report-variation/index.js":"533","/home/mostafa/Magde/new/frontadminreact/src/views/report-revenue/index.js":"534","/home/mostafa/Magde/new/frontadminreact/src/views/report-orders/index.js":"535","/home/mostafa/Magde/new/frontadminreact/src/views/looks/edit.js":"536","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/main.js":"537","/home/mostafa/Magde/new/frontadminreact/src/views/looks/add.js":"538","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/index.js":"539","/home/mostafa/Magde/new/frontadminreact/src/views/advert/index.js":"540","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-types/index.js":"541","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/index.js":"542","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/index.js":"543","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-value.js":"544","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-group.js":"545","/home/mostafa/Magde/new/frontadminreact/src/views/report-products/index.js":"546","/home/mostafa/Magde/new/frontadminreact/src/views/report-overview/index.js":"547","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/index.js":"548","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/index.js":"549","/home/mostafa/Magde/new/frontadminreact/src/views/report/index.js":"550","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/index.js":"551","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/index.js":"552","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-import.js":"553","/home/mostafa/Magde/new/frontadminreact/src/views/properties/index.js":"554","/home/mostafa/Magde/new/frontadminreact/src/views/looks/index.js":"555","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-clone.js":"556","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-edit.js":"557","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-add.js":"558","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/refund/refund-details.js":"559","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/user/shop-users.js":"560","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/edit.js":"561","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-bonus/shop-bonus-edit.js":"562","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-bonus/shop-bonus-add.js":"563","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/index.js":"564","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/city/index.js":"565","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/refund/index.js":"566","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/region/index.js":"567","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/country/index.js":"568","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/product-bonus-edit.js":"569","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/area/index.js":"570","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/product-bonus-add.js":"571","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-add.js":"572","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-clone.js":"573","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-edit.js":"574","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-reviews/index.js":"575","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/index.js":"576","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/index.js":"577","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/discounts/index.js":"578","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/index.js":"579","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/invites/index.js":"580","/home/mostafa/Magde/new/frontadminreact/src/components/seller-check.js":"581","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-bonus/index.js":"582","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/transactions/index.js":"583","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/index.js":"584","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/subscriptions/index.js":"585","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/index.js":"586","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/discounts/discount-edit.js":"587","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payouts/index.js":"588","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/discounts/discount-add.js":"589","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/bonus/index.js":"590","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-time/time-edit.js":"591","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-time/time-add.js":"592","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-zone/zone-edit.js":"593","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/branch/branch-edit.js":"594","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-zone/zone-add.js":"595","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/branch/branch-add.js":"596","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/brand-edit.js":"597","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/brand-add.js":"598","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-request-edit.js":"599","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-show.js":"600","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-edit.js":"601","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-add.js":"602","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-request-edit.js":"603","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-import.js":"604","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-clone.js":"605","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-edit.js":"606","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/products-add.js":"607","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/products.js":"608","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/replace-product.js":"609","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order-edit.js":"610","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order-details.js":"611","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order.js":"612","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-time/index.js":"613","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment/payment-edit.js":"614","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment/payment-add.js":"615","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-import.js":"616","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-clone.js":"617","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-edit.js":"618","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-add.js":"619","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/branch/index.js":"620","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-edit.js":"621","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-add.js":"622","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/index.js":"623","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/index.js":"624","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/story/story-edit.js":"625","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/story/story-add.js":"626","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/deliveryBoyReviews.js":"627","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/orderReviews.js":"628","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/productReviews.js":"629","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/shop-ads.js":"630","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-zone/index.js":"631","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orders-board.js":"632","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment-from-partner/copleted-list.js":"633","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/coupon-add.js":"634","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/coupon-edit.js":"635","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-value.js":"636","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-group.js":"637","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-value.js":"638","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/edit.js":"639","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-group.js":"640","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/add.js":"641","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment/index.js":"642","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/price-edit.js":"643","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/index.js":"644","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/price-add.js":"645","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/add.js":"646","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/index.js":"647","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/deliverymen.js":"648","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/index.js":"649","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/index.js":"650","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/story/index.js":"651","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/index.js":"652","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/index.js":"653","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/order-edit.js":"654","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/index.js":"655","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/order-details.js":"656","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orders-board.js":"657","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/report-orders/index.js":"658","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/index.js":"659","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/wallet/index.js":"660","/home/mostafa/Magde/new/frontadminreact/src/components/notification-drawer.js":"661","/home/mostafa/Magde/new/frontadminreact/src/components/user-modal.js":"662","/home/mostafa/Magde/new/frontadminreact/src/helpers/getAvatar.js":"663","/home/mostafa/Magde/new/frontadminreact/src/services/notification.js":"664","/home/mostafa/Magde/new/frontadminreact/src/components/language-list.js":"665","/home/mostafa/Magde/new/frontadminreact/src/helpers/useQueryParams.js":"666","/home/mostafa/Magde/new/frontadminreact/src/components/ckeEditorEdit.js":"667","/home/mostafa/Magde/new/frontadminreact/src/helpers/getDefaultLocation.js":"668","/home/mostafa/Magde/new/frontadminreact/src/helpers/createImage.js":"669","/home/mostafa/Magde/new/frontadminreact/src/components/ckeEditor.js":"670","/home/mostafa/Magde/new/frontadminreact/src/helpers/getTranslationFields.js":"671","/home/mostafa/Magde/new/frontadminreact/src/views/addons/steps.js":"672","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-stock.js":"673","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-finish.js":"674","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-index.js":"675","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-form.js":"676","/home/mostafa/Magde/new/frontadminreact/src/components/async-tree-select.js":"677","/home/mostafa/Magde/new/frontadminreact/src/components/refetch-search.js":"678","/home/mostafa/Magde/new/frontadminreact/src/components/search.js":"679","/home/mostafa/Magde/new/frontadminreact/src/components/async-select.js":"680","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-list.js":"681","/home/mostafa/Magde/new/frontadminreact/src/views/categories/subcategory-add.js":"682","/home/mostafa/Magde/new/frontadminreact/src/helpers/scrollTo.js":"683","/home/mostafa/Magde/new/frontadminreact/src/components/hideEmail.js":"684","/home/mostafa/Magde/new/frontadminreact/src/helpers/getImage.js":"685","/home/mostafa/Magde/new/frontadminreact/src/helpers/numberToPrice.js":"686","/home/mostafa/Magde/new/frontadminreact/src/components/upload/index.js":"687","/home/mostafa/Magde/new/frontadminreact/src/views/chat/channel.js":"688","/home/mostafa/Magde/new/frontadminreact/src/views/chat/message-action-indicator.js":"689","/home/mostafa/Magde/new/frontadminreact/src/views/chat/upload-media.js":"690","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/coupon-form.js":"691","/home/mostafa/Magde/new/frontadminreact/src/components/search-input.js":"692","/home/mostafa/Magde/new/frontadminreact/src/helpers/formatSortType.js":"693","/home/mostafa/Magde/new/frontadminreact/src/helpers/useDemo.js":"694","/home/mostafa/Magde/new/frontadminreact/src/components/delete-button.js":"695","/home/mostafa/Magde/new/frontadminreact/src/components/filter-column.js":"696","/home/mostafa/Magde/new/frontadminreact/src/components/rive-result.js":"697","/home/mostafa/Magde/new/frontadminreact/src/services/update-booking.js":"698","/home/mostafa/Magde/new/frontadminreact/src/components/hideNumber.js":"699","/home/mostafa/Magde/new/frontadminreact/src/components/qr-code.js":"700","/home/mostafa/Magde/new/frontadminreact/src/views/addons/productStatusModal.js":"701","/home/mostafa/Magde/new/frontadminreact/src/views/payout-requests/payoutRequestModal.js":"702","/home/mostafa/Magde/new/frontadminreact/src/views/transactions/transactionShowModal.js":"703","/home/mostafa/Magde/new/frontadminreact/src/views/transactions/status-modal.js":"704","/home/mostafa/Magde/new/frontadminreact/src/views/cashback/cashbackEditModal.js":"705","/home/mostafa/Magde/new/frontadminreact/src/views/cashback/cashbackModal.js":"706","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-status-modal.js":"707","/home/mostafa/Magde/new/frontadminreact/src/views/menu-categories/category-add.js":"708","/home/mostafa/Magde/new/frontadminreact/src/views/menu-categories/category-edit.js":"709","/home/mostafa/Magde/new/frontadminreact/src/views/admin-payouts/payoutActionModal.js":"710","/home/mostafa/Magde/new/frontadminreact/src/views/admin-payouts/payoutStatusChangeModal.js":"711","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-request-list.js":"712","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/generalDashboard.js":"713","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/deliverymanDashboard.js":"714","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/managerDashboard.js":"715","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/moderatorDashboard.js":"716","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/filter.js":"717","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-request/details-modal.js":"718","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-request/status-change-modal.js":"719","/home/mostafa/Magde/new/frontadminreact/src/views/user/userOrders.js":"720","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/product-card.js":"721","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/order-tabs.js":"722","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/order-cart.js":"723","/home/mostafa/Magde/new/frontadminreact/src/views/user/walletHistory.js":"724","/home/mostafa/Magde/new/frontadminreact/src/views/user/userEditForm.js":"725","/home/mostafa/Magde/new/frontadminreact/src/views/user/userPassword.js":"726","/home/mostafa/Magde/new/frontadminreact/src/views/user/add-deliveryman-settings.js":"727","/home/mostafa/Magde/new/frontadminreact/src/components/map-custom-marker.js":"728","/home/mostafa/Magde/new/frontadminreact/src/views/user/deliveryman-settings.js":"729","/home/mostafa/Magde/new/frontadminreact/src/views/user/deliveryman-address.js":"730","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/order-card.js":"731","/home/mostafa/Magde/new/frontadminreact/src/components/delivery-statistic.js":"732","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/order-data.js":"733","/home/mostafa/Magde/new/frontadminreact/src/views/order/orderStatusModal.js":"734","/home/mostafa/Magde/new/frontadminreact/src/views/order/orderDeliveryman.js":"735","/home/mostafa/Magde/new/frontadminreact/src/views/order/show-locations.map.js":"736","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/user-data.js":"737","/home/mostafa/Magde/new/frontadminreact/src/views/order/downloadModal.js":"738","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryList/show-locations.map.js":"739","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/user-card.js":"740","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryList/add-delivery-settings.js":"741","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-modal.js":"742","/home/mostafa/Magde/new/frontadminreact/src/views/products/steps.js":"743","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-property.js":"744","/home/mostafa/Magde/new/frontadminreact/src/helpers/getLanguageFields.js":"745","/home/mostafa/Magde/new/frontadminreact/src/components/infinite-select.js":"746","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-finish.js":"747","/home/mostafa/Magde/new/frontadminreact/src/components/tracking-info.js":"748","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-extras.js":"749","/home/mostafa/Magde/new/frontadminreact/src/views/products/products-index.js":"750","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-digital.js":"751","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-stock.js":"752","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-gallery.js":"753","/home/mostafa/Magde/new/frontadminreact/src/views/products/wholesale.js":"754","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/textEditor.js":"755","/home/mostafa/Magde/new/frontadminreact/src/views/order/product-cards.js":"756","/home/mostafa/Magde/new/frontadminreact/src/views/order/new-product.js":"757","/home/mostafa/Magde/new/frontadminreact/src/views/order/note-modal.js":"758","/home/mostafa/Magde/new/frontadminreact/src/views/order/user-info.js":"759","/home/mostafa/Magde/new/frontadminreact/src/views/order/delivery-info.js":"760","/home/mostafa/Magde/new/frontadminreact/src/views/order/product-info.js":"761","/home/mostafa/Magde/new/frontadminreact/src/views/order/transaction-details.js":"762","/home/mostafa/Magde/new/frontadminreact/src/views/order/preview-info.js":"763","/home/mostafa/Magde/new/frontadminreact/src/views/order/transaction-status-modal.js":"764","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-type-switcher.js":"765","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-value-modal.js":"766","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-group-modal.js":"767","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-group-show-modal.js":"768","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/steps.js":"769","/home/mostafa/Magde/new/frontadminreact/src/views/pages/type-list.js":"770","/home/mostafa/Magde/new/frontadminreact/src/views/refund/status-modal.js":"771","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/user.js":"772","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/steps.js":"773","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/main.js":"774","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurantDelivery.js":"775","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/parcelReviewShow.js":"776","/home/mostafa/Magde/new/frontadminreact/src/components/global-container.js":"777","/home/mostafa/Magde/new/frontadminreact/src/services/referral.js":"778","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/orderReviewShow.js":"779","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/productReviewShow.js":"780","/home/mostafa/Magde/new/frontadminreact/src/components/shop/map.js":"781","/home/mostafa/Magde/new/frontadminreact/src/services/privacy.js":"782","/home/mostafa/Magde/new/frontadminreact/src/components/card-responsive.js":"783","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-list.js":"784","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-list.js":"785","/home/mostafa/Magde/new/frontadminreact/src/components/CustomDrower.js":"786","/home/mostafa/Magde/new/frontadminreact/src/services/translation.js":"787","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-status-modal.js":"788","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/categoryStatusModal.js":"789","/home/mostafa/Magde/new/frontadminreact/src/services/update.js":"790","/home/mostafa/Magde/new/frontadminreact/src/services/subscriptions.js":"791","/home/mostafa/Magde/new/frontadminreact/src/views/shops/steps.js":"792","/home/mostafa/Magde/new/frontadminreact/src/views/shops/main.js":"793","/home/mostafa/Magde/new/frontadminreact/src/views/shops/user.js":"794","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shopDelivery.js":"795","/home/mostafa/Magde/new/frontadminreact/src/views/shops/social.js":"796","/home/mostafa/Magde/new/frontadminreact/src/components/shop/shop-locations.js":"797","/home/mostafa/Magde/new/frontadminreact/src/views/payments/paymentEditModal.js":"798","/home/mostafa/Magde/new/frontadminreact/src/views/translations/translationCreateModal.js":"799","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-top-products.js":"800","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-refunds.js":"801","/home/mostafa/Magde/new/frontadminreact/src/views/user/userShowModal.js":"802","/home/mostafa/Magde/new/frontadminreact/src/views/user/userRoleModal.js":"803","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shop-status-modal.js":"804","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/steps.js":"805","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-sender.js":"806","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-receiver.js":"807","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-details.js":"808","/home/mostafa/Magde/new/frontadminreact/src/views/shop-reviews/shopReviewShow.js":"809","/home/mostafa/Magde/new/frontadminreact/src/helpers/nFormatter.js":"810","/home/mostafa/Magde/new/frontadminreact/src/views/subscriptions/subscriptions-add.js":"811","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/option-form.js":"812","/home/mostafa/Magde/new/frontadminreact/src/views/advert/advert-form.js":"813","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/shop-ads-form.js":"814","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/payment-type.js":"815","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/point-add.js":"816","/home/mostafa/Magde/new/frontadminreact/src/components/chart-widget.js":"817","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/working-date.js":"818","/home/mostafa/Magde/new/frontadminreact/src/views/order/dnd/Incorporate/index.js":"819","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/statisticNumberWidget.js":"820","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/price-form.js":"821","/home/mostafa/Magde/new/frontadminreact/src/views/looks/form.js":"822","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/point-edit.js":"823","/home/mostafa/Magde/new/frontadminreact/src/components/report/chart.js":"824","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-status.js":"825","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/show-locations-map.js":"826","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/show-parcel-details.js":"827","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-deliveryman.js":"828","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/warehouse-add.js":"829","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/warehouse-edit-new.js":"830","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/working-date.js":"831","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/setting.js":"832","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/locations.js":"833","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/footer.js":"834","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/reservation.js":"835","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/permission.js":"836","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/auth.js":"837","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/ui-type.js":"838","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/qr-code.js":"839","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-delete-modal.js":"840","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-value-modal.js":"841","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/shop-ads-status-modal.js":"842","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-group-modal.js":"843","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-group-show-modal.js":"844","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/transactionStatusModal.js":"845","/home/mostafa/Magde/new/frontadminreact/src/components/shop/seller-shop-locations.js":"846","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/steps.js":"847","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-stock.js":"848","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-index.js":"849","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/refund/status-modal.js":"850","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-finish.js":"851","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/user/userShowModal.js":"852","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/main.js":"853","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/shopDelivery.js":"854","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/social.js":"855","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/city/city-form.js":"856","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/region/region-form.js":"857","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/country/country-form.js":"858","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/product-bonus-form.js":"859","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-reviews/shopReviewShow.js":"860","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/filter.js":"861","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/area/area-form.js":"862","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-main.js":"863","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-tabs.js":"864","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/invites/invite-modal.js":"865","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/filter.js":"866","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/product-card.js":"867","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/order-tabs.js":"868","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/order-cart.js":"869","/home/mostafa/Magde/new/frontadminreact/src/services/seller/stock.js":"870","/home/mostafa/Magde/new/frontadminreact/src/services/seller/subscriptions.js":"871","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-qrcode.js":"872","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/transactions/transactionShowModal.js":"873","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/transactions/status-modal.js":"874","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/subscriptions/subscriptionModal.js":"875","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payouts/payoutStatusModal.js":"876","/home/mostafa/Magde/new/frontadminreact/src/components/map.js":"877","/home/mostafa/Magde/new/frontadminreact/src/helpers/getImageFromStock.js":"878","/home/mostafa/Magde/new/frontadminreact/src/components/shop/weeks.js":"879","/home/mostafa/Magde/new/frontadminreact/src/services/seller/bookingClosedDays.js":"880","/home/mostafa/Magde/new/frontadminreact/src/services/seller/bookingWorkingDays.js":"881","/home/mostafa/Magde/new/frontadminreact/src/components/forms/booking-time-form.js":"882","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payouts/payoutRequest.js":"883","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/subcategory-add.js":"884","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/steps.js":"885","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-property.js":"886","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-list.js":"887","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-finish.js":"888","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-extras.js":"889","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-stock.js":"890","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-gallery.js":"891","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/products-index.js":"892","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/wholesale.js":"893","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-request.js":"894","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-list.js":"895","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/new-product.js":"896","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/product-cards.js":"897","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/note-modal.js":"898","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/user-info.js":"899","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/product-info.js":"900","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/preview-info.js":"901","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orderDeliveryman.js":"902","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orderStatusModal.js":"903","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/transaction-status-modal.js":"904","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/show-locations.map.js":"905","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order-type-switcher.js":"906","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/steps.js":"907","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/createBrand.js":"908","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-request.js":"909","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/orderReviewShow.js":"910","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/productReviewShow.js":"911","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/downloadModal.js":"912","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/ad-detail.js":"913","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/coupon-form.js":"914","/home/mostafa/Magde/new/frontadminreact/src/helpers/calculateTotalPrice.js":"915","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-value-modal.js":"916","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-group-modal.js":"917","/home/mostafa/Magde/new/frontadminreact/src/services/rest/table.js":"918","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-group-show-modal.js":"919","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-value-modal.js":"920","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/form.js":"921","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/price-form.js":"922","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/assign-product.js":"923","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/form.js":"924","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/status-change-modal.js":"925","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/user-info.js":"926","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/delivery-info.js":"927","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/product-info.js":"928","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/preview-info.js":"929","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orderStatusModal.js":"930","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orderDeliveryman.js":"931","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/show-locations.map.js":"932","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/downloadModal.js":"933","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-delete-modal.js":"934","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-group-modal.js":"935","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-group-show-modal.js":"936","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/wallet/top-up.js":"937","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/dnd/Incorporate/index.js":"938","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/dnd/Incorporate/index.js":"939","/home/mostafa/Magde/new/frontadminreact/src/components/image-gallery.js":"940","/home/mostafa/Magde/new/frontadminreact/src/components/upload/upload-media.js":"941","/home/mostafa/Magde/new/frontadminreact/src/components/video-uploader.js":"942","/home/mostafa/Magde/new/frontadminreact/src/views/chat/chat-date.js":"943","/home/mostafa/Magde/new/frontadminreact/src/views/categories/categoryStatusModal.js":"944","/home/mostafa/Magde/new/frontadminreact/src/views/chat/user-message.js":"945","/home/mostafa/Magde/new/frontadminreact/src/views/chat/admin-message.js":"946","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-request-modal.js":"947","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/orderChart.js":"948","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/salesChart.js":"949","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/statisticPriceWidget.js":"950","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/topBar.js":"951","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/topCustomers.js":"952","/home/mostafa/Magde/new/frontadminreact/src/helpers/useDebounce.js":"953","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/orderPieChart.js":"954","/home/mostafa/Magde/new/frontadminreact/src/helpers/useUserActivity.js":"955","/home/mostafa/Magde/new/frontadminreact/src/services/export.js":"956","/home/mostafa/Magde/new/frontadminreact/src/views/user/userWalletModal.js":"957","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/topProducts.js":"958","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/product-modal.js":"959","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/pos-user-modal.js":"960","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/delivery-info.js":"961","/home/mostafa/Magde/new/frontadminreact/src/helpers/generateRandomNumbers.js":"962","/home/mostafa/Magde/new/frontadminreact/src/services/digital-product.js":"963","/home/mostafa/Magde/new/frontadminreact/src/components/async-tree-select-category.js":"964","/home/mostafa/Magde/new/frontadminreact/src/services/rest/invokable.js":"965","/home/mostafa/Magde/new/frontadminreact/src/helpers/cartesian.js":"966","/home/mostafa/Magde/new/frontadminreact/src/views/products/extra-select-modal.js":"967","/home/mostafa/Magde/new/frontadminreact/src/components/drawing-map.js":"968","/home/mostafa/Magde/new/frontadminreact/src/services/zone.js":"969","/home/mostafa/Magde/new/frontadminreact/src/views/products/extra-value-select-modal.js":"970","/home/mostafa/Magde/new/frontadminreact/src/views/order/product-modal.js":"971","/home/mostafa/Magde/new/frontadminreact/src/components/upload/upload-extras-image.js":"972","/home/mostafa/Magde/new/frontadminreact/src/views/order/user-address.js":"973","/home/mostafa/Magde/new/frontadminreact/src/views/order/orderItems.js":"974","/home/mostafa/Magde/new/frontadminreact/src/redux/selectors/cartSelector.js":"975","/home/mostafa/Magde/new/frontadminreact/src/views/order/extrasModal.js":"976","/home/mostafa/Magde/new/frontadminreact/src/redux/selectors/orderSelector.js":"977","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-ingredients.js":"978","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-instructions.js":"979","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-nutritions.js":"980","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-main.js":"981","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-stocks.js":"982","/home/mostafa/Magde/new/frontadminreact/src/views/products/digital-product.js":"983","/home/mostafa/Magde/new/frontadminreact/src/views/products/productStatusModal.js":"984","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-add-data.js":"985","/home/mostafa/Magde/new/frontadminreact/src/components/forms/shop-delivery-form.js":"986","/home/mostafa/Magde/new/frontadminreact/src/components/todo/index.js":"987","/home/mostafa/Magde/new/frontadminreact/src/services/shop-social.js":"988","/home/mostafa/Magde/new/frontadminreact/src/components/shop/location-select.js":"989","/home/mostafa/Magde/new/frontadminreact/src/components/forms/shop-form.js":"990","/home/mostafa/Magde/new/frontadminreact/src/services/deliverypointWorkingDays.js":"991","/home/mostafa/Magde/new/frontadminreact/src/services/deliverypointClosedDays.js":"992","/home/mostafa/Magde/new/frontadminreact/src/helpers/getFullDateTime.js":"993","/home/mostafa/Magde/new/frontadminreact/src/components/forms/shop-user-form.js":"994","/home/mostafa/Magde/new/frontadminreact/src/views/shops/delivery-time-types.js":"995","/home/mostafa/Magde/new/frontadminreact/src/components/order-card.js":"996","/home/mostafa/Magde/new/frontadminreact/src/constants/shop-types.js":"997","/home/mostafa/Magde/new/frontadminreact/src/helpers/getFullDate.js":"998","/home/mostafa/Magde/new/frontadminreact/src/constants/ChartConstant.js":"999","/home/mostafa/Magde/new/frontadminreact/src/components/forms/address-form.js":"1000","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/date-form.js":"1001","/home/mostafa/Magde/new/frontadminreact/src/components/order-card-loader.js":"1002","/home/mostafa/Magde/new/frontadminreact/src/components/address-input.js":"1003","/home/mostafa/Magde/new/frontadminreact/src/services/warehouseWorkingDays.js":"1004","/home/mostafa/Magde/new/frontadminreact/src/helpers/getAddress.js":"1005","/home/mostafa/Magde/new/frontadminreact/src/components/radio-card.js":"1006","/home/mostafa/Magde/new/frontadminreact/src/constants/index.js":"1007","/home/mostafa/Magde/new/frontadminreact/src/services/warehouseClosedDays.js":"1008","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/transaction-status-modal.js":"1009","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/date-form.js":"1010","/home/mostafa/Magde/new/frontadminreact/src/views/order/orderNoteModal.js":"1011","/home/mostafa/Magde/new/frontadminreact/src/services/seller/unit.js":"1012","/home/mostafa/Magde/new/frontadminreact/src/components/qr-code-card.js":"1013","/home/mostafa/Magde/new/frontadminreact/src/services/seller/workingDays.js":"1014","/home/mostafa/Magde/new/frontadminreact/src/services/seller/closedDays.js":"1015","/home/mostafa/Magde/new/frontadminreact/src/services/seller/shop-social.js":"1016","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/deliveryman_time.js":"1017","/home/mostafa/Magde/new/frontadminreact/src/views/order/dnd/List/index.js":"1018","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/shop-add-data.js":"1019","/home/mostafa/Magde/new/frontadminreact/src/services/rest/brand.js":"1020","/home/mostafa/Magde/new/frontadminreact/src/services/rest/category.js":"1021","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-footer.js":"1022","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-table-card.js":"1023","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/product-modal.js":"1024","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/user-add-modal.js":"1025","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/delivery-info.js":"1026","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/preview-info.js":"1027","/home/mostafa/Magde/new/frontadminreact/src/helpers/getAddressFromLocation.js":"1028","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/extra-value-select-modal.js":"1029","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/extra-select-modal.js":"1030","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/product-modal.js":"1031","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-ingredients.js":"1032","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/extrasModal.js":"1033","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-instructions.js":"1034","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-main.js":"1035","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-nutritions.js":"1036","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-stocks.js":"1037","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/createCategory.js":"1038","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orderItems.js":"1039","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/user-form.js":"1040","/home/mostafa/Magde/new/frontadminreact/src/components/order-card-seller.js":"1041","/home/mostafa/Magde/new/frontadminreact/src/components/order-card-waiter.js":"1042","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/statuses.js":"1043","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orderItems.js":"1044","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/extrasModal.js":"1045","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/dnd/List/index.js":"1046","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/dnd/List/index.js":"1047","/home/mostafa/Magde/new/frontadminreact/src/components/upload/gallery-item.js":"1048","/home/mostafa/Magde/new/frontadminreact/src/views/chat/replyMessage.js":"1049","/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/address.js":"1050","/home/mostafa/Magde/new/frontadminreact/src/helpers/numberToQuantity.js":"1051","/home/mostafa/Magde/new/frontadminreact/src/helpers/getExtras.js":"1052","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/addons.js":"1053","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/delivery-user-modal.js":"1054","/home/mostafa/Magde/new/frontadminreact/src/components/shop/user-modal.js":"1055","/home/mostafa/Magde/new/frontadminreact/src/components/todo/todo-form.js":"1056","/home/mostafa/Magde/new/frontadminreact/src/components/shop/category-modal.js":"1057","/home/mostafa/Magde/new/frontadminreact/src/components/todo/todo-list.js":"1058","/home/mostafa/Magde/new/frontadminreact/src/services/rest/address.js":"1059","/home/mostafa/Magde/new/frontadminreact/src/services/seller/address.js":"1060","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-modal.js":"1061","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-table-add-modal.js":"1062","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/delivery-time-types.js":"1063","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/addons.js":"1064","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/delivery-user-modal.js":"1065","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/pos-user-address.js":"1066","/home/mostafa/Magde/new/frontadminreact/src/components/week.js":"1067","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-zone-add-modal.js":"1068","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/pos-user-address.js":"1069"},{"size":903,"mtime":1731318159211,"results":"1070","hashOfConfig":"1071"},{"size":3129,"mtime":1731318159035,"results":"1072","hashOfConfig":"1071"},{"size":1434,"mtime":1731318159223,"results":"1073","hashOfConfig":"1071"},{"size":506,"mtime":1731318159211,"results":"1074","hashOfConfig":"1071"},{"size":1390,"mtime":1731318159211,"results":"1075","hashOfConfig":"1071"},{"size":206,"mtime":1731318159203,"results":"1076","hashOfConfig":"1071"},{"size":6883,"mtime":1731318159211,"results":"1077","hashOfConfig":"1071"},{"size":6829,"mtime":1731318159215,"results":"1078","hashOfConfig":"1071"},{"size":1723,"mtime":1731318159215,"results":"1079","hashOfConfig":"1071"},{"size":794,"mtime":1731318159211,"results":"1080","hashOfConfig":"1071"},{"size":336,"mtime":1731318159211,"results":"1081","hashOfConfig":"1071"},{"size":262,"mtime":1731318159203,"results":"1082","hashOfConfig":"1071"},{"size":938,"mtime":1731318159211,"results":"1083","hashOfConfig":"1071"},{"size":588,"mtime":1731318159207,"results":"1084","hashOfConfig":"1071"},{"size":3395,"mtime":1731318159211,"results":"1085","hashOfConfig":"1071"},{"size":349,"mtime":1731318159231,"results":"1086","hashOfConfig":"1071"},{"size":1645,"mtime":1731318159251,"results":"1087","hashOfConfig":"1071"},{"size":850,"mtime":1731318159307,"results":"1088","hashOfConfig":"1071"},{"size":7734,"mtime":1731318159251,"results":"1089","hashOfConfig":"1071"},{"size":1136,"mtime":1731318159251,"results":"1090","hashOfConfig":"1071"},{"size":792,"mtime":1731318159211,"results":"1091","hashOfConfig":"1071"},{"size":1873,"mtime":1731318159207,"results":"1092","hashOfConfig":"1071"},{"size":166,"mtime":1731318159227,"results":"1093","hashOfConfig":"1071"},{"size":809,"mtime":1731318159215,"results":"1094","hashOfConfig":"1071"},{"size":7149,"mtime":1731318159215,"results":"1095","hashOfConfig":"1071"},{"size":1045,"mtime":1731318159231,"results":"1096","hashOfConfig":"1071"},{"size":645,"mtime":1731318159215,"results":"1097","hashOfConfig":"1071"},{"size":2975,"mtime":1731318159219,"results":"1098","hashOfConfig":"1071"},{"size":4227,"mtime":1731318159219,"results":"1099","hashOfConfig":"1071"},{"size":4338,"mtime":1731318159215,"results":"1100","hashOfConfig":"1071"},{"size":2090,"mtime":1731318159215,"results":"1101","hashOfConfig":"1071"},{"size":1195,"mtime":1731318159215,"results":"1102","hashOfConfig":"1071"},{"size":4252,"mtime":1731318159219,"results":"1103","hashOfConfig":"1071"},{"size":1792,"mtime":1731318159219,"results":"1104","hashOfConfig":"1071"},{"size":1151,"mtime":1731318159223,"results":"1105","hashOfConfig":"1071"},{"size":16351,"mtime":1731318159219,"results":"1106","hashOfConfig":"1071"},{"size":1889,"mtime":1731318159215,"results":"1107","hashOfConfig":"1071"},{"size":1232,"mtime":1731318159215,"results":"1108","hashOfConfig":"1071"},{"size":1223,"mtime":1731318159215,"results":"1109","hashOfConfig":"1071"},{"size":1287,"mtime":1731318159219,"results":"1110","hashOfConfig":"1071"},{"size":1169,"mtime":1731318159215,"results":"1111","hashOfConfig":"1071"},{"size":2165,"mtime":1731318159215,"results":"1112","hashOfConfig":"1071"},{"size":1961,"mtime":1731318159215,"results":"1113","hashOfConfig":"1071"},{"size":2050,"mtime":1731318159223,"results":"1114","hashOfConfig":"1071"},{"size":1958,"mtime":1731318159215,"results":"1115","hashOfConfig":"1071"},{"size":2449,"mtime":1731318159219,"results":"1116","hashOfConfig":"1071"},{"size":1203,"mtime":1731318159215,"results":"1117","hashOfConfig":"1071"},{"size":2097,"mtime":1731318159215,"results":"1118","hashOfConfig":"1071"},{"size":1136,"mtime":1731318159215,"results":"1119","hashOfConfig":"1071"},{"size":2250,"mtime":1731318159223,"results":"1120","hashOfConfig":"1071"},{"size":1082,"mtime":1731318159215,"results":"1121","hashOfConfig":"1071"},{"size":1223,"mtime":1731318159215,"results":"1122","hashOfConfig":"1071"},{"size":2214,"mtime":1731318159219,"results":"1123","hashOfConfig":"1071"},{"size":2188,"mtime":1731318159219,"results":"1124","hashOfConfig":"1071"},{"size":5892,"mtime":1731318159223,"results":"1125","hashOfConfig":"1071"},{"size":2076,"mtime":1731318159223,"results":"1126","hashOfConfig":"1071"},{"size":1960,"mtime":1731318159215,"results":"1127","hashOfConfig":"1071"},{"size":1084,"mtime":1731318159219,"results":"1128","hashOfConfig":"1071"},{"size":1281,"mtime":1731318159219,"results":"1129","hashOfConfig":"1071"},{"size":769,"mtime":1731318159223,"results":"1130","hashOfConfig":"1071"},{"size":915,"mtime":1731318159219,"results":"1131","hashOfConfig":"1071"},{"size":1014,"mtime":1731318159215,"results":"1132","hashOfConfig":"1071"},{"size":1184,"mtime":1731318159219,"results":"1133","hashOfConfig":"1071"},{"size":1949,"mtime":1731318159219,"results":"1134","hashOfConfig":"1071"},{"size":1706,"mtime":1731318159219,"results":"1135","hashOfConfig":"1071"},{"size":2059,"mtime":1731318159219,"results":"1136","hashOfConfig":"1071"},{"size":1190,"mtime":1731318159219,"results":"1137","hashOfConfig":"1071"},{"size":1244,"mtime":1731318159223,"results":"1138","hashOfConfig":"1071"},{"size":1243,"mtime":1731318159219,"results":"1139","hashOfConfig":"1071"},{"size":1104,"mtime":1731318159219,"results":"1140","hashOfConfig":"1071"},{"size":2095,"mtime":1731318159223,"results":"1141","hashOfConfig":"1071"},{"size":1020,"mtime":1731318159215,"results":"1142","hashOfConfig":"1071"},{"size":1031,"mtime":1731318159219,"results":"1143","hashOfConfig":"1071"},{"size":956,"mtime":1731318159219,"results":"1144","hashOfConfig":"1071"},{"size":2104,"mtime":1731318159219,"results":"1145","hashOfConfig":"1071"},{"size":1776,"mtime":1731318159223,"results":"1146","hashOfConfig":"1071"},{"size":3487,"mtime":1731318159219,"results":"1147","hashOfConfig":"1071"},{"size":1233,"mtime":1731318159215,"results":"1148","hashOfConfig":"1071"},{"size":5563,"mtime":1731318159215,"results":"1149","hashOfConfig":"1071"},{"size":2168,"mtime":1731318159215,"results":"1150","hashOfConfig":"1071"},{"size":2154,"mtime":1731318159223,"results":"1151","hashOfConfig":"1071"},{"size":1190,"mtime":1731318159219,"results":"1152","hashOfConfig":"1071"},{"size":2123,"mtime":1731318159223,"results":"1153","hashOfConfig":"1071"},{"size":2062,"mtime":1731318159223,"results":"1154","hashOfConfig":"1071"},{"size":2080,"mtime":1731318159219,"results":"1155","hashOfConfig":"1071"},{"size":3120,"mtime":1731318159219,"results":"1156","hashOfConfig":"1071"},{"size":1337,"mtime":1731318159219,"results":"1157","hashOfConfig":"1071"},{"size":1212,"mtime":1731318159219,"results":"1158","hashOfConfig":"1071"},{"size":3513,"mtime":1731318159219,"results":"1159","hashOfConfig":"1071"},{"size":1644,"mtime":1731318159219,"results":"1160","hashOfConfig":"1071"},{"size":2402,"mtime":1731318159219,"results":"1161","hashOfConfig":"1071"},{"size":1574,"mtime":1731318159219,"results":"1162","hashOfConfig":"1071"},{"size":12555,"mtime":1731318159219,"results":"1163","hashOfConfig":"1071"},{"size":1254,"mtime":1731318159215,"results":"1164","hashOfConfig":"1071"},{"size":2290,"mtime":1731318159215,"results":"1165","hashOfConfig":"1071"},{"size":1192,"mtime":1731318159215,"results":"1166","hashOfConfig":"1071"},{"size":1223,"mtime":1731318159219,"results":"1167","hashOfConfig":"1071"},{"size":1330,"mtime":1731318159215,"results":"1168","hashOfConfig":"1071"},{"size":1065,"mtime":1731318159219,"results":"1169","hashOfConfig":"1071"},{"size":909,"mtime":1731318159223,"results":"1170","hashOfConfig":"1071"},{"size":970,"mtime":1731318159219,"results":"1171","hashOfConfig":"1071"},{"size":2063,"mtime":1731318159215,"results":"1172","hashOfConfig":"1071"},{"size":1314,"mtime":1731318159215,"results":"1173","hashOfConfig":"1071"},{"size":1296,"mtime":1731318159219,"results":"1174","hashOfConfig":"1071"},{"size":2824,"mtime":1731318159219,"results":"1175","hashOfConfig":"1071"},{"size":2127,"mtime":1731318159219,"results":"1176","hashOfConfig":"1071"},{"size":1187,"mtime":1731318159215,"results":"1177","hashOfConfig":"1071"},{"size":1155,"mtime":1731318159219,"results":"1178","hashOfConfig":"1071"},{"size":10355,"mtime":1731318159223,"results":"1179","hashOfConfig":"1071"},{"size":1512,"mtime":1731318159215,"results":"1180","hashOfConfig":"1071"},{"size":1280,"mtime":1731318159215,"results":"1181","hashOfConfig":"1071"},{"size":1108,"mtime":1731318159215,"results":"1182","hashOfConfig":"1071"},{"size":487,"mtime":1731318159215,"results":"1183","hashOfConfig":"1071"},{"size":1234,"mtime":1731318159215,"results":"1184","hashOfConfig":"1071"},{"size":2205,"mtime":1731318159215,"results":"1185","hashOfConfig":"1071"},{"size":2051,"mtime":1731318159219,"results":"1186","hashOfConfig":"1071"},{"size":1231,"mtime":1731318159219,"results":"1187","hashOfConfig":"1071"},{"size":3065,"mtime":1731318159215,"results":"1188","hashOfConfig":"1071"},{"size":1244,"mtime":1731318159219,"results":"1189","hashOfConfig":"1071"},{"size":1209,"mtime":1731318159219,"results":"1190","hashOfConfig":"1071"},{"size":1266,"mtime":1731318159219,"results":"1191","hashOfConfig":"1071"},{"size":2276,"mtime":1731318159219,"results":"1192","hashOfConfig":"1071"},{"size":4038,"mtime":1731318159219,"results":"1193","hashOfConfig":"1071"},{"size":2035,"mtime":1731318159219,"results":"1194","hashOfConfig":"1071"},{"size":2195,"mtime":1731318159219,"results":"1195","hashOfConfig":"1071"},{"size":185,"mtime":1731318159207,"results":"1196","hashOfConfig":"1071"},{"size":979,"mtime":1731318159227,"results":"1197","hashOfConfig":"1071"},{"size":2259,"mtime":1731318159219,"results":"1198","hashOfConfig":"1071"},{"size":1909,"mtime":1731318159219,"results":"1199","hashOfConfig":"1071"},{"size":1166,"mtime":1731318159215,"results":"1200","hashOfConfig":"1071"},{"size":2891,"mtime":1731318159207,"results":"1201","hashOfConfig":"1071"},{"size":1118,"mtime":1731318159223,"results":"1202","hashOfConfig":"1071"},{"size":2010,"mtime":1731318159215,"results":"1203","hashOfConfig":"1071"},{"size":1244,"mtime":1731318159215,"results":"1204","hashOfConfig":"1071"},{"size":2073,"mtime":1731318159215,"results":"1205","hashOfConfig":"1071"},{"size":1197,"mtime":1731318159215,"results":"1206","hashOfConfig":"1071"},{"size":9394,"mtime":1731318159207,"results":"1207","hashOfConfig":"1071"},{"size":567,"mtime":1731318159199,"results":"1208","hashOfConfig":"1071"},{"size":659,"mtime":1731318159227,"results":"1209","hashOfConfig":"1071"},{"size":1285,"mtime":1731318159207,"results":"1210","hashOfConfig":"1071"},{"size":40166,"mtime":1731318159207,"results":"1211","hashOfConfig":"1071"},{"size":1210,"mtime":1731318159215,"results":"1212","hashOfConfig":"1071"},{"size":1181,"mtime":1731318159215,"results":"1213","hashOfConfig":"1071"},{"size":1195,"mtime":1731318159215,"results":"1214","hashOfConfig":"1071"},{"size":1181,"mtime":1731318159215,"results":"1215","hashOfConfig":"1071"},{"size":1831,"mtime":1731318159259,"results":"1216","hashOfConfig":"1071"},{"size":1404,"mtime":1731318159243,"results":"1217","hashOfConfig":"1071"},{"size":2028,"mtime":1731318159231,"results":"1218","hashOfConfig":"1071"},{"size":505,"mtime":1731318159251,"results":"1219","hashOfConfig":"1071"},{"size":3371,"mtime":1731318159251,"results":"1220","hashOfConfig":"1071"},{"size":1995,"mtime":1731318159251,"results":"1221","hashOfConfig":"1071"},{"size":3698,"mtime":1731318159251,"results":"1222","hashOfConfig":"1071"},{"size":1386,"mtime":1731318159251,"results":"1223","hashOfConfig":"1071"},{"size":196,"mtime":1731318159227,"results":"1224","hashOfConfig":"1071"},{"size":418,"mtime":1731318159203,"results":"1225","hashOfConfig":"1071"},{"size":3467,"mtime":1731318159251,"results":"1226","hashOfConfig":"1071"},{"size":507,"mtime":1731318159207,"results":"1227","hashOfConfig":"1071"},{"size":557,"mtime":1731318159211,"results":"1228","hashOfConfig":"1071"},{"size":389,"mtime":1731318159211,"results":"1229","hashOfConfig":"1071"},{"size":1628,"mtime":1731318159227,"results":"1230","hashOfConfig":"1071"},{"size":1052,"mtime":1731318159227,"results":"1231","hashOfConfig":"1071"},{"size":720,"mtime":1731318159227,"results":"1232","hashOfConfig":"1071"},{"size":1630,"mtime":1731318159227,"results":"1233","hashOfConfig":"1071"},{"size":989,"mtime":1731318159231,"results":"1234","hashOfConfig":"1071"},{"size":716,"mtime":1731318159235,"results":"1235","hashOfConfig":"1071"},{"size":1583,"mtime":1731318159227,"results":"1236","hashOfConfig":"1071"},{"size":649,"mtime":1731318159227,"results":"1237","hashOfConfig":"1071"},{"size":873,"mtime":1731318159227,"results":"1238","hashOfConfig":"1071"},{"size":743,"mtime":1731318159227,"results":"1239","hashOfConfig":"1071"},{"size":1618,"mtime":1731318159235,"results":"1240","hashOfConfig":"1071"},{"size":1439,"mtime":1731318159227,"results":"1241","hashOfConfig":"1071"},{"size":427,"mtime":1731318159227,"results":"1242","hashOfConfig":"1071"},{"size":1086,"mtime":1731318159231,"results":"1243","hashOfConfig":"1071"},{"size":717,"mtime":1731318159231,"results":"1244","hashOfConfig":"1071"},{"size":393,"mtime":1731318159231,"results":"1245","hashOfConfig":"1071"},{"size":1509,"mtime":1731318159231,"results":"1246","hashOfConfig":"1071"},{"size":960,"mtime":1731318159231,"results":"1247","hashOfConfig":"1071"},{"size":163,"mtime":1731318159231,"results":"1248","hashOfConfig":"1071"},{"size":584,"mtime":1731318159231,"results":"1249","hashOfConfig":"1071"},{"size":1459,"mtime":1731318159231,"results":"1250","hashOfConfig":"1071"},{"size":541,"mtime":1731318159227,"results":"1251","hashOfConfig":"1071"},{"size":574,"mtime":1731318159231,"results":"1252","hashOfConfig":"1071"},{"size":470,"mtime":1731318159231,"results":"1253","hashOfConfig":"1071"},{"size":219,"mtime":1731318159231,"results":"1254","hashOfConfig":"1071"},{"size":640,"mtime":1731318159231,"results":"1255","hashOfConfig":"1071"},{"size":331,"mtime":1731318159231,"results":"1256","hashOfConfig":"1071"},{"size":580,"mtime":1731318159231,"results":"1257","hashOfConfig":"1071"},{"size":476,"mtime":1731318159231,"results":"1258","hashOfConfig":"1071"},{"size":408,"mtime":1731318159227,"results":"1259","hashOfConfig":"1071"},{"size":1362,"mtime":1731318159223,"results":"1260","hashOfConfig":"1071"},{"size":596,"mtime":1731318159223,"results":"1261","hashOfConfig":"1071"},{"size":486,"mtime":1731318159223,"results":"1262","hashOfConfig":"1071"},{"size":460,"mtime":1731318159223,"results":"1263","hashOfConfig":"1071"},{"size":657,"mtime":1731318159223,"results":"1264","hashOfConfig":"1071"},{"size":592,"mtime":1731318159223,"results":"1265","hashOfConfig":"1071"},{"size":579,"mtime":1731318159223,"results":"1266","hashOfConfig":"1071"},{"size":879,"mtime":1731318159223,"results":"1267","hashOfConfig":"1071"},{"size":382,"mtime":1731318159223,"results":"1268","hashOfConfig":"1071"},{"size":467,"mtime":1731318159223,"results":"1269","hashOfConfig":"1071"},{"size":1686,"mtime":1731318159223,"results":"1270","hashOfConfig":"1071"},{"size":408,"mtime":1731318159223,"results":"1271","hashOfConfig":"1071"},{"size":424,"mtime":1731318159223,"results":"1272","hashOfConfig":"1071"},{"size":360,"mtime":1731318159223,"results":"1273","hashOfConfig":"1071"},{"size":861,"mtime":1731318159223,"results":"1274","hashOfConfig":"1071"},{"size":297,"mtime":1731318159223,"results":"1275","hashOfConfig":"1071"},{"size":412,"mtime":1731318159223,"results":"1276","hashOfConfig":"1071"},{"size":471,"mtime":1731318159223,"results":"1277","hashOfConfig":"1071"},{"size":564,"mtime":1731318159223,"results":"1278","hashOfConfig":"1071"},{"size":1145,"mtime":1731318159223,"results":"1279","hashOfConfig":"1071"},{"size":364,"mtime":1731318159223,"results":"1280","hashOfConfig":"1071"},{"size":463,"mtime":1731318159223,"results":"1281","hashOfConfig":"1071"},{"size":394,"mtime":1731318159223,"results":"1282","hashOfConfig":"1071"},{"size":731,"mtime":1731318159223,"results":"1283","hashOfConfig":"1071"},{"size":297,"mtime":1731318159223,"results":"1284","hashOfConfig":"1071"},{"size":540,"mtime":1731318159223,"results":"1285","hashOfConfig":"1071"},{"size":611,"mtime":1731318159223,"results":"1286","hashOfConfig":"1071"},{"size":1933,"mtime":1731318159223,"results":"1287","hashOfConfig":"1071"},{"size":478,"mtime":1731318159223,"results":"1288","hashOfConfig":"1071"},{"size":557,"mtime":1731318159223,"results":"1289","hashOfConfig":"1071"},{"size":429,"mtime":1731318159223,"results":"1290","hashOfConfig":"1071"},{"size":333,"mtime":1731318159223,"results":"1291","hashOfConfig":"1071"},{"size":370,"mtime":1731318159223,"results":"1292","hashOfConfig":"1071"},{"size":1009,"mtime":1731318159223,"results":"1293","hashOfConfig":"1071"},{"size":951,"mtime":1731318159223,"results":"1294","hashOfConfig":"1071"},{"size":463,"mtime":1731318159223,"results":"1295","hashOfConfig":"1071"},{"size":1041,"mtime":1731318159223,"results":"1296","hashOfConfig":"1071"},{"size":354,"mtime":1731318159223,"results":"1297","hashOfConfig":"1071"},{"size":271,"mtime":1731318159223,"results":"1298","hashOfConfig":"1071"},{"size":443,"mtime":1731318159223,"results":"1299","hashOfConfig":"1071"},{"size":462,"mtime":1731318159223,"results":"1300","hashOfConfig":"1071"},{"size":407,"mtime":1731318159223,"results":"1301","hashOfConfig":"1071"},{"size":505,"mtime":1731318159223,"results":"1302","hashOfConfig":"1071"},{"size":418,"mtime":1731318159223,"results":"1303","hashOfConfig":"1071"},{"size":472,"mtime":1731318159223,"results":"1304","hashOfConfig":"1071"},{"size":360,"mtime":1731318159223,"results":"1305","hashOfConfig":"1071"},{"size":692,"mtime":1731318159223,"results":"1306","hashOfConfig":"1071"},{"size":1512,"mtime":1731318159223,"results":"1307","hashOfConfig":"1071"},{"size":1026,"mtime":1731318159223,"results":"1308","hashOfConfig":"1071"},{"size":661,"mtime":1731318159223,"results":"1309","hashOfConfig":"1071"},{"size":492,"mtime":1731318159227,"results":"1310","hashOfConfig":"1071"},{"size":492,"mtime":1731318159227,"results":"1311","hashOfConfig":"1071"},{"size":450,"mtime":1731318159227,"results":"1312","hashOfConfig":"1071"},{"size":444,"mtime":1731318159227,"results":"1313","hashOfConfig":"1071"},{"size":784,"mtime":1731318159227,"results":"1314","hashOfConfig":"1071"},{"size":462,"mtime":1731318159227,"results":"1315","hashOfConfig":"1071"},{"size":514,"mtime":1731318159227,"results":"1316","hashOfConfig":"1071"},{"size":871,"mtime":1731318159227,"results":"1317","hashOfConfig":"1071"},{"size":309,"mtime":1731318159227,"results":"1318","hashOfConfig":"1071"},{"size":1074,"mtime":1731318159227,"results":"1319","hashOfConfig":"1071"},{"size":463,"mtime":1731318159227,"results":"1320","hashOfConfig":"1071"},{"size":875,"mtime":1731318159227,"results":"1321","hashOfConfig":"1071"},{"size":446,"mtime":1731318159227,"results":"1322","hashOfConfig":"1071"},{"size":309,"mtime":1731318159227,"results":"1323","hashOfConfig":"1071"},{"size":980,"mtime":1731318159227,"results":"1324","hashOfConfig":"1071"},{"size":599,"mtime":1731318159227,"results":"1325","hashOfConfig":"1071"},{"size":430,"mtime":1731318159227,"results":"1326","hashOfConfig":"1071"},{"size":345,"mtime":1731318159227,"results":"1327","hashOfConfig":"1071"},{"size":310,"mtime":1731318159223,"results":"1328","hashOfConfig":"1071"},{"size":199,"mtime":1731318159227,"results":"1329","hashOfConfig":"1071"},{"size":265,"mtime":1731318159227,"results":"1330","hashOfConfig":"1071"},{"size":539,"mtime":1731318159227,"results":"1331","hashOfConfig":"1071"},{"size":492,"mtime":1731318159227,"results":"1332","hashOfConfig":"1071"},{"size":238,"mtime":1731318159231,"results":"1333","hashOfConfig":"1071"},{"size":408,"mtime":1731318159227,"results":"1334","hashOfConfig":"1071"},{"size":514,"mtime":1731318159227,"results":"1335","hashOfConfig":"1071"},{"size":349,"mtime":1731318159227,"results":"1336","hashOfConfig":"1071"},{"size":300,"mtime":1731318159235,"results":"1337","hashOfConfig":"1071"},{"size":329,"mtime":1731318159227,"results":"1338","hashOfConfig":"1071"},{"size":702,"mtime":1731318159227,"results":"1339","hashOfConfig":"1071"},{"size":1198,"mtime":1731318159231,"results":"1340","hashOfConfig":"1071"},{"size":190,"mtime":1731318159231,"results":"1341","hashOfConfig":"1071"},{"size":718,"mtime":1731318159227,"results":"1342","hashOfConfig":"1071"},{"size":574,"mtime":1731318159231,"results":"1343","hashOfConfig":"1071"},{"size":474,"mtime":1731318159231,"results":"1344","hashOfConfig":"1071"},{"size":258,"mtime":1731318159231,"results":"1345","hashOfConfig":"1071"},{"size":542,"mtime":1731318159227,"results":"1346","hashOfConfig":"1071"},{"size":582,"mtime":1731318159231,"results":"1347","hashOfConfig":"1071"},{"size":703,"mtime":1731318159231,"results":"1348","hashOfConfig":"1071"},{"size":486,"mtime":1731318159231,"results":"1349","hashOfConfig":"1071"},{"size":435,"mtime":1731318159227,"results":"1350","hashOfConfig":"1071"},{"size":428,"mtime":1731318159235,"results":"1351","hashOfConfig":"1071"},{"size":206,"mtime":1731318159227,"results":"1352","hashOfConfig":"1071"},{"size":702,"mtime":1731318159231,"results":"1353","hashOfConfig":"1071"},{"size":912,"mtime":1731318159227,"results":"1354","hashOfConfig":"1071"},{"size":561,"mtime":1731318159231,"results":"1355","hashOfConfig":"1071"},{"size":557,"mtime":1731318159231,"results":"1356","hashOfConfig":"1071"},{"size":509,"mtime":1731318159231,"results":"1357","hashOfConfig":"1071"},{"size":467,"mtime":1731318159231,"results":"1358","hashOfConfig":"1071"},{"size":197,"mtime":1731318159227,"results":"1359","hashOfConfig":"1071"},{"size":748,"mtime":1731318159231,"results":"1360","hashOfConfig":"1071"},{"size":399,"mtime":1731318159227,"results":"1361","hashOfConfig":"1071"},{"size":1661,"mtime":1731318159231,"results":"1362","hashOfConfig":"1071"},{"size":166,"mtime":1731318159227,"results":"1363","hashOfConfig":"1071"},{"size":522,"mtime":1731318159227,"results":"1364","hashOfConfig":"1071"},{"size":519,"mtime":1731318159231,"results":"1365","hashOfConfig":"1071"},{"size":470,"mtime":1731318159227,"results":"1366","hashOfConfig":"1071"},{"size":633,"mtime":1731318159231,"results":"1367","hashOfConfig":"1071"},{"size":295,"mtime":1731318159231,"results":"1368","hashOfConfig":"1071"},{"size":488,"mtime":1731318159231,"results":"1369","hashOfConfig":"1071"},{"size":665,"mtime":1731318159227,"results":"1370","hashOfConfig":"1071"},{"size":502,"mtime":1731318159227,"results":"1371","hashOfConfig":"1071"},{"size":494,"mtime":1731318159227,"results":"1372","hashOfConfig":"1071"},{"size":192,"mtime":1731318159235,"results":"1373","hashOfConfig":"1071"},{"size":688,"mtime":1731318159231,"results":"1374","hashOfConfig":"1071"},{"size":509,"mtime":1731318159231,"results":"1375","hashOfConfig":"1071"},{"size":534,"mtime":1731318159231,"results":"1376","hashOfConfig":"1071"},{"size":801,"mtime":1731318159235,"results":"1377","hashOfConfig":"1071"},{"size":481,"mtime":1731318159231,"results":"1378","hashOfConfig":"1071"},{"size":578,"mtime":1731318159231,"results":"1379","hashOfConfig":"1071"},{"size":530,"mtime":1731318159227,"results":"1380","hashOfConfig":"1071"},{"size":1230,"mtime":1731318159227,"results":"1381","hashOfConfig":"1071"},{"size":571,"mtime":1731318159231,"results":"1382","hashOfConfig":"1071"},{"size":572,"mtime":1731318159227,"results":"1383","hashOfConfig":"1071"},{"size":691,"mtime":1731318159227,"results":"1384","hashOfConfig":"1071"},{"size":598,"mtime":1731318159227,"results":"1385","hashOfConfig":"1071"},{"size":816,"mtime":1731318159231,"results":"1386","hashOfConfig":"1071"},{"size":663,"mtime":1731318159231,"results":"1387","hashOfConfig":"1071"},{"size":696,"mtime":1731318159231,"results":"1388","hashOfConfig":"1071"},{"size":552,"mtime":1731318159231,"results":"1389","hashOfConfig":"1071"},{"size":1494,"mtime":1731318159231,"results":"1390","hashOfConfig":"1071"},{"size":361,"mtime":1731318159231,"results":"1391","hashOfConfig":"1071"},{"size":396,"mtime":1731318159227,"results":"1392","hashOfConfig":"1071"},{"size":1510,"mtime":1731318159231,"results":"1393","hashOfConfig":"1071"},{"size":207,"mtime":1731318159231,"results":"1394","hashOfConfig":"1071"},{"size":212,"mtime":1731318159227,"results":"1395","hashOfConfig":"1071"},{"size":541,"mtime":1731318159227,"results":"1396","hashOfConfig":"1071"},{"size":375,"mtime":1731318159231,"results":"1397","hashOfConfig":"1071"},{"size":3015,"mtime":1731318159203,"results":"1398","hashOfConfig":"1071"},{"size":2425,"mtime":1731318159203,"results":"1399","hashOfConfig":"1071"},{"size":848,"mtime":1731318159207,"results":"1400","hashOfConfig":"1071"},{"size":504,"mtime":1731318159235,"results":"1401","hashOfConfig":"1071"},{"size":541,"mtime":1731318159227,"results":"1402","hashOfConfig":"1071"},{"size":502,"mtime":1731318159227,"results":"1403","hashOfConfig":"1071"},{"size":2917,"mtime":1731318159203,"results":"1404","hashOfConfig":"1071"},{"size":8052,"mtime":1731318159211,"results":"1405","hashOfConfig":"1071"},{"size":373,"mtime":1731318159211,"results":"1406","hashOfConfig":"1071"},{"size":4479,"mtime":1731318159203,"results":"1407","hashOfConfig":"1071"},{"size":994,"mtime":1731318159203,"results":"1408","hashOfConfig":"1071"},{"size":559,"mtime":1731318159231,"results":"1409","hashOfConfig":"1071"},{"size":741,"mtime":1731318159231,"results":"1410","hashOfConfig":"1071"},{"size":561,"mtime":1731318159227,"results":"1411","hashOfConfig":"1071"},{"size":529,"mtime":1731318159227,"results":"1412","hashOfConfig":"1071"},{"size":544,"mtime":1731318159227,"results":"1413","hashOfConfig":"1071"},{"size":524,"mtime":1731318159227,"results":"1414","hashOfConfig":"1071"},{"size":1449,"mtime":1731318159215,"results":"1415","hashOfConfig":"1071"},{"size":1780,"mtime":1731318159231,"results":"1416","hashOfConfig":"1071"},{"size":2657,"mtime":1731318159235,"results":"1417","hashOfConfig":"1071"},{"size":4173,"mtime":1731318159235,"results":"1418","hashOfConfig":"1071"},{"size":4612,"mtime":1731318159235,"results":"1419","hashOfConfig":"1071"},{"size":1437,"mtime":1731318159235,"results":"1420","hashOfConfig":"1071"},{"size":3584,"mtime":1731318159235,"results":"1421","hashOfConfig":"1071"},{"size":2096,"mtime":1731318159235,"results":"1422","hashOfConfig":"1071"},{"size":4283,"mtime":1731318159235,"results":"1423","hashOfConfig":"1071"},{"size":6474,"mtime":1731318159235,"results":"1424","hashOfConfig":"1071"},{"size":4839,"mtime":1731318159235,"results":"1425","hashOfConfig":"1071"},{"size":6518,"mtime":1731318159239,"results":"1426","hashOfConfig":"1071"},{"size":8086,"mtime":1731318159239,"results":"1427","hashOfConfig":"1071"},{"size":8172,"mtime":1731318159239,"results":"1428","hashOfConfig":"1071"},{"size":6342,"mtime":1731318159239,"results":"1429","hashOfConfig":"1071"},{"size":1844,"mtime":1731318159239,"results":"1430","hashOfConfig":"1071"},{"size":4903,"mtime":1731318159239,"results":"1431","hashOfConfig":"1071"},{"size":5288,"mtime":1731318159239,"results":"1432","hashOfConfig":"1071"},{"size":8420,"mtime":1731318159239,"results":"1433","hashOfConfig":"1071"},{"size":3705,"mtime":1731318159239,"results":"1434","hashOfConfig":"1071"},{"size":7901,"mtime":1731318159239,"results":"1435","hashOfConfig":"1071"},{"size":6029,"mtime":1731318159239,"results":"1436","hashOfConfig":"1071"},{"size":1887,"mtime":1731318159239,"results":"1437","hashOfConfig":"1071"},{"size":10119,"mtime":1731318159239,"results":"1438","hashOfConfig":"1071"},{"size":7640,"mtime":1731318159239,"results":"1439","hashOfConfig":"1071"},{"size":5185,"mtime":1731318159239,"results":"1440","hashOfConfig":"1071"},{"size":11353,"mtime":1731318159239,"results":"1441","hashOfConfig":"1071"},{"size":8697,"mtime":1731318159239,"results":"1442","hashOfConfig":"1071"},{"size":9604,"mtime":1731318159243,"results":"1443","hashOfConfig":"1071"},{"size":2920,"mtime":1731318159243,"results":"1444","hashOfConfig":"1071"},{"size":1471,"mtime":1731318159243,"results":"1445","hashOfConfig":"1071"},{"size":6855,"mtime":1731318159247,"results":"1446","hashOfConfig":"1071"},{"size":18241,"mtime":1731318159247,"results":"1447","hashOfConfig":"1071"},{"size":5743,"mtime":1731318159247,"results":"1448","hashOfConfig":"1071"},{"size":12398,"mtime":1731318159235,"results":"1449","hashOfConfig":"1071"},{"size":6676,"mtime":1731318159235,"results":"1450","hashOfConfig":"1071"},{"size":4944,"mtime":1731318159247,"results":"1451","hashOfConfig":"1071"},{"size":6431,"mtime":1731318159247,"results":"1452","hashOfConfig":"1071"},{"size":8763,"mtime":1731318159239,"results":"1453","hashOfConfig":"1071"},{"size":1346,"mtime":1731318159239,"results":"1454","hashOfConfig":"1071"},{"size":5418,"mtime":1731318159263,"results":"1455","hashOfConfig":"1071"},{"size":3218,"mtime":1731318159239,"results":"1456","hashOfConfig":"1071"},{"size":2834,"mtime":1731318159299,"results":"1457","hashOfConfig":"1071"},{"size":6565,"mtime":1731318159299,"results":"1458","hashOfConfig":"1071"},{"size":1355,"mtime":1731318159247,"results":"1459","hashOfConfig":"1071"},{"size":2751,"mtime":1731318159299,"results":"1460","hashOfConfig":"1071"},{"size":2601,"mtime":1731318159239,"results":"1461","hashOfConfig":"1071"},{"size":6893,"mtime":1731318159239,"results":"1462","hashOfConfig":"1071"},{"size":8541,"mtime":1731318159199,"results":"1463","hashOfConfig":"1071"},{"size":646,"mtime":1731318159263,"results":"1464","hashOfConfig":"1071"},{"size":9923,"mtime":1731318159239,"results":"1465","hashOfConfig":"1071"},{"size":6921,"mtime":1731318159251,"results":"1466","hashOfConfig":"1071"},{"size":5989,"mtime":1731318159235,"results":"1467","hashOfConfig":"1071"},{"size":8076,"mtime":1731318159239,"results":"1468","hashOfConfig":"1071"},{"size":7439,"mtime":1731318159239,"results":"1469","hashOfConfig":"1071"},{"size":1179,"mtime":1731318159239,"results":"1470","hashOfConfig":"1071"},{"size":2963,"mtime":1731318159243,"results":"1471","hashOfConfig":"1071"},{"size":4145,"mtime":1731318159247,"results":"1472","hashOfConfig":"1071"},{"size":6275,"mtime":1731318159243,"results":"1473","hashOfConfig":"1071"},{"size":5882,"mtime":1731318159247,"results":"1474","hashOfConfig":"1071"},{"size":1354,"mtime":1731318159239,"results":"1475","hashOfConfig":"1071"},{"size":5565,"mtime":1731318159247,"results":"1476","hashOfConfig":"1071"},{"size":4042,"mtime":1731318159303,"results":"1477","hashOfConfig":"1071"},{"size":16109,"mtime":1731318159303,"results":"1478","hashOfConfig":"1071"},{"size":3915,"mtime":1731318159243,"results":"1479","hashOfConfig":"1071"},{"size":12215,"mtime":1731318159243,"results":"1480","hashOfConfig":"1071"},{"size":4403,"mtime":1731318159243,"results":"1481","hashOfConfig":"1071"},{"size":10006,"mtime":1731318159247,"results":"1482","hashOfConfig":"1071"},{"size":5651,"mtime":1731318159243,"results":"1483","hashOfConfig":"1071"},{"size":8912,"mtime":1731318159267,"results":"1484","hashOfConfig":"1071"},{"size":4978,"mtime":1731318159243,"results":"1485","hashOfConfig":"1071"},{"size":3660,"mtime":1731318159267,"results":"1486","hashOfConfig":"1071"},{"size":2425,"mtime":1731318159267,"results":"1487","hashOfConfig":"1071"},{"size":6085,"mtime":1731318159263,"results":"1488","hashOfConfig":"1071"},{"size":8758,"mtime":1731318159263,"results":"1489","hashOfConfig":"1071"},{"size":3578,"mtime":1731318159267,"results":"1490","hashOfConfig":"1071"},{"size":4314,"mtime":1731318159251,"results":"1491","hashOfConfig":"1071"},{"size":3448,"mtime":1731318159251,"results":"1492","hashOfConfig":"1071"},{"size":5527,"mtime":1731318159251,"results":"1493","hashOfConfig":"1071"},{"size":7025,"mtime":1731318159251,"results":"1494","hashOfConfig":"1071"},{"size":6992,"mtime":1731318159251,"results":"1495","hashOfConfig":"1071"},{"size":5663,"mtime":1731318159251,"results":"1496","hashOfConfig":"1071"},{"size":6430,"mtime":1731318159251,"results":"1497","hashOfConfig":"1071"},{"size":6433,"mtime":1731318159251,"results":"1498","hashOfConfig":"1071"},{"size":4897,"mtime":1731318159251,"results":"1499","hashOfConfig":"1071"},{"size":6961,"mtime":1731318159263,"results":"1500","hashOfConfig":"1071"},{"size":6151,"mtime":1731318159263,"results":"1501","hashOfConfig":"1071"},{"size":5682,"mtime":1731318159255,"results":"1502","hashOfConfig":"1071"},{"size":9222,"mtime":1731318159255,"results":"1503","hashOfConfig":"1071"},{"size":29541,"mtime":1731318159255,"results":"1504","hashOfConfig":"1071"},{"size":34830,"mtime":1731318159255,"results":"1505","hashOfConfig":"1071"},{"size":15656,"mtime":1731318159255,"results":"1506","hashOfConfig":"1071"},{"size":21674,"mtime":1731318159255,"results":"1507","hashOfConfig":"1071"},{"size":18601,"mtime":1731318159259,"results":"1508","hashOfConfig":"1071"},{"size":7840,"mtime":1731318159259,"results":"1509","hashOfConfig":"1071"},{"size":6395,"mtime":1731318159259,"results":"1510","hashOfConfig":"1071"},{"size":41261,"mtime":1731318159263,"results":"1511","hashOfConfig":"1071"},{"size":41047,"mtime":1731318159263,"results":"1512","hashOfConfig":"1071"},{"size":6044,"mtime":1731318159267,"results":"1513","hashOfConfig":"1071"},{"size":1910,"mtime":1731318159267,"results":"1514","hashOfConfig":"1071"},{"size":3679,"mtime":1731318159267,"results":"1515","hashOfConfig":"1071"},{"size":8144,"mtime":1731318159267,"results":"1516","hashOfConfig":"1071"},{"size":8780,"mtime":1731318159267,"results":"1517","hashOfConfig":"1071"},{"size":6381,"mtime":1731318159267,"results":"1518","hashOfConfig":"1071"},{"size":23536,"mtime":1731318159267,"results":"1519","hashOfConfig":"1071"},{"size":4483,"mtime":1731318159271,"results":"1520","hashOfConfig":"1071"},{"size":1671,"mtime":1731318159271,"results":"1521","hashOfConfig":"1071"},{"size":4636,"mtime":1731318159271,"results":"1522","hashOfConfig":"1071"},{"size":13090,"mtime":1731318159243,"results":"1523","hashOfConfig":"1071"},{"size":6762,"mtime":1731318159271,"results":"1524","hashOfConfig":"1071"},{"size":6198,"mtime":1731318159271,"results":"1525","hashOfConfig":"1071"},{"size":6865,"mtime":1731318159271,"results":"1526","hashOfConfig":"1071"},{"size":6674,"mtime":1731318159271,"results":"1527","hashOfConfig":"1071"},{"size":5135,"mtime":1731318159243,"results":"1528","hashOfConfig":"1071"},{"size":6760,"mtime":1731318159251,"results":"1529","hashOfConfig":"1071"},{"size":3623,"mtime":1731318159295,"results":"1530","hashOfConfig":"1071"},{"size":5067,"mtime":1731318159295,"results":"1531","hashOfConfig":"1071"},{"size":6940,"mtime":1731318159295,"results":"1532","hashOfConfig":"1071"},{"size":9944,"mtime":1731318159295,"results":"1533","hashOfConfig":"1071"},{"size":4437,"mtime":1731318159263,"results":"1534","hashOfConfig":"1071"},{"size":670,"mtime":1731318159263,"results":"1535","hashOfConfig":"1071"},{"size":1167,"mtime":1731318159251,"results":"1536","hashOfConfig":"1071"},{"size":1309,"mtime":1731318159247,"results":"1537","hashOfConfig":"1071"},{"size":1361,"mtime":1731318159247,"results":"1538","hashOfConfig":"1071"},{"size":4444,"mtime":1731318159263,"results":"1539","hashOfConfig":"1071"},{"size":5580,"mtime":1731318159251,"results":"1540","hashOfConfig":"1071"},{"size":8301,"mtime":1731318159251,"results":"1541","hashOfConfig":"1071"},{"size":5313,"mtime":1731318159251,"results":"1542","hashOfConfig":"1071"},{"size":4648,"mtime":1731318159259,"results":"1543","hashOfConfig":"1071"},{"size":7362,"mtime":1731318159267,"results":"1544","hashOfConfig":"1071"},{"size":4965,"mtime":1731318159259,"results":"1545","hashOfConfig":"1071"},{"size":1353,"mtime":1731318159295,"results":"1546","hashOfConfig":"1071"},{"size":1809,"mtime":1731318159299,"results":"1547","hashOfConfig":"1071"},{"size":11325,"mtime":1731318159267,"results":"1548","hashOfConfig":"1071"},{"size":10560,"mtime":1731318159271,"results":"1549","hashOfConfig":"1071"},{"size":7430,"mtime":1731318159267,"results":"1550","hashOfConfig":"1071"},{"size":1280,"mtime":1731318159271,"results":"1551","hashOfConfig":"1071"},{"size":5286,"mtime":1731318159299,"results":"1552","hashOfConfig":"1071"},{"size":3599,"mtime":1731318159299,"results":"1553","hashOfConfig":"1071"},{"size":5264,"mtime":1731318159299,"results":"1554","hashOfConfig":"1071"},{"size":2653,"mtime":1731318159251,"results":"1555","hashOfConfig":"1071"},{"size":4352,"mtime":1731318159299,"results":"1556","hashOfConfig":"1071"},{"size":2778,"mtime":1731318159263,"results":"1557","hashOfConfig":"1071"},{"size":5010,"mtime":1731318159299,"results":"1558","hashOfConfig":"1071"},{"size":2538,"mtime":1731318159303,"results":"1559","hashOfConfig":"1071"},{"size":1870,"mtime":1731318159299,"results":"1560","hashOfConfig":"1071"},{"size":9371,"mtime":1731318159299,"results":"1561","hashOfConfig":"1071"},{"size":993,"mtime":1731318159299,"results":"1562","hashOfConfig":"1071"},{"size":11358,"mtime":1731318159299,"results":"1563","hashOfConfig":"1071"},{"size":10882,"mtime":1731318159299,"results":"1564","hashOfConfig":"1071"},{"size":5056,"mtime":1731318159299,"results":"1565","hashOfConfig":"1071"},{"size":3721,"mtime":1731318159303,"results":"1566","hashOfConfig":"1071"},{"size":1261,"mtime":1731318159303,"results":"1567","hashOfConfig":"1071"},{"size":12520,"mtime":1731318159303,"results":"1568","hashOfConfig":"1071"},{"size":9490,"mtime":1731318159303,"results":"1569","hashOfConfig":"1071"},{"size":11939,"mtime":1731318159303,"results":"1570","hashOfConfig":"1071"},{"size":7750,"mtime":1731318159303,"results":"1571","hashOfConfig":"1071"},{"size":1186,"mtime":1731318159239,"results":"1572","hashOfConfig":"1071"},{"size":4337,"mtime":1731318159235,"results":"1573","hashOfConfig":"1071"},{"size":6812,"mtime":1731318159299,"results":"1574","hashOfConfig":"1071"},{"size":11576,"mtime":1731318159299,"results":"1575","hashOfConfig":"1071"},{"size":4722,"mtime":1731318159303,"results":"1576","hashOfConfig":"1071"},{"size":3514,"mtime":1731318159303,"results":"1577","hashOfConfig":"1071"},{"size":2680,"mtime":1731318159299,"results":"1578","hashOfConfig":"1071"},{"size":9090,"mtime":1731318159259,"results":"1579","hashOfConfig":"1071"},{"size":6322,"mtime":1731318159259,"results":"1580","hashOfConfig":"1071"},{"size":9476,"mtime":1731318159251,"results":"1581","hashOfConfig":"1071"},{"size":5183,"mtime":1731318159299,"results":"1582","hashOfConfig":"1071"},{"size":7587,"mtime":1731318159251,"results":"1583","hashOfConfig":"1071"},{"size":6854,"mtime":1731318159303,"results":"1584","hashOfConfig":"1071"},{"size":1910,"mtime":1731318159259,"results":"1585","hashOfConfig":"1071"},{"size":11258,"mtime":1731318159259,"results":"1586","hashOfConfig":"1071"},{"size":1341,"mtime":1731318159259,"results":"1587","hashOfConfig":"1071"},{"size":4817,"mtime":1731318159299,"results":"1588","hashOfConfig":"1071"},{"size":151,"mtime":1731318159235,"results":"1589","hashOfConfig":"1071"},{"size":1301,"mtime":1731318159303,"results":"1590","hashOfConfig":"1071"},{"size":236,"mtime":1731318159235,"results":"1591","hashOfConfig":"1071"},{"size":242,"mtime":1731318159295,"results":"1592","hashOfConfig":"1071"},{"size":8461,"mtime":1731318159263,"results":"1593","hashOfConfig":"1071"},{"size":13181,"mtime":1731318159263,"results":"1594","hashOfConfig":"1071"},{"size":1462,"mtime":1731318159243,"results":"1595","hashOfConfig":"1071"},{"size":1617,"mtime":1731318159247,"results":"1596","hashOfConfig":"1071"},{"size":3612,"mtime":1731318159307,"results":"1597","hashOfConfig":"1071"},{"size":1965,"mtime":1731318159247,"results":"1598","hashOfConfig":"1071"},{"size":8186,"mtime":1731318159271,"results":"1599","hashOfConfig":"1071"},{"size":5069,"mtime":1731318159271,"results":"1600","hashOfConfig":"1071"},{"size":7747,"mtime":1731318159271,"results":"1601","hashOfConfig":"1071"},{"size":2909,"mtime":1731318159251,"results":"1602","hashOfConfig":"1071"},{"size":6369,"mtime":1731318159271,"results":"1603","hashOfConfig":"1071"},{"size":7728,"mtime":1731318159271,"results":"1604","hashOfConfig":"1071"},{"size":8746,"mtime":1731318159271,"results":"1605","hashOfConfig":"1071"},{"size":2698,"mtime":1731318159251,"results":"1606","hashOfConfig":"1071"},{"size":1559,"mtime":1731318159307,"results":"1607","hashOfConfig":"1071"},{"size":914,"mtime":1731318159251,"results":"1608","hashOfConfig":"1071"},{"size":6270,"mtime":1731318159259,"results":"1609","hashOfConfig":"1071"},{"size":6503,"mtime":1731318159235,"results":"1610","hashOfConfig":"1071"},{"size":5448,"mtime":1731318159259,"results":"1611","hashOfConfig":"1071"},{"size":14832,"mtime":1731318159259,"results":"1612","hashOfConfig":"1071"},{"size":4743,"mtime":1731318159295,"results":"1613","hashOfConfig":"1071"},{"size":5469,"mtime":1731318159267,"results":"1614","hashOfConfig":"1071"},{"size":6184,"mtime":1731318159267,"results":"1615","hashOfConfig":"1071"},{"size":10000,"mtime":1731318159271,"results":"1616","hashOfConfig":"1071"},{"size":9508,"mtime":1731318159271,"results":"1617","hashOfConfig":"1071"},{"size":10503,"mtime":1731318159295,"results":"1618","hashOfConfig":"1071"},{"size":1190,"mtime":1731318159263,"results":"1619","hashOfConfig":"1071"},{"size":1269,"mtime":1731318159271,"results":"1620","hashOfConfig":"1071"},{"size":7210,"mtime":1731318159243,"results":"1621","hashOfConfig":"1071"},{"size":9742,"mtime":1731318159247,"results":"1622","hashOfConfig":"1071"},{"size":2543,"mtime":1731318159271,"results":"1623","hashOfConfig":"1071"},{"size":1367,"mtime":1731318159267,"results":"1624","hashOfConfig":"1071"},{"size":7253,"mtime":1731318159251,"results":"1625","hashOfConfig":"1071"},{"size":4204,"mtime":1731318159271,"results":"1626","hashOfConfig":"1071"},{"size":4341,"mtime":1731318159271,"results":"1627","hashOfConfig":"1071"},{"size":1452,"mtime":1731318159271,"results":"1628","hashOfConfig":"1071"},{"size":22372,"mtime":1731318159291,"results":"1629","hashOfConfig":"1071"},{"size":4079,"mtime":1731318159295,"results":"1630","hashOfConfig":"1071"},{"size":4857,"mtime":1731318159279,"results":"1631","hashOfConfig":"1071"},{"size":6792,"mtime":1731318159291,"results":"1632","hashOfConfig":"1071"},{"size":5574,"mtime":1731318159291,"results":"1633","hashOfConfig":"1071"},{"size":10971,"mtime":1731318159271,"results":"1634","hashOfConfig":"1071"},{"size":5261,"mtime":1731318159247,"results":"1635","hashOfConfig":"1071"},{"size":5130,"mtime":1731318159291,"results":"1636","hashOfConfig":"1071"},{"size":5127,"mtime":1731318159247,"results":"1637","hashOfConfig":"1071"},{"size":5327,"mtime":1731318159247,"results":"1638","hashOfConfig":"1071"},{"size":3077,"mtime":1731318159287,"results":"1639","hashOfConfig":"1071"},{"size":4748,"mtime":1731318159247,"results":"1640","hashOfConfig":"1071"},{"size":1259,"mtime":1731318159287,"results":"1641","hashOfConfig":"1071"},{"size":3538,"mtime":1731318159275,"results":"1642","hashOfConfig":"1071"},{"size":4299,"mtime":1731318159275,"results":"1643","hashOfConfig":"1071"},{"size":4308,"mtime":1731318159275,"results":"1644","hashOfConfig":"1071"},{"size":3816,"mtime":1731318159291,"results":"1645","hashOfConfig":"1071"},{"size":546,"mtime":1731318159275,"results":"1646","hashOfConfig":"1071"},{"size":652,"mtime":1731318159287,"results":"1647","hashOfConfig":"1071"},{"size":6980,"mtime":1731318159279,"results":"1648","hashOfConfig":"1071"},{"size":5441,"mtime":1731318159279,"results":"1649","hashOfConfig":"1071"},{"size":4760,"mtime":1731318159279,"results":"1650","hashOfConfig":"1071"},{"size":8083,"mtime":1731318159203,"results":"1651","hashOfConfig":"1071"},{"size":6408,"mtime":1731318159291,"results":"1652","hashOfConfig":"1071"},{"size":6792,"mtime":1731318159295,"results":"1653","hashOfConfig":"1071"},{"size":6287,"mtime":1731318159287,"results":"1654","hashOfConfig":"1071"},{"size":4646,"mtime":1731318159295,"results":"1655","hashOfConfig":"1071"},{"size":6981,"mtime":1731318159275,"results":"1656","hashOfConfig":"1071"},{"size":8223,"mtime":1731318159279,"results":"1657","hashOfConfig":"1071"},{"size":4369,"mtime":1731318159283,"results":"1658","hashOfConfig":"1071"},{"size":6778,"mtime":1731318159279,"results":"1659","hashOfConfig":"1071"},{"size":1517,"mtime":1731318159275,"results":"1660","hashOfConfig":"1071"},{"size":4371,"mtime":1731318159275,"results":"1661","hashOfConfig":"1071"},{"size":2658,"mtime":1731318159275,"results":"1662","hashOfConfig":"1071"},{"size":5115,"mtime":1731318159275,"results":"1663","hashOfConfig":"1071"},{"size":5908,"mtime":1731318159275,"results":"1664","hashOfConfig":"1071"},{"size":4271,"mtime":1731318159275,"results":"1665","hashOfConfig":"1071"},{"size":4766,"mtime":1731318159275,"results":"1666","hashOfConfig":"1071"},{"size":4651,"mtime":1731318159275,"results":"1667","hashOfConfig":"1071"},{"size":3438,"mtime":1731318159275,"results":"1668","hashOfConfig":"1071"},{"size":9058,"mtime":1731318159275,"results":"1669","hashOfConfig":"1071"},{"size":5175,"mtime":1731318159279,"results":"1670","hashOfConfig":"1071"},{"size":9997,"mtime":1731318159275,"results":"1671","hashOfConfig":"1071"},{"size":6955,"mtime":1731318159275,"results":"1672","hashOfConfig":"1071"},{"size":3674,"mtime":1731318159287,"results":"1673","hashOfConfig":"1071"},{"size":1910,"mtime":1731318159287,"results":"1674","hashOfConfig":"1071"},{"size":5240,"mtime":1731318159287,"results":"1675","hashOfConfig":"1071"},{"size":7936,"mtime":1731318159287,"results":"1676","hashOfConfig":"1071"},{"size":2467,"mtime":1731318159287,"results":"1677","hashOfConfig":"1071"},{"size":709,"mtime":1731318159287,"results":"1678","hashOfConfig":"1071"},{"size":5648,"mtime":1731318159283,"results":"1679","hashOfConfig":"1071"},{"size":6378,"mtime":1731318159283,"results":"1680","hashOfConfig":"1071"},{"size":37312,"mtime":1731318159283,"results":"1681","hashOfConfig":"1071"},{"size":14050,"mtime":1731318159283,"results":"1682","hashOfConfig":"1071"},{"size":4532,"mtime":1731318159275,"results":"1683","hashOfConfig":"1071"},{"size":7388,"mtime":1731318159283,"results":"1684","hashOfConfig":"1071"},{"size":6303,"mtime":1731318159283,"results":"1685","hashOfConfig":"1071"},{"size":1906,"mtime":1731318159291,"results":"1686","hashOfConfig":"1071"},{"size":7522,"mtime":1731318159291,"results":"1687","hashOfConfig":"1071"},{"size":8167,"mtime":1731318159291,"results":"1688","hashOfConfig":"1071"},{"size":5576,"mtime":1731318159291,"results":"1689","hashOfConfig":"1071"},{"size":5079,"mtime":1731318159275,"results":"1690","hashOfConfig":"1071"},{"size":5748,"mtime":1731318159291,"results":"1691","hashOfConfig":"1071"},{"size":3254,"mtime":1731318159291,"results":"1692","hashOfConfig":"1071"},{"size":6988,"mtime":1731318159275,"results":"1693","hashOfConfig":"1071"},{"size":1351,"mtime":1731318159279,"results":"1694","hashOfConfig":"1071"},{"size":5086,"mtime":1731318159291,"results":"1695","hashOfConfig":"1071"},{"size":3992,"mtime":1731318159291,"results":"1696","hashOfConfig":"1071"},{"size":6071,"mtime":1731318159291,"results":"1697","hashOfConfig":"1071"},{"size":5816,"mtime":1731318159291,"results":"1698","hashOfConfig":"1071"},{"size":6519,"mtime":1731318159291,"results":"1699","hashOfConfig":"1071"},{"size":5676,"mtime":1731318159275,"results":"1700","hashOfConfig":"1071"},{"size":6264,"mtime":1731318159275,"results":"1701","hashOfConfig":"1071"},{"size":9390,"mtime":1731318159283,"results":"1702","hashOfConfig":"1071"},{"size":5735,"mtime":1731318159283,"results":"1703","hashOfConfig":"1071"},{"size":1673,"mtime":1731318159279,"results":"1704","hashOfConfig":"1071"},{"size":2726,"mtime":1731318159279,"results":"1705","hashOfConfig":"1071"},{"size":6002,"mtime":1731318159287,"results":"1706","hashOfConfig":"1071"},{"size":5969,"mtime":1731318159287,"results":"1707","hashOfConfig":"1071"},{"size":4420,"mtime":1731318159291,"results":"1708","hashOfConfig":"1071"},{"size":2507,"mtime":1731318159279,"results":"1709","hashOfConfig":"1071"},{"size":5894,"mtime":1731318159291,"results":"1710","hashOfConfig":"1071"},{"size":899,"mtime":1731318159279,"results":"1711","hashOfConfig":"1071"},{"size":4842,"mtime":1731318159283,"results":"1712","hashOfConfig":"1071"},{"size":1656,"mtime":1731318159279,"results":"1713","hashOfConfig":"1071"},{"size":10461,"mtime":1731318159291,"results":"1714","hashOfConfig":"1071"},{"size":2004,"mtime":1731318159279,"results":"1715","hashOfConfig":"1071"},{"size":334,"mtime":1731318159279,"results":"1716","hashOfConfig":"1071"},{"size":6968,"mtime":1731318159291,"results":"1717","hashOfConfig":"1071"},{"size":5704,"mtime":1731318159279,"results":"1718","hashOfConfig":"1071"},{"size":1298,"mtime":1731318159291,"results":"1719","hashOfConfig":"1071"},{"size":4899,"mtime":1731318159275,"results":"1720","hashOfConfig":"1071"},{"size":5684,"mtime":1731318159291,"results":"1721","hashOfConfig":"1071"},{"size":7312,"mtime":1731318159279,"results":"1722","hashOfConfig":"1071"},{"size":6331,"mtime":1731318159279,"results":"1723","hashOfConfig":"1071"},{"size":7550,"mtime":1731318159307,"results":"1724","hashOfConfig":"1071"},{"size":6224,"mtime":1731318159279,"results":"1725","hashOfConfig":"1071"},{"size":10252,"mtime":1731318159307,"results":"1726","hashOfConfig":"1071"},{"size":7321,"mtime":1731318159307,"results":"1727","hashOfConfig":"1071"},{"size":8956,"mtime":1731318159291,"results":"1728","hashOfConfig":"1071"},{"size":8917,"mtime":1731318159307,"results":"1729","hashOfConfig":"1071"},{"size":2564,"mtime":1731318159295,"results":"1730","hashOfConfig":"1071"},{"size":3300,"mtime":1731318159203,"results":"1731","hashOfConfig":"1071"},{"size":7673,"mtime":1731318159207,"results":"1732","hashOfConfig":"1071"},{"size":199,"mtime":1731318159211,"results":"1733","hashOfConfig":"1071"},{"size":428,"mtime":1731318159227,"results":"1734","hashOfConfig":"1071"},{"size":1273,"mtime":1731318159203,"results":"1735","hashOfConfig":"1071"},{"size":797,"mtime":1731318159211,"results":"1736","hashOfConfig":"1071"},{"size":2297,"mtime":1731318159199,"results":"1737","hashOfConfig":"1071"},{"size":347,"mtime":1731318159211,"results":"1738","hashOfConfig":"1071"},{"size":202,"mtime":1731318159211,"results":"1739","hashOfConfig":"1071"},{"size":2955,"mtime":1731318159199,"results":"1740","hashOfConfig":"1071"},{"size":290,"mtime":1731318159211,"results":"1741","hashOfConfig":"1071"},{"size":207,"mtime":1731318159235,"results":"1742","hashOfConfig":"1071"},{"size":2670,"mtime":1731318159235,"results":"1743","hashOfConfig":"1071"},{"size":4476,"mtime":1731318159235,"results":"1744","hashOfConfig":"1071"},{"size":8384,"mtime":1731318159235,"results":"1745","hashOfConfig":"1071"},{"size":5919,"mtime":1731318159235,"results":"1746","hashOfConfig":"1071"},{"size":763,"mtime":1731318159199,"results":"1747","hashOfConfig":"1071"},{"size":1130,"mtime":1731318159203,"results":"1748","hashOfConfig":"1071"},{"size":1218,"mtime":1731318159203,"results":"1749","hashOfConfig":"1071"},{"size":912,"mtime":1731318159199,"results":"1750","hashOfConfig":"1071"},{"size":14031,"mtime":1731318159239,"results":"1751","hashOfConfig":"1071"},{"size":5915,"mtime":1731318159243,"results":"1752","hashOfConfig":"1071"},{"size":655,"mtime":1731318159211,"results":"1753","hashOfConfig":"1071"},{"size":459,"mtime":1731318159203,"results":"1754","hashOfConfig":"1071"},{"size":160,"mtime":1731318159211,"results":"1755","hashOfConfig":"1071"},{"size":264,"mtime":1731318159211,"results":"1756","hashOfConfig":"1071"},{"size":2873,"mtime":1731318159207,"results":"1757","hashOfConfig":"1071"},{"size":1161,"mtime":1731318159243,"results":"1758","hashOfConfig":"1071"},{"size":933,"mtime":1731318159243,"results":"1759","hashOfConfig":"1071"},{"size":1611,"mtime":1731318159243,"results":"1760","hashOfConfig":"1071"},{"size":4999,"mtime":1731318159243,"results":"1761","hashOfConfig":"1071"},{"size":817,"mtime":1731318159203,"results":"1762","hashOfConfig":"1071"},{"size":179,"mtime":1731318159211,"results":"1763","hashOfConfig":"1071"},{"size":925,"mtime":1731318159211,"results":"1764","hashOfConfig":"1071"},{"size":692,"mtime":1731318159199,"results":"1765","hashOfConfig":"1071"},{"size":1712,"mtime":1731318159199,"results":"1766","hashOfConfig":"1071"},{"size":847,"mtime":1731318159203,"results":"1767","hashOfConfig":"1071"},{"size":268,"mtime":1731318159235,"results":"1768","hashOfConfig":"1071"},{"size":389,"mtime":1731318159203,"results":"1769","hashOfConfig":"1071"},{"size":2740,"mtime":1731318159203,"results":"1770","hashOfConfig":"1071"},{"size":2405,"mtime":1731318159235,"results":"1771","hashOfConfig":"1071"},{"size":2706,"mtime":1731318159263,"results":"1772","hashOfConfig":"1071"},{"size":2526,"mtime":1731318159299,"results":"1773","hashOfConfig":"1071"},{"size":2452,"mtime":1731318159299,"results":"1774","hashOfConfig":"1071"},{"size":3915,"mtime":1731318159239,"results":"1775","hashOfConfig":"1071"},{"size":3246,"mtime":1731318159239,"results":"1776","hashOfConfig":"1071"},{"size":2279,"mtime":1731318159239,"results":"1777","hashOfConfig":"1071"},{"size":2759,"mtime":1731318159251,"results":"1778","hashOfConfig":"1071"},{"size":3611,"mtime":1731318159251,"results":"1779","hashOfConfig":"1071"},{"size":7553,"mtime":1731318159235,"results":"1780","hashOfConfig":"1071"},{"size":1619,"mtime":1731318159235,"results":"1781","hashOfConfig":"1071"},{"size":8095,"mtime":1731318159239,"results":"1782","hashOfConfig":"1071"},{"size":6411,"mtime":1731318159243,"results":"1783","hashOfConfig":"1071"},{"size":1726,"mtime":1731318159243,"results":"1784","hashOfConfig":"1071"},{"size":1058,"mtime":1731318159243,"results":"1785","hashOfConfig":"1071"},{"size":1074,"mtime":1731318159243,"results":"1786","hashOfConfig":"1071"},{"size":4972,"mtime":1731318159263,"results":"1787","hashOfConfig":"1071"},{"size":1863,"mtime":1731318159247,"results":"1788","hashOfConfig":"1071"},{"size":2991,"mtime":1731318159247,"results":"1789","hashOfConfig":"1071"},{"size":5805,"mtime":1731318159303,"results":"1790","hashOfConfig":"1071"},{"size":4417,"mtime":1731318159263,"results":"1791","hashOfConfig":"1071"},{"size":10021,"mtime":1731318159263,"results":"1792","hashOfConfig":"1071"},{"size":21591,"mtime":1731318159263,"results":"1793","hashOfConfig":"1071"},{"size":3374,"mtime":1731318159303,"results":"1794","hashOfConfig":"1071"},{"size":9485,"mtime":1731318159303,"results":"1795","hashOfConfig":"1071"},{"size":2955,"mtime":1731318159303,"results":"1796","hashOfConfig":"1071"},{"size":8682,"mtime":1731318159303,"results":"1797","hashOfConfig":"1071"},{"size":740,"mtime":1731318159203,"results":"1798","hashOfConfig":"1071"},{"size":4749,"mtime":1731318159303,"results":"1799","hashOfConfig":"1071"},{"size":4367,"mtime":1731318159303,"results":"1800","hashOfConfig":"1071"},{"size":1179,"mtime":1731318159243,"results":"1801","hashOfConfig":"1071"},{"size":1633,"mtime":1731318159199,"results":"1802","hashOfConfig":"1071"},{"size":4955,"mtime":1731318159243,"results":"1803","hashOfConfig":"1071"},{"size":12976,"mtime":1731318159255,"results":"1804","hashOfConfig":"1071"},{"size":2875,"mtime":1731318159255,"results":"1805","hashOfConfig":"1071"},{"size":5998,"mtime":1731318159259,"results":"1806","hashOfConfig":"1071"},{"size":1875,"mtime":1731318159243,"results":"1807","hashOfConfig":"1071"},{"size":2344,"mtime":1731318159255,"results":"1808","hashOfConfig":"1071"},{"size":2111,"mtime":1731318159247,"results":"1809","hashOfConfig":"1071"},{"size":2216,"mtime":1731318159243,"results":"1810","hashOfConfig":"1071"},{"size":15943,"mtime":1731318159247,"results":"1811","hashOfConfig":"1071"},{"size":1971,"mtime":1731318159267,"results":"1812","hashOfConfig":"1071"},{"size":549,"mtime":1731318159267,"results":"1813","hashOfConfig":"1071"},{"size":6533,"mtime":1731318159267,"results":"1814","hashOfConfig":"1071"},{"size":586,"mtime":1731318159211,"results":"1815","hashOfConfig":"1071"},{"size":2160,"mtime":1731318159203,"results":"1816","hashOfConfig":"1071"},{"size":9373,"mtime":1731318159267,"results":"1817","hashOfConfig":"1071"},{"size":1253,"mtime":1731318159207,"results":"1818","hashOfConfig":"1071"},{"size":5914,"mtime":1731318159267,"results":"1819","hashOfConfig":"1071"},{"size":19547,"mtime":1731318159267,"results":"1820","hashOfConfig":"1071"},{"size":1827,"mtime":1731318159263,"results":"1821","hashOfConfig":"1071"},{"size":23404,"mtime":1731318159267,"results":"1822","hashOfConfig":"1071"},{"size":3278,"mtime":1731318159267,"results":"1823","hashOfConfig":"1071"},{"size":11347,"mtime":1731318159267,"results":"1824","hashOfConfig":"1071"},{"size":2114,"mtime":1731318159251,"results":"1825","hashOfConfig":"1071"},{"size":4631,"mtime":1731318159255,"results":"1826","hashOfConfig":"1071"},{"size":2399,"mtime":1731318159255,"results":"1827","hashOfConfig":"1071"},{"size":3130,"mtime":1731318159255,"results":"1828","hashOfConfig":"1071"},{"size":6204,"mtime":1731318159259,"results":"1829","hashOfConfig":"1071"},{"size":4864,"mtime":1731318159251,"results":"1830","hashOfConfig":"1071"},{"size":5603,"mtime":1731318159255,"results":"1831","hashOfConfig":"1071"},{"size":1588,"mtime":1731318159259,"results":"1832","hashOfConfig":"1071"},{"size":10457,"mtime":1731318159255,"results":"1833","hashOfConfig":"1071"},{"size":2199,"mtime":1731318159259,"results":"1834","hashOfConfig":"1071"},{"size":1154,"mtime":1731318159255,"results":"1835","hashOfConfig":"1071"},{"size":5033,"mtime":1731318159263,"results":"1836","hashOfConfig":"1071"},{"size":4443,"mtime":1731318159263,"results":"1837","hashOfConfig":"1071"},{"size":1887,"mtime":1731318159263,"results":"1838","hashOfConfig":"1071"},{"size":651,"mtime":1731318159267,"results":"1839","hashOfConfig":"1071"},{"size":213,"mtime":1731318159259,"results":"1840","hashOfConfig":"1071"},{"size":2734,"mtime":1731318159271,"results":"1841","hashOfConfig":"1071"},{"size":7092,"mtime":1731318159271,"results":"1842","hashOfConfig":"1071"},{"size":267,"mtime":1731318159271,"results":"1843","hashOfConfig":"1071"},{"size":4376,"mtime":1731318159271,"results":"1844","hashOfConfig":"1071"},{"size":3002,"mtime":1731318159271,"results":"1845","hashOfConfig":"1071"},{"size":2264,"mtime":1731318159271,"results":"1846","hashOfConfig":"1071"},{"size":1191,"mtime":1731318159203,"results":"1847","hashOfConfig":"1071"},{"size":250,"mtime":1731318159231,"results":"1848","hashOfConfig":"1071"},{"size":1789,"mtime":1731318159271,"results":"1849","hashOfConfig":"1071"},{"size":2479,"mtime":1731318159271,"results":"1850","hashOfConfig":"1071"},{"size":3560,"mtime":1731318159207,"results":"1851","hashOfConfig":"1071"},{"size":348,"mtime":1731318159227,"results":"1852","hashOfConfig":"1071"},{"size":93,"mtime":1731318159199,"results":"1853","hashOfConfig":"1071"},{"size":16169,"mtime":1731318159267,"results":"1854","hashOfConfig":"1071"},{"size":8141,"mtime":1731318159267,"results":"1855","hashOfConfig":"1071"},{"size":2738,"mtime":1731318159199,"results":"1856","hashOfConfig":"1071"},{"size":865,"mtime":1731318159235,"results":"1857","hashOfConfig":"1071"},{"size":2432,"mtime":1731318159271,"results":"1858","hashOfConfig":"1071"},{"size":2275,"mtime":1731318159267,"results":"1859","hashOfConfig":"1071"},{"size":240,"mtime":1731318159235,"results":"1860","hashOfConfig":"1071"},{"size":438,"mtime":1731318159231,"results":"1861","hashOfConfig":"1071"},{"size":339,"mtime":1731318159299,"results":"1862","hashOfConfig":"1071"},{"size":4849,"mtime":1731318159299,"results":"1863","hashOfConfig":"1071"},{"size":2711,"mtime":1731318159299,"results":"1864","hashOfConfig":"1071"},{"size":2975,"mtime":1731318159299,"results":"1865","hashOfConfig":"1071"},{"size":5883,"mtime":1731318159299,"results":"1866","hashOfConfig":"1071"},{"size":4587,"mtime":1731318159207,"results":"1867","hashOfConfig":"1071"},{"size":5433,"mtime":1731318159263,"results":"1868","hashOfConfig":"1071"},{"size":3888,"mtime":1731318159299,"results":"1869","hashOfConfig":"1071"},{"size":3072,"mtime":1731318159303,"results":"1870","hashOfConfig":"1071"},{"size":2876,"mtime":1731318159303,"results":"1871","hashOfConfig":"1071"},{"size":4561,"mtime":1731318159303,"results":"1872","hashOfConfig":"1071"},{"size":3368,"mtime":1731318159303,"results":"1873","hashOfConfig":"1071"},{"size":2200,"mtime":1731318159299,"results":"1874","hashOfConfig":"1071"},{"size":233,"mtime":1731318159259,"results":"1875","hashOfConfig":"1071"},{"size":6286,"mtime":1731318159259,"results":"1876","hashOfConfig":"1071"},{"size":5199,"mtime":1731318159259,"results":"1877","hashOfConfig":"1071"},{"size":5721,"mtime":1731318159259,"results":"1878","hashOfConfig":"1071"},{"size":1979,"mtime":1731318159299,"results":"1879","hashOfConfig":"1071"},{"size":560,"mtime":1731318159211,"results":"1880","hashOfConfig":"1071"},{"size":4054,"mtime":1731318159299,"results":"1881","hashOfConfig":"1071"},{"size":1811,"mtime":1731318159259,"results":"1882","hashOfConfig":"1071"},{"size":12053,"mtime":1731318159235,"results":"1883","hashOfConfig":"1071"},{"size":4857,"mtime":1731318159295,"results":"1884","hashOfConfig":"1071"},{"size":3375,"mtime":1731318159263,"results":"1885","hashOfConfig":"1071"},{"size":10338,"mtime":1731318159243,"results":"1886","hashOfConfig":"1071"},{"size":3806,"mtime":1731318159199,"results":"1887","hashOfConfig":"1071"},{"size":3541,"mtime":1731318159247,"results":"1888","hashOfConfig":"1071"},{"size":8142,"mtime":1731318159251,"results":"1889","hashOfConfig":"1071"},{"size":566,"mtime":1731318159243,"results":"1890","hashOfConfig":"1071"},{"size":9187,"mtime":1731318159247,"results":"1891","hashOfConfig":"1071"},{"size":6978,"mtime":1731318159251,"results":"1892","hashOfConfig":"1071"},{"size":11885,"mtime":1731318159243,"results":"1893","hashOfConfig":"1071"},{"size":4010,"mtime":1731318159203,"results":"1894","hashOfConfig":"1071"},{"size":2595,"mtime":1731318159259,"results":"1895","hashOfConfig":"1071"},{"size":7094,"mtime":1731318159259,"results":"1896","hashOfConfig":"1071"},{"size":5312,"mtime":1731318159259,"results":"1897","hashOfConfig":"1071"},{"size":2868,"mtime":1731318159259,"results":"1898","hashOfConfig":"1071"},{"size":9674,"mtime":1731318159307,"results":"1899","hashOfConfig":"1071"},{"size":12136,"mtime":1731318159307,"results":"1900","hashOfConfig":"1071"},{"size":3513,"mtime":1731318159307,"results":"1901","hashOfConfig":"1071"},{"size":5157,"mtime":1731318159295,"results":"1902","hashOfConfig":"1071"},{"size":4161,"mtime":1731318159295,"results":"1903","hashOfConfig":"1071"},{"size":2775,"mtime":1731318159295,"results":"1904","hashOfConfig":"1071"},{"size":4425,"mtime":1731318159295,"results":"1905","hashOfConfig":"1071"},{"size":15841,"mtime":1731318159295,"results":"1906","hashOfConfig":"1071"},{"size":1976,"mtime":1731318159295,"results":"1907","hashOfConfig":"1071"},{"size":4700,"mtime":1731318159295,"results":"1908","hashOfConfig":"1071"},{"size":4167,"mtime":1731318159295,"results":"1909","hashOfConfig":"1071"},{"size":658,"mtime":1731318159267,"results":"1910","hashOfConfig":"1071"},{"size":4776,"mtime":1731318159267,"results":"1911","hashOfConfig":"1071"},{"size":2866,"mtime":1731318159295,"results":"1912","hashOfConfig":"1071"},{"size":3935,"mtime":1731318159267,"results":"1913","hashOfConfig":"1071"},{"size":1875,"mtime":1731318159267,"results":"1914","hashOfConfig":"1071"},{"size":2371,"mtime":1731318159295,"results":"1915","hashOfConfig":"1071"},{"size":4604,"mtime":1731318159207,"results":"1916","hashOfConfig":"1071"},{"size":207,"mtime":1731318159271,"results":"1917","hashOfConfig":"1071"},{"size":3025,"mtime":1731318159271,"results":"1918","hashOfConfig":"1071"},{"size":7998,"mtime":1731318159271,"results":"1919","hashOfConfig":"1071"},{"size":2674,"mtime":1731318159291,"results":"1920","hashOfConfig":"1071"},{"size":4540,"mtime":1731318159271,"results":"1921","hashOfConfig":"1071"},{"size":4145,"mtime":1731318159295,"results":"1922","hashOfConfig":"1071"},{"size":3787,"mtime":1731318159279,"results":"1923","hashOfConfig":"1071"},{"size":10980,"mtime":1731318159279,"results":"1924","hashOfConfig":"1071"},{"size":5701,"mtime":1731318159279,"results":"1925","hashOfConfig":"1071"},{"size":6425,"mtime":1731318159247,"results":"1926","hashOfConfig":"1071"},{"size":5077,"mtime":1731318159247,"results":"1927","hashOfConfig":"1071"},{"size":6138,"mtime":1731318159247,"results":"1928","hashOfConfig":"1071"},{"size":5331,"mtime":1731318159287,"results":"1929","hashOfConfig":"1071"},{"size":2033,"mtime":1731318159291,"results":"1930","hashOfConfig":"1071"},{"size":1499,"mtime":1731318159275,"results":"1931","hashOfConfig":"1071"},{"size":7203,"mtime":1731318159247,"results":"1932","hashOfConfig":"1071"},{"size":275,"mtime":1731318159275,"results":"1933","hashOfConfig":"1071"},{"size":3907,"mtime":1731318159275,"results":"1934","hashOfConfig":"1071"},{"size":1933,"mtime":1731318159279,"results":"1935","hashOfConfig":"1071"},{"size":2802,"mtime":1731318159283,"results":"1936","hashOfConfig":"1071"},{"size":4625,"mtime":1731318159287,"results":"1937","hashOfConfig":"1071"},{"size":9831,"mtime":1731318159287,"results":"1938","hashOfConfig":"1071"},{"size":20689,"mtime":1731318159287,"results":"1939","hashOfConfig":"1071"},{"size":185,"mtime":1731318159231,"results":"1940","hashOfConfig":"1071"},{"size":384,"mtime":1731318159231,"results":"1941","hashOfConfig":"1071"},{"size":1955,"mtime":1731318159275,"results":"1942","hashOfConfig":"1071"},{"size":2509,"mtime":1731318159295,"results":"1943","hashOfConfig":"1071"},{"size":2375,"mtime":1731318159295,"results":"1944","hashOfConfig":"1071"},{"size":3843,"mtime":1731318159295,"results":"1945","hashOfConfig":"1071"},{"size":2121,"mtime":1731318159283,"results":"1946","hashOfConfig":"1071"},{"size":2697,"mtime":1731318159203,"results":"1947","hashOfConfig":"1071"},{"size":202,"mtime":1731318159211,"results":"1948","hashOfConfig":"1071"},{"size":995,"mtime":1731318159207,"results":"1949","hashOfConfig":"1071"},{"size":504,"mtime":1731318159231,"results":"1950","hashOfConfig":"1071"},{"size":487,"mtime":1731318159231,"results":"1951","hashOfConfig":"1071"},{"size":7635,"mtime":1731318159199,"results":"1952","hashOfConfig":"1071"},{"size":2189,"mtime":1731318159283,"results":"1953","hashOfConfig":"1071"},{"size":5910,"mtime":1731318159279,"results":"1954","hashOfConfig":"1071"},{"size":478,"mtime":1731318159291,"results":"1955","hashOfConfig":"1071"},{"size":6164,"mtime":1731318159287,"results":"1956","hashOfConfig":"1071"},{"size":13770,"mtime":1731318159275,"results":"1957","hashOfConfig":"1071"},{"size":10147,"mtime":1731318159287,"results":"1958","hashOfConfig":"1071"},{"size":6750,"mtime":1731318159287,"results":"1959","hashOfConfig":"1071"},{"size":23702,"mtime":1731318159287,"results":"1960","hashOfConfig":"1071"},{"size":3345,"mtime":1731318159287,"results":"1961","hashOfConfig":"1071"},{"size":17289,"mtime":1731318159287,"results":"1962","hashOfConfig":"1071"},{"size":11354,"mtime":1731318159291,"results":"1963","hashOfConfig":"1071"},{"size":7134,"mtime":1731318159287,"results":"1964","hashOfConfig":"1071"},{"size":13532,"mtime":1731318159287,"results":"1965","hashOfConfig":"1071"},{"size":2399,"mtime":1731318159283,"results":"1966","hashOfConfig":"1071"},{"size":3606,"mtime":1731318159283,"results":"1967","hashOfConfig":"1071"},{"size":3208,"mtime":1731318159283,"results":"1968","hashOfConfig":"1071"},{"size":4303,"mtime":1731318159283,"results":"1969","hashOfConfig":"1071"},{"size":4005,"mtime":1731318159283,"results":"1970","hashOfConfig":"1071"},{"size":7639,"mtime":1731318159283,"results":"1971","hashOfConfig":"1071"},{"size":3011,"mtime":1731318159283,"results":"1972","hashOfConfig":"1071"},{"size":13113,"mtime":1731318159283,"results":"1973","hashOfConfig":"1071"},{"size":2209,"mtime":1731318159283,"results":"1974","hashOfConfig":"1071"},{"size":6020,"mtime":1731318159283,"results":"1975","hashOfConfig":"1071"},{"size":1169,"mtime":1731318159283,"results":"1976","hashOfConfig":"1071"},{"size":651,"mtime":1731318159291,"results":"1977","hashOfConfig":"1071"},{"size":2962,"mtime":1731318159275,"results":"1978","hashOfConfig":"1071"},{"size":7602,"mtime":1731318159279,"results":"1979","hashOfConfig":"1071"},{"size":1794,"mtime":1731318159291,"results":"1980","hashOfConfig":"1071"},{"size":2631,"mtime":1731318159291,"results":"1981","hashOfConfig":"1071"},{"size":2362,"mtime":1731318159283,"results":"1982","hashOfConfig":"1071"},{"size":1551,"mtime":1731318159271,"results":"1983","hashOfConfig":"1071"},{"size":3721,"mtime":1731318159279,"results":"1984","hashOfConfig":"1071"},{"size":713,"mtime":1731318159211,"results":"1985","hashOfConfig":"1071"},{"size":5055,"mtime":1731318159287,"results":"1986","hashOfConfig":"1071"},{"size":4464,"mtime":1731318159287,"results":"1987","hashOfConfig":"1071"},{"size":171,"mtime":1731318159231,"results":"1988","hashOfConfig":"1071"},{"size":1868,"mtime":1731318159287,"results":"1989","hashOfConfig":"1071"},{"size":4813,"mtime":1731318159291,"results":"1990","hashOfConfig":"1071"},{"size":6662,"mtime":1731318159279,"results":"1991","hashOfConfig":"1071"},{"size":8402,"mtime":1731318159279,"results":"1992","hashOfConfig":"1071"},{"size":2097,"mtime":1731318159271,"results":"1993","hashOfConfig":"1071"},{"size":810,"mtime":1731318159279,"results":"1994","hashOfConfig":"1071"},{"size":2450,"mtime":1731318159279,"results":"1995","hashOfConfig":"1071"},{"size":5865,"mtime":1731318159307,"results":"1996","hashOfConfig":"1071"},{"size":6668,"mtime":1731318159303,"results":"1997","hashOfConfig":"1071"},{"size":4005,"mtime":1731318159307,"results":"1998","hashOfConfig":"1071"},{"size":7488,"mtime":1731318159307,"results":"1999","hashOfConfig":"1071"},{"size":2562,"mtime":1731318159307,"results":"2000","hashOfConfig":"1071"},{"size":2314,"mtime":1731318159307,"results":"2001","hashOfConfig":"1071"},{"size":6717,"mtime":1731318159307,"results":"2002","hashOfConfig":"1071"},{"size":2362,"mtime":1731318159303,"results":"2003","hashOfConfig":"1071"},{"size":655,"mtime":1731318159291,"results":"2004","hashOfConfig":"1071"},{"size":3928,"mtime":1731318159291,"results":"2005","hashOfConfig":"1071"},{"size":1867,"mtime":1731318159291,"results":"2006","hashOfConfig":"1071"},{"size":5410,"mtime":1731318159295,"results":"2007","hashOfConfig":"1071"},{"size":8444,"mtime":1731318159283,"results":"2008","hashOfConfig":"1071"},{"size":6666,"mtime":1731318159303,"results":"2009","hashOfConfig":"1071"},{"size":3233,"mtime":1731318159203,"results":"2010","hashOfConfig":"1071"},{"size":1947,"mtime":1731318159207,"results":"2011","hashOfConfig":"1071"},{"size":5256,"mtime":1731318159207,"results":"2012","hashOfConfig":"1071"},{"size":357,"mtime":1731318159243,"results":"2013","hashOfConfig":"1071"},{"size":2254,"mtime":1731318159239,"results":"2014","hashOfConfig":"1071"},{"size":1910,"mtime":1731318159243,"results":"2015","hashOfConfig":"1071"},{"size":2914,"mtime":1731318159243,"results":"2016","hashOfConfig":"1071"},{"size":1972,"mtime":1731318159239,"results":"2017","hashOfConfig":"1071"},{"size":2873,"mtime":1731318159243,"results":"2018","hashOfConfig":"1071"},{"size":3182,"mtime":1731318159243,"results":"2019","hashOfConfig":"1071"},{"size":916,"mtime":1731318159243,"results":"2020","hashOfConfig":"1071"},{"size":552,"mtime":1731318159243,"results":"2021","hashOfConfig":"1071"},{"size":3977,"mtime":1731318159243,"results":"2022","hashOfConfig":"1071"},{"size":365,"mtime":1731318159211,"results":"2023","hashOfConfig":"1071"},{"size":896,"mtime":1731318159243,"results":"2024","hashOfConfig":"1071"},{"size":504,"mtime":1731318159211,"results":"2025","hashOfConfig":"1071"},{"size":232,"mtime":1731318159227,"results":"2026","hashOfConfig":"1071"},{"size":1887,"mtime":1731318159303,"results":"2027","hashOfConfig":"1071"},{"size":3517,"mtime":1731318159243,"results":"2028","hashOfConfig":"1071"},{"size":9952,"mtime":1731318159263,"results":"2029","hashOfConfig":"1071"},{"size":4251,"mtime":1731318159263,"results":"2030","hashOfConfig":"1071"},{"size":10536,"mtime":1731318159263,"results":"2031","hashOfConfig":"1071"},{"size":261,"mtime":1731318159211,"results":"2032","hashOfConfig":"1071"},{"size":185,"mtime":1731318159227,"results":"2033","hashOfConfig":"1071"},{"size":1318,"mtime":1731318159199,"results":"2034","hashOfConfig":"1071"},{"size":236,"mtime":1731318159231,"results":"2035","hashOfConfig":"1071"},{"size":404,"mtime":1731318159211,"results":"2036","hashOfConfig":"1071"},{"size":2806,"mtime":1731318159263,"results":"2037","hashOfConfig":"1071"},{"size":3878,"mtime":1731318159199,"results":"2038","hashOfConfig":"1071"},{"size":233,"mtime":1731318159235,"results":"2039","hashOfConfig":"1071"},{"size":4056,"mtime":1731318159263,"results":"2040","hashOfConfig":"1071"},{"size":8570,"mtime":1731318159255,"results":"2041","hashOfConfig":"1071"},{"size":2736,"mtime":1731318159207,"results":"2042","hashOfConfig":"1071"},{"size":3383,"mtime":1731318159259,"results":"2043","hashOfConfig":"1071"},{"size":14912,"mtime":1731318159255,"results":"2044","hashOfConfig":"1071"},{"size":340,"mtime":1731318159215,"results":"2045","hashOfConfig":"1071"},{"size":12980,"mtime":1731318159255,"results":"2046","hashOfConfig":"1071"},{"size":284,"mtime":1731318159215,"results":"2047","hashOfConfig":"1071"},{"size":2065,"mtime":1731318159267,"results":"2048","hashOfConfig":"1071"},{"size":2070,"mtime":1731318159267,"results":"2049","hashOfConfig":"1071"},{"size":5679,"mtime":1731318159267,"results":"2050","hashOfConfig":"1071"},{"size":8530,"mtime":1731318159267,"results":"2051","hashOfConfig":"1071"},{"size":4353,"mtime":1731318159267,"results":"2052","hashOfConfig":"1071"},{"size":1478,"mtime":1731318159263,"results":"2053","hashOfConfig":"1071"},{"size":4566,"mtime":1731318159267,"results":"2054","hashOfConfig":"1071"},{"size":12414,"mtime":1731318159271,"results":"2055","hashOfConfig":"1071"},{"size":7267,"mtime":1731318159203,"results":"2056","hashOfConfig":"1071"},{"size":1231,"mtime":1731318159207,"results":"2057","hashOfConfig":"1071"},{"size":343,"mtime":1731318159231,"results":"2058","hashOfConfig":"1071"},{"size":2474,"mtime":1731318159207,"results":"2059","hashOfConfig":"1071"},{"size":12715,"mtime":1731318159203,"results":"2060","hashOfConfig":"1071"},{"size":503,"mtime":1731318159227,"results":"2061","hashOfConfig":"1071"},{"size":498,"mtime":1731318159227,"results":"2062","hashOfConfig":"1071"},{"size":164,"mtime":1731318159211,"results":"2063","hashOfConfig":"1071"},{"size":3848,"mtime":1731318159203,"results":"2064","hashOfConfig":"1071"},{"size":236,"mtime":1731318159299,"results":"2065","hashOfConfig":"1071"},{"size":3295,"mtime":1731318159203,"results":"2066","hashOfConfig":"1071"},{"size":129,"mtime":1731318159211,"results":"2067","hashOfConfig":"1071"},{"size":153,"mtime":1731318159211,"results":"2068","hashOfConfig":"1071"},{"size":4004,"mtime":1731318159211,"results":"2069","hashOfConfig":"1071"},{"size":2003,"mtime":1731318159199,"results":"2070","hashOfConfig":"1071"},{"size":7294,"mtime":1731318159243,"results":"2071","hashOfConfig":"1071"},{"size":259,"mtime":1731318159203,"results":"2072","hashOfConfig":"1071"},{"size":1292,"mtime":1731318159199,"results":"2073","hashOfConfig":"1071"},{"size":479,"mtime":1731318159235,"results":"2074","hashOfConfig":"1071"},{"size":389,"mtime":1731318159211,"results":"2075","hashOfConfig":"1071"},{"size":849,"mtime":1731318159203,"results":"2076","hashOfConfig":"1071"},{"size":229,"mtime":1731318159211,"results":"2077","hashOfConfig":"1071"},{"size":484,"mtime":1731318159235,"results":"2078","hashOfConfig":"1071"},{"size":2216,"mtime":1731318159259,"results":"2079","hashOfConfig":"1071"},{"size":7287,"mtime":1731318159307,"results":"2080","hashOfConfig":"1071"},{"size":2018,"mtime":1731318159255,"results":"2081","hashOfConfig":"1071"},{"size":263,"mtime":1731318159231,"results":"2082","hashOfConfig":"1071"},{"size":360,"mtime":1731318159203,"results":"2083","hashOfConfig":"1071"},{"size":433,"mtime":1731318159231,"results":"2084","hashOfConfig":"1071"},{"size":436,"mtime":1731318159231,"results":"2085","hashOfConfig":"1071"},{"size":358,"mtime":1731318159231,"results":"2086","hashOfConfig":"1071"},{"size":331,"mtime":1731318159295,"results":"2087","hashOfConfig":"1071"},{"size":1360,"mtime":1731318159255,"results":"2088","hashOfConfig":"1071"},{"size":10039,"mtime":1731318159279,"results":"2089","hashOfConfig":"1071"},{"size":235,"mtime":1731318159231,"results":"2090","hashOfConfig":"1071"},{"size":476,"mtime":1731318159231,"results":"2091","hashOfConfig":"1071"},{"size":1622,"mtime":1731318159275,"results":"2092","hashOfConfig":"1071"},{"size":4170,"mtime":1731318159275,"results":"2093","hashOfConfig":"1071"},{"size":10195,"mtime":1731318159287,"results":"2094","hashOfConfig":"1071"},{"size":3096,"mtime":1731318159287,"results":"2095","hashOfConfig":"1071"},{"size":9935,"mtime":1731318159283,"results":"2096","hashOfConfig":"1071"},{"size":9155,"mtime":1731318159287,"results":"2097","hashOfConfig":"1071"},{"size":457,"mtime":1731318159211,"results":"2098","hashOfConfig":"1071"},{"size":4053,"mtime":1731318159287,"results":"2099","hashOfConfig":"1071"},{"size":2806,"mtime":1731318159287,"results":"2100","hashOfConfig":"1071"},{"size":8629,"mtime":1731318159283,"results":"2101","hashOfConfig":"1071"},{"size":1748,"mtime":1731318159291,"results":"2102","hashOfConfig":"1071"},{"size":7649,"mtime":1731318159283,"results":"2103","hashOfConfig":"1071"},{"size":1753,"mtime":1731318159291,"results":"2104","hashOfConfig":"1071"},{"size":7517,"mtime":1731318159291,"results":"2105","hashOfConfig":"1071"},{"size":5149,"mtime":1731318159291,"results":"2106","hashOfConfig":"1071"},{"size":4287,"mtime":1731318159291,"results":"2107","hashOfConfig":"1071"},{"size":3071,"mtime":1731318159279,"results":"2108","hashOfConfig":"1071"},{"size":14195,"mtime":1731318159283,"results":"2109","hashOfConfig":"1071"},{"size":5391,"mtime":1731318159279,"results":"2110","hashOfConfig":"1071"},{"size":3605,"mtime":1731318159203,"results":"2111","hashOfConfig":"1071"},{"size":2244,"mtime":1731318159203,"results":"2112","hashOfConfig":"1071"},{"size":194,"mtime":1731318159279,"results":"2113","hashOfConfig":"1071"},{"size":11249,"mtime":1731318159307,"results":"2114","hashOfConfig":"1071"},{"size":7712,"mtime":1731318159307,"results":"2115","hashOfConfig":"1071"},{"size":1360,"mtime":1731318159283,"results":"2116","hashOfConfig":"1071"},{"size":1360,"mtime":1731318159303,"results":"2117","hashOfConfig":"1071"},{"size":3507,"mtime":1731318159207,"results":"2118","hashOfConfig":"1071"},{"size":336,"mtime":1731318159243,"results":"2119","hashOfConfig":"1071"},{"size":250,"mtime":1731318159227,"results":"2120","hashOfConfig":"1071"},{"size":311,"mtime":1731318159211,"results":"2121","hashOfConfig":"1071"},{"size":2339,"mtime":1731318159211,"results":"2122","hashOfConfig":"1071"},{"size":2467,"mtime":1731318159263,"results":"2123","hashOfConfig":"1071"},{"size":9600,"mtime":1731318159263,"results":"2124","hashOfConfig":"1071"},{"size":4799,"mtime":1731318159207,"results":"2125","hashOfConfig":"1071"},{"size":1564,"mtime":1731318159207,"results":"2126","hashOfConfig":"1071"},{"size":5328,"mtime":1731318159207,"results":"2127","hashOfConfig":"1071"},{"size":1426,"mtime":1731318159207,"results":"2128","hashOfConfig":"1071"},{"size":230,"mtime":1731318159231,"results":"2129","hashOfConfig":"1071"},{"size":256,"mtime":1731318159231,"results":"2130","hashOfConfig":"1071"},{"size":8744,"mtime":1731318159275,"results":"2131","hashOfConfig":"1071"},{"size":5567,"mtime":1731318159275,"results":"2132","hashOfConfig":"1071"},{"size":236,"mtime":1731318159279,"results":"2133","hashOfConfig":"1071"},{"size":2467,"mtime":1731318159283,"results":"2134","hashOfConfig":"1071"},{"size":9605,"mtime":1731318159283,"results":"2135","hashOfConfig":"1071"},{"size":2588,"mtime":1731318159263,"results":"2136","hashOfConfig":"1071"},{"size":237,"mtime":1731318159207,"results":"2137","hashOfConfig":"1071"},{"size":3748,"mtime":1731318159275,"results":"2138","hashOfConfig":"1071"},{"size":2591,"mtime":1731318159287,"results":"2139","hashOfConfig":"1071"},{"filePath":"2140","messages":"2141","suppressedMessages":"2142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14nf4ji",{"filePath":"2143","messages":"2144","suppressedMessages":"2145","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2146"},{"filePath":"2147","messages":"2148","suppressedMessages":"2149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2150","messages":"2151","suppressedMessages":"2152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2153","messages":"2154","suppressedMessages":"2155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2156","messages":"2157","suppressedMessages":"2158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2159","messages":"2160","suppressedMessages":"2161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2162","messages":"2163","suppressedMessages":"2164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2165","messages":"2166","suppressedMessages":"2167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2168","messages":"2169","suppressedMessages":"2170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2171"},{"filePath":"2172","messages":"2173","suppressedMessages":"2174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2175","messages":"2176","suppressedMessages":"2177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2178","messages":"2179","suppressedMessages":"2180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2181"},{"filePath":"2182","messages":"2183","suppressedMessages":"2184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2185","messages":"2186","suppressedMessages":"2187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2188"},{"filePath":"2189","messages":"2190","suppressedMessages":"2191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2192","messages":"2193","suppressedMessages":"2194","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2195"},{"filePath":"2196","messages":"2197","suppressedMessages":"2198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2199","messages":"2200","suppressedMessages":"2201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2202"},{"filePath":"2203","messages":"2204","suppressedMessages":"2205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2206","messages":"2207","suppressedMessages":"2208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2209","messages":"2210","suppressedMessages":"2211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2212","messages":"2213","suppressedMessages":"2214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2215","messages":"2216","suppressedMessages":"2217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2218","messages":"2219","suppressedMessages":"2220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2221","messages":"2222","suppressedMessages":"2223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2224","messages":"2225","suppressedMessages":"2226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2227","messages":"2228","suppressedMessages":"2229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2230","messages":"2231","suppressedMessages":"2232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2233","messages":"2234","suppressedMessages":"2235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2236","messages":"2237","suppressedMessages":"2238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2239","messages":"2240","suppressedMessages":"2241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2242","messages":"2243","suppressedMessages":"2244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2245","messages":"2246","suppressedMessages":"2247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2248","messages":"2249","suppressedMessages":"2250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2251","messages":"2252","suppressedMessages":"2253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2254","messages":"2255","suppressedMessages":"2256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2257","messages":"2258","suppressedMessages":"2259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2260","messages":"2261","suppressedMessages":"2262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2263","messages":"2264","suppressedMessages":"2265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2266","messages":"2267","suppressedMessages":"2268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2269","messages":"2270","suppressedMessages":"2271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2272","messages":"2273","suppressedMessages":"2274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2275","messages":"2276","suppressedMessages":"2277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2278","messages":"2279","suppressedMessages":"2280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2281","messages":"2282","suppressedMessages":"2283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2284","messages":"2285","suppressedMessages":"2286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2287","messages":"2288","suppressedMessages":"2289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2290","messages":"2291","suppressedMessages":"2292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2293","messages":"2294","suppressedMessages":"2295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2296","messages":"2297","suppressedMessages":"2298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2299","messages":"2300","suppressedMessages":"2301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2302","messages":"2303","suppressedMessages":"2304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2305","messages":"2306","suppressedMessages":"2307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2308","messages":"2309","suppressedMessages":"2310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2311","messages":"2312","suppressedMessages":"2313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2314","messages":"2315","suppressedMessages":"2316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2317","messages":"2318","suppressedMessages":"2319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2320","messages":"2321","suppressedMessages":"2322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2323","messages":"2324","suppressedMessages":"2325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2326","messages":"2327","suppressedMessages":"2328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2329","messages":"2330","suppressedMessages":"2331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2332","messages":"2333","suppressedMessages":"2334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2335","messages":"2336","suppressedMessages":"2337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2338","messages":"2339","suppressedMessages":"2340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2341","messages":"2342","suppressedMessages":"2343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2344","messages":"2345","suppressedMessages":"2346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2347","messages":"2348","suppressedMessages":"2349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2350","messages":"2351","suppressedMessages":"2352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2353","messages":"2354","suppressedMessages":"2355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2356","messages":"2357","suppressedMessages":"2358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2359","messages":"2360","suppressedMessages":"2361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2362","messages":"2363","suppressedMessages":"2364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2365","messages":"2366","suppressedMessages":"2367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2368","messages":"2369","suppressedMessages":"2370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2371","messages":"2372","suppressedMessages":"2373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2374","messages":"2375","suppressedMessages":"2376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2377","messages":"2378","suppressedMessages":"2379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2380","messages":"2381","suppressedMessages":"2382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2383","messages":"2384","suppressedMessages":"2385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2386","messages":"2387","suppressedMessages":"2388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2389","messages":"2390","suppressedMessages":"2391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2392","messages":"2393","suppressedMessages":"2394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2395","messages":"2396","suppressedMessages":"2397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2398","messages":"2399","suppressedMessages":"2400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2401","messages":"2402","suppressedMessages":"2403","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2404"},{"filePath":"2405","messages":"2406","suppressedMessages":"2407","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2408"},{"filePath":"2409","messages":"2410","suppressedMessages":"2411","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2412"},{"filePath":"2413","messages":"2414","suppressedMessages":"2415","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2416"},{"filePath":"2417","messages":"2418","suppressedMessages":"2419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2420","messages":"2421","suppressedMessages":"2422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2423","messages":"2424","suppressedMessages":"2425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2426","messages":"2427","suppressedMessages":"2428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2429","messages":"2430","suppressedMessages":"2431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2432","messages":"2433","suppressedMessages":"2434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2435","messages":"2436","suppressedMessages":"2437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2438","messages":"2439","suppressedMessages":"2440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2441","messages":"2442","suppressedMessages":"2443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2444","messages":"2445","suppressedMessages":"2446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2447","messages":"2448","suppressedMessages":"2449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2450","messages":"2451","suppressedMessages":"2452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2453","messages":"2454","suppressedMessages":"2455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2456","messages":"2457","suppressedMessages":"2458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2459","messages":"2460","suppressedMessages":"2461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2462","messages":"2463","suppressedMessages":"2464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2465","messages":"2466","suppressedMessages":"2467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2468","messages":"2469","suppressedMessages":"2470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2471","messages":"2472","suppressedMessages":"2473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2474","messages":"2475","suppressedMessages":"2476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2477","messages":"2478","suppressedMessages":"2479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2480","messages":"2481","suppressedMessages":"2482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2483","messages":"2484","suppressedMessages":"2485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2486","messages":"2487","suppressedMessages":"2488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2489","messages":"2490","suppressedMessages":"2491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2492","messages":"2493","suppressedMessages":"2494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2495","messages":"2496","suppressedMessages":"2497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2498","messages":"2499","suppressedMessages":"2500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2501","messages":"2502","suppressedMessages":"2503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2504","messages":"2505","suppressedMessages":"2506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2507","messages":"2508","suppressedMessages":"2509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2510","messages":"2511","suppressedMessages":"2512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2513","messages":"2514","suppressedMessages":"2515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2516","messages":"2517","suppressedMessages":"2518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2519","messages":"2520","suppressedMessages":"2521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2522","messages":"2523","suppressedMessages":"2524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2525","messages":"2526","suppressedMessages":"2527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2528","messages":"2529","suppressedMessages":"2530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2531","messages":"2532","suppressedMessages":"2533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2534","messages":"2535","suppressedMessages":"2536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2537","messages":"2538","suppressedMessages":"2539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2540","messages":"2541","suppressedMessages":"2542","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2543"},{"filePath":"2544","messages":"2545","suppressedMessages":"2546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2547","messages":"2548","suppressedMessages":"2549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2550","messages":"2551","suppressedMessages":"2552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2553","messages":"2554","suppressedMessages":"2555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2556","messages":"2557","suppressedMessages":"2558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2559","messages":"2560","suppressedMessages":"2561","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2562"},{"filePath":"2563","messages":"2564","suppressedMessages":"2565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2566","messages":"2567","suppressedMessages":"2568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2569","messages":"2570","suppressedMessages":"2571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2572","messages":"2573","suppressedMessages":"2574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2575","messages":"2576","suppressedMessages":"2577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2578","messages":"2579","suppressedMessages":"2580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2581","messages":"2582","suppressedMessages":"2583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2584","messages":"2585","suppressedMessages":"2586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2587","messages":"2588","suppressedMessages":"2589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2590","messages":"2591","suppressedMessages":"2592","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2593"},{"filePath":"2594","messages":"2595","suppressedMessages":"2596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2597","messages":"2598","suppressedMessages":"2599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2600","messages":"2601","suppressedMessages":"2602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2603","messages":"2604","suppressedMessages":"2605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2606","messages":"2607","suppressedMessages":"2608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2609","messages":"2610","suppressedMessages":"2611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2612","messages":"2613","suppressedMessages":"2614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2615","messages":"2616","suppressedMessages":"2617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2618","messages":"2619","suppressedMessages":"2620","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2621"},{"filePath":"2622","messages":"2623","suppressedMessages":"2624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2625","messages":"2626","suppressedMessages":"2627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2628","messages":"2629","suppressedMessages":"2630","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2631"},{"filePath":"2632","messages":"2633","suppressedMessages":"2634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2635","messages":"2636","suppressedMessages":"2637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2638","messages":"2639","suppressedMessages":"2640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2641","messages":"2642","suppressedMessages":"2643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2644","messages":"2645","suppressedMessages":"2646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2647","messages":"2648","suppressedMessages":"2649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2650","messages":"2651","suppressedMessages":"2652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2653","messages":"2654","suppressedMessages":"2655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2656","messages":"2657","suppressedMessages":"2658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2659","messages":"2660","suppressedMessages":"2661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2662","messages":"2663","suppressedMessages":"2664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2665","messages":"2666","suppressedMessages":"2667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2668","messages":"2669","suppressedMessages":"2670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2671","messages":"2672","suppressedMessages":"2673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2674","messages":"2675","suppressedMessages":"2676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2677","messages":"2678","suppressedMessages":"2679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2680","messages":"2681","suppressedMessages":"2682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2683","messages":"2684","suppressedMessages":"2685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2686","messages":"2687","suppressedMessages":"2688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2689","messages":"2690","suppressedMessages":"2691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2692","messages":"2693","suppressedMessages":"2694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2695","messages":"2696","suppressedMessages":"2697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2698","messages":"2699","suppressedMessages":"2700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2701","messages":"2702","suppressedMessages":"2703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2704","messages":"2705","suppressedMessages":"2706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2707","messages":"2708","suppressedMessages":"2709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2710","messages":"2711","suppressedMessages":"2712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2713","messages":"2714","suppressedMessages":"2715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2716","messages":"2717","suppressedMessages":"2718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2719","messages":"2720","suppressedMessages":"2721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2722","messages":"2723","suppressedMessages":"2724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2725","messages":"2726","suppressedMessages":"2727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2728","messages":"2729","suppressedMessages":"2730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2731","messages":"2732","suppressedMessages":"2733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2734","messages":"2735","suppressedMessages":"2736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2737","messages":"2738","suppressedMessages":"2739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2740","messages":"2741","suppressedMessages":"2742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2743","messages":"2744","suppressedMessages":"2745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2746","messages":"2747","suppressedMessages":"2748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2749","messages":"2750","suppressedMessages":"2751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2752","messages":"2753","suppressedMessages":"2754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2755","messages":"2756","suppressedMessages":"2757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2758","messages":"2759","suppressedMessages":"2760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2761","messages":"2762","suppressedMessages":"2763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2764","messages":"2765","suppressedMessages":"2766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2767","messages":"2768","suppressedMessages":"2769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2770","messages":"2771","suppressedMessages":"2772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2773","messages":"2774","suppressedMessages":"2775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2776","messages":"2777","suppressedMessages":"2778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2779","messages":"2780","suppressedMessages":"2781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2782","messages":"2783","suppressedMessages":"2784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2785","messages":"2786","suppressedMessages":"2787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2788","messages":"2789","suppressedMessages":"2790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2791","messages":"2792","suppressedMessages":"2793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2794","messages":"2795","suppressedMessages":"2796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2797","messages":"2798","suppressedMessages":"2799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2800","messages":"2801","suppressedMessages":"2802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2803","messages":"2804","suppressedMessages":"2805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2806","messages":"2807","suppressedMessages":"2808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2809","messages":"2810","suppressedMessages":"2811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2812","messages":"2813","suppressedMessages":"2814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2815","messages":"2816","suppressedMessages":"2817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2818","messages":"2819","suppressedMessages":"2820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2821","messages":"2822","suppressedMessages":"2823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2824","messages":"2825","suppressedMessages":"2826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2827","messages":"2828","suppressedMessages":"2829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2830","messages":"2831","suppressedMessages":"2832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2833","messages":"2834","suppressedMessages":"2835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2836","messages":"2837","suppressedMessages":"2838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2839","messages":"2840","suppressedMessages":"2841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2842","messages":"2843","suppressedMessages":"2844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2845","messages":"2846","suppressedMessages":"2847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2848","messages":"2849","suppressedMessages":"2850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2851","messages":"2852","suppressedMessages":"2853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2854","messages":"2855","suppressedMessages":"2856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2857","messages":"2858","suppressedMessages":"2859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2860","messages":"2861","suppressedMessages":"2862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2863","messages":"2864","suppressedMessages":"2865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2866","messages":"2867","suppressedMessages":"2868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2869","messages":"2870","suppressedMessages":"2871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2872","messages":"2873","suppressedMessages":"2874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2875","messages":"2876","suppressedMessages":"2877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2878","messages":"2879","suppressedMessages":"2880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2881","messages":"2882","suppressedMessages":"2883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2884","messages":"2885","suppressedMessages":"2886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2887","messages":"2888","suppressedMessages":"2889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2890","messages":"2891","suppressedMessages":"2892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2893","messages":"2894","suppressedMessages":"2895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2896","messages":"2897","suppressedMessages":"2898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2899","messages":"2900","suppressedMessages":"2901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2902","messages":"2903","suppressedMessages":"2904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2905","messages":"2906","suppressedMessages":"2907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2908","messages":"2909","suppressedMessages":"2910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2911","messages":"2912","suppressedMessages":"2913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2914","messages":"2915","suppressedMessages":"2916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2917","messages":"2918","suppressedMessages":"2919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2920","messages":"2921","suppressedMessages":"2922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2923","messages":"2924","suppressedMessages":"2925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2926","messages":"2927","suppressedMessages":"2928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2929","messages":"2930","suppressedMessages":"2931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2932","messages":"2933","suppressedMessages":"2934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2935","messages":"2936","suppressedMessages":"2937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2938","messages":"2939","suppressedMessages":"2940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2941","messages":"2942","suppressedMessages":"2943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2944","messages":"2945","suppressedMessages":"2946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2947","messages":"2948","suppressedMessages":"2949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2950","messages":"2951","suppressedMessages":"2952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2953","messages":"2954","suppressedMessages":"2955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2956","messages":"2957","suppressedMessages":"2958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2959","messages":"2960","suppressedMessages":"2961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2962","messages":"2963","suppressedMessages":"2964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2965","messages":"2966","suppressedMessages":"2967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2968","messages":"2969","suppressedMessages":"2970","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2971","messages":"2972","suppressedMessages":"2973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2974","messages":"2975","suppressedMessages":"2976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2977","messages":"2978","suppressedMessages":"2979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2980","messages":"2981","suppressedMessages":"2982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2983","messages":"2984","suppressedMessages":"2985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2986","messages":"2987","suppressedMessages":"2988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2989","messages":"2990","suppressedMessages":"2991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2992","messages":"2993","suppressedMessages":"2994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2995","messages":"2996","suppressedMessages":"2997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2998","messages":"2999","suppressedMessages":"3000","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3001","messages":"3002","suppressedMessages":"3003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3004","messages":"3005","suppressedMessages":"3006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3007","messages":"3008","suppressedMessages":"3009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3010","messages":"3011","suppressedMessages":"3012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3013","messages":"3014","suppressedMessages":"3015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3016","messages":"3017","suppressedMessages":"3018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3019","messages":"3020","suppressedMessages":"3021","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3022","messages":"3023","suppressedMessages":"3024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3025","messages":"3026","suppressedMessages":"3027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3028","messages":"3029","suppressedMessages":"3030","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3031","messages":"3032","suppressedMessages":"3033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3034","messages":"3035","suppressedMessages":"3036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3037","messages":"3038","suppressedMessages":"3039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3040","messages":"3041","suppressedMessages":"3042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3043","messages":"3044","suppressedMessages":"3045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3046","messages":"3047","suppressedMessages":"3048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3049","messages":"3050","suppressedMessages":"3051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3052","messages":"3053","suppressedMessages":"3054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3055","messages":"3056","suppressedMessages":"3057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3058","messages":"3059","suppressedMessages":"3060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3061","messages":"3062","suppressedMessages":"3063","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3064","messages":"3065","suppressedMessages":"3066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3067","messages":"3068","suppressedMessages":"3069","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3070","messages":"3071","suppressedMessages":"3072","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3073","messages":"3074","suppressedMessages":"3075","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3076","messages":"3077","suppressedMessages":"3078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3079","messages":"3080","suppressedMessages":"3081","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3082","messages":"3083","suppressedMessages":"3084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3085","messages":"3086","suppressedMessages":"3087","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3088","messages":"3089","suppressedMessages":"3090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3091","messages":"3092","suppressedMessages":"3093","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3094","messages":"3095","suppressedMessages":"3096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3097","messages":"3098","suppressedMessages":"3099","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3100","messages":"3101","suppressedMessages":"3102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3103","messages":"3104","suppressedMessages":"3105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3106","messages":"3107","suppressedMessages":"3108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3109","messages":"3110","suppressedMessages":"3111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3112","messages":"3113","suppressedMessages":"3114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3115","messages":"3116","suppressedMessages":"3117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3118","messages":"3119","suppressedMessages":"3120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3121","messages":"3122","suppressedMessages":"3123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3124","messages":"3125","suppressedMessages":"3126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3127","messages":"3128","suppressedMessages":"3129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3130","messages":"3131","suppressedMessages":"3132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3133","messages":"3134","suppressedMessages":"3135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3136","messages":"3137","suppressedMessages":"3138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3139","messages":"3140","suppressedMessages":"3141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3142"},{"filePath":"3143","messages":"3144","suppressedMessages":"3145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3146","messages":"3147","suppressedMessages":"3148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3149","messages":"3150","suppressedMessages":"3151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3152","messages":"3153","suppressedMessages":"3154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3155","messages":"3156","suppressedMessages":"3157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3158","messages":"3159","suppressedMessages":"3160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3161","messages":"3162","suppressedMessages":"3163","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3164"},{"filePath":"3165","messages":"3166","suppressedMessages":"3167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3168","messages":"3169","suppressedMessages":"3170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3171","messages":"3172","suppressedMessages":"3173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3174","messages":"3175","suppressedMessages":"3176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3177","messages":"3178","suppressedMessages":"3179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3180","messages":"3181","suppressedMessages":"3182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3183","messages":"3184","suppressedMessages":"3185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3186","messages":"3187","suppressedMessages":"3188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3189","messages":"3190","suppressedMessages":"3191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3192","messages":"3193","suppressedMessages":"3194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3195","messages":"3196","suppressedMessages":"3197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3198","messages":"3199","suppressedMessages":"3200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3201"},{"filePath":"3202","messages":"3203","suppressedMessages":"3204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3205"},{"filePath":"3206","messages":"3207","suppressedMessages":"3208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3209","messages":"3210","suppressedMessages":"3211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3212"},{"filePath":"3213","messages":"3214","suppressedMessages":"3215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3216"},{"filePath":"3217","messages":"3218","suppressedMessages":"3219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3220"},{"filePath":"3221","messages":"3222","suppressedMessages":"3223","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3224"},{"filePath":"3225","messages":"3226","suppressedMessages":"3227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3228"},{"filePath":"3229","messages":"3230","suppressedMessages":"3231","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3232"},{"filePath":"3233","messages":"3234","suppressedMessages":"3235","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3236"},{"filePath":"3237","messages":"3238","suppressedMessages":"3239","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3240"},{"filePath":"3241","messages":"3242","suppressedMessages":"3243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3244"},{"filePath":"3245","messages":"3246","suppressedMessages":"3247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3248","messages":"3249","suppressedMessages":"3250","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3251"},{"filePath":"3252","messages":"3253","suppressedMessages":"3254","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3255"},{"filePath":"3256","messages":"3257","suppressedMessages":"3258","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3259"},{"filePath":"3260","messages":"3261","suppressedMessages":"3262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3263"},{"filePath":"3264","messages":"3265","suppressedMessages":"3266","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3267"},{"filePath":"3268","messages":"3269","suppressedMessages":"3270","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3271"},{"filePath":"3272","messages":"3273","suppressedMessages":"3274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3275","messages":"3276","suppressedMessages":"3277","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3278"},{"filePath":"3279","messages":"3280","suppressedMessages":"3281","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3282"},{"filePath":"3283","messages":"3284","suppressedMessages":"3285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3286"},{"filePath":"3287","messages":"3288","suppressedMessages":"3289","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3290"},{"filePath":"3291","messages":"3292","suppressedMessages":"3293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3294"},{"filePath":"3295","messages":"3296","suppressedMessages":"3297","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3298"},{"filePath":"3299","messages":"3300","suppressedMessages":"3301","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3302"},{"filePath":"3303","messages":"3304","suppressedMessages":"3305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3306","messages":"3307","suppressedMessages":"3308","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3309"},{"filePath":"3310","messages":"3311","suppressedMessages":"3312","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3313"},{"filePath":"3314","messages":"3315","suppressedMessages":"3316","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3317"},{"filePath":"3318","messages":"3319","suppressedMessages":"3320","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3321"},{"filePath":"3322","messages":"3323","suppressedMessages":"3324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3325"},{"filePath":"3326","messages":"3327","suppressedMessages":"3328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3329"},{"filePath":"3330","messages":"3331","suppressedMessages":"3332","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3333"},{"filePath":"3334","messages":"3335","suppressedMessages":"3336","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3337"},{"filePath":"3338","messages":"3339","suppressedMessages":"3340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3341","messages":"3342","suppressedMessages":"3343","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3344"},{"filePath":"3345","messages":"3346","suppressedMessages":"3347","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3348"},{"filePath":"3349","messages":"3350","suppressedMessages":"3351","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3352"},{"filePath":"3353","messages":"3354","suppressedMessages":"3355","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3356"},{"filePath":"3357","messages":"3358","suppressedMessages":"3359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3360","messages":"3361","suppressedMessages":"3362","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3363"},{"filePath":"3364","messages":"3365","suppressedMessages":"3366","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3367"},{"filePath":"3368","messages":"3369","suppressedMessages":"3370","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3371"},{"filePath":"3372","messages":"3373","suppressedMessages":"3374","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3375"},{"filePath":"3376","messages":"3377","suppressedMessages":"3378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3379","messages":"3380","suppressedMessages":"3381","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3382"},{"filePath":"3383","messages":"3384","suppressedMessages":"3385","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3386"},{"filePath":"3387","messages":"3388","suppressedMessages":"3389","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3390"},{"filePath":"3391","messages":"3392","suppressedMessages":"3393","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3394"},{"filePath":"3395","messages":"3396","suppressedMessages":"3397","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3398"},{"filePath":"3399","messages":"3400","suppressedMessages":"3401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3402","messages":"3403","suppressedMessages":"3404","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3405"},{"filePath":"3406","messages":"3407","suppressedMessages":"3408","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3409"},{"filePath":"3410","messages":"3411","suppressedMessages":"3412","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3413"},{"filePath":"3414","messages":"3415","suppressedMessages":"3416","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3417"},{"filePath":"3418","messages":"3419","suppressedMessages":"3420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3421","messages":"3422","suppressedMessages":"3423","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3424"},{"filePath":"3425","messages":"3426","suppressedMessages":"3427","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3428"},{"filePath":"3429","messages":"3430","suppressedMessages":"3431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3432","messages":"3433","suppressedMessages":"3434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3435","messages":"3436","suppressedMessages":"3437","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3438"},{"filePath":"3439","messages":"3440","suppressedMessages":"3441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3442"},{"filePath":"3443","messages":"3444","suppressedMessages":"3445","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3446"},{"filePath":"3447","messages":"3448","suppressedMessages":"3449","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3450"},{"filePath":"3451","messages":"3452","suppressedMessages":"3453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3454"},{"filePath":"3455","messages":"3456","suppressedMessages":"3457","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3458"},{"filePath":"3459","messages":"3460","suppressedMessages":"3461","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3462"},{"filePath":"3463","messages":"3464","suppressedMessages":"3465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3466","messages":"3467","suppressedMessages":"3468","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3469"},{"filePath":"3470","messages":"3471","suppressedMessages":"3472","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3473"},{"filePath":"3474","messages":"3475","suppressedMessages":"3476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3477","messages":"3478","suppressedMessages":"3479","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3480"},{"filePath":"3481","messages":"3482","suppressedMessages":"3483","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3484"},{"filePath":"3485","messages":"3486","suppressedMessages":"3487","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3488"},{"filePath":"3489","messages":"3490","suppressedMessages":"3491","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3492"},{"filePath":"3493","messages":"3494","suppressedMessages":"3495","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3496"},{"filePath":"3497","messages":"3498","suppressedMessages":"3499","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3500"},{"filePath":"3501","messages":"3502","suppressedMessages":"3503","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3504"},{"filePath":"3505","messages":"3506","suppressedMessages":"3507","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3508"},{"filePath":"3509","messages":"3510","suppressedMessages":"3511","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3512"},{"filePath":"3513","messages":"3514","suppressedMessages":"3515","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3516"},{"filePath":"3517","messages":"3518","suppressedMessages":"3519","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3520"},{"filePath":"3521","messages":"3522","suppressedMessages":"3523","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3524"},{"filePath":"3525","messages":"3526","suppressedMessages":"3527","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3528"},{"filePath":"3529","messages":"3530","suppressedMessages":"3531","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3532"},{"filePath":"3533","messages":"3534","suppressedMessages":"3535","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3536"},{"filePath":"3537","messages":"3538","suppressedMessages":"3539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3540","messages":"3541","suppressedMessages":"3542","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3543"},{"filePath":"3544","messages":"3545","suppressedMessages":"3546","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3547"},{"filePath":"3548","messages":"3549","suppressedMessages":"3550","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3551"},{"filePath":"3552","messages":"3553","suppressedMessages":"3554","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3555"},{"filePath":"3556","messages":"3557","suppressedMessages":"3558","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3559"},{"filePath":"3560","messages":"3561","suppressedMessages":"3562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3563","messages":"3564","suppressedMessages":"3565","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3566"},{"filePath":"3567","messages":"3568","suppressedMessages":"3569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3570","messages":"3571","suppressedMessages":"3572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3573"},{"filePath":"3574","messages":"3575","suppressedMessages":"3576","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3577"},{"filePath":"3578","messages":"3579","suppressedMessages":"3580","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3581"},{"filePath":"3582","messages":"3583","suppressedMessages":"3584","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3585"},{"filePath":"3586","messages":"3587","suppressedMessages":"3588","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3589"},{"filePath":"3590","messages":"3591","suppressedMessages":"3592","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3593"},{"filePath":"3594","messages":"3595","suppressedMessages":"3596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3597","messages":"3598","suppressedMessages":"3599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3600"},{"filePath":"3601","messages":"3602","suppressedMessages":"3603","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3604"},{"filePath":"3605","messages":"3606","suppressedMessages":"3607","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3608"},{"filePath":"3609","messages":"3610","suppressedMessages":"3611","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3612"},{"filePath":"3613","messages":"3614","suppressedMessages":"3615","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3616"},{"filePath":"3617","messages":"3618","suppressedMessages":"3619","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3620"},{"filePath":"3621","messages":"3622","suppressedMessages":"3623","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3624"},{"filePath":"3625","messages":"3626","suppressedMessages":"3627","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3628"},{"filePath":"3629","messages":"3630","suppressedMessages":"3631","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3632"},{"filePath":"3633","messages":"3634","suppressedMessages":"3635","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3636"},{"filePath":"3637","messages":"3638","suppressedMessages":"3639","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3640"},{"filePath":"3641","messages":"3642","suppressedMessages":"3643","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3644"},{"filePath":"3645","messages":"3646","suppressedMessages":"3647","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3648"},{"filePath":"3649","messages":"3650","suppressedMessages":"3651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3652","messages":"3653","suppressedMessages":"3654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3655","messages":"3656","suppressedMessages":"3657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3658","messages":"3659","suppressedMessages":"3660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3661","messages":"3662","suppressedMessages":"3663","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3664"},{"filePath":"3665","messages":"3666","suppressedMessages":"3667","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3668"},{"filePath":"3669","messages":"3670","suppressedMessages":"3671","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3672"},{"filePath":"3673","messages":"3674","suppressedMessages":"3675","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3676"},{"filePath":"3677","messages":"3678","suppressedMessages":"3679","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3680"},{"filePath":"3681","messages":"3682","suppressedMessages":"3683","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3684"},{"filePath":"3685","messages":"3686","suppressedMessages":"3687","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3688"},{"filePath":"3689","messages":"3690","suppressedMessages":"3691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3692","messages":"3693","suppressedMessages":"3694","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3695"},{"filePath":"3696","messages":"3697","suppressedMessages":"3698","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3699"},{"filePath":"3700","messages":"3701","suppressedMessages":"3702","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3703"},{"filePath":"3704","messages":"3705","suppressedMessages":"3706","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3707"},{"filePath":"3708","messages":"3709","suppressedMessages":"3710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3711","messages":"3712","suppressedMessages":"3713","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3714"},{"filePath":"3715","messages":"3716","suppressedMessages":"3717","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3718"},{"filePath":"3719","messages":"3720","suppressedMessages":"3721","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3722"},{"filePath":"3723","messages":"3724","suppressedMessages":"3725","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3726"},{"filePath":"3727","messages":"3728","suppressedMessages":"3729","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3730"},{"filePath":"3731","messages":"3732","suppressedMessages":"3733","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3734"},{"filePath":"3735","messages":"3736","suppressedMessages":"3737","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3738"},{"filePath":"3739","messages":"3740","suppressedMessages":"3741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3742","messages":"3743","suppressedMessages":"3744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3745","messages":"3746","suppressedMessages":"3747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3748","messages":"3749","suppressedMessages":"3750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3751","messages":"3752","suppressedMessages":"3753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3754","messages":"3755","suppressedMessages":"3756","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3757"},{"filePath":"3758","messages":"3759","suppressedMessages":"3760","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3761"},{"filePath":"3762","messages":"3763","suppressedMessages":"3764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3765","messages":"3766","suppressedMessages":"3767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3768","messages":"3769","suppressedMessages":"3770","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3771"},{"filePath":"3772","messages":"3773","suppressedMessages":"3774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3775","messages":"3776","suppressedMessages":"3777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3778","messages":"3779","suppressedMessages":"3780","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3781"},{"filePath":"3782","messages":"3783","suppressedMessages":"3784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3785","messages":"3786","suppressedMessages":"3787","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3788"},{"filePath":"3789","messages":"3790","suppressedMessages":"3791","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3792"},{"filePath":"3793","messages":"3794","suppressedMessages":"3795","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3796"},{"filePath":"3797","messages":"3798","suppressedMessages":"3799","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3800"},{"filePath":"3801","messages":"3802","suppressedMessages":"3803","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3804"},{"filePath":"3805","messages":"3806","suppressedMessages":"3807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3808","messages":"3809","suppressedMessages":"3810","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3811"},{"filePath":"3812","messages":"3813","suppressedMessages":"3814","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3815"},{"filePath":"3816","messages":"3817","suppressedMessages":"3818","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3819"},{"filePath":"3820","messages":"3821","suppressedMessages":"3822","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3823"},{"filePath":"3824","messages":"3825","suppressedMessages":"3826","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3827"},{"filePath":"3828","messages":"3829","suppressedMessages":"3830","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3831"},{"filePath":"3832","messages":"3833","suppressedMessages":"3834","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3835"},{"filePath":"3836","messages":"3837","suppressedMessages":"3838","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3839"},{"filePath":"3840","messages":"3841","suppressedMessages":"3842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3843","messages":"3844","suppressedMessages":"3845","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3846"},{"filePath":"3847","messages":"3848","suppressedMessages":"3849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3850","messages":"3851","suppressedMessages":"3852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3853","messages":"3854","suppressedMessages":"3855","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3856","messages":"3857","suppressedMessages":"3858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3859","messages":"3860","suppressedMessages":"3861","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3862"},{"filePath":"3863","messages":"3864","suppressedMessages":"3865","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3866"},{"filePath":"3867","messages":"3868","suppressedMessages":"3869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3870","messages":"3871","suppressedMessages":"3872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3873","messages":"3874","suppressedMessages":"3875","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3876"},{"filePath":"3877","messages":"3878","suppressedMessages":"3879","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3880"},{"filePath":"3881","messages":"3882","suppressedMessages":"3883","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3884"},{"filePath":"3885","messages":"3886","suppressedMessages":"3887","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3888"},{"filePath":"3889","messages":"3890","suppressedMessages":"3891","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3892"},{"filePath":"3893","messages":"3894","suppressedMessages":"3895","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3896"},{"filePath":"3897","messages":"3898","suppressedMessages":"3899","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3900"},{"filePath":"3901","messages":"3902","suppressedMessages":"3903","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3904"},{"filePath":"3905","messages":"3906","suppressedMessages":"3907","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3908"},{"filePath":"3909","messages":"3910","suppressedMessages":"3911","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3912"},{"filePath":"3913","messages":"3914","suppressedMessages":"3915","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3916"},{"filePath":"3917","messages":"3918","suppressedMessages":"3919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3920","messages":"3921","suppressedMessages":"3922","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3923"},{"filePath":"3924","messages":"3925","suppressedMessages":"3926","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3927"},{"filePath":"3928","messages":"3929","suppressedMessages":"3930","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3931"},{"filePath":"3932","messages":"3933","suppressedMessages":"3934","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3935"},{"filePath":"3936","messages":"3937","suppressedMessages":"3938","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3939"},{"filePath":"3940","messages":"3941","suppressedMessages":"3942","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3943"},{"filePath":"3944","messages":"3945","suppressedMessages":"3946","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3947"},{"filePath":"3948","messages":"3949","suppressedMessages":"3950","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3951"},{"filePath":"3952","messages":"3953","suppressedMessages":"3954","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3955"},{"filePath":"3956","messages":"3957","suppressedMessages":"3958","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3959"},{"filePath":"3960","messages":"3961","suppressedMessages":"3962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3963","messages":"3964","suppressedMessages":"3965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3966","messages":"3967","suppressedMessages":"3968","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3969"},{"filePath":"3970","messages":"3971","suppressedMessages":"3972","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3973"},{"filePath":"3974","messages":"3975","suppressedMessages":"3976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3977","messages":"3978","suppressedMessages":"3979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3980","messages":"3981","suppressedMessages":"3982","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3983"},{"filePath":"3984","messages":"3985","suppressedMessages":"3986","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3987"},{"filePath":"3988","messages":"3989","suppressedMessages":"3990","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3991"},{"filePath":"3992","messages":"3993","suppressedMessages":"3994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3995","messages":"3996","suppressedMessages":"3997","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3998"},{"filePath":"3999","messages":"4000","suppressedMessages":"4001","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4002"},{"filePath":"4003","messages":"4004","suppressedMessages":"4005","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4006"},{"filePath":"4007","messages":"4008","suppressedMessages":"4009","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4010"},{"filePath":"4011","messages":"4012","suppressedMessages":"4013","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4014"},{"filePath":"4015","messages":"4016","suppressedMessages":"4017","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4018"},{"filePath":"4019","messages":"4020","suppressedMessages":"4021","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4022"},{"filePath":"4023","messages":"4024","suppressedMessages":"4025","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4026"},{"filePath":"4027","messages":"4028","suppressedMessages":"4029","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4030"},{"filePath":"4031","messages":"4032","suppressedMessages":"4033","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4034"},{"filePath":"4035","messages":"4036","suppressedMessages":"4037","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4038"},{"filePath":"4039","messages":"4040","suppressedMessages":"4041","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4042"},{"filePath":"4043","messages":"4044","suppressedMessages":"4045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4046","messages":"4047","suppressedMessages":"4048","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4049"},{"filePath":"4050","messages":"4051","suppressedMessages":"4052","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4053"},{"filePath":"4054","messages":"4055","suppressedMessages":"4056","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4057"},{"filePath":"4058","messages":"4059","suppressedMessages":"4060","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4061"},{"filePath":"4062","messages":"4063","suppressedMessages":"4064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4065","messages":"4066","suppressedMessages":"4067","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4068","messages":"4069","suppressedMessages":"4070","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4071"},{"filePath":"4072","messages":"4073","suppressedMessages":"4074","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4075"},{"filePath":"4076","messages":"4077","suppressedMessages":"4078","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4079"},{"filePath":"4080","messages":"4081","suppressedMessages":"4082","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4083"},{"filePath":"4084","messages":"4085","suppressedMessages":"4086","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4087"},{"filePath":"4088","messages":"4089","suppressedMessages":"4090","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4091"},{"filePath":"4092","messages":"4093","suppressedMessages":"4094","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4095"},{"filePath":"4096","messages":"4097","suppressedMessages":"4098","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4099"},{"filePath":"4100","messages":"4101","suppressedMessages":"4102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4103"},{"filePath":"4104","messages":"4105","suppressedMessages":"4106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4107"},{"filePath":"4108","messages":"4109","suppressedMessages":"4110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4111"},{"filePath":"4112","messages":"4113","suppressedMessages":"4114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4115"},{"filePath":"4116","messages":"4117","suppressedMessages":"4118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4119","messages":"4120","suppressedMessages":"4121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4122"},{"filePath":"4123","messages":"4124","suppressedMessages":"4125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4126"},{"filePath":"4127","messages":"4128","suppressedMessages":"4129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4130"},{"filePath":"4131","messages":"4132","suppressedMessages":"4133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4134"},{"filePath":"4135","messages":"4136","suppressedMessages":"4137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4138"},{"filePath":"4139","messages":"4140","suppressedMessages":"4141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4142"},{"filePath":"4143","messages":"4144","suppressedMessages":"4145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4146"},{"filePath":"4147","messages":"4148","suppressedMessages":"4149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4150"},{"filePath":"4151","messages":"4152","suppressedMessages":"4153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4154"},{"filePath":"4155","messages":"4156","suppressedMessages":"4157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4158"},{"filePath":"4159","messages":"4160","suppressedMessages":"4161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4162"},{"filePath":"4163","messages":"4164","suppressedMessages":"4165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4166"},{"filePath":"4167","messages":"4168","suppressedMessages":"4169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4170"},{"filePath":"4171","messages":"4172","suppressedMessages":"4173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4174","messages":"4175","suppressedMessages":"4176","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4177"},{"filePath":"4178","messages":"4179","suppressedMessages":"4180","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4181"},{"filePath":"4182","messages":"4183","suppressedMessages":"4184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4185","messages":"4186","suppressedMessages":"4187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4188","messages":"4189","suppressedMessages":"4190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4191"},{"filePath":"4192","messages":"4193","suppressedMessages":"4194","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4195"},{"filePath":"4196","messages":"4197","suppressedMessages":"4198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4199"},{"filePath":"4200","messages":"4201","suppressedMessages":"4202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4203"},{"filePath":"4204","messages":"4205","suppressedMessages":"4206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4207"},{"filePath":"4208","messages":"4209","suppressedMessages":"4210","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4211"},{"filePath":"4212","messages":"4213","suppressedMessages":"4214","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4215"},{"filePath":"4216","messages":"4217","suppressedMessages":"4218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4219","messages":"4220","suppressedMessages":"4221","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4222"},{"filePath":"4223","messages":"4224","suppressedMessages":"4225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4226"},{"filePath":"4227","messages":"4228","suppressedMessages":"4229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4230"},{"filePath":"4231","messages":"4232","suppressedMessages":"4233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4234"},{"filePath":"4235","messages":"4236","suppressedMessages":"4237","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4238"},{"filePath":"4239","messages":"4240","suppressedMessages":"4241","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4242"},{"filePath":"4243","messages":"4244","suppressedMessages":"4245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4246"},{"filePath":"4247","messages":"4248","suppressedMessages":"4249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4250","messages":"4251","suppressedMessages":"4252","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4253"},{"filePath":"4254","messages":"4255","suppressedMessages":"4256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4257"},{"filePath":"4258","messages":"4259","suppressedMessages":"4260","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4261"},{"filePath":"4262","messages":"4263","suppressedMessages":"4264","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4265"},{"filePath":"4266","messages":"4267","suppressedMessages":"4268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4269"},{"filePath":"4270","messages":"4271","suppressedMessages":"4272","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4273"},{"filePath":"4274","messages":"4275","suppressedMessages":"4276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4277"},{"filePath":"4278","messages":"4279","suppressedMessages":"4280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4281"},{"filePath":"4282","messages":"4283","suppressedMessages":"4284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4285"},{"filePath":"4286","messages":"4287","suppressedMessages":"4288","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4289"},{"filePath":"4290","messages":"4291","suppressedMessages":"4292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4293"},{"filePath":"4294","messages":"4295","suppressedMessages":"4296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4297"},{"filePath":"4298","messages":"4299","suppressedMessages":"4300","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4301"},{"filePath":"4302","messages":"4303","suppressedMessages":"4304","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4305"},{"filePath":"4306","messages":"4307","suppressedMessages":"4308","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4309"},{"filePath":"4310","messages":"4311","suppressedMessages":"4312","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4313"},{"filePath":"4314","messages":"4315","suppressedMessages":"4316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4317","messages":"4318","suppressedMessages":"4319","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4320"},{"filePath":"4321","messages":"4322","suppressedMessages":"4323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4324","messages":"4325","suppressedMessages":"4326","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4327"},{"filePath":"4328","messages":"4329","suppressedMessages":"4330","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4331"},{"filePath":"4332","messages":"4333","suppressedMessages":"4334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4335","messages":"4336","suppressedMessages":"4337","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4338"},{"filePath":"4339","messages":"4340","suppressedMessages":"4341","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4342"},{"filePath":"4343","messages":"4344","suppressedMessages":"4345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4346","messages":"4347","suppressedMessages":"4348","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4349"},{"filePath":"4350","messages":"4351","suppressedMessages":"4352","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4353"},{"filePath":"4354","messages":"4355","suppressedMessages":"4356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4357"},{"filePath":"4358","messages":"4359","suppressedMessages":"4360","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4361"},{"filePath":"4362","messages":"4363","suppressedMessages":"4364","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4365"},{"filePath":"4366","messages":"4367","suppressedMessages":"4368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4369"},{"filePath":"4370","messages":"4371","suppressedMessages":"4372","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4373"},{"filePath":"4374","messages":"4375","suppressedMessages":"4376","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4377"},{"filePath":"4378","messages":"4379","suppressedMessages":"4380","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4381"},{"filePath":"4382","messages":"4383","suppressedMessages":"4384","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4385"},{"filePath":"4386","messages":"4387","suppressedMessages":"4388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4389"},{"filePath":"4390","messages":"4391","suppressedMessages":"4392","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4393"},{"filePath":"4394","messages":"4395","suppressedMessages":"4396","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4397"},{"filePath":"4398","messages":"4399","suppressedMessages":"4400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4401","messages":"4402","suppressedMessages":"4403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4404","messages":"4405","suppressedMessages":"4406","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4407"},{"filePath":"4408","messages":"4409","suppressedMessages":"4410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4411","messages":"4412","suppressedMessages":"4413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4414","messages":"4415","suppressedMessages":"4416","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4417"},{"filePath":"4418","messages":"4419","suppressedMessages":"4420","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4421"},{"filePath":"4422","messages":"4423","suppressedMessages":"4424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4425","messages":"4426","suppressedMessages":"4427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4428","messages":"4429","suppressedMessages":"4430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4431","messages":"4432","suppressedMessages":"4433","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4434"},{"filePath":"4435","messages":"4436","suppressedMessages":"4437","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4438"},{"filePath":"4439","messages":"4440","suppressedMessages":"4441","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4442"},{"filePath":"4443","messages":"4444","suppressedMessages":"4445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4446","messages":"4447","suppressedMessages":"4448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4449","messages":"4450","suppressedMessages":"4451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4452","messages":"4453","suppressedMessages":"4454","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4455"},{"filePath":"4456","messages":"4457","suppressedMessages":"4458","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4459"},{"filePath":"4460","messages":"4461","suppressedMessages":"4462","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4463"},{"filePath":"4464","messages":"4465","suppressedMessages":"4466","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4467"},{"filePath":"4468","messages":"4469","suppressedMessages":"4470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4471","messages":"4472","suppressedMessages":"4473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4474","messages":"4475","suppressedMessages":"4476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4477","messages":"4478","suppressedMessages":"4479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4480","messages":"4481","suppressedMessages":"4482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4483","messages":"4484","suppressedMessages":"4485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4486","messages":"4487","suppressedMessages":"4488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4489","messages":"4490","suppressedMessages":"4491","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4492"},{"filePath":"4493","messages":"4494","suppressedMessages":"4495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4496","messages":"4497","suppressedMessages":"4498","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4499"},{"filePath":"4500","messages":"4501","suppressedMessages":"4502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4503","messages":"4504","suppressedMessages":"4505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4506","messages":"4507","suppressedMessages":"4508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4509","messages":"4510","suppressedMessages":"4511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4512","messages":"4513","suppressedMessages":"4514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4515","messages":"4516","suppressedMessages":"4517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4518","messages":"4519","suppressedMessages":"4520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4521","messages":"4522","suppressedMessages":"4523","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4524"},{"filePath":"4525","messages":"4526","suppressedMessages":"4527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4528","messages":"4529","suppressedMessages":"4530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4531","messages":"4532","suppressedMessages":"4533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4534","messages":"4535","suppressedMessages":"4536","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4537"},{"filePath":"4538","messages":"4539","suppressedMessages":"4540","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4541"},{"filePath":"4542","messages":"4543","suppressedMessages":"4544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4545","messages":"4546","suppressedMessages":"4547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4548","messages":"4549","suppressedMessages":"4550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4551","messages":"4552","suppressedMessages":"4553","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4554"},{"filePath":"4555","messages":"4556","suppressedMessages":"4557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4558","messages":"4559","suppressedMessages":"4560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4561","messages":"4562","suppressedMessages":"4563","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4564"},{"filePath":"4565","messages":"4566","suppressedMessages":"4567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4568","messages":"4569","suppressedMessages":"4570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4571","messages":"4572","suppressedMessages":"4573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4574","messages":"4575","suppressedMessages":"4576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4577","messages":"4578","suppressedMessages":"4579","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4580"},{"filePath":"4581","messages":"4582","suppressedMessages":"4583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4584","messages":"4585","suppressedMessages":"4586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4587","messages":"4588","suppressedMessages":"4589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4590","messages":"4591","suppressedMessages":"4592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4593","messages":"4594","suppressedMessages":"4595","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4596"},{"filePath":"4597","messages":"4598","suppressedMessages":"4599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4600","messages":"4601","suppressedMessages":"4602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4603","messages":"4604","suppressedMessages":"4605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4606","messages":"4607","suppressedMessages":"4608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4609","messages":"4610","suppressedMessages":"4611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4612","messages":"4613","suppressedMessages":"4614","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4615"},{"filePath":"4616","messages":"4617","suppressedMessages":"4618","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4619"},{"filePath":"4620","messages":"4621","suppressedMessages":"4622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4623","messages":"4624","suppressedMessages":"4625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4626","messages":"4627","suppressedMessages":"4628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4629","messages":"4630","suppressedMessages":"4631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4632","messages":"4633","suppressedMessages":"4634","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4635"},{"filePath":"4636","messages":"4637","suppressedMessages":"4638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4639","messages":"4640","suppressedMessages":"4641","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4642"},{"filePath":"4643","messages":"4644","suppressedMessages":"4645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4646","messages":"4647","suppressedMessages":"4648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4649","messages":"4650","suppressedMessages":"4651","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4652"},{"filePath":"4653","messages":"4654","suppressedMessages":"4655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4656","messages":"4657","suppressedMessages":"4658","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4659"},{"filePath":"4660","messages":"4661","suppressedMessages":"4662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4663","messages":"4664","suppressedMessages":"4665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4666","messages":"4667","suppressedMessages":"4668","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4669"},{"filePath":"4670","messages":"4671","suppressedMessages":"4672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4673","messages":"4674","suppressedMessages":"4675","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4676"},{"filePath":"4677","messages":"4678","suppressedMessages":"4679","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4680"},{"filePath":"4681","messages":"4682","suppressedMessages":"4683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4684","messages":"4685","suppressedMessages":"4686","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4687"},{"filePath":"4688","messages":"4689","suppressedMessages":"4690","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4691"},{"filePath":"4692","messages":"4693","suppressedMessages":"4694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4695","messages":"4696","suppressedMessages":"4697","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4698"},{"filePath":"4699","messages":"4700","suppressedMessages":"4701","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4702"},{"filePath":"4703","messages":"4704","suppressedMessages":"4705","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4706"},{"filePath":"4707","messages":"4708","suppressedMessages":"4709","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4710"},{"filePath":"4711","messages":"4712","suppressedMessages":"4713","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4714"},{"filePath":"4715","messages":"4716","suppressedMessages":"4717","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4718"},{"filePath":"4719","messages":"4720","suppressedMessages":"4721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4722","messages":"4723","suppressedMessages":"4724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4725","messages":"4726","suppressedMessages":"4727","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4728"},{"filePath":"4729","messages":"4730","suppressedMessages":"4731","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4732"},{"filePath":"4733","messages":"4734","suppressedMessages":"4735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4736","messages":"4737","suppressedMessages":"4738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4739","messages":"4740","suppressedMessages":"4741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4742","messages":"4743","suppressedMessages":"4744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4745","messages":"4746","suppressedMessages":"4747","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4748"},{"filePath":"4749","messages":"4750","suppressedMessages":"4751","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4752"},{"filePath":"4753","messages":"4754","suppressedMessages":"4755","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4756"},{"filePath":"4757","messages":"4758","suppressedMessages":"4759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4760","messages":"4761","suppressedMessages":"4762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4763","messages":"4764","suppressedMessages":"4765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4766","messages":"4767","suppressedMessages":"4768","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4769"},{"filePath":"4770","messages":"4771","suppressedMessages":"4772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4773","messages":"4774","suppressedMessages":"4775","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4776"},{"filePath":"4777","messages":"4778","suppressedMessages":"4779","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4780"},{"filePath":"4781","messages":"4782","suppressedMessages":"4783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4784","messages":"4785","suppressedMessages":"4786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4787","messages":"4788","suppressedMessages":"4789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4790","messages":"4791","suppressedMessages":"4792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4793","messages":"4794","suppressedMessages":"4795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4796","messages":"4797","suppressedMessages":"4798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4799","messages":"4800","suppressedMessages":"4801","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4802","messages":"4803","suppressedMessages":"4804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4805","messages":"4806","suppressedMessages":"4807","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4808"},{"filePath":"4809","messages":"4810","suppressedMessages":"4811","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4812"},{"filePath":"4813","messages":"4814","suppressedMessages":"4815","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4816"},{"filePath":"4817","messages":"4818","suppressedMessages":"4819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4820","messages":"4821","suppressedMessages":"4822","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4823"},{"filePath":"4824","messages":"4825","suppressedMessages":"4826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4827","messages":"4828","suppressedMessages":"4829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4830","messages":"4831","suppressedMessages":"4832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4833","messages":"4834","suppressedMessages":"4835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4836","messages":"4837","suppressedMessages":"4838","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4839"},{"filePath":"4840","messages":"4841","suppressedMessages":"4842","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4843"},{"filePath":"4844","messages":"4845","suppressedMessages":"4846","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4847"},{"filePath":"4848","messages":"4849","suppressedMessages":"4850","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4851"},{"filePath":"4852","messages":"4853","suppressedMessages":"4854","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4855"},{"filePath":"4856","messages":"4857","suppressedMessages":"4858","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4859"},{"filePath":"4860","messages":"4861","suppressedMessages":"4862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4863","messages":"4864","suppressedMessages":"4865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4866","messages":"4867","suppressedMessages":"4868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4869","messages":"4870","suppressedMessages":"4871","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4872"},{"filePath":"4873","messages":"4874","suppressedMessages":"4875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4876","messages":"4877","suppressedMessages":"4878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4879","messages":"4880","suppressedMessages":"4881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4882","messages":"4883","suppressedMessages":"4884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4885","messages":"4886","suppressedMessages":"4887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4888","messages":"4889","suppressedMessages":"4890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4891","messages":"4892","suppressedMessages":"4893","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4894"},{"filePath":"4895","messages":"4896","suppressedMessages":"4897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4898","messages":"4899","suppressedMessages":"4900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4901","messages":"4902","suppressedMessages":"4903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4904","messages":"4905","suppressedMessages":"4906","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4907"},{"filePath":"4908","messages":"4909","suppressedMessages":"4910","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4911"},{"filePath":"4912","messages":"4913","suppressedMessages":"4914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4915","messages":"4916","suppressedMessages":"4917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4918","messages":"4919","suppressedMessages":"4920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4921","messages":"4922","suppressedMessages":"4923","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4924"},{"filePath":"4925","messages":"4926","suppressedMessages":"4927","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4928"},{"filePath":"4929","messages":"4930","suppressedMessages":"4931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4932","messages":"4933","suppressedMessages":"4934","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4935"},{"filePath":"4936","messages":"4937","suppressedMessages":"4938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4939","messages":"4940","suppressedMessages":"4941","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4942"},{"filePath":"4943","messages":"4944","suppressedMessages":"4945","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4946"},{"filePath":"4947","messages":"4948","suppressedMessages":"4949","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4950"},{"filePath":"4951","messages":"4952","suppressedMessages":"4953","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4954"},{"filePath":"4955","messages":"4956","suppressedMessages":"4957","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4958"},{"filePath":"4959","messages":"4960","suppressedMessages":"4961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4962","messages":"4963","suppressedMessages":"4964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4965","messages":"4966","suppressedMessages":"4967","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4968"},{"filePath":"4969","messages":"4970","suppressedMessages":"4971","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4972"},{"filePath":"4973","messages":"4974","suppressedMessages":"4975","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4976","messages":"4977","suppressedMessages":"4978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4979","messages":"4980","suppressedMessages":"4981","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4982"},{"filePath":"4983","messages":"4984","suppressedMessages":"4985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4986","messages":"4987","suppressedMessages":"4988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"4989","messages":"4990","suppressedMessages":"4991","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4992"},{"filePath":"4993","messages":"4994","suppressedMessages":"4995","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4996"},{"filePath":"4997","messages":"4998","suppressedMessages":"4999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5000","messages":"5001","suppressedMessages":"5002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5003","messages":"5004","suppressedMessages":"5005","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5006"},{"filePath":"5007","messages":"5008","suppressedMessages":"5009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5010","messages":"5011","suppressedMessages":"5012","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5013"},{"filePath":"5014","messages":"5015","suppressedMessages":"5016","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5017"},{"filePath":"5018","messages":"5019","suppressedMessages":"5020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5021","messages":"5022","suppressedMessages":"5023","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5024"},{"filePath":"5025","messages":"5026","suppressedMessages":"5027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5028","messages":"5029","suppressedMessages":"5030","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5031"},{"filePath":"5032","messages":"5033","suppressedMessages":"5034","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5035"},{"filePath":"5036","messages":"5037","suppressedMessages":"5038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5039","messages":"5040","suppressedMessages":"5041","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5042"},{"filePath":"5043","messages":"5044","suppressedMessages":"5045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5046","messages":"5047","suppressedMessages":"5048","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5049"},{"filePath":"5050","messages":"5051","suppressedMessages":"5052","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5053"},{"filePath":"5054","messages":"5055","suppressedMessages":"5056","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5057"},{"filePath":"5058","messages":"5059","suppressedMessages":"5060","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5061"},{"filePath":"5062","messages":"5063","suppressedMessages":"5064","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5065"},{"filePath":"5066","messages":"5067","suppressedMessages":"5068","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5069"},{"filePath":"5070","messages":"5071","suppressedMessages":"5072","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5073"},{"filePath":"5074","messages":"5075","suppressedMessages":"5076","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5077"},{"filePath":"5078","messages":"5079","suppressedMessages":"5080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5081","messages":"5082","suppressedMessages":"5083","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5084"},{"filePath":"5085","messages":"5086","suppressedMessages":"5087","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5088","messages":"5089","suppressedMessages":"5090","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5091"},{"filePath":"5092","messages":"5093","suppressedMessages":"5094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5095","messages":"5096","suppressedMessages":"5097","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5098","messages":"5099","suppressedMessages":"5100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5101"},{"filePath":"5102","messages":"5103","suppressedMessages":"5104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5105"},{"filePath":"5106","messages":"5107","suppressedMessages":"5108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5109","messages":"5110","suppressedMessages":"5111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5112","messages":"5113","suppressedMessages":"5114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5115","messages":"5116","suppressedMessages":"5117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5118","messages":"5119","suppressedMessages":"5120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5121","messages":"5122","suppressedMessages":"5123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5124","messages":"5125","suppressedMessages":"5126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5127"},{"filePath":"5128","messages":"5129","suppressedMessages":"5130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5131","messages":"5132","suppressedMessages":"5133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5134"},{"filePath":"5135","messages":"5136","suppressedMessages":"5137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5138","messages":"5139","suppressedMessages":"5140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5141","messages":"5142","suppressedMessages":"5143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5144","messages":"5145","suppressedMessages":"5146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5147","messages":"5148","suppressedMessages":"5149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5150","messages":"5151","suppressedMessages":"5152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5153","messages":"5154","suppressedMessages":"5155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5156"},{"filePath":"5157","messages":"5158","suppressedMessages":"5159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5160","messages":"5161","suppressedMessages":"5162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5163"},{"filePath":"5164","messages":"5165","suppressedMessages":"5166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5167"},{"filePath":"5168","messages":"5169","suppressedMessages":"5170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5171"},{"filePath":"5172","messages":"5173","suppressedMessages":"5174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5175","messages":"5176","suppressedMessages":"5177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5178"},{"filePath":"5179","messages":"5180","suppressedMessages":"5181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5182"},{"filePath":"5183","messages":"5184","suppressedMessages":"5185","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5186"},{"filePath":"5187","messages":"5188","suppressedMessages":"5189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5190"},{"filePath":"5191","messages":"5192","suppressedMessages":"5193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5194"},{"filePath":"5195","messages":"5196","suppressedMessages":"5197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5198"},{"filePath":"5199","messages":"5200","suppressedMessages":"5201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"4718"},{"filePath":"5202","messages":"5203","suppressedMessages":"5204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5205"},{"filePath":"5206","messages":"5207","suppressedMessages":"5208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5209","messages":"5210","suppressedMessages":"5211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5212","messages":"5213","suppressedMessages":"5214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5215"},{"filePath":"5216","messages":"5217","suppressedMessages":"5218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5219"},{"filePath":"5220","messages":"5221","suppressedMessages":"5222","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5223"},{"filePath":"5224","messages":"5225","suppressedMessages":"5226","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5227"},{"filePath":"5228","messages":"5229","suppressedMessages":"5230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5231","messages":"5232","suppressedMessages":"5233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5234"},{"filePath":"5235","messages":"5236","suppressedMessages":"5237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5238","messages":"5239","suppressedMessages":"5240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5241","messages":"5242","suppressedMessages":"5243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5244","messages":"5245","suppressedMessages":"5246","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5247"},{"filePath":"5248","messages":"5249","suppressedMessages":"5250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5251","messages":"5252","suppressedMessages":"5253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5254","messages":"5255","suppressedMessages":"5256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5257","messages":"5258","suppressedMessages":"5259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5260","messages":"5261","suppressedMessages":"5262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5263","messages":"5264","suppressedMessages":"5265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5266","messages":"5267","suppressedMessages":"5268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5269"},{"filePath":"5270","messages":"5271","suppressedMessages":"5272","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5273"},{"filePath":"5274","messages":"5275","suppressedMessages":"5276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5277","messages":"5278","suppressedMessages":"5279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5280"},{"filePath":"5281","messages":"5282","suppressedMessages":"5283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5284"},{"filePath":"5285","messages":"5286","suppressedMessages":"5287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5288"},{"filePath":"5289","messages":"5290","suppressedMessages":"5291","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5292"},{"filePath":"5293","messages":"5294","suppressedMessages":"5295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5296","messages":"5297","suppressedMessages":"5298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5299","messages":"5300","suppressedMessages":"5301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5302","messages":"5303","suppressedMessages":"5304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5305","messages":"5306","suppressedMessages":"5307","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5308"},{"filePath":"5309","messages":"5310","suppressedMessages":"5311","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5215"},{"filePath":"5312","messages":"5313","suppressedMessages":"5314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5315"},{"filePath":"5316","messages":"5317","suppressedMessages":"5318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5319","messages":"5320","suppressedMessages":"5321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5322","messages":"5323","suppressedMessages":"5324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5325"},{"filePath":"5326","messages":"5327","suppressedMessages":"5328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5329","messages":"5330","suppressedMessages":"5331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5332","messages":"5333","suppressedMessages":"5334","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5335"},{"filePath":"5336","messages":"5337","suppressedMessages":"5338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5339"},{"filePath":"5340","messages":"5341","suppressedMessages":"5342","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5343"},{"filePath":"5344","messages":"5345","suppressedMessages":"5346","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5347"},{"filePath":"5348","messages":"5349","suppressedMessages":"5350","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5351"},{"filePath":"5352","messages":"5353","suppressedMessages":"5354","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5355"},{"filePath":"5356","messages":"5357","suppressedMessages":"5358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5359"},{"filePath":"5360","messages":"5361","suppressedMessages":"5362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5363"},{"filePath":"5364","messages":"5365","suppressedMessages":"5366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5367","messages":"5368","suppressedMessages":"5369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5370","messages":"5371","suppressedMessages":"5372","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5373"},{"filePath":"5374","messages":"5375","suppressedMessages":"5376","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5377"},{"filePath":"5378","messages":"5379","suppressedMessages":"5380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5381","messages":"5382","suppressedMessages":"5383","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5384"},{"filePath":"5385","messages":"5386","suppressedMessages":"5387","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5388"},{"filePath":"5389","messages":"5390","suppressedMessages":"5391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5392","messages":"5393","suppressedMessages":"5394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5395","messages":"5396","suppressedMessages":"5397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5398","messages":"5399","suppressedMessages":"5400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5401","messages":"5402","suppressedMessages":"5403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5404","messages":"5405","suppressedMessages":"5406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5407","messages":"5408","suppressedMessages":"5409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5410","messages":"5411","suppressedMessages":"5412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5413","messages":"5414","suppressedMessages":"5415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5416","messages":"5417","suppressedMessages":"5418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5419","messages":"5420","suppressedMessages":"5421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5422","messages":"5423","suppressedMessages":"5424","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5425"},{"filePath":"5426","messages":"5427","suppressedMessages":"5428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5429","messages":"5430","suppressedMessages":"5431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5432","messages":"5433","suppressedMessages":"5434","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5435"},{"filePath":"5436","messages":"5437","suppressedMessages":"5438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5439","messages":"5440","suppressedMessages":"5441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5442","messages":"5443","suppressedMessages":"5444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5445","messages":"5446","suppressedMessages":"5447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5448","messages":"5449","suppressedMessages":"5450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5451","messages":"5452","suppressedMessages":"5453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5454"},{"filePath":"5455","messages":"5456","suppressedMessages":"5457","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5458"},{"filePath":"5459","messages":"5460","suppressedMessages":"5461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5462","messages":"5463","suppressedMessages":"5464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5465"},{"filePath":"5466","messages":"5467","suppressedMessages":"5468","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5469"},{"filePath":"5470","messages":"5471","suppressedMessages":"5472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5473","messages":"5474","suppressedMessages":"5475","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5476"},{"filePath":"5477","messages":"5478","suppressedMessages":"5479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5480","messages":"5481","suppressedMessages":"5482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5483","messages":"5484","suppressedMessages":"5485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5486","messages":"5487","suppressedMessages":"5488","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5489"},{"filePath":"5490","messages":"5491","suppressedMessages":"5492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5493","messages":"5494","suppressedMessages":"5495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5496","messages":"5497","suppressedMessages":"5498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5499","messages":"5500","suppressedMessages":"5501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5502","messages":"5503","suppressedMessages":"5504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5505","messages":"5506","suppressedMessages":"5507","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5508"},{"filePath":"5509","messages":"5510","suppressedMessages":"5511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5512","messages":"5513","suppressedMessages":"5514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5515","messages":"5516","suppressedMessages":"5517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5518","messages":"5519","suppressedMessages":"5520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5521","messages":"5522","suppressedMessages":"5523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5524","messages":"5525","suppressedMessages":"5526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5527","messages":"5528","suppressedMessages":"5529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5530","messages":"5531","suppressedMessages":"5532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5533","messages":"5534","suppressedMessages":"5535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5536","messages":"5537","suppressedMessages":"5538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5539","messages":"5540","suppressedMessages":"5541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5542","messages":"5543","suppressedMessages":"5544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5545","messages":"5546","suppressedMessages":"5547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5548","messages":"5549","suppressedMessages":"5550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5551","messages":"5552","suppressedMessages":"5553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5554","messages":"5555","suppressedMessages":"5556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5557","messages":"5558","suppressedMessages":"5559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5560","messages":"5561","suppressedMessages":"5562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5563","messages":"5564","suppressedMessages":"5565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5566","messages":"5567","suppressedMessages":"5568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5569","messages":"5570","suppressedMessages":"5571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5572","messages":"5573","suppressedMessages":"5574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5575","messages":"5576","suppressedMessages":"5577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5578","messages":"5579","suppressedMessages":"5580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5581","messages":"5582","suppressedMessages":"5583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5584","messages":"5585","suppressedMessages":"5586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5587","messages":"5588","suppressedMessages":"5589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5590","messages":"5591","suppressedMessages":"5592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5593","messages":"5594","suppressedMessages":"5595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5596","messages":"5597","suppressedMessages":"5598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5599","messages":"5600","suppressedMessages":"5601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5602","messages":"5603","suppressedMessages":"5604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5605","messages":"5606","suppressedMessages":"5607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5608","messages":"5609","suppressedMessages":"5610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5611","messages":"5612","suppressedMessages":"5613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5614","messages":"5615","suppressedMessages":"5616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5617","messages":"5618","suppressedMessages":"5619","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5620"},{"filePath":"5621","messages":"5622","suppressedMessages":"5623","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5624"},{"filePath":"5625","messages":"5626","suppressedMessages":"5627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5628","messages":"5629","suppressedMessages":"5630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5631","messages":"5632","suppressedMessages":"5633","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5634"},{"filePath":"5635","messages":"5636","suppressedMessages":"5637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5638","messages":"5639","suppressedMessages":"5640","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5641"},{"filePath":"5642","messages":"5643","suppressedMessages":"5644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5645","messages":"5646","suppressedMessages":"5647","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5648"},{"filePath":"5649","messages":"5650","suppressedMessages":"5651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5652","messages":"5653","suppressedMessages":"5654","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5655"},{"filePath":"5656","messages":"5657","suppressedMessages":"5658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5659","messages":"5660","suppressedMessages":"5661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5662","messages":"5663","suppressedMessages":"5664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5665","messages":"5666","suppressedMessages":"5667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5668","messages":"5669","suppressedMessages":"5670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5671","messages":"5672","suppressedMessages":"5673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5674","messages":"5675","suppressedMessages":"5676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5677","messages":"5678","suppressedMessages":"5679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5680","messages":"5681","suppressedMessages":"5682","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5683"},{"filePath":"5684","messages":"5685","suppressedMessages":"5686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5687","messages":"5688","suppressedMessages":"5689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5690","messages":"5691","suppressedMessages":"5692","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5693"},{"filePath":"5694","messages":"5695","suppressedMessages":"5696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5697","messages":"5698","suppressedMessages":"5699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5700","messages":"5701","suppressedMessages":"5702","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5703"},{"filePath":"5704","messages":"5705","suppressedMessages":"5706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5707","messages":"5708","suppressedMessages":"5709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5710","messages":"5711","suppressedMessages":"5712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5713","messages":"5714","suppressedMessages":"5715","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5716"},{"filePath":"5717","messages":"5718","suppressedMessages":"5719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5720","messages":"5721","suppressedMessages":"5722","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5723"},{"filePath":"5724","messages":"5725","suppressedMessages":"5726","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5727","messages":"5728","suppressedMessages":"5729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5730","messages":"5731","suppressedMessages":"5732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5733","messages":"5734","suppressedMessages":"5735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5736","messages":"5737","suppressedMessages":"5738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5739","messages":"5740","suppressedMessages":"5741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5742","messages":"5743","suppressedMessages":"5744","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5745"},{"filePath":"5746","messages":"5747","suppressedMessages":"5748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5749","messages":"5750","suppressedMessages":"5751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5752","messages":"5753","suppressedMessages":"5754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5755","messages":"5756","suppressedMessages":"5757","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5758"},{"filePath":"5759","messages":"5760","suppressedMessages":"5761","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5762"},{"filePath":"5763","messages":"5764","suppressedMessages":"5765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5766","messages":"5767","suppressedMessages":"5768","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"5769","messages":"5770","suppressedMessages":"5771","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"5772"},"/home/mostafa/Magde/new/frontadminreact/src/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/app.js",["5773","5774","5775","5776","5777","5778","5779"],[],"import Loading from 'components/loading';\nimport PageLoading from 'components/pageLoading';\nimport i18n from 'configs/i18next';\nimport { PathLogout } from 'context/path-logout';\nimport { ProtectedRoute } from 'context/protected-route';\nimport AppLayout from 'layout/app-layout';\nimport { WelcomeLayout } from 'layout/welcome-layout';\nimport Providers from 'providers';\nimport { Suspense, useEffect, useState } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport { AllRoutes } from 'routes';\nimport informationService from 'services/rest/information';\nimport GlobalSettings from 'views/global-settings/global-settings';\nimport Login from 'views/login';\nimport NotFound from 'views/not-found';\nimport Welcome from 'views/welcome/welcome';\nimport { batch, useDispatch, useSelector } from 'react-redux';\nimport { getChat } from './firebase';\nimport { removeCurrentChat, setChats, setMessages } from './redux/slices/chat';\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const currentUserId = useSelector((state) => state.auth?.user?.id);\n  const dispatch = useDispatch();\n\n  function fetchTranslations() {\n    const params = { lang: i18n.language };\n    setLoading(true);\n    informationService\n      .translations(params)\n      .then(({ data }) =>\n        i18n.addResourceBundle(i18n.language, 'translation', data),\n      )\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchTranslations();\n  }, []);\n\n  return (\n    <Providers>\n      <Router>\n        <Routes>\n          <Route\n            index\n            path='/login'\n            element={\n              <PathLogout>\n                <Login />\n              </PathLogout>\n            }\n          />\n          <Route\n            path='/welcome'\n            element={\n              <WelcomeLayout>\n                <Welcome />\n              </WelcomeLayout>\n            }\n          />\n          <Route\n            path='/installation'\n            element={\n              <WelcomeLayout>\n                <GlobalSettings />\n              </WelcomeLayout>\n            }\n          />\n          <Route\n            path=''\n            element={\n              <ProtectedRoute>\n                <AppLayout />\n              </ProtectedRoute>\n            }\n          >\n            <Route path='/' element={<Navigate to='dashboard' />} />\n            {AllRoutes.map(({ path, component: Component }) => (\n              <Route key={path} path={path} element={<Component />} />\n            ))}\n          </Route>\n          <Route\n            path='*'\n            element={\n              <Suspense fallback={<Loading />}>\n                <NotFound />\n              </Suspense>\n            }\n          />\n        </Routes>\n        <ToastContainer\n          className='antd-toast'\n          position='top-right'\n          autoClose={2500}\n          hideProgressBar\n          closeOnClick\n          pauseOnHover\n          draggable\n        />\n        {loading && <PageLoading />}\n      </Router>\n    </Providers>\n  );\n};\nexport default App;\n","/home/mostafa/Magde/new/frontadminreact/src/redux/store.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/context/context.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/context/report.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/pageLoading.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/firebase.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/rootReducer.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/chat.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/context/path-logout.js",["5780"],[],"import { useEffect } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport installationService from '../services/installation';\nimport { shallowEqual } from 'react-redux';\n\nexport const PathLogout = ({ children }) => {\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const menuActive = useSelector((list) => list.menu.activeMenu, shallowEqual);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    installationService\n      .checkInitFile()\n      .then(() => console.log('file found'))\n      .catch(() => {\n        navigate('/welcome');\n      });\n  }, []);\n\n  if (user) {\n    return <Navigate to={`/${menuActive ? menuActive.url : ''}`} replace />;\n  }\n\n  return children;\n};\n","/home/mostafa/Magde/new/frontadminreact/src/context/protected-route.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/loading.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/layout/welcome-layout.js",["5781"],[],"import React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { shallowEqual } from 'react-redux';\nimport installationService from '../services/installation';\nimport Loading from '../components/loading';\n\nexport const WelcomeLayout = ({ children }) => {\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const menuActive = useSelector((list) => list.menu.activeMenu, shallowEqual);\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    installationService\n      .checkInitFile()\n      .then(() => navigate('/'))\n      .finally(() => setLoading(false));\n  }, []);\n\n  if (loading) {\n    <Loading />;\n  }\n\n  if (user) {\n    return <Navigate to={`/${menuActive ? menuActive.url : ''}`} replace />;\n  }\n\n  return children;\n};\n","/home/mostafa/Magde/new/frontadminreact/src/configs/i18next.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/layout/app-layout.js",["5782","5783"],[],"import React, { useEffect, Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector, batch } from 'react-redux';\nimport { Layout } from 'antd';\nimport Sidebar from '../components/sidebar';\nimport TabMenu from '../components/tab-menu';\nimport ChatIcons from '../views/chat/chat-icons';\nimport Footer from '../components/footer';\nimport languagesService from '../services/languages';\nimport { setLangugages, setDefaultLanguage } from '../redux/slices/formLang';\nimport { fetchAllShops } from '../redux/slices/allShops';\nimport { fetchCurrencies, fetchRestCurrencies } from '../redux/slices/currency';\nimport { data } from '../configs/menu-config';\nimport { setUserData } from '../redux/slices/auth';\nimport Loading from '../components/loading';\nimport { fetchMyShop } from '../redux/slices/myShop';\nimport SubscriptionsDate from '../components/subscriptions-date';\nimport ParcelFloat from 'views/parcel-order/parcel-float';\nconst { Content } = Layout;\n\nconst AppLayout = () => {\n  const dispatch = useDispatch();\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const { direction, navCollapsed } = useSelector(\n    (state) => state.theme.theme,\n    shallowEqual,\n  );\n\n  const fetchLanguages = () => {\n    languagesService.getAllActive().then(({ data }) => {\n      batch(() => {\n        dispatch(setLangugages(data));\n        dispatch(\n          setDefaultLanguage(\n            data?.find((item) => item?.default)?.locale || 'en',\n          ),\n        );\n      });\n    });\n  };\n\n  useEffect(() => {\n    const body = {\n      page: 1,\n      perPage: 1,\n      status: 'approved',\n    };\n    if (!languages.length) {\n      fetchLanguages();\n    }\n    if (user?.role === 'seller' || user?.role === 'moderator') {\n      dispatch(fetchMyShop());\n    }\n    if (user?.role === 'admin' || user?.role === 'manager') {\n      dispatch(fetchAllShops(body));\n      dispatch(fetchCurrencies());\n    } else {\n      dispatch(fetchRestCurrencies());\n    }\n  }, []);\n\n  useEffect(() => {\n    // for development purpose only\n    const userObj = {\n      ...user,\n      urls: data[user.role],\n    };\n    dispatch(setUserData(userObj));\n  }, []);\n\n  const getLayoutGutter = () => {\n    // return navCollapsed ? SIDE_NAV_COLLAPSED_WIDTH : SIDE_NAV_WIDTH\n    return navCollapsed ? 80 : 250;\n  };\n\n  const getLayoutDirectionGutter = () => {\n    if (direction === 'ltr') {\n      return { paddingLeft: getLayoutGutter(), minHeight: '100vh' };\n    }\n    if (direction === 'rtl') {\n      return { paddingRight: getLayoutGutter(), minHeight: '100vh' };\n    }\n    return { paddingLeft: getLayoutGutter() };\n  };\n\n  return (\n    <Layout className='app-container'>\n      <Sidebar />\n      <Layout className='app-layout' style={getLayoutDirectionGutter()}>\n        <TabMenu />\n        <Content className='p-3' style={{ flex: '1 0 70%' }}>\n          <Suspense fallback={<Loading />}>\n            <SubscriptionsDate />\n            <Outlet />\n          </Suspense>\n        </Content>\n        <Footer />\n      </Layout>\n      {user?.role === 'admin' ||\n      user?.role === 'seller' ||\n      user?.role === 'deliveryman' ? (\n        <ChatIcons />\n      ) : (\n        ''\n      )}\n      {user?.role === 'admin' && <ParcelFloat />}\n    </Layout>\n  );\n};\n\nexport default AppLayout;\n","/home/mostafa/Magde/new/frontadminreact/src/services/rest/information.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/global-settings.js",["5784","5785"],[],"import React, { useState } from 'react';\nimport { Steps, Card, Row } from 'antd';\nimport { steps } from './steps';\nimport ProjectInfo from './project-info';\nimport DatabaseInfo from './database-info';\nimport UserInfo from './user-info';\nimport License from './license';\nimport ProjectAccessInfo from './project-access-info';\n\nconst { Step } = Steps;\n\nexport default function GlobalSettings() {\n  const [current, setCurrent] = useState(0);\n  const next = () => setCurrent(current + 1);\n  const prev = () => setCurrent(current - 1);\n  const onChangeSteps = (value) => setCurrent(value);\n\n  return (\n    <div className='global-settings'>\n      <Card title='Project installation'>\n        <Steps current={current} className='mb-2'>\n          {steps.map((item) => (\n            <Step key={item.title} title={item.title} />\n          ))}\n        </Steps>\n      </Card>\n      <Row hidden={steps[current].content !== 'First-content'}>\n        <License next={next} />\n      </Row>\n      <Row hidden={steps[current].content !== 'Second-content'}>\n        <ProjectInfo next={next} />\n      </Row>\n      <Row hidden={steps[current].content !== 'Third-content'}>\n        <ProjectAccessInfo next={next} />\n      </Row>\n      <Row hidden={steps[current].content !== 'Fourth-content'}>\n        <DatabaseInfo next={next} />\n      </Row>\n      <Row hidden={steps[current].content !== 'Fifth-content'}>\n        <UserInfo />\n      </Row>\n      {/* <Row hidden={steps[current].content !== 'Sixth-content'}>\n        <SystemInfo next={next} />\n      </Row>\n      <Row hidden={steps[current].content !== 'Finish'}>\n        <Finish />\n      </Row> */}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/welcome/welcome.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/login/index.js",["5786"],[],"import React, { useEffect, useState } from 'react';\nimport { data } from 'configs/menu-config';\nimport { LockOutlined, MailOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Form,\n  Input,\n  notification,\n  Row,\n  Typography,\n} from 'antd';\nimport authService from '../../services/auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserData } from '../../redux/slices/auth';\nimport {\n  fetchRestSettings,\n  fetchSettings,\n} from '../../redux/slices/globalSettings';\nimport { useTranslation } from 'react-i18next';\nimport { PROJECT_NAME } from '../../configs/app-global';\nimport Recaptcha from 'components/recaptcha';\nimport { setMenu } from 'redux/slices/menu';\nconst { Title } = Typography;\n\nconst credentials = [\n  {\n    login: 'owner@githubit.com',\n    password: 'githubit',\n  },\n  {\n    login: 'manager@githubit.com',\n    password: 'manager',\n  },\n  {\n    login: 'sellers@githubit.com',\n    password: 'seller',\n  },\n  {\n    login: 'moderator@githubit.com',\n    password: 'moderator',\n  },\n  {\n    login: 'delivery@githubit.com',\n    password: 'delivery',\n  },\n  // {\n  //   login: 'temp@gmail.com',\n  //   password: '12345678',\n  // },\n];\n\nconst Login = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const { settings } = useSelector((state) => state.globalSettings);\n  const [recaptcha, setRecaptcha] = useState(null);\n  const handleRecaptchaChange = (value) => {\n    setRecaptcha(value);\n  };\n  const isDemo = Boolean(Number(settings?.is_demo));\n\n  const handleLogin = (values) => {\n    const body = {\n      password: values.password,\n    };\n    if (values.email.includes('@')) {\n      body.email = values.email;\n    } else {\n      body.phone = values.email.replace(/[^0-9]/g, '');\n    }\n    setLoading(true);\n    authService\n      .login(body)\n      .then((res) => {\n        const user = {\n          fullName: res.data.user.firstname + ' ' + res.data.user.lastname,\n          role: res.data.user.role,\n          urls: data[res.data.user.role],\n          img: res.data.user.img,\n          token: res.data.access_token,\n          email: res.data.user.email,\n          id: res.data.user.id,\n          shop_id: res.data.user?.shop?.id,\n          walletId: res.data?.user?.wallet?.id,\n        };\n        if (user.role === 'waiter') {\n          dispatch(\n            setMenu({\n              icon: 'user',\n              id: 'orders-board',\n              name: 'my.orders',\n              url: 'waiter/orders-board',\n            }),\n          );\n        }\n        if (user.role === 'user') {\n          notification.error({\n            message: t('ERROR_101'),\n          });\n          return;\n        }\n        localStorage.setItem('token', res.data.access_token);\n        dispatch(setUserData(user));\n        if (user.role === 'admin') {\n          dispatch(fetchSettings());\n        } else {\n          dispatch(fetchRestSettings());\n        }\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const copyCredentials = (event, item) => {\n    event.preventDefault();\n    form.setFieldsValue({ email: item.login, password: item.password });\n  };\n\n  useEffect(() => {\n    dispatch(fetchRestSettings());\n  }, []);\n\n  return (\n    <div className='login-container'>\n      <div className='container d-flex flex-column justify-content-center h-100 align-items-end'>\n        <Row justify='center'>\n          <Col>\n            <Card className='card'>\n              <div className='my-4 pl-4 pr-4 w-100'>\n                <div className='app-brand text-center'>\n                  <Title className='brand-logo'>\n                    {settings.title || PROJECT_NAME}\n                  </Title>\n                </div>\n                <Row justify='center'>\n                  <Col>\n                    <Form\n                      name='login-form'\n                      layout='vertical'\n                      form={form}\n                      onFinish={handleLogin}\n                      style={{ width: '420px' }}\n                    >\n                      <Form.Item\n                        name='email'\n                        label='Email'\n                        rules={[\n                          {\n                            required: true,\n                            message: 'Please input your Email!',\n                          },\n                        ]}\n                      >\n                        <Input\n                          prefix={\n                            <MailOutlined className='site-form-item-icon' />\n                          }\n                          placeholder='Email or phone'\n                        />\n                      </Form.Item>\n                      <Form.Item\n                        name='password'\n                        label='Password'\n                        rules={[\n                          {\n                            required: true,\n                            message: 'Please input your password!',\n                          },\n                        ]}\n                      >\n                        <Input.Password\n                          prefix={\n                            <LockOutlined className='site-form-item-icon' />\n                          }\n                          placeholder='Password'\n                        />\n                      </Form.Item>\n                      <Recaptcha onChange={handleRecaptchaChange} />\n                      <Form.Item className='login-input mt-4'>\n                        <Button\n                          type='primary'\n                          htmlType='submit'\n                          className='login-form-button'\n                          loading={loading}\n                          disabled={!Boolean(recaptcha)}\n                        >\n                          {t('Login')}\n                        </Button>\n                      </Form.Item>\n                      {isDemo && (\n                        <Descriptions bordered size='small'>\n                          {credentials.map((item, idx) => (\n                            <React.Fragment key={idx}>\n                              <Descriptions.Item span={2} label={item.login}>\n                                {item.password}\n                              </Descriptions.Item>\n                              <Descriptions.Item span={1}>\n                                <a\n                                  href='/'\n                                  className='copy-link'\n                                  onClick={(event) =>\n                                    copyCredentials(event, item)\n                                  }\n                                >\n                                  {t('Copy')}\n                                </a>\n                              </Descriptions.Item>\n                            </React.Fragment>\n                          ))}\n                        </Descriptions>\n                      )}{' '}\n                      {!isDemo && process.env.REACT_APP_IS_DEMO === 'true' && (\n                        <Descriptions size='small'>\n                          <Descriptions.Item span={4} label='Login'>\n                            {credentials[0].login}\n                          </Descriptions.Item>\n                          <Descriptions.Item span={4} label='Password'>\n                            {credentials[0].password}\n                          </Descriptions.Item>\n                        </Descriptions>\n                      )}\n                    </Form>\n                  </Col>\n                </Row>\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\nexport default Login;\n","/home/mostafa/Magde/new/frontadminreact/src/views/not-found/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/providers.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/configs/app-global.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/chat.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/auth.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/cart.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/user.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/formLang.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/menu.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/brand.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/banner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/restourant.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/unit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/orders.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/currency.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/discount.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveries.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/notification.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/blog.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryman.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/extraGroup.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/user.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/extraValue.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/payment.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/invite.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/client.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/faq.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/transaction.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/allShops.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/backup.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/productReview.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/orderReview.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/wallet.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/globalSettings.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/myShop.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/payoutRequests.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/theme.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/role.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/languages.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/point.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/orderStatus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopCategory.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/product-bonus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/subscriber.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-bonus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/messegeSubscriber.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/storeis.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/emailProvider.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopWorkingDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopClosedDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/refund.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/sum.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/count.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/branch.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/delivery-statistic.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/addons.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/topCustomers.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shopTag.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/topProducts.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/orderSales.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/statistics/orderCounts.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/products.js",["5787"],[],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ReportService from '../../../services/reports';\n\nconst initialState = {\n  loading: false,\n  chartData: {},\n  productList: [],\n  error: '',\n};\n\nexport const fetchReportProduct = createAsyncThunk(\n  'report/fetchReportProduct',\n  (params = {}) => {\n    return ReportService.getReportProductList({\n      ...params,\n    }).then((res) => res);\n  }\n);\nexport const fetchReportProductChart = createAsyncThunk(\n  'report/fetchReportProductChart',\n  (params = {}) => {\n    return ReportService.getReportProductChart({\n      ...params,\n    }).then((res) => res);\n  }\n);\nexport const ReportProductCompare = createAsyncThunk(\n  'report/ReportProductCompare',\n  (params = {}) => {\n    return ReportService.productReportCompare({\n      ...params,\n    }).then((res) => res);\n  }\n);\nconst orderCountSlice = createSlice({\n  name: 'productReport',\n  initialState,\n  extraReducers: (builder) => {\n    builder.addCase(fetchReportProduct.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportProduct.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.productList = payload;\n      state.error = '';\n    });\n    builder.addCase(fetchReportProduct.rejected, (state, action) => {\n      state.loading = false;\n      state.productList = [];\n      state.error = action.error.message;\n    });\n\n    builder.addCase(fetchReportProductChart.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportProductChart.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      if (!state.chartData.charts) {\n        state.chartData = payload.data;\n      }\n      state.error = '';\n    });\n    builder.addCase(fetchReportProductChart.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.error = action.error.message;\n    });\n    builder.addCase(ReportProductCompare.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(ReportProductCompare.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.chartData = payload.data;\n      state.error = '';\n    });\n    builder.addCase(ReportProductCompare.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.error = action.error.message;\n    });\n  },\n\n  reducers: {\n    filterReportProduct(state, action) {\n      const { payload } = action;\n    },\n    productCompare(state, action) {\n      const comparedProducts = state.productList.data?.data.filter((product) =>\n        action.payload.some((id) => id === product.id)\n      );\n      return {\n        ...state,\n        chartData: { ...state.chartData, charts: comparedProducts },\n      };\n    },\n    clearCompare(state, action) {\n      return { ...state, chartData: { ...state.chartData, charts: undefined } };\n    },\n  },\n});\nexport const { filterReportProduct, productCompare, clearCompare } =\n  orderCountSlice.actions;\nexport default orderCountSlice.reducer;\n","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/categories.js",["5788"],[],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ReportService from '../../../services/reports';\n\nconst initialState = {\n  loading: false,\n  chartData: [],\n  productList: [],\n  error: '',\n};\n\nexport const fetchReportProductChart = createAsyncThunk(\n  'categoryReport/fetchReportProductChart',\n  (params = {}) => {\n    return ReportService.getCategoriesChart({\n      ...params,\n    }).then((res) => res);\n  }\n);\nconst orderCountSlice = createSlice({\n  name: 'categoryReport',\n  initialState,\n  extraReducers: (builder) => {\n    builder.addCase(fetchReportProductChart.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportProductChart.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.chartData = payload?.data;\n      state.productList = payload?.data?.paginate;\n      state.error = '';\n    });\n    builder.addCase(fetchReportProductChart.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.productList = [];\n      state.error = action.error.message;\n    });\n  },\n\n  reducers: {\n    filterReportProduct(state, action) {\n      const { payload } = action;\n    },\n  },\n});\nexport const { filterReportProduct } = orderCountSlice.actions;\nexport default orderCountSlice.reducer;\n","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/stock.js",["5789"],[],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ReportService from '../../../services/reports';\n\nconst initialState = {\n  loading: false,\n  chartData: [],\n  productList: [],\n  error: '',\n};\n\nexport const fetchStockProduct = createAsyncThunk(\n  'stockReport/fetchStockProduct',\n  (params = {}) => {\n    return ReportService.getStocks({\n      ...params,\n    }).then((res) => res);\n  }\n);\nconst stockCountSlice = createSlice({\n  name: 'stockReport',\n  initialState,\n  extraReducers: (builder) => {\n    builder.addCase(fetchStockProduct.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchStockProduct.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.productList = payload.data;\n      state.error = '';\n    });\n    builder.addCase(fetchStockProduct.rejected, (state, action) => {\n      state.loading = false;\n      state.productList = [];\n      state.error = action.error.message;\n    });\n  },\n\n  reducers: {\n    filterStockProduct(state, action) {\n      const { payload } = action;\n    },\n  },\n});\nexport const { filterStockProduct } = stockCountSlice.actions;\nexport default stockCountSlice.reducer;\n","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/order.js",["5790"],[],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ReportService from '../../../services/reports';\nimport SellerReportService from '../../../services/seller/reports';\n\nconst initialState = {\n  loading: false,\n  chartData: [],\n  productList: [],\n  error: '',\n};\n\nexport const fetchOrderProduct = createAsyncThunk(\n  'orderReport/fetchOrderProduct',\n  (params = {}) => {\n    return ReportService.getOrderProducts({\n      ...params,\n    }).then((res) => res);\n  }\n);\nexport const fetchOrderProductChart = createAsyncThunk(\n  'orderReport/fetchOrderProductChart',\n  (params = {}) => {\n    return ReportService.getOrderChart({\n      ...params,\n    }).then((res) => res);\n  }\n);\nexport const fetchSellerOrderProduct = createAsyncThunk(\n  'orderReport/fetchSellerOrderProduct',\n  (params = {}) => {\n    return SellerReportService.getOrderProducts({ ...params }).then(\n      (res) => res\n    );\n  }\n);\nexport const fetchSellerOrderProductChart = createAsyncThunk(\n  'orderReport/fetchSellerOrderProductChart',\n  (params = {}) => {\n    return SellerReportService.getOrderChart({ ...params }).then((res) => res);\n  }\n);\nconst orderCountSlice = createSlice({\n  name: 'orderReport',\n  initialState,\n  extraReducers: (builder) => {\n    // Admin Order Report\n    builder.addCase(fetchOrderProduct.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchOrderProduct.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.productList = payload.data;\n      state.error = '';\n    });\n    builder.addCase(fetchOrderProduct.rejected, (state, action) => {\n      state.loading = false;\n      state.productList = [];\n      state.error = action.error.message;\n    });\n\n    builder.addCase(fetchOrderProductChart.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchOrderProductChart.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.chartData = payload.data;\n      state.error = '';\n    });\n    builder.addCase(fetchOrderProductChart.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.error = action.error.message;\n    });\n    // Seller Order Report\n    // // List\n    builder.addCase(fetchSellerOrderProduct.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchSellerOrderProduct.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.productList = payload.data;\n      state.error = '';\n    });\n    builder.addCase(fetchSellerOrderProduct.rejected, (state, action) => {\n      state.loading = false;\n      state.productList = [];\n      state.error = action.error.message;\n    });\n    // // Chart\n    builder.addCase(fetchSellerOrderProductChart.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchSellerOrderProductChart.fulfilled, (state, action) => {\n      const { payload } = action;\n      state.loading = false;\n      state.chartData = payload.data;\n      state.error = '';\n    });\n    builder.addCase(fetchSellerOrderProductChart.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.error = action.error.message;\n    });\n  },\n\n  reducers: {\n    filterOrderProduct(state, action) {\n      const { payload } = action;\n    },\n  },\n});\nexport const { filterOrderProduct } = orderCountSlice.actions;\nexport default orderCountSlice.reducer;\n","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/revenue.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/overview.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/report/extras.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/sellerOrders.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/adminPayouts.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryboyReview.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/bonus-list.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/sellerCoupons.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/coupon.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/paymentPayload.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/todo.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/sms-geteways.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/box.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/career-category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/menuCategory.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/recipe-category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/reciept.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/career.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/pages.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/waiterOrder.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-zone.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-tables.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-time.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/landing-page.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/booking-list.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcelOrders.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcelTypes.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/advert.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcel-option.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-ads.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/parcelReview.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/request-models.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/paymentToPartners.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/propertyGroup.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-reviews.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/configs/theme-config.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/installation.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/shop-locations.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/propertyValue.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/delivery-point.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/tab-menu.js",["5791"],[],"import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { CloseOutlined, ReloadOutlined } from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport {\n  setActiveMenu,\n  removeFromMenu,\n  setRefetch,\n} from '../redux/slices/menu';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport { Tabs } from 'antd';\nimport { useTranslation } from 'react-i18next';\nconst { TabPane } = Tabs;\n\nconst TabMenu = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n  const menu = useSelector((state) => state.menu, shallowEqual);\n\n  const selectTab = (item) => {\n    dispatch(setActiveMenu(item));\n    navigate(`/${item.url}`);\n  };\n\n  const deleteTab = (event, item) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const index = menu.menuItems.indexOf(item);\n    if (!index) {\n      toast.warning('The menu tab does not close');\n      return;\n    }\n\n    if (menu.activeMenu?.id !== item.id) {\n      dispatch(removeFromMenu({ ...item, nextUrl: menu.activeMenu.url }));\n      return;\n    }\n    const newPath = menu.menuItems.filter((el) => el.url !== item.url);\n    const isHaveOtherTabs = newPath.length - 1 > index;\n    let currentPath;\n    if (isHaveOtherTabs) {\n      currentPath = newPath[index];\n    } else {\n      currentPath = newPath[newPath.length - 1];\n    }\n    dispatch(removeFromMenu({ ...item, nextUrl: currentPath.url }));\n    navigate(`/${currentPath.url}`);\n  };\n\n  const reloadPage = (event, item) => {\n    event.preventDefault();\n    event.stopPropagation();\n    dispatch(setRefetch(item));\n    if (item.id !== menu.activeMenu.id) {\n      navigate(`/${item.url}`);\n    }\n  };\n\n  useEffect(() => {\n    console.log('menu mounting...');\n    if (!pathname.includes(menu.activeMenu.url)) {\n      window.location.replace(`/${menu.activeMenu.url}`);\n    }\n  }, []);\n\n  return (\n    <div className='navbar-default'>\n      <Tabs\n        onChange={(key, item) => console.log('tab => ', key, item)}\n        activeKey={menu.activeMenu?.url}\n        type='card'\n      >\n        {menu.menuItems.map((item) => (\n          <TabPane\n            tab={\n              <div onClick={() => selectTab(item)} className='nav-link'>\n                <ReloadOutlined\n                  onClick={(event) => reloadPage(event, item)}\n                  className='reload-button'\n                />\n                <span className='nav-text'> {t(item.name)}</span>\n                <CloseOutlined\n                  onClick={(event) => deleteTab(event, item)}\n                  className='close-button'\n                />\n              </div>\n            }\n            key={item.url}\n          />\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TabMenu;\n","/home/mostafa/Magde/new/frontadminreact/src/redux/slices/warehouse.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/delivery-price.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryman-request.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/looks.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/gallery.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/sidebar.js",["5792","5793","5794","5795"],[],"import React, { useMemo, useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport {\n  LogoutOutlined,\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport { Divider, Menu, Space, Layout, Modal, Input } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, clearMenu, setMenu } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LangModal from './lang-modal';\nimport getSystemIcons from 'helpers/getSystemIcons';\nimport NotificationBar from './notificationBar';\nimport { navCollapseTrigger } from 'redux/slices/theme';\nimport ThemeConfigurator from './theme-configurator';\nimport i18n from 'configs/i18next';\nimport { RiArrowDownSFill } from 'react-icons/ri';\nimport Scrollbars from 'react-custom-scrollbars';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport NavProfile from './nav-profile';\nimport { batch } from 'react-redux';\nimport { clearUser } from 'redux/slices/auth';\nimport { setCurrentChat } from 'redux/slices/chat';\nimport { data as allRoutes } from 'configs/menu-config';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { clearBags } from 'redux/slices/cart';\nconst { Sider } = Layout;\n\nconst Sidebar = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const { system_refund, payment_type } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n  const { navCollapsed } = useSelector(\n    (state) => state.theme.theme,\n    shallowEqual,\n  );\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n  const [langModal, setLangModal] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const { theme } = useSelector((state) => state.theme, shallowEqual);\n  const parcelMode = useMemo(\n    () => !!theme.parcelMode && user?.role === 'admin',\n    [theme, user],\n  );\n  const routes = useMemo(() => filterUserRoutes(user.urls), [user]);\n  const active = routes?.find((item) => pathname.includes(item.url));\n  const [searchTerm, setSearchTerm] = useState('');\n  const [data, setData] = useState(parcelMode ? allRoutes.parcel : routes);\n\n  useDidUpdate(() => {\n    if (parcelMode) {\n      setData(allRoutes.parcel);\n    } else {\n      setData(routes);\n    }\n  }, [theme, user]);\n\n  const addNewItem = (item) => {\n    if (typeof item.url === 'undefined') return;\n    if (item.name === 'logout') {\n      setIsModalVisible(true);\n      return;\n    }\n    const data = {\n      ...item,\n      icon: undefined,\n      children: undefined,\n      refetch: true,\n    };\n    dispatch(setMenu(data));\n    navigate(`/${item.url}`);\n  };\n\n  function filterUserRoutes(routes) {\n    let list = routes;\n    if (myShop.type === 'shop') {\n      list = routes?.filter((item) => item?.name !== 'brands');\n    }\n    if (payment_type === 'admin') {\n      list = routes?.filter((item) => item?.name !== 'payments');\n    }\n    if (system_refund === '0') {\n      list = routes?.filter((item) => item?.name !== 'refunds');\n    }\n    return list;\n  }\n\n  const menuTrigger = (event) => {\n    event.stopPropagation();\n    dispatch(navCollapseTrigger());\n  };\n\n  const addMenuItem = (payload) => {\n    const data = { ...payload, icon: undefined };\n    dispatch(addMenu(data));\n  };\n\n  const handleOk = () => {\n    batch(() => {\n      dispatch(clearUser());\n      dispatch(clearMenu());\n      dispatch(setCurrentChat(null));\n      dispatch(clearBags());\n    });\n    setIsModalVisible(false);\n    localStorage.removeItem('token');\n    navigate('/login');\n  };\n\n  const handleCancel = () => setIsModalVisible(false);\n\n  function getOptionList(routes) {\n    const optionTree = [];\n    routes?.map((item) => {\n      optionTree.push(item);\n      item?.submenu?.map((sub) => {\n        optionTree.push(sub);\n        sub?.children?.map((child) => {\n          optionTree.push(child);\n        });\n      });\n    });\n    return optionTree;\n  }\n\n  const optionList = getOptionList(data);\n\n  const menuList =\n    searchTerm.length > 0\n      ? optionList.filter((input) =>\n          t(input?.name ?? '')\n            .toUpperCase()\n            .includes(searchTerm.toUpperCase()),\n        )\n      : data;\n\n  return (\n    <>\n      <Sider\n        className='navbar-nav side-nav'\n        width={250}\n        collapsed={navCollapsed}\n        style={{ height: '100vh', top: 0 }}\n      >\n        <NavProfile user={user} />\n        <div className='menu-collapse' onClick={menuTrigger}>\n          <MenuFoldOutlined />\n        </div>\n        {navCollapsed && (\n          <div className='flex justify-content-center'>\n            <ThemeConfigurator />\n          </div>\n        )}\n\n        {!navCollapsed ? (\n          <Space className='mx-4 mt-2 d-flex justify-content-between'>\n            <span className='icon-button' onClick={() => setLangModal(true)}>\n              <img\n                className='globalOutlined'\n                src={\n                  languages.find((item) => item.locale === i18n.language)?.img\n                }\n                alt={user.fullName}\n              />\n              <span className='default-lang'>{i18n.language}</span>\n              <RiArrowDownSFill size={15} />\n            </span>\n            <span className='d-flex'>\n              <ThemeConfigurator />\n              <NotificationBar />\n            </span>\n          </Space>\n        ) : (\n          <div className='menu-unfold' onClick={menuTrigger}>\n            <MenuUnfoldOutlined />\n          </div>\n        )}\n        <Divider style={{ margin: '10px 0' }} />\n\n        {!navCollapsed && (\n          <span className='mt-2 mb-2 d-flex justify-content-center'>\n            <Input\n              placeholder='search'\n              style={{ width: '90%' }}\n              value={searchTerm}\n              onChange={(event) => {\n                setSearchTerm(event.target.value);\n              }}\n              prefix={<SearchOutlined />}\n            />\n          </span>\n        )}\n\n        <Scrollbars\n          autoHeight\n          autoHeightMin={window.innerHeight > 969 ? '80vh' : '77vh'}\n          autoHeightMax={window.innerHeight > 969 ? '80vh' : '77vh'}\n          autoHide\n        >\n          <Menu\n            theme='light'\n            mode='inline'\n            defaultSelectedKeys={[String(active?.id)]}\n            defaultOpenKeys={\n              !navCollapsed ? data?.map((i, idx) => i.id + '_' + idx) : []\n            }\n          >\n            {menuList?.map((item, idx) =>\n              item.submenu?.length > 0 ? (\n                <SubMenu\n                  key={item.id + '_' + idx}\n                  title={t(item.name)}\n                  icon={getSystemIcons(item.icon)}\n                >\n                  {item.submenu.map((submenu, idy) =>\n                    submenu.children?.length > 0 ? (\n                      <SubMenu\n                        defaultOpen={true}\n                        key={submenu.id + '_' + idy}\n                        title={t(submenu.name)}\n                        icon={getSystemIcons(submenu.icon)}\n                        onTitleClick={() => addNewItem(submenu)}\n                      >\n                        {submenu.children?.map((sub, idk) => (\n                          <Menu.Item\n                            key={'child' + idk + sub.id}\n                            icon={getSystemIcons(sub.icon)}\n                          >\n                            <Link\n                              to={'/' + sub.url}\n                              onClick={() => addMenuItem(sub)}\n                            >\n                              <span>{t(sub.name)}</span>\n                            </Link>\n                          </Menu.Item>\n                        ))}\n                      </SubMenu>\n                    ) : (\n                      <Menu.Item\n                        key={submenu.id}\n                        icon={getSystemIcons(submenu.icon)}\n                      >\n                        <Link\n                          to={'/' + submenu.url}\n                          onClick={() => addNewItem(submenu)}\n                        >\n                          <span>{t(submenu.name)}</span>\n                        </Link>\n                      </Menu.Item>\n                    ),\n                  )}\n                </SubMenu>\n              ) : (\n                <Menu.Item key={item.id} icon={getSystemIcons(item.icon)}>\n                  <Link to={'/' + item.url} onClick={() => addNewItem(item)}>\n                    <span>{t(item.name)}</span>\n                  </Link>\n                </Menu.Item>\n              ),\n            )}\n          </Menu>\n        </Scrollbars>\n      </Sider>\n\n      {langModal && (\n        <LangModal\n          visible={langModal}\n          handleCancel={() => setLangModal(false)}\n        />\n      )}\n\n      <Modal\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        centered\n      >\n        <LogoutOutlined\n          style={{ fontSize: '25px', color: '#08c' }}\n          theme='primary'\n        />\n        <span className='ml-2'>{t('leave.site')}</span>\n      </Modal>\n    </>\n  );\n};\nexport default Sidebar;\n","/home/mostafa/Magde/new/frontadminreact/src/components/footer.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/languages.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/subscriptions-date.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/configs/menu-config.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/country.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/city.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/region.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/slices/deliveryzone/area.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-float.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/chat/chat-icons.js",["5796","5797","5798","5799","5800"],[],"import React from 'react';\nimport { IoChatbubbleEllipsesOutline } from 'react-icons/io5';\nimport { NavLink } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu } from '../../redux/slices/menu';\nimport { Badge } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { getAllUnreadMessages } from '../../redux/selectors/chatSelector';\n\nconst ChatIcons = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const goToChat = () => {\n    dispatch(\n      addMenu({\n        url: 'chat',\n        id: 'chat',\n        name: t('chat'),\n      })\n    );\n  };\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const unreadMessages = useSelector(\n    (state) => getAllUnreadMessages(state.chat.messages),\n    shallowEqual\n  );\n  return (\n    <NavLink onClick={goToChat} to='/chat' className='chat'>\n      <Badge\n        count={\n          unreadMessages.filter((item) =>\n            user.role == 'admin'\n              ? item.roleId == 'admin'\n              : user.role == 'seller'\n              ? item.roleId == myShop.id\n              : item.roleId == user.id\n          ).length\n        }\n      >\n        <IoChatbubbleEllipsesOutline className='chat-icon' />\n      </Badge>\n    </NavLink>\n  );\n};\n\nexport default ChatIcons;\n","/home/mostafa/Magde/new/frontadminreact/src/services/request.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/project-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/database-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/user-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/license.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/auth.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/recaptcha.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/global-settings/project-access-info.js",["5801"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { Button, Card, Descriptions } from 'antd';\nimport Loading from '../../components/loading';\nimport informationService from '../../services/rest/information';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\n\nconst accessInfo = [\n  {\n    title: 'PHP Version',\n    version: '7.4.30',\n  },\n  {\n    title: 'Laravel Version',\n    version: '8.1.0',\n  },\n  {\n    title: 'MySql Version',\n    version: '5.7.23',\n  },\n  {\n    title: 'NodeJs Version',\n    version: '14.15.0',\n  },\n  {\n    title: 'NPM Version',\n    version: '6.14.8',\n  },\n  {\n    title: 'Composer Version',\n    version: '1.0.0',\n  },\n];\n\nexport default function ProjectAccessInfo({ next }) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState(accessInfo);\n  const { setIsModalVisible } = useContext(Context);\n\n  useEffect(() => {\n    setLoading(true);\n    informationService\n      .systemInformation()\n      .then((res) => {\n        setData(res.data);\n        checkAccess(res.data);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  function checkAccess(data) {\n    const newList = list.map((item) => {\n      const system = data[item.title]\n        ?.split('.')\n        .map((item) => item.replace(/[^0-9]+/g, ''))\n        .filter((item) => !!item);\n      const minimum = item.version\n        .split('.')\n        .map((item) => item.replace(/[^0-9]+/g, ''))\n        .filter((item) => !!item);\n\n      const systemMajor = Number(system[0]);\n      const systemMinor = Number(system[1]);\n      const minimumMajor = Number(minimum[0]);\n      const minimumMinor = Number(minimum[1]);\n      if (systemMajor > minimumMajor) {\n        return {\n          ...item,\n          success: true,\n        };\n      } else if (systemMajor === minimumMajor && systemMinor >= minimumMinor) {\n        return {\n          ...item,\n          success: true,\n        };\n      } else {\n        return {\n          ...item,\n          success: false,\n        };\n      }\n    });\n    setList(newList);\n  }\n\n  const handleNext = () => {\n    const isValidVersion = list.every((item) => item.success);\n    if (!isValidVersion) {\n      setIsModalVisible(true);\n      return;\n    }\n    next();\n  };\n\n  return (\n    <Card\n      title='Project access info'\n      className='w-100'\n      extra={<p>System requirements</p>}\n    >\n      {!loading ? (\n        <Descriptions bordered>\n          {list.map((item, index) => (\n            <Descriptions.Item label={item.title} key={index} span={3}>\n              {data[item.title]}\n              <span className='ml-2'>\n                {item.success ? (\n                  <CheckOutlined style={{ color: '#18a695', fontSize: 18 }} />\n                ) : (\n                  <CloseOutlined style={{ color: '#e74c3c', fontSize: 18 }} />\n                )}\n              </span>\n            </Descriptions.Item>\n          ))}\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n      <Button className='mt-4' type='primary' onClick={handleNext}>\n        Next\n      </Button>\n\n      <CustomModal\n        click={() => {\n          setIsModalVisible(false);\n          next();\n        }}\n        text='Your system configuration is not recommended for this project. Are you sure to continue installation?'\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/configs/app-locale.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/useBodyClass.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/projectTitle.js",["5802"],[],"import { useRef, useEffect } from 'react';\n\nfunction useDocumentTitle(title, prevailOnUnmount = false) {\n  const defaultTitle = useRef(document.title);\n\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  useEffect(\n    () => () => {\n      if (!prevailOnUnmount) {\n        document.title = defaultTitle.current;\n      }\n    },\n    []\n  );\n}\n\nexport default useDocumentTitle;\n","/home/mostafa/Magde/new/frontadminreact/src/services/category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/brand.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/banner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/restaurant.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/unit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/currency.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/delivery.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/blog.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/user.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/extra.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/payment.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/brands.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/rest/product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/rest/currency.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/discount.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/extras.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/faq.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/transaction.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/review.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/rest/payment.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/payment.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/invites.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/transaction.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/review.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryman/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/app.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/addon.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/banner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/blog.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/career-category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/brand.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/career.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/coupon.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/email-provider.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/deliveries.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/currency.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/extras.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/faq.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/food.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/gallery.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/language.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/message-subscriber.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/notification.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/pages.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/payment-payloads.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/recept.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/recipe-categories.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/refunds.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/restaurant.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/reviews.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/settings.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/shop-tag.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/shop.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/smsPayloads.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/subscriptions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/unit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/user.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/report.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/landing-page.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/parcelOrder.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/advert.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/shop-ads.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/payment-to-partners.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/property.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/delivery-point.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/deliveryzone.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/delivery-pricing.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/warehouse.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/admin/looks.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/addon.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/app.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/bonus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/booking-tables.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/booking-time.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/booking-zone.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/branch.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/brand.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/discounts.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/extras.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/food.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/gallery.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/payments.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/recept-category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/recept.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/refunds.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/report.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/reviews.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/story.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/subscriptions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/advert.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/wallet.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/payment-from-partner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/property.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/coupons.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/settings.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/looks.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/delivery-price.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/seller/deliverymen.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/wallet.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/orderStatus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/points.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/shop.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/subscriber.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/messageSubscriber.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/bonus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/wallet.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/storeis.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/emailSettings.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/shopBonus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/storeis.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/shop.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/closedDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/workingDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/waiter/app.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/refund.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/routes/waiter/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/statistics.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/refund.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/branch.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/statistics.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryman/statistics.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/shopTag.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/payout.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/reports.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/bonus.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/paymentPayload.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/smsPayloads.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/box.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/reciept.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/reports.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/box.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/coupon.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/pages.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/career.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/waiter/statistics.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/coupon.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/reciept.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking-zone.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/waiter/order.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking-time.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking-table.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/landingPage.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/parcelOrder.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/booking.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/parcelType.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/parcel-option.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/advert.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/shop-ads.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/request-models.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/advert.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/request-models.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/property.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/shop-locations.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/payment-to-partner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/property.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/payment-from-partner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryman/payment-from-partner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/delivery-point.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/shop-locations.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/notificationBar.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/lang-modal.js",["5803"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Form, Modal, Select } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../configs/i18next';\nimport informationService from '../services/rest/information';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { directionChange } from '../redux/slices/theme';\nimport { setLangugages } from '../redux/slices/formLang';\nimport languagesService from '../services/languages';\n\nexport default function LangModal({ visible, handleCancel }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const onFinish = (values) => {\n    const { lang } = values;\n    const locale = languages.find((item) => item.locale === lang);\n    const direction = locale.backward ? 'rtl' : 'ltr';\n    setLoading(true);\n    informationService\n      .translations(values)\n      .then(({ data }) => {\n        i18n.addResourceBundle(lang, 'translation', data);\n        handleCancel();\n        i18n.changeLanguage(lang);\n        dispatch(directionChange(direction));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const fetchLanguages = () => {\n    languagesService.getAllActive().then(({ data }) => {\n      dispatch(setLangugages(data));\n    });\n  };\n\n  useEffect(() => {\n    fetchLanguages();\n  }, []);\n\n  return (\n    <Modal\n      title={t('change.language')}\n      visible={visible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='ok-button'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loading}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        layout='vertical'\n        name='lang-form'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{ lang: i18n.language }}\n      >\n        <Form.Item label={t('language')} name='lang'>\n          <Select>\n            {languages.map((item, idx) => (\n              <Select.Option key={item.locale + idx} value={item.locale}>\n                {item.title}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/theme-configurator.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/warehouse.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/delivery-price.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/gallery.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/nav-profile.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getSystemIcons.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/useDidUpdate.js",["5804","5805"],[],"import { useEffect, useRef } from 'react';\n\nconst useDidUpdate = (f, conditions) => {\n  const didMountRef = useRef(false);\n  useEffect(() => {\n    if (!didMountRef.current) {\n      didMountRef.current = true;\n      return;\n    }\n\n    // Cleanup effects when f returns a function\n    return f && f(); //eslint-disable-line\n  }, conditions);\n};\n\nexport default useDidUpdate;\n","/home/mostafa/Magde/new/frontadminreact/src/components/image-upload-single.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/delivery-price.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/banner.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/country.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/city.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/region.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/area.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/redux/selectors/chatSelector.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/requestWithoutTimeout.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-clone.js",["5806"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport AddonStock from './addons-stock';\nimport AddonFinish from './addons-finish';\nimport AddonIndex from './addons-index';\nimport LanguageList from '../../components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from '../../services/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from '../../helpers/useQueryParams';\n\nconst { Step } = Steps;\n\nconst AddonClone = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  return (\n    <Card title={t('clone.addon')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <AddonIndex next={next} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <AddonStock next={next} prev={prev} current={current} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <AddonFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default AddonClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-edit.js",["5807"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport AddonFinish from './addons-finish';\nimport AddonStock from './addons-stock';\nimport AddonIndex from './addons-index';\nimport LanguageList from '../../components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from '../../services/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from '../../helpers/useQueryParams';\n\nconst { Step } = Steps;\n\nconst AddonEdit = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          extras: res.data.stocks[0]?.extras.map((el) => el.extra_group_id),\n          stocks: res.data.stocks.map((stock) => ({\n            ...stock,\n            ...Object.assign(\n              {},\n              ...stock.extras.map((extra, idx) => ({\n                [`extras[${idx}]`]: extra.id,\n              }))\n            ),\n            quantity: stock.quantity || 0,\n            extras: undefined,\n          })),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  return (\n    <Card title={t('addon.edit')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <AddonIndex next={next} action_type={'edit'} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <AddonStock next={next} prev={prev} current={current} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <AddonFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default AddonEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-clone.js",["5808","5809"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchBanners } from '../../redux/slices/banner';\nimport bannerService from '../../services/banner';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport BannerForm from './banner-form';\n\nconst BannerClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = (alias) => {\n    setLoading(true);\n    bannerService\n      .getById(alias)\n      .then((res) => {\n        let banner = res.data;\n\n        const data = {\n          ...banner,\n          img: createImages(banner.galleries),\n          products: banner.products?.map((item) => ({\n            label: item.translation?.title,\n            value: item.id,\n          })),\n          ...getLanguageFields(banner),\n        };\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values, image) => {\n    const body = {\n      products: values.products?.map((i) => i.value),\n      images: image.map((image) => image.name),\n      clickable: true,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n    };\n    const nextUrl = 'banners';\n\n    return bannerService.create(body).then(() => {\n      toast.success(t('successfully.cloned'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchBanners({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBanner(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.banner')} className='h-100' extra={<LanguageList />}>\n      {!loading ? (\n        <BannerForm form={form} handleSubmit={onFinish} />\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default BannerClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-add.js",["5810"],[],"import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { fetchBanners } from '../../redux/slices/banner';\nimport bannerService from '../../services/banner';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport LanguageList from '../../components/language-list';\nimport BannerForm from './banner-form';\n\nconst BannerAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values, image, mediaList) => {\n    const videos = mediaList.images.map((item) => item.name);\n    const previews = mediaList.previews.map((item) => item.name);\n    const body = {\n      products: values.products?.map((i) => i.value),\n      images: [...videos, ...image.map((image) => image.name)],\n      previews,\n      clickable: true,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n    };\n    const nextUrl = 'banners';\n\n    return bannerService.create(body).then(() => {\n      toast.success(t('successfully.created'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchBanners({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return (\n    <>\n      <Card title={t('add.banner')} extra={<LanguageList />} />\n      <BannerForm form={form} handleSubmit={onFinish} />\n    </>\n  );\n};\n\nexport default BannerAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-edit.js",["5811","5812"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Form, Spin } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchBanners } from '../../redux/slices/banner';\nimport bannerService from '../../services/banner';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport BannerForm from './banner-form';\n\nconst BannerEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createMediaFile = (items) => {\n    const mediaObject = { images: [], previews: [] };\n    const previews = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.preview,\n        url: item.preview,\n      }));\n    const videos = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.path,\n        url: item.path,\n        isVideo: true,\n      }));\n    mediaObject.previews = previews;\n    mediaObject.images = videos;\n\n    return mediaObject;\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n      isVideo: Boolean(item.preview),\n    }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = (alias) => {\n    setLoading(true);\n    bannerService\n      .getById(alias)\n      .then((res) => {\n        const banner = res.data;\n\n        const data = {\n          ...banner,\n          initialMediaFile: createMediaFile(res.data.galleries),\n          img: createImages(banner.galleries),\n          products: banner?.products?.map((item) => ({\n            label: item.translation?.title,\n            value: item.id,\n          })),\n          ...getLanguageFields(banner),\n        };\n\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values, image, mediaList) => {\n    const videos = mediaList.images.map((item) => item.name);\n    const previews = mediaList.previews.map((item) => item.name);\n    const body = {\n      products: values.products?.map((i) => i.value),\n      images: [...videos, ...image.map((image) => image.name)],\n      previews,\n      clickable: true,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n    };\n    const nextUrl = 'banners';\n\n    return bannerService.update(id, body).then(() => {\n      toast.success(t('successfully.updated'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchBanners({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBanner(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <>\n      {!loading ? (\n        <BannerForm form={form} handleSubmit={onFinish} />\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default BannerEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/blog/blog-clone.js",["5813","5814"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space, Spin, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\n\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchBlogs } from '../../redux/slices/blog';\nimport blogService from '../../services/blog';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport createImage from '../../helpers/createImage';\nimport { useTranslation } from 'react-i18next';\nimport CkeEditorEdit from '../../components/ckeEditorEdit';\nimport MediaUpload from '../../components/upload';\n\nexport default function BlogClone() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { uuid } = useParams();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      type: 'blog',\n      active: values.active ? 1 : 0,\n      images: [image[0]?.name],\n      title: getTranslationFields(languages, values),\n      description: getTranslationFields(languages, values, 'description'),\n      short_desc: getTranslationFields(languages, values, 'short_desc'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'blogs';\n    blogService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBlogs({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n      [`short_desc[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.short_desc,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchBlog = (uuid) => {\n    setLoading(true);\n    blogService\n      .getById(uuid)\n      .then((res) => {\n        let blog = res.data;\n        form.setFieldsValue({\n          ...blog,\n          ...getLanguageFields(blog),\n          image: [createImage(blog.img)],\n        });\n        setImage([createImage(blog.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBlog(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.blog')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='blog-edit'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{\n            active: true,\n            ...activeMenu.data,\n          }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('requried'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col>\n              <Form.Item\n                label={t('image')}\n                rules={[\n                  {\n                    required: !image.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='blogs'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  length='1'\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </div>\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'short_desc' + item.locale}\n                  label={t('short.description')}\n                  name={`short_desc[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <CkeEditorEdit\n                languages={languages}\n                form={form}\n                lang={defaultLang}\n                getLanguageFields={getLanguageFields}\n              />\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/blog/blog-add.js",["5815"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { fetchBlogs } from '../../redux/slices/blog';\nimport blogService from '../../services/blog';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport CkeEditor from '../../components/ckeEditor';\nimport MediaUpload from '../../components/upload';\n\nexport default function BlogAdd() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getTranslationFields(values, field = 'title') {\n    const list = languages.map((item) => ({\n      [item.locale]: values[`${field}[${item.locale}]`],\n    }));\n    return Object.assign({}, ...list);\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      type: 'blog',\n      active: values.active ? 1 : 0,\n      images: image.length ? image.map((item) => item.name) : undefined,\n      title: getTranslationFields(values),\n      description: getTranslationFields(values, 'description'),\n      short_desc: getTranslationFields(values, 'short_desc'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'blogs';\n    blogService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBlogs({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.blog')} extra={<LanguageList />}>\n      <Form\n        name='blog-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{\n          active: true,\n          ...activeMenu.data,\n        }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col>\n            <Form.Item\n              label={t('image')}\n              rules={[\n                {\n                  required: !image.length,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='blogs'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                length='1'\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n          <Col>\n            <div className='col-md-12 col-sm-6'>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </div>\n          </Col>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'short_desc' + item.locale}\n                label={t('short.description')}\n                name={`short_desc[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={24}>\n            <CkeEditor languages={languages} form={form} lang={defaultLang} />\n          </Col>\n        </Row>\n        <Space>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Space>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/blog/blog-edit.js",["5816","5817"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space, Spin, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchBlogs } from '../../redux/slices/blog';\nimport blogService from '../../services/blog';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport createImage from '../../helpers/createImage';\nimport { useTranslation } from 'react-i18next';\nimport CkeEditorEdit from '../../components/ckeEditorEdit';\nimport MediaUpload from '../../components/upload';\n\nexport default function BlogEdit() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { uuid } = useParams();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      type: 'blog',\n      active: values.active ? 1 : 0,\n      images: image.length ? image.map((item) => item.name) : undefined,\n      title: getTranslationFields(languages, values),\n      description: getTranslationFields(languages, values, 'description'),\n      short_desc: getTranslationFields(languages, values, 'short_desc'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'blogs';\n    blogService\n      .update(uuid, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBlogs({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n      [`short_desc[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.short_desc,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchBlog = (uuid) => {\n    setLoading(true);\n    blogService\n      .getById(uuid)\n      .then((res) => {\n        let blog = res.data;\n        form.setFieldsValue({\n          ...blog,\n          ...getLanguageFields(blog),\n          image: [createImage(blog.img)],\n        });\n        setImage([createImage(blog.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBlog(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.blog')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='blog-edit'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{\n            active: true,\n            ...activeMenu.data,\n          }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('requried'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col>\n              <Form.Item\n                label={t('image')}\n                rules={[\n                  {\n                    required: !image.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='blogs'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  length='1'\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </div>\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'short_desc' + item.locale}\n                  label={t('short.description')}\n                  name={`short_desc[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <CkeEditorEdit\n                languages={languages}\n                form={form}\n                lang={defaultLang}\n                getLanguageFields={getLanguageFields}\n              />\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-clone.js",["5818","5819"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { fetchCareerCategories } from '../../redux/slices/career-category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\n\nconst CareerCategoryClone = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { params } = useSelector((state) => state.careerCategory, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const { uuid } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'career',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: null,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/career-categories';\n\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCareerCategories(params));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) getCategory(uuid);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.category')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} maxLength={150} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default CareerCategoryClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-edit.js",["5820","5821","5822"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport { fetchCareerCategories } from '../../redux/slices/career-category';\n\nconst CareerCategoryEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.careerCategory, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'career',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: null,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/career-categories';\n\n    categoryService\n      .update(uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCareerCategories(params));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) getCategory(uuid);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.career.category')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} maxLength={150} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default CareerCategoryEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-add.js",["5823"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { fetchCareerCategories } from '../../redux/slices/career-category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\n\nconst CareerCategoryAdd = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { params } = useSelector((state) => state.careerCategory, shallowEqual);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'career',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: null,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/career-categories';\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCareerCategories(params));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.category')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          parent_id: { title: '---', value: 0, key: 0 },\n          active: true,\n          ...activeMenu.data,\n        }}\n        form={form}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.title + index}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                help={\n                  error\n                    ? error[`title.${defaultLang}`]\n                      ? error[`title.${defaultLang}`][0]\n                      : null\n                    : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n                rules={[\n                  {\n                    required: item?.locale === defaultLang,\n                    message: t('required'),\n                  },\n                  {\n                    validator(_, value) {\n                      if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('name')} maxLength={50} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.locale + index}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    required: item?.locale === defaultLang,\n                    message: t('required'),\n                  },\n                  {\n                    validator(_, value) {\n                      if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={4} maxLength={150} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('keywords')}\n              name='keywords'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select mode='tags' style={{ width: '100%' }}></Select>\n            </Form.Item>\n          </Col>\n\n          <Col span={4}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  required: !image?.length,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='categories'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={2}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default CareerCategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brand-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/brands/brands-clone.js",["5824","5825","5826"],[],"import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Spin, Switch } from 'antd';\nimport { IMG_URL } from '../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport brandService from '../../services/brand';\nimport { fetchBrands } from '../../redux/slices/brand';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\n\nconst BrandClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const locations = useLocation();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const fetchBrand = (id) => {\n    setLoading(true);\n    brandService\n      .getById(id)\n      .then((res) => {\n        let brand = res.data;\n        form.setFieldsValue({\n          ...brand,\n          image: [createImage(brand.img)],\n        });\n        setImage([createImage(brand.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n      'images[0]': image[0]?.name,\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/brands';\n\n    brandService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBrands({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBrand(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.brand')}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ ...activeMenu.data }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name={'title'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    validator(_, value) {\n                      if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <Input maxLength={50} />\n              </Form.Item>\n            </Col>\n\n            <Col span={6}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='brands'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n\n            <Col span={6}>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </div>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default BrandClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brands-edit.js",["5827","5828"],[],"import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Spin, Switch } from 'antd';\nimport { IMG_URL } from '../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport brandService from '../../services/brand';\nimport { fetchBrands } from '../../redux/slices/brand';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\n\nconst BrandsEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const locations = useLocation();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const fetchBrand = (id) => {\n    setLoading(true);\n    brandService\n      .getById(id)\n      .then((res) => {\n        let brand = res.data;\n        form.setFieldsValue({\n          ...brand,\n          image: [createImage(brand.img)],\n        });\n        setImage([createImage(brand.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n      'images[0]': image[0]?.name,\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/brands';\n    if (locations.state === 'edit') {\n      brandService\n        .update(id, body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n          dispatch(fetchBrands({}));\n        })\n        .finally(() => setLoadingBtn(false));\n    } else {\n      brandService\n        .create(body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n          dispatch(fetchBrands({}));\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBrand(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.brand')}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ ...activeMenu.data }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name={'title'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    validator(_, value) {\n                      if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <Input maxLength={50} />\n              </Form.Item>\n            </Col>\n\n            <Col span={6}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='brands'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n\n            <Col span={6}>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </div>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default BrandsEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/career/career-clone.js",["5829","5830","5831"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Spin, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport careerService from '../../services/career';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCareer } from '../../redux/slices/career';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { DebounceSelect } from 'components/search';\nimport categoryService from 'services/category';\nimport CkeEditor from 'components/ckeEditor';\nimport getTranslationFields from 'helpers/getTranslationFields';\n\nconst CareerClone = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { id } = useParams();\n  const { params } = useSelector((state) => state.career, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const [location, setLocation] = useState(\n    activeMenu?.data?.location\n      ? {\n          lat: parseFloat(activeMenu?.data?.location?.latitude),\n          lng: parseFloat(activeMenu?.data?.location?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    careerService\n      .getById(alias)\n      .then((res) => {\n        let career = res.data;\n        const body = {\n          ...career,\n          ...getLanguageFields(career),\n          category_id: {\n            label: career.category.translation.title,\n            value: career.category.id,\n          },\n        };\n        // setLocation({\n        //   lat: career.location.latitude,\n        //   lng: career.location.longitude,\n        // });\n        form.setFieldsValue(body);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      address: getTranslationFields(languages, values, 'address'),\n      active: values.active ? 1 : 0,\n      'location[latitude]': location.lat,\n      'location[longitude]': location.lng,\n      category_id: values.category_id.value,\n    };\n    const nextUrl = 'catalog/career';\n    careerService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCareer(params));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => console.error(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchCareerList(search) {\n    const params = {\n      search: search.lenght > 0 ? search : undefined,\n      type: 'career',\n      active: 1,\n    };\n\n    return categoryService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n      })),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) getCategory(id);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.career')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input placeholder={t('name')} maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              <CkeEditor form={form} lang={defaultLang} languages={languages} />\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('category')}\n                name='category_id'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <DebounceSelect fetchOptions={fetchCareerList} />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('location')}\n                  name={`address[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={100} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n\n            <Col span={12} />\n\n            <Col span={24} className='mb-5' />\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default CareerClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/brands/brands-add.js",["5832"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport brandService from '../../services/brand';\nimport { fetchBrands } from '../../redux/slices/brand';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\n\nconst BrandsAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n      'images[0]': image[0]?.name,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/brands';\n    brandService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBrands({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.brand')}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('title')}\n              name={'title'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  validator(_, value) {\n                    if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <Input maxLength={50} />\n            </Form.Item>\n          </Col>\n\n          <Col span={6}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  required: !image?.length,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='brands'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={6}>\n            <div className='col-md-12 col-sm-6'>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </div>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\n\nexport default BrandsAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/career/career-edit.js",["5833","5834"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Spin, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport careerService from '../../services/career';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCareer } from '../../redux/slices/career';\nimport { DebounceSelect } from 'components/search';\nimport categoryService from 'services/category';\nimport CkeEditor from 'components/ckeEditor';\nimport getTranslationFields from 'helpers/getTranslationFields';\n\nconst CareerEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { id } = useParams();\n  const { params } = useSelector((state) => state.career, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    careerService\n      .getById(alias)\n      .then((res) => {\n        let career = res.data;\n        const body = {\n          ...career,\n          ...getLanguageFields(career),\n          category_id: {\n            label: career.category.translation.title,\n            value: career.category.id,\n          },\n          active: res?.data?.active ? res?.data?.active : false,\n        };\n        form.setFieldsValue(body);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      active: Number(values.active),\n      category_id: values.category_id.value,\n      type: values.type,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      address: getTranslationFields(languages, values, 'address'),\n    };\n    const nextUrl = 'catalog/career';\n    careerService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCareer(params));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => console.error(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchCareerList(search) {\n    const params = {\n      search: search.lenght > 0 ? search : undefined,\n      type: 'career',\n      active: 1,\n    };\n\n    return categoryService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n      })),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) getCategory(id);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.career')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input placeholder={t('name')} maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12} />\n            <Col span={24}>\n              <CkeEditor form={form} lang={defaultLang} languages={languages} />\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('category')}\n                name='category_id'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <DebounceSelect fetchOptions={fetchCareerList} />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('location')}\n                  name={`address[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={100} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n\n            <Col span={12} />\n\n            <Col span={24} className='mb-5' />\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default CareerEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/career/career-add.js",["5835"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport careerService from '../../services/career';\nimport { useTranslation } from 'react-i18next';\nimport { DebounceSelect } from 'components/search';\nimport careerCategoryService from 'services/category';\nimport { fetchCareer } from 'redux/slices/career';\nimport CkeEditor from '../../components/ckeEditor';\nimport getTranslationFields from 'helpers/getTranslationFields';\n\nconst CareerAdd = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      active: Number(values.active),\n      category_id: values.category_id.value,\n      type: values.type,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      address: getTranslationFields(languages, values, 'address'),\n    };\n    const nextUrl = 'catalog/career';\n    careerService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCareer());\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => console.error(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchCareerList(search) {\n    const params = {\n      search: search,\n      type: 'career',\n      active: 1,\n    };\n\n    return careerCategoryService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n      })),\n    );\n  }\n\n  return (\n    <Card title={t('add.career')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          parent_id: { title: '---', value: 0, key: 0 },\n          active: true,\n          ...activeMenu.data,\n        }}\n        form={form}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.title + index}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item?.locale === defaultLang,\n                    message: t('required'),\n                  },\n                  {\n                    validator(_, value) {\n                      if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('name')} maxLength={50} />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12} />\n          <Col span={24}>\n            <CkeEditor form={form} lang={defaultLang} languages={languages} />\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('category')}\n              name='category_id'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect fetchOptions={fetchCareerList} />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.locale + index}\n                label={t('location')}\n                name={`address[${item.locale}]`}\n                rules={[\n                  {\n                    required: item?.locale === defaultLang,\n                    message: t('required'),\n                  },\n                  {\n                    validator(_, value) {\n                      if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input maxLength={100} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n\n          <Col span={12} />\n\n          <Col span={24} className='mb-5' />\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default CareerAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-clone.js",["5836","5837","5838"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { fetchCategories } from '../../redux/slices/category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport { RefetchSearch } from 'components/refetch-search';\nimport { AsyncTreeSelect } from 'components/async-tree-select';\n\nconst ShopCategoryClone = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { state } = useLocation();\n\n  const [loading, setLoading] = useState(false);\n  const [type, setType] = useState('main');\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const { uuid } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n          parent_id: {\n            label: category.parent?.translation?.title,\n            value: category.parent_id,\n            key: category.parent_id,\n          },\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: values.parent_id?.value ? type : 'main',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = state?.parentId\n      ? `category/${state.parentUuid}`\n      : 'catalog/categories';\n\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(\n          fetchCategories({\n            type: state?.parentId ? 'sub_main' : 'main',\n            parent_id: state?.parentId,\n          }),\n        );\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  async function fetchUserCategoryList() {\n    const params = { perPage: 100, type: 'main' };\n    return categoryService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n        key: item.id,\n        type: 'main',\n        children: item.children?.map((el) => ({\n          label: el.translation?.title,\n          value: el.id,\n          key: el.id,\n          type: 'sub_main',\n          disabled: el.type === 'child',\n          children: el.children?.map((three) => ({\n            label: three.translation?.title,\n            value: three.id,\n            key: three.id,\n            disabled: true,\n            type: 'child',\n          })),\n        })),\n      })),\n    );\n  }\n\n  const handleCatrgory = (value, node, extra) => {\n    const { type } = node || {};\n    const nextType =\n      type === 'main' ? 'sub_main' : type === 'sub_main' ? 'child' : 'main';\n    setType(nextType);\n  };\n\n  return (\n    <Card title={t('category.clone')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 5) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.5')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} maxLength={150} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            {!state?.parentId && (\n              <Col span={12}>\n                <Form.Item\n                  label={t('parent.category')}\n                  name='parent_id'\n                  rules={[{ required: false, message: t('required') }]}\n                >\n                  <AsyncTreeSelect\n                    refetch\n                    fetchOptions={fetchUserCategoryList}\n                    onSelect={handleCatrgory}\n                    allowClear\n                  />\n                </Form.Item>\n              </Col>\n            )}\n\n            <Col span={4}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default ShopCategoryClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-request-edit.js",["5839","5840","5841"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport sellerCategory from '../../services/seller/category';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport { AsyncSelect } from 'components/async-select';\nimport requestModelsService from 'services/request-models';\nimport { fetchRequestModels } from 'redux/slices/request-models';\nimport { DebounceSelect } from 'components/search';\n\nconst SellerCategoryRequestEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { params } = useSelector((state) => state.requestModels, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const { state } = useLocation();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    requestModelsService\n      .getById(alias)\n      .then((res) => {\n        let request = res.data;\n        const body = {\n          ...request?.data,\n          keywords: request.data?.keywords.split(','),\n          parent_id: {\n            label: request.parent?.translation?.title,\n            value: request.data.parent_id,\n            key: request.data.parent_id,\n          },\n        };\n        form.setFieldsValue(body);\n        setImage([createImage(request.data.images?.at(0))]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      id: values.id,\n      type: 'category',\n      data: {\n        ...values,\n        type: state?.parentId ? 'sub_main' : 'main',\n        active: values.active ? 1 : 0,\n        keywords: values.keywords.join(','),\n        parent_id: state?.parentId || values.parent_id?.value,\n        images: image?.map((img) => img.name),\n      },\n    };\n    const paramsData = { ...params };\n    const nextUrl = 'catalog/categories';\n    requestModelsService\n      .requestChangeUpdate(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchRequestModels(paramsData));\n        navigate(`/${nextUrl}`, {state: {tab: 'request'}});\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(id);\n    }\n  }, [activeMenu.refetch]);\n\n  async function fetchUserCategoryList() {\n    const params = { perPage: 100, type: state?.parentId ? 'main' : 'sub_shop', active: 1 };\n    return sellerCategory.selectPaginate(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n        key: item.id,\n      }))\n    );\n  }\n\n  return (\n    <Card title={t('edit.request')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Form.Item name='id' hidden>\n              <InputNumber />\n            </Form.Item>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={['title', item.locale]}\n                  help={\n                    error\n                      ? error['title'][defaultLang]\n                        ? error['title'][defaultLang][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={['description', item.locale]}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('parent.category')}\n                name='parent_id'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <DebounceSelect fetchOptions={fetchUserCategoryList} />\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item label={t('image')}>\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default SellerCategoryRequestEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-show.js",["5842"],[],"import React, { useState, useEffect } from 'react';\nimport { Card, Col, Image, Modal, Row, Space, Tag } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport CategoryList from './category-list';\nimport SubcategoryAdd from './subcategory-add';\n\nconst CategoryShow = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const [categoryId, setCategoryId] = useState(null);\n  const [data, setData] = useState({});\n  const [id, setId] = useState(null);\n  const [isRefetch, setIsRefetch] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category?.keywords?.split(','),\n          parent_id: {\n            label: category.parent?.translation?.title,\n            value: category.parent_id,\n            key: category.parent_id,\n          },\n        };\n        setData(body);\n        setCategoryId(category.id);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const handleAddAction = (id) => {\n    setId(id);\n  };\n\n  const handleCancel = () => {\n    setId(null);\n  };\n\n  useEffect(() => {\n    if (uuid) getCategory(uuid);\n  }, [activeMenu.refetch, uuid]);\n  return (\n    <>\n      <Row gutter={24} className='mb-4'>\n        <Col span={8}>\n          <Card\n            title={t('basic.info')}\n            style={{ height: '100%' }}\n            loading={loading}\n          >\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('category.name')}:</strong>\n                  <span>{data?.translation?.title}</span>\n                </Space>\n              </Col>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('category.description')}:</strong>\n                  <span>{data[`description[${defaultLang || 'en'}]`]}</span>\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title={t('organization')}\n            style={{ height: '100%' }}\n            loading={loading}\n          >\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('keyword')}:</strong>\n                  {data?.keywords?.map((item, key) => (\n                    <Tag key={key}>{item}</Tag>\n                  ))}\n                </Space>\n              </Col>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('parent.category')}:</strong>\n                  <span>{data?.parent?.translation?.title}</span>\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card title={t('media')} style={{ height: '100%' }} loading={loading}>\n            <Space wrap>\n              {data?.image?.map((item) => (\n                <Image src={item.url} width={100} height={100} />\n              ))}\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n      {!!categoryId && (\n        <CategoryList\n          type={data?.type === 'main' ? 'sub_main' : 'child'}\n          parent_type={data?.type}\n          parentId={categoryId}\n          handleAddAction={handleAddAction}\n          isRefetch={isRefetch}\n        />\n      )}\n      <Modal\n        title={t('add.subcategory')}\n        visible={id}\n        onCancel={handleCancel}\n        centered\n        footer={null}\n        destroyOnClose\n      >\n        <SubcategoryAdd\n          setId={setId}\n          id={id}\n          setIsRefetch={setIsRefetch}\n          parent={{\n            parent_id: {\n              label: data[`title[${defaultLang}]`],\n              value: data?.id,\n            },\n            id: data?.id,\n            type: data?.type,\n          }}\n        />\n      </Modal>\n    </>\n  );\n};\nexport default CategoryShow;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-edit.js",["5843","5844"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n  InputNumber,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from 'components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport categoryService from 'services/category';\nimport { IMG_URL } from 'configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport { fetchCategories } from 'redux/slices/category';\nimport { AsyncTreeSelect } from 'components/async-tree-select';\n\nconst CategoryEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [type, setType] = useState('main');\n  const [hasChildren, setHasChildren] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { state } = useLocation();\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.category, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n      dispatch(\n        fetchCategories({\n          ...params,\n          type,\n          parent_id: state?.parentId,\n        }),\n      );\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          input: category?.input || 0,\n          image: [createImage(category.img)],\n          keywords: category?.keywords?.split(','),\n          parent_id: {\n            label: category.parent?.translation?.title,\n            value: category.parent_id,\n            key: category.parent_id,\n          },\n        };\n        setType(category?.type);\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n        if (category?.children?.length > 0 && category?.type === 'main')\n          setHasChildren(true);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: values.parent_id?.value ? type : 'main',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/categories';\n\n    categoryService\n      .update(uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    getCategory(uuid);\n  }, [activeMenu.refetch, uuid, state?.parentId]);\n\n  async function fetchUserCategoryList() {\n    const { id } = form.getFieldValue();\n    const params = { perPage: 100, type: 'main' };\n    return categoryService.getAll(params).then((res) =>\n      res.data\n        .filter((item) => item.id !== id)\n        .map((item) => ({\n          label: item.translation?.title,\n          value: item.id,\n          key: item.id,\n          type: 'main',\n          children: item.children?.map((el) => ({\n            label: el.translation?.title,\n            value: el.id,\n            key: el.id,\n            type: 'sub_main',\n            disabled: el.id === id,\n            children: el.children?.map((three) => ({\n              label: three.translation?.title,\n              value: three.id,\n              key: three.id,\n              disabled: true,\n              type: 'child',\n            })),\n          })),\n        })),\n    );\n  }\n  const handleCatrgory = (value, node, extra) => {\n    const { type } = node || {};\n    const nextType =\n      type === 'main' ? 'sub_main' : type === 'sub_main' ? 'child' : 'main';\n    setType(nextType);\n  };\n\n  return (\n    <>\n      <Card\n        title={state?.parentId ? t('edit.sub.category') : t('edit.category')}\n        extra={<LanguageList />}\n      >\n        {!loading ? (\n          <Form\n            name='basic'\n            layout='vertical'\n            onFinish={onFinish}\n            initialValues={{\n              active: true,\n              ...activeMenu.data,\n            }}\n            form={form}\n          >\n            <Row gutter={12}>\n              <Col span={12}>\n                {languages.map((item, index) => (\n                  <Form.Item\n                    key={item.title + index}\n                    label={t('name')}\n                    name={`title[${item.locale}]`}\n                    help={\n                      error\n                        ? error[`title.${defaultLang}`]\n                          ? error[`title.${defaultLang}`][0]\n                          : null\n                        : null\n                    }\n                    validateStatus={error ? 'error' : 'success'}\n                    rules={[\n                      {\n                        validator(_, value) {\n                          if (!value && item?.locale === defaultLang) {\n                            return Promise.reject(new Error(t('required')));\n                          } else if (value && value?.trim() === '') {\n                            return Promise.reject(\n                              new Error(t('no.empty.space')),\n                            );\n                          } else if (value && value?.trim().length < 2) {\n                            return Promise.reject(\n                              new Error(t('must.be.at.least.2')),\n                            );\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input maxLength={50} />\n                  </Form.Item>\n                ))}\n              </Col>\n\n              <Col span={12}>\n                {languages.map((item, index) => (\n                  <Form.Item\n                    key={item.locale + index}\n                    label={t('description')}\n                    name={`description[${item.locale}]`}\n                    rules={[\n                      {\n                        validator(_, value) {\n                          if (!value && item?.locale === defaultLang) {\n                            return Promise.reject(new Error(t('required')));\n                          } else if (value && value?.trim() === '') {\n                            return Promise.reject(\n                              new Error(t('no.empty.space')),\n                            );\n                          } else if (value && value?.trim().length < 5) {\n                            return Promise.reject(\n                              new Error(t('must.be.at.least.5')),\n                            );\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <TextArea rows={4} maxLength={150} />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('keywords')}\n                  name='keywords'\n                  rules={[{ required: true, message: t('required') }]}\n                >\n                  <Select mode='tags' style={{ width: '100%' }}></Select>\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('parent.category')}\n                  name='parent_id'\n                  rules={[{ required: false, message: t('required') }]}\n                >\n                  <AsyncTreeSelect\n                    fetchOptions={fetchUserCategoryList}\n                    onSelect={handleCatrgory}\n                    allowClear\n                    disabled={hasChildren}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name='input'\n                  label={t('input')}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    min={0}\n                    parser={(value) => parseInt(value, 10)}\n                    max={9999999}\n                    className='w-100'\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={4}>\n                <Form.Item\n                  label={t('image')}\n                  name='images'\n                  rules={[\n                    {\n                      required: !image?.length,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <MediaUpload\n                    type='categories'\n                    imageList={image}\n                    setImageList={setImage}\n                    form={form}\n                    multiple={false}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={2}>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n            </Row>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </Form>\n        ) : (\n          <div className='d-flex justify-content-center align-items-center py-5'>\n            <Spin size='large' className='mt-5 pt-5' />\n          </div>\n        )}\n      </Card>\n    </>\n  );\n};\nexport default CategoryEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-add.js",["5845"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Switch,\n  InputNumber,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport LanguageList from 'components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport categoryService from 'services/category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport { AsyncTreeSelect } from 'components/async-tree-select';\n\nconst CategoryAdd = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [type, setType] = useState('main');\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n\n    const body = {\n      ...values,\n      type: values.parent_id?.value ? type : 'main',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/categories';\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchUserCategoryList() {\n    const params = { perPage: 100, type: 'main' };\n    return categoryService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n        key: item.id,\n        type: 'main',\n        children: item.children?.map((el) => ({\n          label: el.translation?.title,\n          value: el.id,\n          key: el.id,\n          type: 'sub_main',\n          disabled: el.type === 'child',\n          children: el.children?.map((three) => ({\n            label: three.translation?.title,\n            value: three.id,\n            key: three.id,\n            disabled: true,\n            type: 'child',\n          })),\n        })),\n      })),\n    );\n  }\n\n  // async function fetchUserCategoryList() {\n  //   const params = {\n  //     perPage: 100,\n  //     type: state?.parentId ? 'main' : 'sub_shop',\n  //     active: 1,\n  //   };\n  //   return categoryService.selectPaginate(params).then((res) =>\n  //     res.data.map((item) => ({\n  //       label: item.translation?.title,\n  //       value: item.id,\n  //       key: item.id,\n  //     }))\n  //   );\n  // }\n\n  const handleCategory = (value, node) => {\n    const { type } = node || {};\n    const nextType =\n      type === 'main' ? 'sub_main' : type === 'sub_main' ? 'child' : 'main';\n    setType(nextType);\n  };\n  return (\n    <Card title={t('add.category')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          active: true,\n          ...activeMenu.data,\n        }}\n        form={form}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.title + index}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                help={\n                  error\n                    ? error[`title.${defaultLang}`]\n                      ? error[`title.${defaultLang}`][0]\n                      : null\n                    : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n                rules={[\n                  {\n                    required: true,\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('name')} maxLength={50} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.locale + index}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    required: true,\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 5) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.5')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={4} maxLength={150} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('keywords')}\n              name='keywords'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select mode='tags' style={{ width: '100%' }}></Select>\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('parent.category')}\n              name='parent_id'\n              rules={[{ required: false, message: t('required') }]}\n            >\n              <AsyncTreeSelect\n                refetch\n                fetchOptions={fetchUserCategoryList}\n                onSelect={handleCategory}\n                allowClear\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='input'\n              label={t('input')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <InputNumber\n                min={0}\n                parser={(value) => parseInt(value, 10)}\n                max={9999999}\n                className='w-100'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={4}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  required: !image?.length,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='categories'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={2}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default CategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/chat/index.js",["5846","5847","5848"],[],"import React, { useContext, useEffect, useRef, useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport {\n  Sidebar,\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Avatar,\n  ConversationList,\n  Conversation,\n  ConversationHeader,\n} from '@chatscope/chat-ui-kit-react';\nimport Channel from './channel';\nimport {\n  deleteChat,\n  deleteMessage,\n  editMessage,\n  fetchMessages,\n  getChat,\n  sendMessage,\n} from '../../firebase';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  removeCurrentChat,\n  setAuthUserId,\n  setChatInitialized,\n  setChats,\n  setCurrentChat,\n  setMessages,\n  setMessagesLoading,\n  setUnsubscriber,\n} from '../../redux/slices/chat';\nimport { getMessages } from '../../redux/selectors/chatSelector';\nimport { scrollTo } from '../../helpers/scrollTo';\nimport { useTranslation } from 'react-i18next';\n// import {DeleteOutlined, MoreOutlined} from '@ant-design/icons';\n// import {Dropdown, Menu} from 'antd';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport getAvatar from '../../helpers/getAvatar';\nimport UploadMedia from './upload-media';\nimport { toast } from 'react-toastify';\nimport { SUPPORTED_FORMATS } from '../../configs/app-global';\nimport MessageActionIndicator from './message-action-indicator';\n\nlet chatUnsubscribe;\n\nexport default function Chat() {\n  const { t } = useTranslation();\n  const inputRef = useRef();\n  const nextRef = useRef();\n  const dispatch = useDispatch();\n  const messageEndRef = useRef();\n  const { setIsModalVisible } = useContext(Context);\n  const [file, setFile] = useState('');\n  const [url, setUrl] = useState('');\n  const [modal, setModal] = useState(false);\n  const currentUserId = useSelector((state) => state.auth.user.id);\n  const { chats, currentChat, messagesLoading, chatInitialized, authUserId } =\n    useSelector((state) => state.chat, shallowEqual);\n  const groupMessages = useSelector(\n    (state) => getMessages(state.chat.messages),\n    shallowEqual,\n  );\n  const [newMessage, setNewMessage] = useState('');\n  const [actionMessage, setActionMessage] = useState({\n    actionType: null,\n    message: null,\n  });\n\n  const messageUnsubscribeRef = useRef();\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [inputRef, currentChat]);\n\n  useEffect(() => {\n    if (!chatInitialized) {\n      chatUnsubscribe?.();\n      chatUnsubscribe = getChat(currentUserId);\n      batch(() => {\n        dispatch(setAuthUserId(currentUserId));\n        dispatch(setChatInitialized(true));\n      });\n    } else if (currentUserId !== authUserId) {\n      chatUnsubscribe?.();\n      batch(() => {\n        dispatch(removeCurrentChat());\n        dispatch(setChats([]));\n        dispatch(setMessages([]));\n        dispatch(setAuthUserId(currentUserId));\n      });\n      chatUnsubscribe = getChat(currentUserId);\n    }\n  }, [currentUserId]);\n\n  const handleOnChange = (value) => {\n    setNewMessage(value);\n  };\n\n  const scrollToBottom = () => {\n    const topPosition = messageEndRef.current.offsetTop;\n    const container = document.querySelector(\n      '.message-list .scrollbar-container',\n    );\n    scrollTo(container, topPosition - 30, 600);\n  };\n\n  const handleOnSubmit = async (data) => {\n    setNewMessage('');\n    if (actionMessage.actionType === 'reply')\n      data.replyDocId = actionMessage.message.id;\n    if (actionMessage.actionType === 'edit') {\n      await editMessage(currentUserId, currentChat.chatId, data, actionMessage);\n    } else {\n      scrollToBottom();\n      await sendMessage(currentUserId, currentChat.chatId, data);\n    }\n    clearActionMessage();\n  };\n\n  const handleChatClick = (chat) => {\n    if (messageUnsubscribeRef.current) messageUnsubscribeRef.current();\n    batch(() => {\n      dispatch(setMessagesLoading(true));\n      dispatch(setCurrentChat(chat));\n    });\n    messageUnsubscribeRef.current = fetchMessages(chat.chatId, currentUserId);\n    clearActionMessage();\n  };\n\n  const deleteCurrentChat = async () => {\n    await deleteChat(currentChat.chatId);\n    groupMessages.forEach((group) => {\n      group.messages.forEach((item) =>\n        deleteMessage(currentChat.chatId, item.id),\n      );\n    });\n    messageUnsubscribeRef.current?.();\n    batch(() => {\n      dispatch(removeCurrentChat());\n      dispatch(setMessages([]));\n    });\n    setIsModalVisible(false);\n    clearActionMessage();\n  };\n\n  function handleFile(event) {\n    if (!SUPPORTED_FORMATS.includes(event.target.files[0].type)) {\n      toast.error('Supported only image formats!');\n    } else {\n      setFile(event.target.files[0]);\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setUrl(reader.result);\n          setModal(true);\n        }\n      };\n      reader?.readAsDataURL(event.target.files[0]);\n    }\n  }\n\n  const onAttachClick = () => {\n    nextRef.current.click();\n  };\n\n  const clearActionMessage = () => {\n    setActionMessage({ actionType: null, message: null });\n    if (newMessage) setNewMessage('');\n    inputRef.current?.focus();\n  };\n\n  const handleActionMessage = (actionType, message) => {\n    setActionMessage({ actionType, message });\n    if (actionType === 'edit') {\n      setNewMessage(message.message);\n    }\n    inputRef.current?.focus();\n  };\n\n  const handleDelete = (message) => {\n    const messageBeforeLastMessage =\n      groupMessages?.at(-1)?.messages?.at(-2) ||\n      groupMessages?.at(-2)?.messages?.at(-1);\n    deleteMessage(currentChat.chatId, message, messageBeforeLastMessage).then();\n  };\n\n  return (\n    <div style={{ height: '80vh' }}>\n      <input\n        type='file'\n        ref={nextRef}\n        onChange={handleFile}\n        accept='image/jpg, image/jpeg, image/png, image/svg+xml, image/svg'\n        className='d-none'\n      />\n      <MainContainer responsive className='chat-container rounded'>\n        <Sidebar position='left' scrollable={false} className='chat-sidebar'>\n          <ConversationList>\n            {chats\n              .filter((item) => item.user.id !== undefined)\n              .map((chat, idx) => {\n                return (\n                  <Conversation\n                    onClick={() => {\n                      handleChatClick(chat);\n                    }}\n                    key={idx}\n                    name={\n                      chat.user.firstname + ' ' + (chat.user.lastname || '')\n                    }\n                    info={chat.lastMessage}\n                  >\n                    <Avatar\n                      src={getAvatar(chat.user?.img)}\n                      name={chat.user?.firstname}\n                    />\n                  </Conversation>\n                );\n              })}\n          </ConversationList>\n        </Sidebar>\n\n        <ChatContainer className='chat-container'>\n          {currentChat ? (\n            <ConversationHeader className='chat-header'>\n              <ConversationHeader.Back />\n              <Avatar\n                src={getAvatar(currentChat?.user?.img)}\n                name={currentChat?.user?.firstname}\n              />\n              <ConversationHeader.Content\n                userName={`${currentChat?.user?.firstname} ${\n                  currentChat?.user?.lastname || ''\n                }`}\n              />\n              {/*  <ConversationHeader.Actions>*/}\n              {/*      <Dropdown*/}\n              {/*          overlay={<Menu*/}\n              {/*              items={[{*/}\n              {/*                  key: '1',*/}\n              {/*                  label: <div>{t('delete.chat')}</div>,*/}\n              {/*                  icon: <DeleteOutlined/>,*/}\n              {/*                  onClick: () => setIsModalVisible(true),*/}\n              {/*              },]}*/}\n              {/*          />}*/}\n              {/*      >*/}\n              {/*<span className='more-btn'>*/}\n              {/*  <MoreOutlined style={{fontSize: 22}}/>*/}\n              {/*</span>*/}\n              {/*      </Dropdown>*/}\n              {/*  </ConversationHeader.Actions>*/}\n            </ConversationHeader>\n          ) : (\n            ''\n          )}\n          <MessageList loading={messagesLoading} className='message-list'>\n            <Channel\n              groupMessages={groupMessages}\n              messageEndRef={messageEndRef}\n              handleActionMessage={handleActionMessage}\n              handleDelete={handleDelete}\n            />\n            {actionMessage.message && (\n              <MessageActionIndicator\n                actionMessage={actionMessage}\n                cancelMessageAction={clearActionMessage}\n              />\n            )}\n          </MessageList>\n          {groupMessages.length ? (\n            <MessageInput\n              ref={inputRef}\n              value={newMessage}\n              onChange={handleOnChange}\n              onSend={(inputVal) =>\n                handleOnSubmit({\n                  message: inputVal\n                    .replace(/\\&nbsp;/g, '')\n                    .replace(/<[^>]+>/g, '')\n                    .trim(),\n                })\n              }\n              placeholder='Message'\n              className='chat-input'\n              onAttachClick={onAttachClick}\n            />\n          ) : null}\n        </ChatContainer>\n      </MainContainer>\n      <UploadMedia\n        modal={modal}\n        url={url}\n        setModal={setModal}\n        file={file}\n        handleOnSubmit={handleOnSubmit}\n      />\n      <CustomModal click={deleteCurrentChat} text={t('delete.chat')} />\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/coupon-edit.js",["5849"],[],"import React, { useEffect, useState } from 'react';\nimport { Form, Card } from 'antd';\nimport LanguageList from 'components/language-list';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport couponService from 'services/coupon';\nimport moment from 'moment';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCoupon } from 'redux/slices/coupon';\nimport CouponForm from './coupon-form';\nimport { toast } from 'react-toastify';\n\nconst CouponEdit = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function getCoupon(id) {\n    setLoading(true);\n    couponService\n      .getById(id)\n      .then(({ data }) => {\n        const body = {\n          ...data,\n          shop_id: {\n            label: data?.shop?.translation?.title,\n            value: data?.shop?.id,\n            key: data?.shop?.id,\n          },\n          ...getLanguageFields(data),\n          expired_at: moment(data.expired_at, 'YYYY-MM-DD'),\n        };\n\n        form.setFieldsValue({\n          ...body,\n        });\n\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { ...body, expired_at: JSON.stringify(body?.expired_at) },\n          }),\n        );\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  const onFinish = (values) => {\n    const params = {\n      ...values,\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      qty: Number(values.qty),\n      price: Number(values.price),\n    };\n    const nextUrl = 'coupons';\n\n    couponService.update(id, params).then(() => {\n      toast.success(t('toast.updated'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCoupon({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCoupon(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.coupon')} extra={<LanguageList />} loading={loading}>\n      <CouponForm form={form} handleSubmit={onFinish} />\n    </Card>\n  );\n};\n\nexport default CouponEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/coupon-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/email-provider/email-edit.js",["5850","5851"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport emailService from '../../services/emailSettings';\nimport Loading from '../../components/loading';\nimport { fetchEmailProvider } from 'redux/slices/emailProvider';\n\nconst EmailProviderEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const getEmailProvider = (alias) => {\n    setLoading(true);\n    emailService\n      .getById(alias)\n      .then((res) => {\n        let emailProvider = res.data;\n\n        const data = {\n          ...emailProvider,\n        };\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      smtp_auth: values.smtp_auth,\n      smtp_debug: values.smtp_debug,\n      port: values.port,\n      password: values.password,\n      from_to: values.from_to,\n      host: values.host,\n      active: values.active,\n      from_site: values.from_site,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'settings/emailProviders';\n    emailService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchEmailProvider());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getEmailProvider(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.email.provider')} className='h-100'>\n      {loading ? (\n        <Loading />\n      ) : (\n        <Form\n          name='email-provider-add'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{\n            smtp_debug: true,\n            smtp_auth: true,\n            active: true,\n            ...activeMenu.data,\n          }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'email',\n                    message: t('invalid.email'),\n                  },\n                ]}\n                label={t('email')}\n                name='from_to'\n              >\n                <Input placeholder='Email' />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'string',\n                    min: 6,\n                    message: t('min.6.letters'),\n                  },\n                ]}\n                label={t('password')}\n                name='password'\n                normalize={(value) =>\n                  value?.trim() === '' ? value?.trim() : value\n                }\n              >\n                <Input.Password />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                label={t('host')}\n                name='host'\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n                label={t('port')}\n                name='port'\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n                label={t('from.site')}\n                name='from_site'\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n\n            <Col span={8}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n\n            <Col span={8}>\n              <Form.Item\n                valuePropName='checked'\n                label={t('smtp_debug')}\n                name='smtp_debug'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n\n            <Col span={8}>\n              <Form.Item\n                valuePropName='checked'\n                label={t('smtp_auth')}\n                name='smtp_auth'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Card>\n  );\n};\n\nexport default EmailProviderEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-orders/order-details.js",["5852","5853","5854"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  Table,\n  Tag,\n  Row,\n  Skeleton,\n  Space,\n  Avatar,\n  Badge,\n  Col,\n  Typography,\n  Steps,\n  Spin,\n  Image,\n} from 'antd';\nimport { CalendarOutlined } from '@ant-design/icons';\nimport { useParams } from 'react-router-dom';\nimport orderService from '../../services/deliveryman/order';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport { BiDollar, BiMessageDots, BiMoney } from 'react-icons/bi';\nimport {\n  BsCalendarDay,\n  BsFillPersonFill,\n  BsFillTelephoneFill,\n} from 'react-icons/bs';\nimport { MdEmail } from 'react-icons/md';\nimport { IoMapOutline } from 'react-icons/io5';\nimport moment from 'moment';\nimport getImage from '../../helpers/getImage';\nimport hideEmail from '../../components/hideEmail';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function DeliverymanOrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { isDemo } = useDemo();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => row.stock?.id,\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => (\n        <Space direction='vertical' className='relative'>\n          {row.stock?.product?.translation?.title}\n          {row.stock?.extras?.map((extra) => (\n            <Tag key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row.stock?.product?.img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    // {\n    //   title: t('price'),\n    //   dataIndex: 'origin_price',\n    //   key: 'origin_price',\n    //   render: (origin_price) =>\n    //     numberToPrice(origin_price, defaultCurrency?.symbol),\n    // },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (text) => <span>{text}</span>,\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'discount',\n      key: 'discount',\n      render: (discount = 0) =>\n        numberToPrice(discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (tax) => numberToPrice(tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price, row) => {\n        return numberToPrice(total_price, defaultCurrency?.symbol);\n      },\n    },\n  ];\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.user?.firstname}{' '}\n            {data?.user?.lastname || ''}\n          </>\n        }\n      />\n\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='justify-content-between w-100'>\n              <Space className='align-items-start'>\n                <CalendarOutlined className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('delivery.date')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.delivery_date} {data?.delivery_time}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMoney className='order-card-icon' />\n\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('total.price')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} loading={loading} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {numberToPrice(\n                        data?.total_price,\n                        defaultCurrency?.symbol,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMessageDots className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('messages')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.review ? 1 : 0}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <FiShoppingCart className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('products')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.details?.reduce(\n                        (total, item) => (total += item.quantity),\n                        0,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n            </Space>\n          </Card>\n        </Col>\n        {data?.status !== 'canceled' && (\n          <Col span={24}>\n            <Card>\n              <Steps\n                current={statusList?.findIndex(\n                  (item) => item.name === data?.status,\n                )}\n              >\n                {statusList?.slice(0, -1).map((item) => (\n                  <Steps.Step key={item.id} title={t(item.name)} />\n                ))}\n              </Steps>\n            </Card>\n          </Col>\n        )}\n        <Col span={16}>\n          <Spin spinning={loading}>\n            <Card style={{ minHeight: '200px' }}>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <div>\n                    {t('created.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' />{' '}\n                      {moment(data?.created_at).format('YYYY-MM-DD hh:mm')}{' '}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' /> {data?.delivery_date}{' '}\n                      {data?.delivery_time}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.status')}:\n                    <span className='ml-2'>{t(data?.transaction?.status)}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('house')}:\n                    <span className='ml-2'>{t(data?.address?.house)}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('floor')}:\n                    <span className='ml-2'>{t(data?.address?.floor)}</span>\n                  </div>\n                </Col>\n                <Col span={12}>\n                  <div>\n                    {t('status')}:\n                    <span className='ml-2'>\n                      {data?.status === 'new' ? (\n                        <Tag color='blue'>{t(data?.status)}</Tag>\n                      ) : data?.status === 'canceled' ? (\n                        <Tag color='error'>{t(data?.status)}</Tag>\n                      ) : (\n                        <Tag color='cyan'>{t(data?.status)}</Tag>\n                      )}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.type')}:\n                    <span className='ml-2'>{data?.delivery_type}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.type')}:\n                    <span className='ml-2'>\n                      {t(data?.transaction?.payment_system?.tag)}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('address')}:\n                    <span className='ml-2'>{data?.address?.address}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('office')}:\n                    <span className='ml-2'>{data?.address?.office}</span>\n                  </div>\n                  <br />\n                </Col>\n              </Row>\n            </Card>\n          </Spin>\n          {/* <Card title={t('documents')}>\n            <Table\n              columns={documentColumns}\n              dataSource={documents}\n              pagination={false}\n              loading={loading}\n            />\n          </Card> */}\n          <Card className='w-100 order-table'>\n            <Table\n              scroll={{ x: true }}\n              columns={columns}\n              dataSource={activeMenu.data?.details || []}\n              loading={loading}\n              rowKey={(record) => record.id}\n              pagination={false}\n            />\n            <Space\n              size={100}\n              className='d-flex justify-content-end w-100 order-table__summary'\n            >\n              <div>\n                <span>{t('delivery.fee')}:</span>\n                <br />\n                <span>{t('order.tax')}:</span>\n                <br />\n                <span>{t('product')}:</span>\n                <br />\n                <span>{t('coupon')}:</span>\n                <br />\n                <span>{t('discount')}:</span>\n                <br />\n                <h3>{t('total.price')}:</h3>\n              </div>\n              <div>\n                <span>\n                  {numberToPrice(\n                    data?.delivery_fee ?? 0,\n                    defaultCurrency?.symbol\n                  )}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.total_tax, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.coupon?.price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.total_discount, defaultCurrency.symbol)}\n                </span>\n                <br />\n                <h3>\n                  {numberToPrice(data?.total_price, defaultCurrency.symbol)}\n                </h3>\n              </div>\n            </Space>\n          </Card>\n        </Col>\n        <Col span={8} className='order_info'>\n          {data?.status === 'ready' && data?.delivery_type !== 'pickup' && (\n            <Card title={t('deliveryman')}>\n              {data?.deliveryman && (\n                <Space>\n                  <Avatar\n                    shape='square'\n                    size={64}\n                    src={data?.deliveryman?.img}\n                  />\n                  <div>\n                    <h5>\n                      {data?.deliveryman?.firstname}{' '}\n                      {data?.deliveryman?.lastname || ''}\n                    </h5>\n                    <span className='delivery-info'>\n                      <BsFillTelephoneFill />\n                      {data?.deliveryman?.phone}\n                    </span>\n\n                    <div className='delivery-info'>\n                      <b>\n                        <MdEmail size={16} />\n                      </b>\n                      <span>\n                        {isDemo\n                          ? hideEmail(data?.deliveryman?.email)\n                          : data?.deliveryman?.email}\n                      </span>\n                    </div>\n                  </div>\n                </Space>\n              )}\n            </Card>\n          )}\n\n          {!!data?.username && (\n            <Card title={t('order.receiver')}>\n              <div className='customer-info'>\n                <span className='title'>{t('name')}</span>\n                <span className='description'>\n                  <BsFillPersonFill />\n                  {data?.username}\n                </span>\n              </div>\n              <div className='customer-info'>\n                <span className='title'>{t('phone')}</span>\n                <span className='description'>\n                  <BsFillTelephoneFill />\n                  {data?.phone}\n                </span>\n              </div>\n            </Card>\n          )}\n\n          <Card>\n            <div className='d-flex w-100 customer-info-container'>\n              {loading ? (\n                <Skeleton.Avatar size={64} shape='square' />\n              ) : (\n                <Avatar shape='square' size={64} src={data?.user?.img} />\n              )}\n\n              <h5 className='customer-name'>\n                {loading ? (\n                  <Skeleton.Button size={20} style={{ width: 70 }} />\n                ) : (\n                  data?.user?.firstname + ' ' + (data?.user?.lastname || '')\n                )}\n              </h5>\n\n              <div className='customer-info-detail'>\n                <div className='customer-info'>\n                  <span className='title'>{t('phone')}</span>\n                  <span className='description'>\n                    <BsFillTelephoneFill />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      data?.user?.phone || 'none'\n                    )}\n                  </span>\n                </div>\n\n                <div className='customer-info'>\n                  <span className='title'>{t('email')}</span>\n                  <span className='description'>\n                    <MdEmail />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <>\n                        {isDemo\n                          ? hideEmail(data?.user?.email)\n                          : data?.user?.email}\n                      </>\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('registration.date')}</span>\n                  <span className='description'>\n                    <BsCalendarDay />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      moment(data?.user?.created_at).format('DD-MM-YYYY, hh:mm')\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('orders.count')}</span>\n                  <span className='description'>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#3d7de3' }}\n                        count={data?.user?.orders_count || 0}\n                      />\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('spent.since.registration')}</span>\n                  <span className='description'>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#48e33d' }}\n                        count={numberToPrice(\n                          data?.user?.orders_sum_price,\n                          defaultCurrency.symbol,\n                        )}\n                      />\n                    )}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </Card>\n          {data?.review && !loading && (\n            <Card title={t('messages')}>\n              <div className='order-message'>\n                <span className='message'>{data?.review.comment}</span>\n                <Space className='w-100 justify-content-end'>\n                  <span className='date'>\n                    {moment(data?.review.created_at).format('YYYY-MM-DD hh:mm')}\n                  </span>\n                </Space>\n              </div>\n            </Card>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/email-provider/email-add.js",["5855"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport emailService from 'services/emailSettings';\nimport { fetchEmailProvider } from 'redux/slices/emailProvider';\n\nconst EmailProviderAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      smtp_auth: values.smtp_auth,\n      smtp_debug: values.smtp_debug,\n      port: values.port,\n      password: values.password,\n      from_to: values.from_to,\n      host: values.host,\n      active: Number(values.active),\n      from_site: values.from_site,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'settings/emailProviders';\n    emailService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchEmailProvider());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.email.provider')} className='h-100'>\n      <Form\n        name='email-provider-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{\n          smtp_debug: true,\n          smtp_auth: true,\n          active: true,\n          ...activeMenu.data,\n        }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'email',\n                  message: t('invalid.email'),\n                },\n              ]}\n              label={t('email')}\n              name='from_to'\n            >\n              <Input placeholder='Email' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'string',\n                  min: 6,\n                  message: t('min.6.letters'),\n                },\n              ]}\n              label={t('password')}\n              name='password'\n              normalize={(value) =>\n                value?.trim() === '' ? value?.trim() : value\n              }\n            >\n              <Input.Password />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              rules={[\n                {\n                  validator(_, value) {\n                    if (!value) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              label={t('host')}\n              name='host'\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n              label={t('port')}\n              name='port'\n            >\n              <InputNumber min={0} className='w-100' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n              label={t('from.site')}\n              name='from_site'\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={8}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n\n          <Col span={8}>\n            <Form.Item\n              valuePropName='checked'\n              label={t('smtp_debug')}\n              name='smtp_debug'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n\n          <Col span={8}>\n            <Form.Item\n              valuePropName='checked'\n              label={t('smtp_auth')}\n              name='smtp_auth'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default EmailProviderAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/addons/index.js",["5856","5857"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  ClearOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Table, Card, Space, Switch, Tag, Tabs } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { export_url } from '../../configs/app-global';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport productService from '../../services/product';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { DebounceSelect } from '../../components/search';\nimport shopService from '../../services/restaurant';\nimport SearchInput from '../../components/search-input';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport ProductStatusModal from './productStatusModal';\nimport FilterColumns from '../../components/filter-column';\nimport { fetchAddons } from '../../redux/slices/addons';\nimport RiveResult from '../../components/rive-result';\nimport { CgExport, CgImport } from 'react-icons/cg';\n\nconst { TabPane } = Tabs;\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\nconst roles = ['all', 'published', 'pending', 'unpublished'];\n\nconst AddonsCategories = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [productDetails, setProductDetails] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      is_show: true,\n      render: (_, data) => data.translation?.title,\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status) => (\n        <div>\n          {status === 'published' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag\n                key={index + '_' + 'locales'}\n                className='text-uppercase'\n                color={[colors[index]]}\n              >\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop_id',\n      is_show: true,\n      render: (_, row) => {\n        return row.shop?.translation?.title;\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setProductDetails(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row.uuid)}\n            />\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([row.id]);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const [id, setId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [active, setActive] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    brand_id: data?.brand?.value,\n    category_id: data?.category?.value,\n    shop_id: data?.shop?.value,\n    sort: data?.sort,\n    status: immutable === 'all' ? undefined : immutable,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const { addonsList, meta, loading, params } = useSelector(\n    (state) => state.addons,\n    shallowEqual\n  );\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      })\n    );\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        id: 'addon-import',\n        url: `catalog/addon/import`,\n        name: t('addon.import'),\n        shop_id: activeMenu?.data?.shop?.value,\n      })\n    );\n    navigate(`/catalog/addon/import`);\n  };\n\n  const productDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n\n    productService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchAddons(paramsData));\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    productService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchAddons(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchAddons(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchAddons(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const excelExport = () => {\n    setDownloading(true);\n    const params = {\n      addon: 1,\n      shop_id: activeMenu?.data?.shop?.value,\n    };\n    productService\n      .export(params)\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const goToEdit = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `addon-edit`,\n        url: `addon/${uuid}`,\n        name: t('edit.addon'),\n      })\n    );\n    clearData();\n    navigate(`/addon/${uuid}`);\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `addon-clone`,\n        url: `addon-clone/${uuid}`,\n        name: t('clone.addon'),\n      })\n    );\n    clearData();\n    navigate(`/addon-clone/${uuid}`);\n  };\n\n  const goToAddProduct = () => {\n    dispatch(\n      addMenu({\n        id: 'addon-add',\n        url: `addon/add`,\n        name: t('add.addon'),\n      })\n    );\n    clearData();\n    navigate(`/addon/add`);\n  };\n\n  async function fetchShops(search) {\n    const params = {\n      search: search.length === 0 ? null : search,\n    };\n    return shopService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }))\n    );\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      })\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <DebounceSelect\n            placeholder={t('select.shop')}\n            fetchOptions={fetchShops}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ shop: e })}\n            value={activeMenu.data?.shop}\n          />\n          <Button onClick={goToImport} disabled={!activeMenu?.data?.shop}>\n            <CgImport className='mr-2' />\n            {t('import')}\n          </Button>\n          <Button loading={downloading} onClick={excelExport}>\n            <CgExport className='mr-2' />\n            {t('export')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            icon={<ClearOutlined />}\n            onClick={handleClear}\n            disabled={!activeMenu.data}\n            style={{ minWidth: 100 }}\n          />\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddProduct}\n          >\n            {t('addon.add')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('addons')}>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n        <Table\n          locale={{\n            emptyText: <RiveResult id='nosell' />,\n          }}\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          loading={loading}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={addonsList}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          onChange={onChangePagination}\n          rowKey={(record) => record.id}\n        />\n      </Card>\n      {productDetails && (\n        <ProductStatusModal\n          orderDetails={productDetails}\n          handleCancel={() => setProductDetails(null)}\n        />\n      )}\n      <CustomModal\n        click={active ? handleActive : productDelete}\n        text={\n          active ? t('set.active.food') : text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setActive}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AddonsCategories;\n","/home/mostafa/Magde/new/frontadminreact/src/views/banners/index.js",["5858"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Switch, Table } from 'antd';\nimport { IMG_URL } from 'configs/app-global';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport bannerService from 'services/banner';\nimport { fetchBanners } from 'redux/slices/banner';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport moment from 'moment';\n\nconst Banners = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [activeId, setActiveId] = useState(null);\n  const [type, setType] = useState(null);\n  const { banners, meta, loading } = useSelector(\n    (state) => state.banner,\n    shallowEqual,\n  );\n  const [id, setId] = useState(null);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={IMG_URL + img}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            key={row.id + active}\n            onChange={() => {\n              setIsModalVisible(true);\n              setActiveId(row.id);\n              setType(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('DD.MM.YYYY HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setType(false);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAddBanners = () => {\n    dispatch(\n      addMenu({\n        id: 'banner/add',\n        url: 'banner/add',\n        name: t('add.banner'),\n      }),\n    );\n    navigate('/banner/add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `banner/${row.id}`,\n        id: 'banner_edit',\n        name: t('edit.banner'),\n      }),\n    );\n    navigate(`/banner/${row.id}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        url: `banner/clone/${row.id}`,\n        id: 'banner_clone',\n        name: t('clone.banner'),\n      }),\n    );\n    navigate(`/banner/clone/${row.id}`);\n  };\n\n  const bannerDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    bannerService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchBanners());\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      status: data?.role || 'published',\n    };\n    dispatch(fetchBanners(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      status: data?.role || 'published',\n    };\n    if (activeMenu.refetch) {\n      dispatch(fetchBanners(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchBanners({ perPage: pageSize, page: current }));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    bannerService\n      .setActive(activeId)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchBanners());\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card\n      title={t('banners')}\n      navLInkTo={''}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBanners}\n          >\n            {t('add.banner')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={banners}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={type ? handleActive : bannerDelete}\n        text={type ? t('set.active.banner') : t('delete.banner')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default Banners;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-payment-from-partners/copleted-list.js",["5859"],[],"import React, { useEffect, useState } from 'react';\nimport { Space, Table, Card, DatePicker } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport numberToPrice from '../../helpers/numberToPrice';\n\nimport moment from 'moment';\nimport { fetchDeliverymanPaymentFromPartners } from 'redux/slices/paymentToPartners';\nconst { RangePicker } = DatePicker;\n\nexport default function DeliverymanPaymentFromPartners() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const columns = [\n    {\n      title: t('order.id'),\n      is_show: true,\n      dataIndex: 'order_id',\n      key: 'order_id',\n      sorter: true,\n      render: (id) => <span className='text-hover'>#{id}</span>,\n    },\n    {\n      title: t('order.total_price'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (row) => {\n        return (\n          <span>\n            {numberToPrice(row?.order?.total_price, defaultCurrency.symbol)}\n          </span>\n        );\n      },\n    },\n    {\n      title: t('delivery.fee'),\n      is_show: true,\n      dataIndex: 'delivery_fee',\n      key: 'delivery_fee',\n      render: (_, row) => numberToPrice(row?.order?.delivery_fee),\n    },\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n  ];\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'month'),\n    moment(),\n  );\n  const { list, loading, params, meta } = useSelector(\n    (state) => state.paymentToPartners,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    date_from: Array.isArray(dateRange)\n      ? dateRange[0]?.format('YYYY-MM-DD')\n      : moment().subtract(1, 'month').format('YYYY-MM-DD'),\n    date_to: Array.isArray(dateRange)\n      ? dateRange[1]?.format('YYYY-MM-DD')\n      : moment().format('YYYY-MM-DD'),\n    type,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchDeliverymanPaymentFromPartners(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchDeliverymanPaymentFromPartners(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  return (\n    <>\n      <Card>\n        <div className='flex justify-content-space-between'>\n          <Space\n            wrap\n            className='order-filter'\n            style={{ flex: 1, width: '100%' }}\n          >\n            <RangePicker\n              value={dateRange}\n              onChange={(values) => {\n                handleFilter((prev) => ({\n                  ...prev,\n                  ...{\n                    date_from: values?.[0]?.format('YYYY-MM-DD'),\n                    date_to: values?.[1]?.format('YYYY-MM-DD'),\n                  },\n                }));\n                setDateRange(values);\n              }}\n              disabledDate={(current) => {\n                return current && current > moment().endOf('day');\n              }}\n              style={{ width: '100%' }}\n            />\n          </Space>\n        </div>\n      </Card>\n\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={list}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record?.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-statistics/delivery-statistics.js",["5860"],[],"import React, { useEffect } from 'react';\nimport { Table, Card, Row, Col, Rate } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport formatSortType from '../../helpers/formatSortType';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport {\n  fetchLowMoney,\n  fetchLowOrders,\n  fetchLowRating,\n  fetchTopMoney,\n  fetchTopOrders,\n  fetchTopRating,\n} from '../../redux/slices/delivery-statistic';\n\nexport default function DeliveryStatistics() {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      render: (_, data) =>\n        (data?.firstname || '') + ' ' + (data?.lastname || ''),\n    },\n    {\n      title: t('rate'),\n      dataIndex: 'rating',\n      key: 'rating',\n      render: (_, data) => {\n        const allRateTotal = !!data?.assign_reviews?.length\n          ? data?.assign_reviews?.reduce(\n              (total, item) => (total += item?.rating || 0),\n              0,\n            )\n          : 0;\n        const avgRate = allRateTotal / data?.assign_reviews?.length || 0;\n        return (\n          <Rate className='mt-3 ml-3' disabled allowHalf value={avgRate} />\n        );\n      },\n    },\n  ];\n\n  const orders = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      render: (_, data) =>\n        (data?.firstname || '') + ' ' + (data?.lastname || ''),\n    },\n    {\n      title: t('orders'),\n      dataIndex: 'count',\n      key: 'count',\n      render: (_, data) => data?.deliveryman_orders.length,\n    },\n  ];\n\n  const money = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      render: (_, data) =>\n        (data?.firstname || '') + ' ' + (data?.lastname || ''),\n    },\n    {\n      title: t('wallet'),\n      dataIndex: 'wallet_sum',\n      key: 'wallet_sum',\n      render: (_, data) =>\n        numberToPrice(data?.wallet?.price, defaultCurrency.symbol),\n    },\n  ];\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    topRating,\n    lowRating,\n    topOrder,\n    lowOrder,\n    topMoney,\n    lowMoney,\n    loading,\n  } = useSelector((state) => state.deliveryStatistics, shallowEqual);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      const topRatingParams = {\n        type: 'delivery',\n        sort: 'desc',\n        column: 'rating',\n        by_rating: 'top',\n      };\n      const lowRatingParams = {\n        type: 'delivery',\n        sort: 'asc',\n        column: 'rating',\n        by_rating: 'low',\n      };\n      const topOrderParams = {\n        type: 'delivery',\n        sort: 'desc',\n        column: 'count',\n      };\n      const lowOrderParams = {\n        type: 'delivery',\n        sort: 'asc',\n        column: 'count',\n      };\n\n      const topMoneyParams = {\n        type: 'delivery',\n        sort: 'desc',\n        column: 'count',\n      };\n      const lowMoneyParams = {\n        type: 'delivery',\n        sort: 'asc',\n        column: 'count',\n      };\n      dispatch(fetchTopRating(topRatingParams));\n      dispatch(fetchLowRating(lowRatingParams));\n      dispatch(fetchTopOrders(topOrderParams));\n      dispatch(fetchLowOrders(lowOrderParams));\n      dispatch(fetchTopMoney(topMoneyParams));\n      dispatch(fetchLowMoney(lowMoneyParams));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  return (\n    <Row gutter={12}>\n      <Col span={12}>\n        <Card title={t('top.rating')}>\n          <Table\n            scroll={{ x: true }}\n            columns={columns}\n            dataSource={topRating}\n            loading={loading}\n            pagination={false}\n            rowKey={(record) => record.id}\n            onChange={onChangePagination}\n          />\n        </Card>\n      </Col>\n      <Col span={12}>\n        <Card title={t('lowest.rating')}>\n          <Table\n            scroll={{ x: true }}\n            columns={columns}\n            dataSource={lowRating}\n            loading={loading}\n            pagination={false}\n            rowKey={(record) => record.id}\n            onChange={onChangePagination}\n          />\n        </Card>\n      </Col>\n\n      <Col span={12}>\n        <Card title={t('top.orders')}>\n          <Table\n            scroll={{ x: true }}\n            columns={orders}\n            dataSource={topOrder}\n            loading={loading}\n            pagination={false}\n            rowKey={(record) => record.id}\n            onChange={onChangePagination}\n          />\n        </Card>\n      </Col>\n\n      <Col span={12}>\n        <Card title={t('lowest.orders')}>\n          <Table\n            scroll={{ x: true }}\n            columns={orders}\n            dataSource={lowOrder}\n            loading={loading}\n            pagination={false}\n            rowKey={(record) => record.id}\n            onChange={onChangePagination}\n          />\n        </Card>\n      </Col>\n\n      <Col span={12}>\n        <Card title={t('top.earner')}>\n          <Table\n            scroll={{ x: true }}\n            columns={money}\n            dataSource={topMoney}\n            loading={loading}\n            pagination={false}\n            rowKey={(record) => record.id}\n            onChange={onChangePagination}\n          />\n        </Card>\n      </Col>\n\n      <Col span={12}>\n        <Card title={t('lowest.earner')}>\n          <Table\n            scroll={{ x: true }}\n            columns={money}\n            dataSource={lowMoney}\n            loading={loading}\n            pagination={false}\n            rowKey={(record) => record.id}\n            onChange={onChangePagination}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/blog/index.js",["5861","5862","5863","5864"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CloudUploadOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Switch, Table, Tabs, Tooltip } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchBlogs } from '../../redux/slices/blog';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport blogService from '../../services/blog';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport { IMG_URL } from '../../configs/app-global';\nimport moment from 'moment';\n\nexport default function Blogs() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `blog/${row.uuid}`,\n        id: 'blog_edit',\n        name: t('edit.blog'),\n      })\n    );\n    navigate(`/blog/${row.uuid}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        url: `blog/clone/${row.uuid}`,\n        id: 'blog_clone',\n        name: t('clone.blog'),\n      })\n    );\n    navigate(`/blog/clone/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'translation',\n      render: (translation) => translation?.title,\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      render: (img, row) => {\n        return (\n          <Image\n            width={150}\n            height={100}\n            src={IMG_URL + img}\n            placeholder\n            className='rounded'\n            style={{ objectFit: 'contain' }}\n          />\n        );\n      },\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt, row) => (\n        <span>{moment(createdAt).format('MMM DD YYYY hh:mm A')}</span>\n      ),\n    },\n    {\n      title: t('published.at'),\n      dataIndex: 'published_at',\n      key: 'published_at',\n      is_show: true,\n      render: (publishedAt) => {\n        return (\n          <div>\n            {publishedAt ? (\n              moment(publishedAt).format('MMM DD YYYY')\n            ) : (\n              <span>{t('unpublished')}</span>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => (\n        <Switch\n          checked={active}\n          onChange={() => {\n            setId(row.uuid);\n            setIsDelete(false);\n            setIsPublish(false);\n            setIsModalVisible(true);\n          }}\n        />\n      ),\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      render: (_, row) => {\n        return (\n          <Space>\n            <Tooltip title={t('publish')}>\n              <Button\n                disabled={row?.published_at || !row.active}\n                icon={<CloudUploadOutlined />}\n                onClick={() => {\n                  setId(row.uuid);\n                  setIsDelete(false);\n                  setIsPublish(true);\n                  setIsModalVisible(true);\n                }}\n              />\n            </Tooltip>\n\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsDelete(true);\n                setIsPublish(false);\n                setIsModalVisible(true);\n              }}\n            />\n          </Space>\n        );\n      },\n      is_show: true,\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [isDelete, setIsDelete] = useState(false);\n  const [isPublish, setIsPublish] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [role, setRole] = useState('published');\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const immutable = activeMenu.data?.role || role;\n  const { blogs, meta, loading, params } = useSelector(\n    (state) => state.blog,\n    shallowEqual\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: immutable,\n  };\n\n  const blogDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n\n    blogService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchBlogs());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const blogSetActive = () => {\n    setLoadingBtn(true);\n    blogService\n      .setActive(id)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchBlogs());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const blogPublish = () => {\n    setLoadingBtn(true);\n    blogService\n      .publish(id)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchBlogs());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBlogs(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchBlogs(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const goToAddBlog = () => {\n    dispatch(\n      addMenu({\n        id: 'blogs',\n        url: 'blog/add',\n        name: t('add.blog'),\n      })\n    );\n    navigate('/blog/add');\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  return (\n    <Card\n      title={t('blogs')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBlog}\n          >\n            {t('add.blog')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns.filter((column) => column.is_show)}\n        dataSource={blogs}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={isPublish ? blogPublish : isDelete ? blogDelete : blogSetActive}\n        text={\n          isPublish\n            ? t('publish.blog')\n            : isDelete\n            ? t('delete.blog')\n            : t('set.active.blog')\n        }\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/catalog/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/payout-requests/index.js",["5865","5866"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Select, Space, Table, Tabs, Tag } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport { fetchPayoutRequests } from '../../redux/slices/payoutRequests';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { EditOutlined } from '@ant-design/icons';\nimport PayoutRequestModal from './payoutRequestModal';\nimport FilterColumns from '../../components/filter-column';\nimport { useNavigate } from 'react-router-dom';\nimport moment from 'moment';\n\nconst { TabPane } = Tabs;\nconst roles = ['processed', 'paid', 'rejected', 'canceled'];\n\nexport default function PayoutRequests() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('processed');\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: immutable,\n  };\n\n  const { payoutRequests, meta, loading, params } = useSelector(\n    (state) => state.payoutRequests,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const [modal, setModal] = useState(null);\n\n  const goToUser = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToUser(user)}>\n          {user.firstname + ' ' + user.lastname}\n        </div>\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price) => numberToPrice(price, defaultCurrency.symbol),\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status) => (\n        <div>\n          {status === 'processed' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'rejected' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('note'),\n      dataIndex: 'note',\n      key: 'note',\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'uuid',\n      key: 'uuid',\n      is_show: true,\n      render: (uuid, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(row)}\n            disabled={row.status !== 'processed'}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPayoutRequests(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchPayoutRequests(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('payout.requests')}\n      extra={\n        <Space>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Tabs\n        className='mt-3'\n        activeKey={immutable}\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n      >\n        {roles.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={payoutRequests}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {modal && (\n        <PayoutRequestModal data={modal} handleCancel={() => setModal(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/bonus/index.js",["5867"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Space, Table, Tag } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from 'components/filter-column';\nimport { fetchBonusList } from 'redux/slices/bonus-list';\nimport formatSortType from 'helpers/formatSortType';\nimport moment from 'moment';\nimport useDidUpdate from 'helpers/useDidUpdate';\n\nconst BonusList = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { bonus, meta, loading, params } = useSelector(\n    (state) => state.bonusList,\n    shallowEqual,\n  );\n  const data = activeMenu?.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('bonus.stock'),\n      dataIndex: 'bonusStock',\n      key: 'bonusStock',\n      is_show: true,\n      render: (bonusStock, row) => bonusStock?.product?.translation?.title,\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (_, row) => row.shop?.translation?.title,\n    },\n    {\n      title: t('expired.at'),\n      dataIndex: 'expired_at',\n      key: 'expired_at',\n      is_show: true,\n      render: (expired_at) => (\n        <div>\n          {moment(new Date()).isBefore(expired_at) ? (\n            <Tag color='blue'>{expired_at}</Tag>\n          ) : (\n            <Tag color='error'>{expired_at}</Tag>\n          )}\n        </div>\n      ),\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchBonusList(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchBonusList(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  return (\n    <Card\n      title={t('bonuses.list')}\n      extra={\n        <Space>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={bonus}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n    </Card>\n  );\n};\n\nexport default BonusList;\n","/home/mostafa/Magde/new/frontadminreact/src/views/subscriber/index.js",["5868"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Space, Table, Tag } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchSubscriber } from '../../redux/slices/subscriber';\nimport FilterColumns from '../../components/filter-column';\nimport hideEmail from '../../components/hideEmail';\nimport useDemo from '../../helpers/useDemo';\n\nconst Subciribed = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { isDemo } = useDemo();\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <div>\n            {row?.user?.firstname} {row?.user?.lastname || ''}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('email'),\n      dataIndex: 'email',\n      key: 'email',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <div>{isDemo ? hideEmail(row.user?.email) : row.user?.email}</div>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active) => {\n        return (\n          <Tag color={active === true ? 'blue' : 'red'}>\n            {active === true ? t('subscriber') : t('not.subscriber')}\n          </Tag>\n        );\n      },\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { subscriber, meta, loading, params } = useSelector(\n    (state) => state.subscriber,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSubscriber());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchSubscriber({ perPage: pageSize, page: current }));\n  };\n\n  return (\n    <Card\n      title={t('subscriber')}\n      extra={\n        <Space>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={subscriber}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n    </Card>\n  );\n};\n\nexport default Subciribed;\n","/home/mostafa/Magde/new/frontadminreact/src/views/transactions/index.js",["5869"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Table, Card, Tabs, Tag, Space } from 'antd';\nimport { EditOutlined, EyeOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { DebounceSelect } from '../../components/search';\nimport userService from '../../services/user';\nimport { fetchTransactions } from '../../redux/slices/transaction';\nimport TransactionShowModal from './transactionShowModal';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport FilterColumns from '../../components/filter-column';\nimport moment from 'moment';\nimport StatusModal from './status-modal';\n\nconst { TabPane } = Tabs;\n\nconst statuses = ['all', 'progress', 'paid', 'canceled', 'rejected'];\n\nexport default function Transactions() {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const [showId, setShowId] = useState(null);\n  const [transactionDetails, setTransactionDetails] = useState(null);\n\n  const goToShow = (row) => {\n    setShowId(row.id);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('client'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) =>\n        user === null ? (\n          <Tag color='red'>{t('deleted.user')}</Tag>\n        ) : (\n          <div>\n            {user?.firstname} {user?.lastname || ''}\n          </div>\n        ),\n    },\n    {\n      title: t('amount'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price, row) =>\n        numberToPrice(price, row.payable?.order?.currency?.symbol),\n    },\n    {\n      title: t('payment.type'),\n      dataIndex: 'payment_system',\n      key: 'payment_system',\n      is_show: true,\n      render: (paymentSystem) => paymentSystem?.tag,\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => (\n        <div>\n          {status === 'progress' ? (\n            <Tag color='gold'>{t(status)}</Tag>\n          ) : status === 'rejected' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined\n            onClick={() => {\n              setTransactionDetails(row);\n            }}\n          />\n        </div>\n      ),\n    },\n    {\n      title: t('status.note'),\n      dataIndex: 'status_description',\n      key: 'status_description',\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('DD.MM.YYYY HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />;\n      },\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const { transactions, meta, loading, params } = useSelector(\n    (state) => state.transaction,\n    shallowEqual,\n  );\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.userId,\n    status: data?.role === 'all' ? undefined : data?.role,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchTransactions(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchTransactions(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.search(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname}`,\n        value: item.id,\n      }));\n    });\n  }\n\n  return (\n    <Card\n      title={t('transactions')}\n      extra={\n        <Space wrap>\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter({ userId: user.value })}\n            onDeselect={() => handleFilter({ userId: null })}\n            style={{ minWidth: 200 }}\n          />\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Tabs\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n        activeKey={immutable}\n      >\n        {statuses.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={transactions}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n      {showId && (\n        <TransactionShowModal\n          id={showId}\n          handleCancel={() => setShowId(null)}\n        />\n      )}\n      {transactionDetails && (\n        <StatusModal\n          transactionDetails={transactionDetails}\n          handleCancel={() => setTransactionDetails(null)}\n          paramsData={paramsData}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/email-subscribers/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/story/index.js",["5870"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Image, Space, Table } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchAdminStoreis, fetchStoreis } from '../../redux/slices/storeis';\nimport FilterColumns from '../../components/filter-column';\nimport { IMG_URL } from '../../configs/app-global';\n\nconst Storeis = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { storeis, meta, loading } = useSelector(\n    (state) => state.storeis,\n    shallowEqual\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'file_urls',\n      key: 'file_urls',\n      is_show: true,\n      render: (file_urls) => {\n        return (\n          <Image\n            src={\n              file_urls\n                ? file_urls[0].search('stories/')\n                  ? IMG_URL + file_urls[0]\n                  : 'https://api.foodyman.org/storage/' + file_urls[0]\n                : 'https://via.placeholder.com/150'\n            }\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('product'),\n      dataIndex: 'stock',\n      key: 'stock',\n      is_show: true,\n      render: (_, row) => row?.product?.translation?.title,\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (_, row) => row.shop?.translation?.title,\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchAdminStoreis());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchStoreis({ perPage: pageSize, page: current }));\n  };\n\n  return (\n    <Card\n      title={t('storeis')}\n      extra={\n        <Space>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={storeis}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n    </Card>\n  );\n};\n\nexport default Storeis;\n","/home/mostafa/Magde/new/frontadminreact/src/views/booking-file-upload/index.js",["5871","5872","5873","5874"],[],"import React, { useState } from 'react';\nimport { Card, Button } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Dragger from 'antd/lib/upload/Dragger';\nimport { CloudUploadOutlined, InboxOutlined } from '@ant-design/icons';\nimport updateService from '../../services/update-booking';\nimport { setMenuData } from '../../redux/slices/menu';\nimport { toast } from 'react-toastify';\n\nexport default function BookingFileUpload() {\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const updateBackend = () => {\n    setLoadingBtn(true);\n    updateService\n      .update()\n      .then(() => toast.success(t('successfully.updated')))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const createFile = (file) => {\n    return {\n      uid: file.title,\n      name: file.title,\n      status: 'done',\n      url: file.title,\n      created: true,\n    };\n  };\n\n  const handleUpload = ({ file, onSuccess }) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    updateService.upload(formData).then(({ data }) => {\n      dispatch(setMenuData({ activeMenu, data: createFile(data) }));\n      onSuccess('ok');\n    });\n  };\n\n  const beforeUpload = (file) => {\n    const isPNG = file.type === 'image/png';\n    const isJPG = file.type === 'image/jpg';\n    const isJPEG = file.type === 'image/jpeg';\n    if (isPNG || isJPEG || isJPG) {\n      toast.error(`${file.name} is not valid file`);\n      return false;\n    }\n  };\n\n  return (\n    <Card\n      title={t('bookingUpload')}\n      // extra={\n      //   <Button\n      //     type='primary'\n      //     icon={<CloudUploadOutlined />}\n      //     loading={loadingBtn}\n      //     onClick={updateBackend}\n      //   >\n      //     {t('update.booking')}\n      //   </Button>\n      // }\n    >\n      <Dragger\n        name='file'\n        multiple={false}\n        maxCount={1}\n        customRequest={handleUpload}\n        defaultFileList={activeMenu?.data ? [activeMenu?.data] : null}\n        beforeUpload={beforeUpload}\n      >\n        <p className='ant-upload-drag-icon'>\n          <InboxOutlined />\n        </p>\n        <p className='ant-upload-text'>\n          Click or drag file to this area to upload\n        </p>\n        <p className='ant-upload-hint'>\n          To update the booking database using this file, you need to click the\n          above button\n        </p>\n      </Dragger>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/cashback/index.js",["5875"],[],"import {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport formatSortType from '../../helpers/formatSortType';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchPoints } from '../../redux/slices/point';\nimport pointService from '../../services/points';\nimport CashbackEditModal from './cashbackEditModal';\nimport CashbackModal from './cashbackModal';\n\nexport default function Cashback() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [activeId, setActiveId] = useState(null);\n  const [type, setType] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [modal, setModal] = useState(false);\n  const [cashbackId, setCashbackId] = useState(null);\n  const [text, setText] = useState(null);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('cashback'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price) => `${price} %`,\n    },\n    {\n      title: t('min.amount'),\n      dataIndex: 'value',\n      key: 'value',\n      is_show: true,\n      render: (value) => numberToPrice(value, defaultCurrency?.symbol),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            key={row.id + active}\n            onChange={() => {\n              setIsModalVisible(true);\n              setActiveId(row.id);\n              setType(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setCashbackId(row.id)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setType(false);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { points, meta, loading, params } = useSelector(\n    (state) => state.point,\n    shallowEqual\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    pageSize: data?.per_page,\n    page: data?.page,\n  };\n\n  const pointDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    pointService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchPoints());\n        toast.success(t('successfully.deleted'));\n        setText(null);\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    pointService\n      .setActive(activeId)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchPoints());\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPoints(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchPoints(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id?.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('cashback')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={() => setModal(true)}\n          >\n            {t('add.cashback')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={points}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={type ? handleActive : pointDelete}\n        text={\n          type ? t('set.active.cashback') : text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setId}\n      />\n      {modal && (\n        <CashbackModal\n          visibility={modal}\n          handleCancel={() => setModal(false)}\n        />\n      )}\n      {cashbackId && (\n        <CashbackEditModal\n          visibility={cashbackId}\n          handleCancel={() => setCashbackId(null)}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/check.js",["5876","5877"],[],"import { Button, Card, Space, Table, Tag, Divider } from 'antd';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport orderService from 'services/order';\nimport Loading from './loading';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { PrinterOutlined } from '@ant-design/icons';\nimport { useReactToPrint } from 'react-to-print';\nimport QrCode from 'components/qr-code';\nimport { disableRefetch } from 'redux/slices/menu';\nimport hideEmail from 'components/hideEmail';\nimport hideNumber from './hideNumber';\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst Check = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const componentRef = useRef();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { settings } = useSelector((state) => state.globalSettings);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => row?.stock?.id,\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) =>\n        row.stock?.product?.translation?.title ?? t('no.name'),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      render: (_, row) =>\n        numberToPrice(\n          row?.stock?.price - (row?.stock?.tax ?? 0),\n          defaultCurrency?.symbol,\n        ),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (quantity, row) => {\n        return quantity * (row?.stock?.product?.interval || 1);\n      },\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (tax) => numberToPrice(tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'discount',\n      key: 'discount',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price) =>\n        numberToPrice(total_price, defaultCurrency?.symbol),\n    },\n  ];\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        setData(data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    fetchOrder();\n    dispatch(disableRefetch(activeMenu));\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n\n  return (\n    <Card\n      title={t('invoice')}\n      extra={\n        <Space wrap>\n          <Button type='primary' onClick={() => navigate(-1)}>\n            <span className='ml-1'>{t('back')}</span>\n          </Button>\n          <Button\n            type='primary'\n            onClick={() => handlePrint()}\n            ref={componentRef}\n          >\n            <PrinterOutlined type='printer' />\n            <span className='ml-1'>{t('print')}</span>\n          </Button>\n        </Space>\n      }\n    >\n      {loading ? (\n        <Loading />\n      ) : (\n        <div className='container_check' ref={componentRef}>\n          <header className='check_header'>\n            <span>\n              <img\n                src={settings?.favicon}\n                alt='img'\n                className='check_icon overflow-hidden w-25 h-25 rounded'\n                width={'100%'}\n                height={'100%'}\n              />\n            </span>\n            <span className='check_companyInfo'>\n              <h1>{settings?.title}</h1>\n              <h5>{settings?.address}</h5>\n            </span>\n          </header>\n          <main>\n            <span>\n              <h4>\n                {t('order.id')}: {data?.id}\n              </h4>\n              <h4>\n                {t('date')}:{' '}\n                {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}\n              </h4>\n              <address>\n                <p>\n                  <span>\n                    {t('delivery.type')}: {data?.delivery_type}\n                  </span>\n                  {data?.address?.city && (\n                    <>\n                      <br />\n                      <span>\n                        {t('delivery.address')}: {data?.address?.city}\n                      </span>\n                    </>\n                  )}\n                  <br />\n                  <span>\n                    {t('delivery.date')}: {data?.delivery_date}{' '}\n                    {data?.delivery_time}\n                  </span>\n                  <br />\n                  <span>\n                    {t('status')}: <Tag color='green'>{data?.status}</Tag>\n                  </span>\n                </p>\n              </address>\n            </span>\n            <span>\n              <address>\n                <p>\n                  <h3 className='shop_data'>{t('user')}</h3>\n                  <span>\n                    {t('user.id')}: {data?.user?.id}\n                  </span>\n                  <br />\n                  <span>\n                    {t('full.name')}:{' '}\n                    {`${data?.user?.firstname} ${data?.user?.lastname}`}\n                  </span>\n                  <br />\n                  <span>\n                    {t('email')}:{' '}\n                    {data?.user?.email ?? ReactAppIsDemo\n                      ? hideEmail(data?.user?.email)\n                      : data?.user?.email}\n                  </span>\n                  <br />\n                  <span>\n                    {t('phone')}:{' '}\n                    {data?.user?.phone\n                      ? hideNumber(data?.user?.phone)\n                      : t('no.phone')}\n                  </span>\n                </p>\n              </address>\n            </span>\n            <span>\n              <QrCode orderId={id} showLink={false} size={1.5} />\n            </span>\n          </main>\n          <Table\n            scroll={{ x: true }}\n            columns={columns}\n            dataSource={data?.details || []}\n            loading={loading}\n            rowKey={(record) => record.id}\n            pagination={false}\n            className={'check_table'}\n          />\n          <footer>\n            <span>\n              <h3>\n                {t('note')}: {data?.note ?? t('no.note')}\n              </h3>\n            </span>\n            <span>\n              <span>\n                <h5>{t('origin.price')}:</h5>\n                <h4>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('total.tax')}:</h5>\n                <h4>{numberToPrice(data?.tax, defaultCurrency?.symbol)}</h4>\n              </span>\n              <span>\n                <h5>{t('service.fee')}:</h5>\n                <h4>\n                  {numberToPrice(data?.service_fee, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('delivery.fee')}:</h5>\n                <h4>\n                  {numberToPrice(data?.delivery_fee, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('total.discount')}:</h5>\n                <h4>- {numberToPrice(data?.total_discount)}</h4>\n              </span>\n              <span>\n                <h5>{t('coupon')}:</h5>\n                <h4>- {numberToPrice(data?.coupon_price)}</h4>\n              </span>\n              <Divider />\n              <span>\n                <h4>{t('total.price')}:</h4>\n                <h3>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </span>\n            </span>\n          </footer>\n          <section className='text-center'>\n            © {moment(new Date()).format('YYYY')} {settings?.title}.{' '}\n            {t('all.rights.reserved')}\n          </section>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default Check;\n","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/index.js",["5878"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tabs, Tag, Switch } from 'antd';\nimport { Context } from '../../context/context';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { fetchCareerCategories } from '../../redux/slices/career-category';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport CategoryStatusModal from './career-category-status-modal';\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst { TabPane } = Tabs;\nconst roles = ['all', 'pending', 'published', 'unpublished'];\n\nconst CareerCategories = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const [active, setActive] = useState(null);\n  const [categoryDetails, setCategoryDetails] = useState(null);\n  const immutable = activeMenu.data?.role || role;\n\n  function goToEdit(uuid) {\n    dispatch(\n      addMenu({\n        url: `career-categories/${uuid}`,\n        id: 'career-categories-edit',\n        name: t('edit.career.categories'),\n      })\n    );\n    navigate(`/career-categories/${uuid}`);\n  }\n\n  const goToAddCategory = () => {\n    dispatch(\n      addMenu({\n        id: 'career-categories-add',\n        url: 'career-categories/add',\n        name: t('add.career.categories'),\n      })\n    );\n    navigate('/career-categories/add');\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `career-categories-clone`,\n        url: `career-categories-clone/${uuid}`,\n        name: t('career.categories.clone'),\n      })\n    );\n    navigate(`/career-categories-clone/${uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => row.translation?.title,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={img || 'https://via.placeholder.com/150'}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setCategoryDetails(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row.uuid)}\n            />\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { careerCategory, meta, loading } = useSelector(\n    (state) => state.careerCategory,\n    shallowEqual\n  );\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    pageSize: meta.per_page,\n    page: data?.page || 1,\n    status: immutable === 'all' ? undefined : immutable,\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    categoryService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchCareerCategories(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchCareerCategories(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchCareerCategories(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    categoryService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchCareerCategories(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddCategory}\n          >\n            {t('add.career.category')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('career.categories')}>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={careerCategory}\n          pagination={{\n            pageSize: meta.per_page,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n\n      <CustomModal\n        click={active ? handleActive : categoryDelete}\n        text={\n          active\n            ? t('set.active.category')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {categoryDetails && (\n        <CategoryStatusModal\n          categoryDetails={categoryDetails}\n          handleCancel={() => setCategoryDetails(null)}\n          paramsData={paramsData}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CareerCategories;\n","/home/mostafa/Magde/new/frontadminreact/src/views/menu-categories/index.js",["5879"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport { Context } from '../../context/context';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { fetchMenuCategories } from '../../redux/slices/menuCategory';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport CategoryAdd from './category-add';\nimport CategoryEdit from './category-edit';\n\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst MenuCategories = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => row.translation?.title,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active) =>\n        active ? (\n          <Tag color='cyan'> {t('active')}</Tag>\n        ) : (\n          <Tag color='yellow'>{t('inactive')}</Tag>\n        ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => setEditCategry(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setType(false);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [type, setType] = useState(false);\n  const [addCategry, setAddCategry] = useState(null);\n  const [editCategry, setEditCategry] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { menuCategories, meta, loading } = useSelector(\n    (state) => state.menuCategory,\n    shallowEqual\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: data?.role || 'published',\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    categoryService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchMenuCategories(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchMenuCategories(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchMenuCategories(paramsData));\n  }, [activeMenu.data]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage: pageSize, page: current },\n      })\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setAddCategry(true)}\n          >\n            {t('add.category')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('menu.categories')}>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={menuCategories}\n          pagination={{\n            pageSize: meta.per_page,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n\n      <CustomModal\n        click={categoryDelete}\n        text={\n          type ? t('set.active.category') : text ? t('delete') : t('all.delete')\n        }\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {addCategry && (\n        <CategoryAdd\n          isModalOpen={addCategry}\n          handleCancel={() => setAddCategry(null)}\n        />\n      )}\n      {editCategry && (\n        <CategoryEdit\n          isModalOpen={editCategry}\n          handleCancel={() => setEditCategry(null)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default MenuCategories;\n","/home/mostafa/Magde/new/frontadminreact/src/views/admin-payouts/index.js",["5880"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tabs, Tag, Tooltip } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { EditOutlined, SettingOutlined } from '@ant-design/icons';\nimport PayoutRequestModal from './payoutActionModal';\nimport FilterColumns from '../../components/filter-column';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchAdminPayouts } from '../../redux/slices/adminPayouts';\nimport PayoutStatusChangeModal from './payoutStatusChangeModal';\nimport moment from 'moment';\n\nconst { TabPane } = Tabs;\nconst roles = ['all', 'accepted', 'pending', 'canceled'];\n\nexport default function AdminPayouts() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: role === 'all' ? undefined : immutable,\n  };\n\n  const { payoutRequests, meta, loading, params } = useSelector(\n    (state) => state.adminPayouts,\n    shallowEqual,\n  );\n  const [modal, setModal] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n\n  const goToUser = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('user'),\n      dataIndex: 'createdBy',\n      key: 'createdBy',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToUser(user)}>\n          {user?.firstname + ' ' + user?.lastname}\n        </div>\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price, row) => numberToPrice(price, row.currency?.symbol),\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('cause'),\n      dataIndex: 'cause',\n      key: 'cause',\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('answer'),\n      dataIndex: 'answer',\n      key: 'answer',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      dataIndex: 'uuid',\n      key: 'uuid',\n      is_show: true,\n      render: (uuid, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(row)}\n          />\n          {row.status !== 'accepted' && (\n            <Tooltip title={t('change.status')}>\n              <Button\n                onClick={() => setSelectedRow(row)}\n                icon={<SettingOutlined />}\n              />\n            </Tooltip>\n          )}\n        </Space>\n      ),\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchAdminPayouts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchAdminPayouts(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('payout.requests')}\n      extra={\n        <Space>\n          <Button onClick={() => setModal(true)} type='primary'>\n            {t('create.payout')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Tabs\n        className='mt-3'\n        activeKey={immutable}\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n      >\n        {roles.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={payoutRequests}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {modal && (\n        <PayoutRequestModal data={modal} handleCancel={() => setModal(null)} />\n      )}\n      {selectedRow && (\n        <PayoutStatusChangeModal\n          data={selectedRow}\n          statuses={roles}\n          handleCancel={() => setSelectedRow(null)}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/brands/index.js",["5881"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tag } from 'antd';\nimport { toast } from 'react-toastify';\nimport { export_url, IMG_URL } from '../../configs/app-global';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport brandService from '../../services/brand';\nimport { fetchBrands } from '../../redux/slices/brand';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport formatSortType from '../../helpers/formatSortType';\n\nconst Brands = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [downloading, setDownloading] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    search: data?.search ? data.search : undefined,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: data?.role || 'published',\n  };\n\n  const { brands, meta, loading } = useSelector(\n    (state) => state.brand,\n    shallowEqual\n  );\n\n  const goToClone = (id) => {\n    dispatch(\n      addMenu({\n        id: `brand-clone`,\n        url: `brand-clone/${id}`,\n        name: t('brand.clone'),\n      })\n    );\n    navigate(`/brand-clone/${id}`, { state: 'clone' });\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `brand/${row.id}`,\n        id: 'brand_edit',\n        name: t('edit.brand'),\n      })\n    );\n    navigate(`/brand/${row.id}`, { state: 'edit' });\n  };\n\n  const goToAddBrand = () => {\n    dispatch(\n      addMenu({\n        id: 'brand/add',\n        url: 'brand/add',\n        name: t('add.brand'),\n      })\n    );\n    navigate('/brand/add');\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        url: `catalog/brands/import`,\n        id: 'brand_import',\n        name: t('import.brand'),\n      })\n    );\n    navigate(`/catalog/brands/import`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={IMG_URL + img}\n            alt='img_gallery'\n            width={100}\n            height='auto'\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active) =>\n        active ? (\n          <Tag color='cyan'>{t('active')}</Tag>\n        ) : (\n          <Tag color='yellow'>{t('inactive')}</Tag>\n        ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row.id)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const brandDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    brandService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchBrands(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchBrands(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBrands(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const excelExport = () => {\n    setDownloading(true);\n    brandService\n      .export(paramsData)\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <Button onClick={goToImport}>\n            <CgImport className='mr-2' />\n            {t('import')}\n          </Button>\n          <Button loading={downloading} onClick={excelExport}>\n            <CgExport className='mr-2' />\n            {t('export')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBrand}\n          >\n            {t('add.brands')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('brands')}>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={brands}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n      <CustomModal\n        click={brandDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default Brands;\n","/home/mostafa/Magde/new/frontadminreact/src/views/career/index.js",["5882","5883","5884"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tag } from 'antd';\nimport { Context } from '../../context/context';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport careerService from '../../services/career';\nimport { fetchCareer } from '../../redux/slices/career';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport RiveResult from 'components/rive-result';\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst Career = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  function goToEdit(id) {\n    dispatch(\n      addMenu({\n        id: 'career_edit',\n        url: `career/${id}`,\n        name: t('edit.career'),\n      })\n    );\n    navigate(`/career/${id}`);\n  }\n\n  const goToAddCategory = () => {\n    dispatch(\n      addMenu({\n        id: 'career_add',\n        url: 'career/add',\n        name: t('add.career'),\n      })\n    );\n    navigate('/career/add');\n  };\n\n  const goToClone = (id) => {\n    dispatch(\n      addMenu({\n        id: `career-clone`,\n        url: `career-clone/${id}`,\n        name: t('career.clone'),\n      })\n    );\n    navigate(`/career-clone/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => row?.translation?.title,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('category'),\n      dataIndex: 'category ',\n      key: 'category',\n      is_show: true,\n      render: (img, row) => row.category?.translation?.title,\n    },\n    {\n      title: t('status'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active) =>\n        active ? (\n          <Tag color='cyan'> {t('active')}</Tag>\n        ) : (\n          <Tag color='yellow'>{t('inactive')}</Tag>\n        ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row.id)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row.id)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { career, meta, loading } = useSelector(\n    (state) => state.career,\n    shallowEqual\n  );\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    pageSize: meta.per_page,\n    page: data?.page || 1,\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    careerService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchCareer(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchCareer(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchCareer(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddCategory}\n          >\n            {t('add.career')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('career')}>\n        <Table\n          locale={{\n            emptyText: <RiveResult />,\n          }}\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={career}\n          pagination={{\n            pageSize: meta.per_page,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n\n      <CustomModal\n        click={categoryDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default Career;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/index.js",["5885"],[],"import React, { useEffect } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from 'redux/slices/menu';\nimport {\n  fetchDeliverymanStatisticsCount,\n  fetchSellerStatisticsCount,\n  fetchStatistics,\n} from 'redux/slices/statistics/count';\nimport { fetchTopCustomers } from 'redux/slices/statistics/topCustomers';\nimport {\n  fetchSellerTopProducts,\n  fetchTopProducts,\n} from 'redux/slices/statistics/topProducts';\nimport Loading from 'components/loading';\nimport {\n  fetchOrderCounts,\n  fetchSellerOrderCounts,\n} from 'redux/slices/statistics/orderCounts';\nimport {\n  fetchOrderSales,\n  fetchSellerOrderSales,\n} from 'redux/slices/statistics/orderSales';\nimport GeneralDashboard from './generalDashboard';\nimport DeliverymanDashboard from './deliverymanDashboard';\nimport ManagerDashboard from './managerDashboard';\nimport ModeratorDashboard from './moderatorDashboard';\nimport { Navigate } from 'react-router-dom';\n\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const { loading } = useSelector(\n    (state) => state.statisticsCount,\n    shallowEqual,\n  );\n\n  function getDashboardsByRole() {\n    const body = { time: 'subMonth' };\n    switch (user?.role) {\n      case 'admin':\n        dispatch(fetchStatistics(body));\n        dispatch(fetchTopCustomers(body));\n        dispatch(fetchTopProducts(body));\n        dispatch(fetchOrderCounts(body));\n        dispatch(fetchOrderSales(body));\n        break;\n      case 'manager':\n        dispatch(fetchTopCustomers(body));\n        dispatch(fetchTopProducts(body));\n        break;\n      case 'seller':\n        dispatch(fetchSellerStatisticsCount(body));\n        dispatch(fetchSellerTopProducts(body));\n        dispatch(fetchSellerOrderCounts(body));\n        dispatch(fetchSellerOrderSales(body));\n        break;\n      case 'moderator':\n        break;\n      case 'deliveryman':\n        dispatch(fetchDeliverymanStatisticsCount());\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getDashboardsByRole();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const renderDashboardByRole = () => {\n    switch (user.role) {\n      case 'admin':\n        return <GeneralDashboard />;\n      case 'manager':\n        return <ManagerDashboard />;\n      case 'seller':\n        return <GeneralDashboard isSeller={true} />;\n      case 'moderator':\n        return <ModeratorDashboard />;\n      case 'deliveryman':\n        return <DeliverymanDashboard />;\n      case 'waiter':\n        return <Navigate to='/waiter/orders-board' replace />;\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className='h-100'>\n      {!loading ? renderDashboardByRole() : <Loading size='large' />}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/email-provider/index.js",["5886"],[],"import React, { useState, useContext, useEffect } from 'react';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport CustomModal from '../../components/modal';\nimport { fetchEmailProvider } from '../../redux/slices/emailProvider';\nimport emailService from '../../services/emailSettings';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../context/context';\nimport { addMenu, disableRefetch } from '../../redux/slices/menu';\nimport moment from 'moment';\nimport { EditOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { useNavigate } from 'react-router-dom';\nimport hideEmail from '../../components/hideEmail';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function EmailProvider() {\n  const { t } = useTranslation();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [id, setId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const { isDemo } = useDemo();\n  const { emailProvider, loading } = useSelector(\n    (state) => state.emailProvider,\n    shallowEqual\n  );\n\n  const goToAddEmailProviders = () => {\n    dispatch(\n      addMenu({\n        id: 'add_email_providers',\n        url: `settings/emailProviders/add`,\n        name: t('add_email_providers'),\n      })\n    );\n    navigate(`/settings/emailProviders/add`);\n  };\n\n  function goToEditEmailProviders(row) {\n    dispatch(\n      addMenu({\n        url: `settings/emailProviders/${row.id}`,\n        id: 'edit_email_providers',\n        name: t('edit.email.providers'),\n      })\n    );\n    navigate(`/settings/emailProviders/${row.id}`, { state: 'edit' });\n  }\n\n  const columns = [\n    {\n      title: t('from_site'),\n      dataIndex: 'from_site',\n      key: 'from_site',\n    },\n    {\n      title: t('from.to'),\n      dataIndex: 'from_to',\n      key: 'from_to',\n      render: (from_to) => (isDemo ? hideEmail(from_to) : from_to),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.id);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEditEmailProviders(row)}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const setDefaultLang = () => {\n    setLoadingBtn(true);\n    emailService\n      .setActive(id)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        setIsModalVisible(false);\n        dispatch(fetchEmailProvider());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchEmailProvider());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('email.provider')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAddEmailProviders}\n          >\n            {t('add.email.provider')}\n          </Button>\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={emailProvider}\n        rowKey={(record) => record.id}\n        loading={loading}\n        pagination={false}\n      />\n      <CustomModal\n        click={setDefaultLang}\n        text={t('set.active.email.provider')}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/index.js",["5887"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\nimport { toast } from 'react-toastify';\nimport couponService from 'services/coupon';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchCoupon } from 'redux/slices/coupon';\nimport formatSortType from 'helpers/formatSortType';\n\nconst Coupon = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `coupon/${row.id}`,\n        id: 'coupon_edit',\n        name: t('edit.coupon'),\n      }),\n    );\n    navigate(`/coupon/${row.id}`);\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.coupon',\n        url: `coupon/add`,\n        name: t('add.coupon'),\n      }),\n    );\n    navigate(`/coupon/add`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      is_show: true,\n      render: (_, row) => row.translation?.title,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      is_show: true,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      is_show: true,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      is_show: true,\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'qty',\n      is_show: true,\n    },\n    {\n      title: t('expired.at'),\n      dataIndex: 'expired_at',\n      is_show: true,\n      render: (expired_at) => (\n        <div>\n          {moment(new Date()).isBefore(expired_at) ? (\n            <Tag color='blue'>{moment(expired_at).format('YYYY-MM-DD')}</Tag>\n          ) : (\n            <Tag color='error'>{moment(expired_at).format('YYYY-MM-DD')}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setCouponId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [couponId, setCouponId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { coupons, meta, loading, params } = useSelector(\n    (state) => state.coupons,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    status: data?.role,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  function deleteCoupon() {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...couponId.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    couponService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setCouponId(null);\n        setIsModalVisible(false);\n        dispatch(fetchCoupon());\n        setText(null);\n        setCouponId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchCoupon(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchCoupon(paramsData));\n  }, [activeMenu.data]);\n\n  const rowSelection = {\n    selectedRowKeys: couponId,\n    onChange: (key) => {\n      setCouponId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (couponId === null || couponId.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('coupons')}\n      extra={\n        <Space wrap>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.coupon')}\n          </Button>\n\n          <DeleteButton onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        rowKey={(record) => record.id}\n        dataSource={coupons}\n        columns={columns?.filter((item) => item.is_show)}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={deleteCoupon}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setCouponId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n};\n\nexport default Coupon;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-orders/index.js",["5888","5889","5890","5891"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Space, Table, Card, Tabs } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { fetchDeliverymanOrders } from '../../redux/slices/orders';\nimport formatSortType from '../../helpers/formatSortType';\nimport SearchInput from '../../components/search-input';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport FilterColumns from '../../components/filter-column';\nimport {\n  fetchOrderStatus,\n  fetchRestOrderStatus,\n} from '../../redux/slices/orderStatus';\n\nconst { TabPane } = Tabs;\n\nconst statuses = ['accepted', 'ready', 'on_a_way', 'delivered', 'canceled'];\n\nexport default function DeliverymanOrders() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  // const {} = useSelector((state) => {});\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n\n  const statuses = [\n    { name: 'all', id: '0', active: true, sort: 0 },\n    ...statusList,\n  ];\n\n  console.log('statusList', statuses);\n\n  // console.log('statusList', statusList);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('accepted');\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu?.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.userId,\n    status: immutable,\n  };\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `deliveryman/order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/deliveryman/order/details/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('client'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div>\n          {user.firstname} {user.lastname}\n        </div>\n      ),\n    },\n    {\n      title: t('number.of.products'),\n      dataIndex: 'order_details_count',\n      key: 'rate',\n      is_show: true,\n      render: (order_details_count) => (\n        <div className='text-lowercase'>\n          {order_details_count || 0} {t('products')}\n        </div>\n      ),\n    },\n    {\n      title: t('amount'),\n      dataIndex: 'details',\n      key: 'price',\n      is_show: true,\n      render: (_, row) => {\n        return numberToPrice(row?.total_price, defaultCurrency.symbol);\n      },\n    },\n    {\n      title: t('payment.type'),\n      dataIndex: 'transaction',\n      key: 'transaction',\n      is_show: true,\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: 'created.at',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { orders, meta, loading, params } = useSelector(\n    (state) => state.orders,\n    shallowEqual,\n  );\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchDeliverymanOrders(paramsData));\n  }, [activeMenu?.data]);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchDeliverymanOrders(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  useEffect(() => {\n    console.log('fetching...');\n    dispatch(fetchRestOrderStatus({}));\n  }, []);\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('orders')}\n      extra={\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n          />\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Tabs\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n        activeKey={immutable}\n      >\n        {statuses\n          .filter((item) => item.active)\n          .map((item) => (\n            <TabPane tab={t(item.name)} key={item.name} />\n          ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={orders}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/career-map/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-request/index.js",["5892"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Table, Image, Space, Button, Tag } from 'antd';\n\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport { fetchDeliverymanRequest } from 'redux/slices/deliveryman-request';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport { EditOutlined, EyeOutlined } from '@ant-design/icons';\nimport DeliverymanRequestModal from './details-modal';\nimport StatusChangeModal from './status-change-modal';\nimport requestAdminModelsService from 'services/request-models';\nimport { toast } from 'react-toastify';\n\nexport default function DeliverymanRequest() {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { deliverymanRequestData, meta, loading } = useSelector(\n    (state) => state.deliverymanRequest,\n    shallowEqual,\n  );\n\n  const [id, setId] = useState(null);\n  const [details, setDetails] = useState(null);\n  const [changeStatus, setChangeStatus] = useState(null);\n\n  const data = activeMenu.data;\n\n  const paramsData = {\n    perPage: data?.perPage,\n    page: data?.page,\n    search: data?.search,\n    columns: data?.columns,\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchDeliverymanRequest(paramsData));\n  }, [activeMenu?.data]);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchDeliverymanRequest(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu?.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const handleChangeStatus = (id, data) => {\n    const params = {\n      status_note: data?.status_note,\n      status: data?.status,\n    };\n    return requestAdminModelsService.changeStatus(id, params).then(() => {\n      setChangeStatus(null);\n      toast.success(t('successfully.updated'));\n      dispatch(fetchDeliverymanRequest(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    });\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => row?.model?.firstname + ' ' + row?.model?.lastname,\n    },\n    {\n      title: t('delivery.man.setting'),\n      dataIndex: 'setting',\n      key: 'setting',\n      is_show: true,\n      render: (_, data) => (\n        <Space>\n          <span>\n            {t('brand')}: {data?.data?.brand}\n            <br />\n            {t('model')}: {data?.data?.model}\n            <br />\n            {t('number')}: {data?.data?.number}\n            <br />\n            {t('color')}: {data?.data?.color}\n          </span>\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'image',\n      key: 'image',\n      is_show: true,\n      render: (_, row) => (\n        <Image\n          src={row?.data?.['images[0]'] || 'https://via.placeholder.com/100'}\n          alt={'img'}\n          width={100}\n          className={'rounded'}\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {!row.deleted_at ? (\n            <EditOutlined onClick={() => setChangeStatus(row)} />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              icon={<EyeOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setDetails(row);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Card title={t('deliveryman.request')}>\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item?.is_show)}\n        dataSource={deliverymanRequestData}\n        pagination={{\n          pageSize: meta?.perPage,\n          total: meta?.total,\n          current: data?.page,\n          page: data?.page || 1,\n          defaultCurrent: data?.page,\n        }}\n        onChange={onChangePagination}\n        rowKey={(record) => record?.id}\n        loading={loading}\n      />\n      {details ? (\n        <DeliverymanRequestModal\n          data={details}\n          handleClose={() => setDetails(null)}\n        />\n      ) : null}\n      {changeStatus ? (\n        <StatusChangeModal\n          data={changeStatus}\n          handleChange={handleChangeStatus}\n          handleClose={() => setChangeStatus(null)}\n        />\n      ) : null}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-edit.js",["5893"],["5894"],"import React, { useEffect, useState } from 'react';\nimport { Card, Form, Tabs } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport moment from 'moment';\nimport userService from '../../services/user';\nimport Loading from '../../components/loading';\nimport UserEditForm from './userEditForm';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport UserOrders from './userOrders';\nimport WalletHistory from './walletHistory';\nimport createImage from '../../helpers/createImage';\nimport UserPassword from './userPassword';\nimport DelivertSettingCreate from './add-deliveryman-settings';\nimport useDemo from '../../helpers/useDemo';\nimport hideEmail from '../../components/hideEmail';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\nconst { TabPane } = Tabs;\n\nconst UserEdit = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [tab, setTab] = useState('edit');\n  const [image, setImage] = useState([]);\n  const [id, setId] = useState(null);\n  const role = activeMenu?.data?.role;\n  const { isDemo } = useDemo();\n\n  const showUserData = (uuid) => {\n    setLoading(true);\n    userService\n      .getById(uuid)\n      .then((res) => {\n        const data = res.data;\n        const payload = {\n          ...data,\n          image: data.img ? createImage(data.img) : [],\n        };\n        dispatch(setMenuData({ activeMenu, data: payload }));\n        form.setFieldsValue({\n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: isDemo ? hideEmail(data.email) : data.email,\n          phone: data.phone,\n          birthday: moment(data?.birthday).format('YYYY-MM-DD'),\n          gender: data.gender,\n          password_confirmation: data.password_confirmation,\n          password: data.password,\n          shop_id:\n            data?.invitations?.length !== 0\n              ? data?.invitations?.map((i) => ({\n                  label: i.shop?.translation?.title,\n                  value: i.shop?.id,\n                  key: i.shop?.id,\n                }))\n              : undefined,\n        });\n        setImage(data.img ? [createImage(data.img)] : []);\n        setId(res.data?.delivery_man_setting?.id);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) showUserData(uuid);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeMenu?.refetch]);\n\n  const onChange = (key) => setTab(key);\n\n  return (\n    <Card title={t('user.settings')}>\n      {!loading ? (\n        <Tabs\n          activeKey={tab}\n          onChange={onChange}\n          tabPosition='left'\n          size='small'\n        >\n          <TabPane key='edit' tab={t('edit.user')}>\n            <UserEditForm\n              data={activeMenu?.data}\n              form={form}\n              image={image}\n              setImage={setImage}\n              action_type={'edit'}\n            />\n          </TabPane>\n          {role === 'cook' && (\n            <TabPane key='order' tab={t('orders')}>\n              <UserOrders data={activeMenu?.data} />\n            </TabPane>\n          )}\n          {role === 'deliveryman' && (\n            <TabPane key='delivery' tab={t('deliveryman')}>\n              <DelivertSettingCreate id={id} data={activeMenu.data} />\n            </TabPane>\n          )}\n          <TabPane key='wallet' tab={t('wallet')}>\n            <WalletHistory data={activeMenu?.data} />\n          </TabPane>\n          <TabPane key='password' tab={t('password')}>\n            <UserPassword data={activeMenu?.data} />\n          </TabPane>\n        </Tabs>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\n\nexport default UserEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-add-role.js",[],["5895"],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/delivery-map-orders.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-orders/order-delivery.js",["5896"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Space, Table, Card, Tabs, Tag, DatePicker, Spin } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  DownloadOutlined,\n  EditOutlined,\n  EyeOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { fetchOrders } from '../../redux/slices/orders';\nimport formatSortType from '../../helpers/formatSortType';\nimport SearchInput from '../../components/search-input';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport OrderStatusModal from '../order/orderStatusModal';\nimport OrderDeliveryman from '../order/orderDeliveryman';\nimport FilterColumns from '../../components/filter-column';\nimport { BiMap } from 'react-icons/bi';\nimport ShowLocationsMap from '../order/show-locations.map';\nimport DownloadModal from '../order/downloadModal';\nimport { toast } from 'react-toastify';\nimport DeleteButton from '../../components/delete-button';\nimport orderService from '../../services/order';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { export_url } from '../../configs/app-global';\nimport DeliveryStatistic from '../../components/delivery-statistic';\nimport moment from 'moment';\nconst { RangePicker } = DatePicker;\nconst { TabPane } = Tabs;\n\nexport default function DeliveryManOrder() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const [orderDetails, setOrderDetails] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [dowloadModal, setDowloadModal] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const { id: deliverymanId } = useParams();\n  const statuses = [\n    { id: 7, name: 'all' },\n    { id: 3, name: 'ready' },\n    { id: 4, name: 'on_a_way' },\n    { id: 5, name: 'delivered' },\n    { id: 6, name: 'canceled' },\n  ];\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/order/details/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (user) => (\n        <div>\n          {user?.firstname} {user?.lastname}\n        </div>\n      ),\n    },\n    {\n      title: t('number.of.products'),\n      is_show: true,\n      dataIndex: 'order_details_count',\n      key: 'order_details_count',\n      render: (order_details_count) => (\n        <div className='text-lowercase'>\n          {order_details_count || 0} {t('products')}\n        </div>\n      ),\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {status !== 'delivered' && status !== 'canceled' ? (\n            <EditOutlined onClick={() => setOrderDetails(row)} />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      is_show: true,\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      render: (deliveryman, row) => (\n        <div>\n          {row.status === 'ready' && row.delivery_type !== 'pickup' ? (\n            <Button type='link' onClick={() => setOrderDeliveryDetails(row)}>\n              <Space>\n                {deliveryman\n                  ? `${deliveryman.firstname} ${deliveryman.lastname}`\n                  : t('add.deliveryman')}\n                <EditOutlined />\n              </Space>\n            </Button>\n          ) : (\n            <div>\n              {deliveryman?.firstname} {deliveryman?.lastname}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('amount'),\n      is_show: true,\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price) =>\n        numberToPrice(total_price, defaultCurrency.symbol),\n    },\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button icon={<BiMap />} onClick={() => setLocationsMap(row.id)} />\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n            <Button\n              icon={<DownloadOutlined />}\n              onClick={() => setDowloadModal(row.id)}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [downloading, setDownloading] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { orders, meta, loading, params, statistic } = useSelector(\n    (state) => state.orders,\n    shallowEqual,\n  );\n  const data = activeMenu?.data;\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    orderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchOrders());\n        setText(null);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search: data?.search,\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n      deliveryman: deliverymanId,\n      date_from: data?.date_from,\n      date_to: data?.date_to,\n      // status:\n      //   data?.status === 'deliveryman.attached' ? undefined : data?.status,\n      // 'isset-deliveryman': data?.status === 'deliveryman.attached' ? 1 : 0,\n      status: data?.status === 'all' ? undefined : data?.status,\n    };\n    dispatch(fetchOrders(paramsData));\n  }, [activeMenu?.data]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      }),\n    );\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    orderService\n      .export({\n        type: 'delivery',\n        deliveryman: deliverymanId,\n        date_from: data?.date_from,\n        date_to: data?.date_to,\n        status: data?.status === 'all' ? undefined : data?.status,\n      })\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const onChangeTab = (status) => {\n    const orderStatus = status;\n    dispatch(\n      setMenuData({ activeMenu, data: { ...data, status: orderStatus } }),\n    );\n  };\n\n  const handleCloseModal = () => {\n    setOrderDetails(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n    setDowloadModal(null);\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      const params = {\n        status: data?.status,\n        page: data?.page,\n        perPage: 10,\n        type: 'delivery',\n        deliveryman: deliverymanId,\n      };\n      dispatch(fetchOrders(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilterDate = (item) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: {\n          ...data,\n          date_from: item\n            ? moment(item?.[0]).format('YYYY-MM-DD').toString()\n            : undefined,\n          date_to: item\n            ? moment(item?.[1]).format('YYYY-MM-DD').toString()\n            : undefined,\n        },\n      }),\n    );\n  };\n\n  return (\n    <div>\n      <Spin spinning={loading}>\n        <DeliveryStatistic data={statistic} />\n      </Spin>\n      <Card\n        title={t('orders')}\n        extra={\n          <Space wrap>\n            <RangePicker\n              format='YYYY-MM-DD'\n              onChange={(e) => handleFilterDate(e)}\n            />\n            <DeleteButton type='danger' onClick={allDelete}>\n              {t('delete.all')}\n            </DeleteButton>\n            <Button onClick={excelExport} loading={downloading}>\n              {t('export')}\n            </Button>\n            <FilterColumns setColumns={setColumns} columns={columns} />\n          </Space>\n        }\n      >\n        <div className='mt-2 mb-4'>\n          <SearchInput\n            placeholder={t('search')}\n            width={480}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n          />\n        </div>\n        <Tabs onChange={onChangeTab} type='card' activeKey={data?.status}>\n          {statuses.map((item) => (\n            <TabPane tab={t(item.name)} key={item.name} />\n          ))}\n        </Tabs>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={orders}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: params.page,\n            total: meta.total,\n            defaultCurrent: params.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n        {orderDetails && (\n          <OrderStatusModal\n            orderDetails={orderDetails}\n            handleCancel={handleCloseModal}\n            status={statuses}\n          />\n        )}\n        {orderDeliveryDetails && (\n          <OrderDeliveryman\n            orderDetails={orderDeliveryDetails}\n            handleCancel={handleCloseModal}\n          />\n        )}\n        {locationsMap && (\n          <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n        )}\n        {dowloadModal && (\n          <DownloadModal id={dowloadModal} handleCancel={handleCloseModal} />\n        )}\n        <CustomModal\n          click={orderDelete}\n          text={text ? t('delete') : t('all.delete')}\n          loading={loadingBtn}\n          setText={setId}\n        />\n      </Card>\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/deliveriesMap.js",["5897"],[],"import React, { useEffect, useState } from 'react';\nimport { Avatar, Card, Col, Row, Select } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { IMG_URL } from 'configs/app-global';\nimport { fetchDelivery } from 'redux/slices/deliveries';\nimport { disableRefetch } from 'redux/slices/menu';\nimport Loading from 'components/loading';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport UserData from './user-data';\nimport UserCard from './user-card';\nimport { UserOutlined } from '@ant-design/icons';\nimport MapCustomMarker from 'components/map-custom-marker';\n\nconst deliveryType = [\n  { label: 'All', value: 'all', key: 1 },\n  { label: 'Online', value: '1', key: 2 },\n  { label: 'Offline', value: '0', key: 3 },\n];\n\nconst Marker = (props) => (\n  <Avatar\n    src={props.url}\n    icon={<UserOutlined />}\n    style={{ color: '#1a3353' }}\n    onClick={props.onClick}\n  />\n);\n\nexport default function DeliveriesMap() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [active, setActive] = useState(undefined);\n  const [userData, setUserData] = useState(null);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const center = getDefaultLocation(settings);\n  const { delivery, loading } = useSelector(\n    (state) => state.deliveries,\n    shallowEqual,\n  );\n\n  const paramsData = {\n    page: 1,\n    perPage: 100,\n    online: active,\n    'statuses[0]': 'new',\n    'statuses[1]': 'accepted',\n    'statuses[2]': 'ready',\n    'statuses[3]': 'on_a_way',\n  };\n\n  useDidUpdate(() => {\n    if (active === 'all') delete paramsData.online;\n\n    dispatch(fetchDelivery(paramsData));\n  }, [active]);\n\n  const handleLoadMap = (map, maps) => {\n    const markers = delivery.map((item) => ({\n      lat: Number(item?.delivery_man_setting?.location.latitude || '0'),\n      lng: Number(item?.delivery_man_setting?.location.longitude || '0'),\n    }));\n    let bounds = new maps.LatLngBounds();\n    for (var i = 0; i < markers.length; i++) {\n      bounds.extend(markers[i]);\n    }\n    map.fitBounds(bounds);\n  };\n\n  const onMapClick = (e) => {\n    setUserData(e);\n  };\n\n  const onCloseDeliverymanDetails = () => {\n    setUserData(null);\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      if (active === 'all') delete paramsData.online;\n      dispatch(fetchDelivery(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  return (\n    <Card\n      title={t('deliveries')}\n      className='delivery'\n      extra={\n        <Select\n          options={deliveryType}\n          defaultValue={'all'}\n          loading={loading}\n          onChange={(e) => setActive(e)}\n          style={{ width: '200px' }}\n        />\n      }\n    >\n      {!loading ? (\n        <Row gutter={8}>\n          <Col span={18}>\n            <div\n              className='map-container'\n              style={{ height: '73vh', width: '100%' }}\n            >\n              {!!userData && (\n                <Card className='map-user-card'>\n                  <UserData\n                    data={userData}\n                    handleClose={onCloseDeliverymanDetails}\n                  />\n                </Card>\n              )}\n              <MapCustomMarker center={center} handleLoadMap={handleLoadMap}>\n                {delivery.map((item) => (\n                  <Marker\n                    key={item.id}\n                    lat={Number(\n                      item?.delivery_man_setting?.location?.latitude || '0',\n                    )}\n                    lng={Number(\n                      item?.delivery_man_setting?.location?.longitude || '0',\n                    )}\n                    url={IMG_URL + item.img}\n                    onClick={() => onMapClick(item)}\n                  />\n                ))}\n              </MapCustomMarker>\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className='order-list' style={{ height: '75vh' }}>\n              {delivery.map((item, index) => (\n                <UserCard key={item.id + index} data={item} />\n              ))}\n            </div>\n          </Col>\n        </Row>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryList/deliveriesList.js",["5898","5899","5900"],[],"import {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n  ShoppingCartOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Rate, Select, Space, Table } from 'antd';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport { Context } from 'context/context';\nimport { fetchDelivery } from 'redux/slices/deliveries';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport deliveryService from 'services/delivery';\nimport CustomModal from 'components/modal';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { BiMap } from 'react-icons/bi';\nimport ShowLocationsMap from './show-locations.map';\nimport DeliverySettingCreate from './add-delivery-settings';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\n\nconst type_of_technique = [\n  { label: 'Benzine', value: 'benzine' },\n  { label: 'Diesel', value: 'diesel' },\n  { label: 'Gas', value: 'gas' },\n  { label: 'Motorbike', value: 'motorbike' },\n  { label: 'Bike', value: 'bike' },\n  { label: 'Foot', value: 'foot' },\n];\n\nconst DeliveriesList = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [deliveryModal, setDeliveryModal] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const paramsData = {\n    search: data?.search ? data.search : undefined,\n    type_of_technique: data?.type,\n    sort: data?.sort,\n    column: data?.column,\n    pageSize: data?.per_page,\n    page: data?.page || 1,\n  };\n\n  const { delivery, loading, meta } = useSelector(\n    (state) => state.deliveries,\n    shallowEqual,\n  );\n\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `user/delivery/${row.uuid}`,\n        id: 'delivery_edit',\n        name: t('delivery.edit'),\n      }),\n    );\n    navigate(`/user/delivery/${row.uuid}`);\n  };\n\n  const goToOrder = (row) => {\n    dispatch(\n      addMenu({\n        name: 'delivery.orders',\n        id: 'delivery_orders',\n        url: `delivery/orders/${row.id}`,\n      }),\n    );\n    navigate(`/delivery/orders/${row.id}`);\n  };\n\n  const goToAddDeliveryman = () => {\n    dispatch(\n      addMenu({\n        id: 'user-add-role',\n        url: `add/user/delivery/${'deliveryman'}`,\n        name: t(`add.${'deliveryman'}`),\n      }),\n    );\n    navigate(`/add/user/delivery/${'deliveryman'}`);\n  };\n\n  const handleCloseModal = () => {\n    setLocationsMap(null);\n    setDeliveryModal(null);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, data) => data?.firstname + ' ' + data?.lastname,\n    },\n    {\n      title: t('orders'),\n      dataIndex: 'count',\n      key: 'count',\n      is_show: true,\n      sorter: true,\n      render: (_, data) => data?.deliveryman_orders.length,\n    },\n    {\n      title: t('rate'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      sorter: true,\n      render: (_, data) => (\n        <Rate\n          className='mt-3 ml-3'\n          disabled\n          allowHalf\n          value={data?.r_avg ?? 0}\n        />\n      ),\n    },\n    {\n      title: t('wallet'),\n      dataIndex: 'wallet_sum',\n      key: 'wallet_sum',\n      is_show: true,\n      sorter: true,\n      render: (_, data) =>\n        numberToPrice(data?.wallet?.price, defaultCurrency.symbol),\n    },\n    {\n      title: t('delivery.man.setting'),\n      dataIndex: 'setting',\n      key: 'setting',\n      is_show: true,\n      render: (_, data) =>\n        data?.delivery_man_setting === null ? (\n          <Button\n            icon={<PlusCircleOutlined />}\n            onClick={() => setDeliveryModal({ id: data?.id })}\n          >\n            {t('add.settings')}\n          </Button>\n        ) : (\n          <Space>\n            <span>\n              {t('brand')}: {data?.delivery_man_setting?.brand}\n              <br />\n              {t('model')}: {data?.delivery_man_setting?.model}\n              <br />\n              {t('number')}: {data?.delivery_man_setting?.number}\n              <br />\n              {t('color')}: {data?.delivery_man_setting?.color}\n            </span>\n            {data?.delivery_man_setting?.id ? (\n              <EditOutlined\n                onClick={() =>\n                  setDeliveryModal({\n                    settingsId: data?.delivery_man_setting?.id,\n                    id: data?.id,\n                  })\n                }\n              />\n            ) : (\n              ''\n            )}\n          </Space>\n        ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<BiMap />} onClick={() => setLocationsMap(row)} />\n            {/*<Button*/}\n            {/*  icon={<ShoppingCartOutlined />}*/}\n            {/*  onClick={() => goToOrder(row)}*/}\n            {/*/>*/}\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const deliveryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    deliveryService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchDelivery(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n        setId(null);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchDelivery(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchDelivery(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      }),\n    );\n  };\n\n  return (\n    <>\n      <Card\n        title={t('delivery')}\n        extra={\n          <Space>\n            <Select\n              placeholder={t('type.of.technique')}\n              style={{ width: '150px' }}\n              options={type_of_technique}\n              onChange={(e) => handleFilter(e, 'type')}\n              allowClear\n            />\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n\n            <Button\n              type='primary'\n              icon={<PlusCircleOutlined />}\n              onClick={goToAddDeliveryman}\n            >\n              {t('add.delivery')}\n            </Button>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        }\n      >\n        <SearchInput\n          placeholder={t('search')}\n          className='w-25'\n          handleChange={(search) => handleFilter(search, 'search')}\n          resetSearch={!activeMenu.data?.search}\n          defaultValue={activeMenu.data?.search}\n        />\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={delivery}\n          pagination={{\n            pageSize: meta.per_page,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(res) => res.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n        <CustomModal\n          click={deliveryDelete}\n          text={text ? t('delete') : t('all.delete')}\n          setText={setId}\n          loading={loadingBtn}\n        />\n        {locationsMap && (\n          <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n        )}\n        {deliveryModal && (\n          <DeliverySettingCreate\n            id={deliveryModal.id}\n            data={deliveryModal}\n            handleCancel={handleCloseModal}\n          />\n        )}\n      </Card>\n    </>\n  );\n};\n\nexport default DeliveriesList;\n","/home/mostafa/Magde/new/frontadminreact/src/views/currencies/currency-edit.js",["5901","5902","5903"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Input,\n  Card,\n  Button,\n  Row,\n  Col,\n  Switch,\n  Select,\n  InputNumber,\n} from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport currencyService from '../../services/currency';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchCurrencies } from '../../redux/slices/currency';\nimport { useTranslation } from 'react-i18next';\nimport currency from '../../helpers/currnecy.json';\nimport Loading from '../../components/loading';\n\nexport default function CurrencyEdit() {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchCurrency = (id) => {\n    setLoading(true);\n    currencyService\n      .getById(id)\n      .then(({ data }) => form.setFieldsValue(data))\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      title: values.title,\n      symbol: values.symbol,\n      rate: values.rate,\n      active: Number(values.active),\n      position: values.position,\n    };\n    const nextUrl = 'currencies';\n    currencyService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchCurrencies({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchCurrency(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const options = currency.map((item) => ({\n    label: item?.name.toUpperCase() + ' ' + `( ${item.symbol_native} )`,\n    value: item.code,\n    symbol: item.symbol_native,\n  }));\n\n  return (\n    <Card title={t('edit.currency')}>\n      {loading ? (\n        <Loading />\n      ) : (\n        <Form\n          name='currency-add'\n          onFinish={onFinish}\n          form={form}\n          layout='vertical'\n          initialValues={{\n            ...activeMenu.data,\n            active: true,\n            position: 'before',\n          }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name='title'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  onChange={(e, i) => form.setFieldsValue({ symbol: i.symbol })}\n                  filterOption={(input, option) =>\n                    (option?.label ?? '').includes(input)\n                  }\n                  filterSort={(optionA, optionB) =>\n                    (optionA?.label ?? '')\n                      .toUpperCase()\n                      .localeCompare((optionB?.label ?? '').toUpperCase())\n                  }\n                  showSearch\n                  allowClear\n                  options={options}\n                />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('symbol')}\n                name='symbol'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input disabled />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('rate')}\n                name='rate'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('must.be.positive'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('symbol_position')}\n                name='position'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  onChange={(value) => form.setFieldsValue({ position: value })}\n                  options={[\n                    { label: t('after'), value: 'after' },\n                    { label: t('before'), value: 'before' },\n                  ]}\n                />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-detail.js",["5904"],[],"import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { disableRefetch } from 'redux/slices/menu';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Descriptions, Row, Space, Spin, Alert } from 'antd';\nimport { IMG_URL } from '../../configs/app-global';\nimport { removeFromMenu } from '../../redux/slices/menu';\nimport { fetchRequestModels } from 'redux/slices/request-models';\nimport requestAdminModelsService from 'services/request-models';\nimport ProductRequestModal from './product-request-modal';\n\nconst body = {\n  type: 'product',\n};\n\nconst ProductRequestDetail = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const { id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu);\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [isButtonLoading, setButtonLoading] = useState(false);\n  const [data, setData] = useState({});\n  const [model, setModel] = useState({});\n  const [statusNote, setStatusNote] = useState('');\n  const [modalVisible, setModalVisible] = useState(false);\n\n  function fetchProductRequest(alias) {\n    setLoading(true);\n    requestAdminModelsService\n      .getById(alias)\n      .then((res) => {\n        setData(res.data.data);\n        setModel(res.data.model);\n        setStatusNote(res.data?.status_note);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function handleStatusUpdate(params) {\n    setButtonLoading(true);\n\n    const nextUrl = 'catalog/products';\n\n    requestAdminModelsService\n      .changeStatus(id, params)\n      .then(() => {\n        navigate(`/${nextUrl}`, { state: { tab: 'request' } });\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        toast.success(t('successfully.changed'));\n        dispatch(fetchRequestModels(body));\n      })\n      .finally(() => {\n        setModalVisible(false);\n        setButtonLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    fetchProductRequest(id);\n  }, [id]);\n\n  const changedInfo = data;\n  const originalInfo = model;\n\n  return !loading ? (\n    <>\n      <Card>\n        <Descriptions bordered title={t('changed.info')}>\n          <Descriptions.Item label={`${t('title')} (${defaultLang})`} span={3}>\n            {changedInfo[`title[${defaultLang}]`]}\n          </Descriptions.Item>\n          <Descriptions.Item\n            label={`${t('description')} (${defaultLang})`}\n            span={3}\n          >\n            {changedInfo[`description[${defaultLang}]`]}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('shop')} span={1.5}>\n            {changedInfo?.shop?.translation.title}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('category')} span={1.5}>\n            {changedInfo?.category?.label}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('brand')} span={1.5}>\n            {changedInfo?.brand?.label}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('unit')} span={1.5}>\n            {changedInfo?.unit?.label}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('images')} span={3}>\n            <Row gutter={12}>\n              {changedInfo?.images?.map((item, idx) => (\n                <Col key={'image' + idx}>\n                  <img width={80} alt='product' src={item.url} />\n                </Col>\n              ))}\n            </Row>\n          </Descriptions.Item>\n          <Descriptions.Item label={t('tax')}>\n            {changedInfo?.tax}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('min.quantity')}>\n            {changedInfo?.min_qty}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('max.quantity')}>\n            {changedInfo?.max_qty}\n          </Descriptions.Item>\n        </Descriptions>\n\n        {changedInfo?.stocks?.map((item, idx) => {\n          if (!item) {\n            return '';\n          }\n          return (\n            <Descriptions key={'desc' + idx} bordered className='mt-4'>\n              <Descriptions.Item label={t('price')} span={2}>\n                {item.price}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('quantity')} span={2}>\n                {item.quantity}\n              </Descriptions.Item>\n              {item?.ids?.map((extra, idx) => (\n                <Descriptions.Item\n                  key={'extra' + idx}\n                  label={changedInfo?.extras[idx].label}\n                >\n                  {extra?.label}\n                </Descriptions.Item>\n              ))}\n            </Descriptions>\n          );\n        })}\n\n        <Descriptions bordered className='mt-4' title={t('original.info')}>\n          <Descriptions.Item\n            label={`${t('title')} (${defaultLang})`}\n            span={3}\n            column={3}\n          >\n            {originalInfo?.translation?.title}\n          </Descriptions.Item>\n          <Descriptions.Item\n            label={`${t('description')} (${defaultLang})`}\n            span={3}\n            column={3}\n          >\n            {originalInfo?.translation?.description}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('shop')} span={1.5} column={1.5}>\n            {originalInfo?.shop?.translation.title}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('category')} span={1.5} column={1.5}>\n            {originalInfo?.category?.translation.title}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('brand')} span={1.5} column={1.5}>\n            {originalInfo?.brand?.title}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('unit')} span={1.5} column={1.5}>\n            {originalInfo?.unit?.translation.title}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('images')} span={3} column={3}>\n            <Row gutter={12}>\n              {originalInfo?.galleries?.map((item, idx) => (\n                <Col key={'image' + idx}>\n                  <img width={80} alt='product' src={IMG_URL + item.path} />\n                </Col>\n              ))}\n            </Row>\n          </Descriptions.Item>\n          <Descriptions.Item span={3} column={3} label={t('tax')}>\n            {originalInfo?.tax}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} column={3} label={t('min.quantity')}>\n            {originalInfo?.min_qty}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} column={3} label={t('max.quantity')}>\n            {originalInfo?.max_qty}\n          </Descriptions.Item>\n        </Descriptions>\n        {originalInfo?.stocks?.map((item, idx) => {\n          if (!item) {\n            return '';\n          }\n          return (\n            <Descriptions key={'desc' + idx} bordered className='mt-4'>\n              <Descriptions.Item label={t('price')} span={2} column={2}>\n                {item?.price}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('quantity')} span={2} column={2}>\n                {item?.quantity}\n              </Descriptions.Item>\n              {item?.extras?.map((extra, idx) => (\n                <Descriptions.Item\n                  key={'extra' + idx}\n                  label={extra?.group?.translation?.title}\n                  span={2}\n                  column={2}\n                >\n                  {extra?.value}\n                </Descriptions.Item>\n              ))}\n            </Descriptions>\n          );\n        })}\n        {statusNote && (\n          <Alert\n            className='mt-4'\n            message={t('status.note')}\n            description={statusNote}\n            type='error'\n          />\n        )}\n\n        <div className='d-flex justify-content-end mt-4'>\n          <Space>\n            <Button\n              type='primary'\n              onClick={() => {\n                handleStatusUpdate({ status: 'approved' });\n              }}\n            >\n              {t('accept')}\n            </Button>\n            <Button\n              type='primary'\n              danger\n              onClick={() => {\n                setModalVisible(true);\n              }}\n            >\n              {t('decline')}\n            </Button>\n          </Space>\n        </div>\n      </Card>\n\n      <ProductRequestModal\n        data={{ title: 'decline' }}\n        visible={modalVisible}\n        handleCancel={() => setModalVisible(false)}\n        handleOk={handleStatusUpdate}\n        laoding={isButtonLoading}\n      />\n    </>\n  ) : (\n    <div className='d-flex justify-content-center align-items-center'>\n      <Spin size='large' className='py-5' />\n    </div>\n  );\n};\n\nexport default ProductRequestDetail;\n","/home/mostafa/Magde/new/frontadminreact/src/views/currencies/currencies-add.js",["5905","5906"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Input,\n  Card,\n  Button,\n  Row,\n  Col,\n  Switch,\n  Select,\n  InputNumber,\n} from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport currencyService from '../../services/currency';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { fetchCurrencies } from '../../redux/slices/currency';\nimport { useTranslation } from 'react-i18next';\nimport currency from '../../helpers/currnecy.json';\n\nexport default function CurrencyAdd() {\n  const { t } = useTranslation();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      title: values.title,\n      symbol: values.symbol,\n      rate: values.rate,\n      active: Number(values.active),\n      position: values.position,\n    };\n    const nextUrl = 'currencies';\n    currencyService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchCurrencies({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const options = currency.map((item) => ({\n    label: item?.name.toUpperCase() + ' ' + `( ${item.symbol_native} )`,\n    value: item.code,\n    symbol: item.symbol_native,\n  }));\n\n  return (\n    <Card title={t('add.currency')}>\n      <Form\n        name='currency-add'\n        onFinish={onFinish}\n        form={form}\n        layout='vertical'\n        initialValues={{\n          ...activeMenu.data,\n          active: true,\n          position: 'before',\n        }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('title')}\n              name='title'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select\n                onChange={(e, i) => form.setFieldsValue({ symbol: i.symbol })}\n                filterOption={(input, option) =>\n                  (option?.label ?? '')\n                    .toLowerCase()\n                    .includes(input.toLowerCase())\n                }\n                filterSort={(optionA, optionB) =>\n                  (optionA?.label ?? '')\n                    .toLowerCase()\n                    .localeCompare((optionB?.label ?? '').toLowerCase())\n                }\n                showSearch\n                allowClear\n                options={options}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('symbol')}\n              name='symbol'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input disabled />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('rate')}\n              name='rate'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'number',\n                  min: 0,\n                  message: t('must.be.positive'),\n                },\n              ]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('symbol_position')}\n              name='position'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select\n                onChange={(value) => form.setFieldsValue({ position: value })}\n                options={[\n                  { label: t('after'), value: 'after' },\n                  { label: t('before'), value: 'before' },\n                ]}\n                defaultValue='before'\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-edit.js",["5907","5908"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport ProductProperty from './product-property';\nimport ProductFinish from './product-finish';\nimport ProductStock from './product-stock';\nimport ProductExtras from './product-extras';\nimport ProductsIndex from './products-index';\nimport LanguageList from 'components/language-list';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  removeFromMenu,\n  disableRefetch,\n  setMenuData,\n} from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport requestModelsService from 'services/request-models';\n\nconst { Step } = Steps;\n\nconst ProductRequestModelEdit = () => {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  function fetchProductRequest(alias) {\n    setLoading(true);\n    requestModelsService\n      .getById(alias)\n      .then((res) => {\n        let request = res.data.data;\n\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: {\n              ...request,\n              request_id: res.data.id,\n              actualStocks: res.data.model?.stocks,\n              model_id: res.data.model_id,\n              model: res.data.model\n            },\n          })\n        );\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProductRequest(id);\n    }\n  }, [activeMenu.refetch, id]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  // useEffect(() => {\n  //   return () => {\n  //     const nextUrl = 'catalog/products';\n  //     dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n  //   };\n  // }, []);\n\n  return (\n    <>\n      <Card title={t('edit.food')} extra={<LanguageList />}>\n        <Steps current={current} onChange={onChange}>\n          {steps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n      </Card>\n      {!loading ? (\n        <div className=''>\n          {steps[current].content === 'First-content' && (\n            <ProductsIndex isRequest next={next} action_type={'edit'} />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <ProductExtras isRequest next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <ProductStock isRequest next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Fourth-content' && (\n            <ProductProperty isRequest next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <ProductFinish isRequest prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </>\n  );\n};\nexport default ProductRequestModelEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/product-clone.js",["5909"],[],"import React, { useEffect, useMemo, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport ProductProperty from './product-property';\nimport ProductFinish from './product-finish';\nimport ProductStock from './product-stock';\nimport ProductExtras from './product-extras';\nimport ProductsIndex from './products-index';\nimport LanguageList from 'components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from 'services/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport ProductDigital from './product-digital';\nimport ProductGallery from './product-gallery';\n\nconst { Step } = Steps;\n\nconst ProductsClone = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const [newSteps, setNewSteps] = useState(steps);\n  const { extras } = activeMenu?.data || {};\n  const isDigital = activeMenu?.data?.digital;\n  const isTypeColorExists = extras?.some(\n    (extra) => extra?.group?.type === 'color',\n  );\n  const filteredExtras = useMemo(\n    () => extras?.find((item) => item?.group?.type === 'color'),\n    [extras],\n  );\n  const uniqueData = Array.from(\n    new Set(filteredExtras?.values?.map((item) => item.value)),\n  ).map((value) => {\n    return filteredExtras?.values?.find((item) => item.value === value);\n  });\n  const colorItems = uniqueData.filter((item) => item.group_type === 'color');\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  useEffect(() => {\n    if (isDigital) {\n      setNewSteps(steps.filter((item) => item.title !== 'product.extras'));\n    } else if (isDigital === false) {\n      setNewSteps(steps.filter((item) => item.title !== 'product.digital'));\n    }\n    if (isTypeColorExists) {\n      setNewSteps((prev) => prev);\n    } else {\n      setNewSteps((prev) => prev.filter((item) => item.title !== 'Gallery'));\n    }\n  }, [isTypeColorExists, isDigital]);\n\n  return (\n    <Card title={t('clone.product')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <ProductsIndex next={next} />\n          )}\n\n          {activeMenu.data?.digital &&\n            newSteps[current].content === 'Product-digital' && (\n              <ProductDigital next={next} prev={prev} />\n            )}\n\n          {!activeMenu.data?.digital &&\n            newSteps[current].content === 'Second-content' && (\n              <ProductExtras next={next} prev={prev} />\n            )}\n\n          {steps[current].content === 'Third-content' && (\n            <ProductStock next={next} prev={prev} />\n          )}\n\n          {colorItems?.length > 0 &&\n            steps[current].content === 'Gallery-content' && (\n              <ProductGallery next={next} prev={prev} />\n            )}\n\n          {steps[current].content === 'Fourth-content' && (\n            <ProductProperty next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <ProductFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default ProductsClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-edit.js",["5910","5911"],[],"import React, { useEffect, useMemo, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport ProductProperty from './product-property';\nimport ProductFinish from './product-finish';\nimport ProductStock from './product-stock';\nimport ProductExtras from './product-extras';\nimport ProductsIndex from './products-index';\nimport LanguageList from 'components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from 'services/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport ProductGallery from './product-gallery';\nimport ProductDigital from './product-digital';\nimport Wholesale from './wholesale';\n\nconst { Step } = Steps;\n\nconst ProductsEdit = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const [newSteps, setNewSteps] = useState(steps);\n  const { extras } = activeMenu?.data || {};\n  const isDigital = activeMenu?.data?.digital;\n  const isTypeColorExists = extras?.some(\n    (extra) => extra?.group?.type === 'color',\n  );\n  const filteredExtras = useMemo(\n    () => extras?.find((item) => item?.group?.type === 'color'),\n    [extras],\n  );\n  const uniqueData = Array.from(\n    new Set(filteredExtras?.values?.map((item) => item.value)),\n  ).map((value) => {\n    return filteredExtras?.values?.find((item) => item.value === value);\n  });\n  const colorItems = uniqueData.filter((item) => item.group_type === 'color');\n\n  useEffect(() => {\n    if (isDigital) {\n      setNewSteps(steps.filter((item) => item.title !== 'product.extras'));\n    } else if (isDigital === false) {\n      setNewSteps(steps.filter((item) => item.title !== 'product.digital'));\n    }\n    if (isTypeColorExists) {\n      setNewSteps((prev) => prev);\n    } else {\n      setNewSteps((prev) => prev.filter((item) => item.title !== 'Gallery'));\n    }\n  }, [isTypeColorExists, isDigital]);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n      isVideo: Boolean(item.preview),\n    }));\n\n  const createMediaFile = (items) => {\n    const mediaObject = { images: [], previews: [] };\n    const previews = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.preview,\n        url: item.preview,\n      }));\n    const videos = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.path,\n        url: item.path,\n        isVideo: true,\n      }));\n    mediaObject.previews = previews;\n    mediaObject.images = videos;\n\n    return mediaObject;\n  };\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item?.translation ? item.translation.title : item.title,\n      value: item.id,\n      key: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const extras = {};\n        res.data.stocks.forEach((stock) => {\n          stock.extras.forEach((extra) => {\n            if (extra.extra_group_id in extras) {\n              if (\n                !extras[extra.extra_group_id].values?.some(\n                  (item) => item.value === extra.value?.id,\n                )\n              ) {\n                extras[extra.extra_group_id].values?.push({\n                  value: extra.value.id,\n                  label: extra.value?.value,\n                  stock_id: stock.id,\n                });\n              }\n            } else {\n              extras[extra.extra_group_id] = {\n                group: extra.group,\n                label: extra.group.translation?.title,\n                value: extra.extra_group_id,\n                id: extra.extra_group_id,\n                stock_id: stock.id,\n                values: [\n                  {\n                    value: extra.value.id,\n                    label: extra.value?.value,\n                    stock_id: stock.id,\n                  },\n                ],\n              };\n            }\n          });\n        });\n\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          initialMediaFile: createMediaFile(res.data.galleries),\n          extras: Object.values(extras),\n          stocks: res.data.stocks.map((stock) => ({\n            ...stock,\n            ...Object.assign(\n              {},\n              ...stock.extras.map((extra, idx) => ({\n                [`extras[${idx}]`]: extra.id,\n              })),\n            ),\n            quantity: stock.quantity || 0,\n            price: stock.price || 0,\n            extras: undefined,\n          })),\n          stocksData: res?.data?.stocks,\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n          min_qty: res.data?.min_qty,\n          max_qty: res.data?.max_qty,\n          tax: res.data?.tax,\n          interval: res.data?.interval,\n          age_limit: res.data?.age_limit,\n        };\n\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n  return (\n    <>\n      <Card title={t('edit.product')} extra={<LanguageList />}>\n        <Steps current={current} onChange={onChange}>\n          {newSteps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n      </Card>\n      {!loading ? (\n        <div className=''>\n          {newSteps[current].content === 'First-content' && (\n            <ProductsIndex next={next} action_type={'edit'} />\n          )}\n\n          {activeMenu.data?.digital &&\n            newSteps[current].content === 'Product-digital' && (\n              <ProductDigital next={next} prev={prev} />\n            )}\n\n          {!activeMenu.data?.digital &&\n            newSteps[current].content === 'Second-content' && (\n              <ProductExtras next={next} prev={prev} />\n            )}\n\n          {newSteps[current].content === 'Third-content' && (\n            <ProductStock next={next} prev={prev} />\n          )}\n\n          {newSteps[current].content === 'wholesale-content' && (\n            <Wholesale next={next} prev={prev} />\n          )}\n\n          {isTypeColorExists > 0 &&\n            newSteps[current].content === 'Gallery-content' && (\n              <ProductGallery next={next} prev={prev} />\n            )}\n\n          {newSteps[current].content === 'Fourth-content' && (\n            <ProductProperty next={next} prev={prev} />\n          )}\n\n          {newSteps[current].content === 'Finish-content' && (\n            <ProductFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </>\n  );\n};\nexport default ProductsEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/products-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/faq/faq-edit.js",["5912","5913"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Row, Space } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport { fetchFaqs } from '../../redux/slices/faq';\nimport { useTranslation } from 'react-i18next';\nimport TextArea from 'antd/lib/input/TextArea';\nimport faqService from '../../services/faq';\nimport getLanguageFields from '../../helpers/getLanguageFields';\nimport Loading from '../../components/loading';\n\nexport default function FaqEdit() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function fetchFaq(uuid) {\n    setLoading(true);\n    faqService\n      .getById(uuid)\n      .then(({ data }) => {\n        const fields = ['answer', 'question'];\n        form.setFieldsValue(getLanguageFields(languages, data, fields));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchFaq(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    const body = {\n      question: getTranslationFields(languages, values, 'question'),\n      answer: getTranslationFields(languages, values, 'answer'),\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'settings/faqs';\n    faqService\n      .update(uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchFaqs({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('edit.faq')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='faq-edit'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={activeMenu?.data}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'question' + item.locale}\n                  label={t('question')}\n                  name={`question[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={2} maxLength={150} />\n                </Form.Item>\n              ))}\n            </Col>\n          </Row>\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'answer' + item.locale}\n                  label={t('answer')}\n                  name={`answer[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={6} maxLength={300} />\n                </Form.Item>\n              ))}\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/faq/faq-add.js",["5914"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Row, Space } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport { fetchFaqs } from '../../redux/slices/faq';\nimport { useTranslation } from 'react-i18next';\nimport TextArea from 'antd/lib/input/TextArea';\nimport faqService from '../../services/faq';\n\nexport default function FaqAdd() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      question: getTranslationFields(languages, values, 'question'),\n      answer: getTranslationFields(languages, values, 'answer'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'settings/faqs';\n    faqService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchFaqs({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.faq')} extra={<LanguageList />}>\n      <Form\n        name='faq-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={activeMenu?.data}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'question' + item.locale}\n                label={t('question')}\n                name={`question[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={2} maxLength={150} />\n              </Form.Item>\n            ))}\n          </Col>\n        </Row>\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'answer' + item.locale}\n                label={t('answer')}\n                name={`answer[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={6} maxLength={300} />\n              </Form.Item>\n            ))}\n          </Col>\n        </Row>\n        <Space>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Space>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/gallery/gallery-languages.js",["5915"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Card,\n  Col,\n  Image,\n  Row,\n  Pagination,\n  Checkbox,\n  Space,\n  Button,\n} from 'antd';\nimport { ArrowLeftOutlined } from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { BsFolder2Open } from 'react-icons/bs';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport galleryService from '../../services/gallery';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport getImage from '../../helpers/getImage';\nimport Loading from '../../components/loading';\nimport DeleteButton from '../../components/delete-button';\nimport RiveResult from '../../components/rive-result';\n\nconst GalleryLanguages = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { type } = useParams();\n  const [gallaryList, setGallaryList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const [gallary, setGallary] = useState([]);\n  const [pageSize, setPageSize] = useState(15);\n  const [page, setPage] = useState(1);\n  const [meta, setMeta] = useState({});\n\n  const imageDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...gallary.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    galleryService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        fetchGallery();\n        setIsModalVisible(false);\n        setGallary([]);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const fetchGallery = () => {\n    const params = {\n      type,\n      perPage: pageSize,\n      page: page,\n    };\n    setLoading(true);\n    galleryService\n      .getAll(params)\n      .then((res) => {\n        setGallaryList(res.data.data);\n        setMeta(res.data);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchGallery();\n  }, [page, pageSize]);\n\n  const onChangePagination = (pageNumber, e) => {\n    setPage(pageNumber);\n    setPageSize(e);\n  };\n\n  const allDelete = () => {\n    if (gallary === null || gallary.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  const handleSelect = (e) =>\n    setGallary(gallaryList.map((gallary) => gallary.id));\n\n  const handleClear = (e) => setGallary([]);\n\n  const handleCheck = (e, data) => {\n    if (e.target.checked) {\n      setGallary([...gallary, parseInt(data)]);\n    } else {\n      setGallary(gallary.filter((item) => item !== data));\n    }\n  };\n\n  return (\n    <div className='gallery-item'>\n      <Card\n        title={\n          <div className='d-flex align-items-center justify-content-between'>\n            <span className='d-flex align-items-center'>\n              <span className='mr-3' onClick={() => navigate(-1)}>\n                <ArrowLeftOutlined />\n              </span>\n              <BsFolder2Open style={{ fontSize: '25px' }} />\n              <span className='ml-2'>{t(type)}</span>\n            </span>\n            <Space>\n              <DeleteButton onClick={allDelete} type='danger'>\n                {t('delete.all')}\n              </DeleteButton>\n              <Button\n                onClick={() =>\n                  gallary.length === gallaryList.length\n                    ? handleClear()\n                    : handleSelect()\n                }\n              >\n                {gallary.length === gallaryList.length\n                  ? t('clear.all')\n                  : t('select.all')}\n                {}\n              </Button>\n            </Space>\n          </div>\n        }\n      >\n        {!loading ? (\n          <>\n            <Row gutter={[24, 24]} className='mt-2'>\n              {gallaryList.length === 0 ? (\n                <Col span={24}>\n                  <RiveResult id='nosell' />\n                </Col>\n              ) : (\n                gallaryList?.map((item, index) => (\n                  <Col key={index}>\n                    <Card\n                      className={`mb-0 ${\n                        item.isset ? 'card-noActive' : 'card-active'\n                      } card-image`}\n                    >\n                      <Image\n                        src={getImage(item.path)}\n                        className='images'\n                        alt={'images'}\n                      />\n                      {!item.isset && (\n                        <Checkbox\n                          checked={gallary?.includes(item.id)}\n                          className='icon-center-delete'\n                          onChange={(e) => handleCheck(e, item.id)}\n                        />\n                      )}\n                    </Card>\n                  </Col>\n                ))\n              )}\n            </Row>\n            <div className='d-flex justify-content-end mt-5'>\n              <Pagination\n                total={meta.total}\n                pageSize={pageSize}\n                current={page}\n                onChange={onChangePagination}\n              />\n            </div>\n          </>\n        ) : (\n          <Loading />\n        )}\n        <CustomModal\n          click={imageDelete}\n          text={t('all.delete')}\n          loading={loadingBtn}\n          setText={setGallary}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default GalleryLanguages;\n","/home/mostafa/Magde/new/frontadminreact/src/views/languages/language-add.js",["5916","5917"],[],"import React, { useEffect, useState } from 'react';\nimport { Input, Form, Row, Col, Button, Card, Switch, Select } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport languagesService from '../../services/languages';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport createImage from '../../helpers/createImage';\nimport Loading from '../../components/loading';\nimport MediaUpload from '../../components/upload';\nimport { fetchLang } from '../../redux/slices/languages';\nimport lang from '../../helpers/lang.json';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function LanguageAdd() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { isDemo } = useDemo();\n  const [image, setImage] = useState(\n    activeMenu?.data?.image ? [activeMenu?.data?.image] : []\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n  }, []);\n\n  const fetchLanguage = (id) => {\n    setLoading(true);\n    languagesService\n      .getById(id)\n      .then((res) => {\n        let language = res.data;\n        setImage([createImage(language.img)]);\n        form.setFieldsValue({\n          ...language,\n          image: [createImage(language.img)],\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      title: values?.title,\n      locale: values?.locale,\n      images: image.length ? [image[0]?.name] : undefined,\n      active: Number(values?.active),\n      backward: values?.backward,\n      default: values?.default,\n    };\n\n    const nextUrl = 'settings/languages';\n    if (!id) {\n      languagesService\n        .create(body)\n        .then(() => {\n          dispatch(fetchLang());\n          toast.success(t('successfully.created'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    } else {\n      languagesService\n        .update(id, body)\n        .then(() => {\n          dispatch(fetchLang());\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      fetchLanguage(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const options = lang.map((item) => ({\n    label: item?.Native_name.toUpperCase() + ' ' + item.Language_name,\n    value: item.short_code,\n    key: item.Native_name,\n  }));\n\n  return (\n    <Card title={id ? t('edit.language') : t('add.language')}>\n      {!loading ? (\n        <Form\n          form={form}\n          name='form'\n          layout='vertical'\n          initialValues={{\n            ...activeMenu.data,\n            active: false,\n            backward: false,\n            default: false,\n          }}\n          onFinish={onFinish}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name='title'\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('short.code')}\n                name='locale'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  filterOption={(input, option) =>\n                    (option?.label ?? '').includes(input)\n                  }\n                  filterSort={(optionA, optionB) =>\n                    (optionA?.label ?? '')\n                      .toLowerCase()\n                      .localeCompare((optionB?.label ?? '').toLowerCase())\n                  }\n                  showSearch\n                  allowClear\n                  options={options}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image?.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='languages'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item label='RTL' name='backward' valuePropName='checked'>\n                <Switch />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item\n                label={t('default')}\n                name='default'\n                valuePropName='checked'\n              >\n                <Switch disabled={isDemo} />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/subciribed-edit.js",["5918","5919"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, DatePicker, Form, Input, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport TextEditor from './textEditor';\nimport moment from 'moment';\nimport messageSubscriberService from '../../services/messageSubscriber';\nimport Loading from '../../components/loading';\nimport { fetchMessageSubscriber } from '../../redux/slices/messegeSubscriber';\nimport emailService from '../../services/emailSettings';\nimport { DebounceSelect } from '../../components/search';\n\nconst options = [\n  { title: 'order', value: 'order' },\n  { title: 'subscribe', value: 'subscribe' },\n  { title: 'verify', value: 'verify' },\n];\n\nconst MessageSubciribedAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const values = form.getFieldsValue(true);\n      const send_to = JSON.stringify(values.send_to);\n      const data = { ...values, send_to };\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchSubscriber = (id) => {\n    setLoading(true);\n    messageSubscriberService\n      .getById(id)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          send_to: moment(res.data.send_to, 'YYYY-MM-DD HH:mm:ss'),\n          has_date: true,\n          email_setting_id: {\n            label: res.data.email_setting.host,\n            value: res.data.email_setting.id,\n          },\n        };\n        form.setFieldsValue(data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    console.log('data', values);\n    const body = {\n      ...values,\n      send_to: moment(values.send_to).format('YYYY-MM-DD HH:mm:ss'),\n      email_setting_id: values.email_setting_id.value,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'message/subscriber';\n    messageSubscriberService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchMessageSubscriber());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSubscriber(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const getInitialValues = () => {\n    const data = activeMenu.data;\n    if (!data?.send_to) {\n      return data;\n    }\n    const start = data.send_to;\n    return {\n      ...data,\n      send_to: moment(start, 'YYYY-MM-DD'),\n    };\n  };\n\n  const fetchEmailProvider = () => {\n    return emailService.get().then(({ data }) =>\n      data.map((item) => ({\n        label: item.host,\n        value: item.id,\n      }))\n    );\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <Card title={t('edit.subscriber')} className='h-100'>\n          <Form\n            name='subscriber-add'\n            layout='vertical'\n            onFinish={onFinish}\n            form={form}\n            initialValues={{\n              ...activeMenu.data,\n              ...getInitialValues(),\n            }}\n            className='d-flex flex-column h-100'\n          >\n            <Row gutter={12}>\n              <Col span={12}>\n                <Form.Item\n                  label={t('subject')}\n                  name='subject'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('type')}\n                  name='type'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Select disabled options={options} className='w-100' />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('email.setting.id')}\n                  name='email_setting_id'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <DebounceSelect\n                    fetchOptions={fetchEmailProvider}\n                    className='w-100'\n                    placeholder={t('email.setting.id')}\n                  />\n                </Form.Item>\n              </Col>\n\n              <Col span={24}>\n                <TextEditor\n                  languages={languages}\n                  form={form}\n                  lang={defaultLang}\n                />\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('alt.body')}\n                  name='alt_body'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n\n              <Col span={6}>\n                <Form.Item\n                  label={t('send.to')}\n                  name='send_to'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <DatePicker\n                    showTime\n                    className='w-100'\n                    disabledDate={(current) =>\n                      moment().add(-1, 'days') >= current\n                    }\n                  />\n                </Form.Item>\n              </Col>\n            </Row>\n            <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n              <div className='pb-5'>\n                <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                  {t('send')}\n                </Button>\n              </div>\n            </div>\n          </Form>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default MessageSubciribedAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/subciribed-add.js",["5920"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, DatePicker, Form, Input, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport TextEditor from './textEditor';\nimport moment from 'moment';\nimport messageSubscriberService from '../../services/messageSubscriber';\nimport { fetchMessageSubscriber } from '../../redux/slices/messegeSubscriber';\nimport emailService from '../../services/emailSettings';\nimport { DebounceSelect } from '../../components/search';\n\nconst options = [\n  { title: 'order', value: 'order' },\n  { title: 'subscribe', value: 'subscribe' },\n  { title: 'verify', value: 'verify' },\n];\n\nconst MessageSubciribedAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const { subscribers } = useSelector(\n    (state) => state.messageSubscriber,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchEmailProvider = () => {\n    return emailService.get().then(({ data }) =>\n      data.map((item) => ({\n        label: item.host,\n        value: item.id,\n      }))\n    );\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      type: values.type,\n      email_setting_id: values.email_setting_id.value,\n      send_to: moment(values.send_to).format('YYYY-MM-DD HH:mm:ss'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'message/subscriber';\n    messageSubscriberService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchMessageSubscriber());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const getInitialValues = () => {\n    const data = activeMenu.data;\n    if (!data?.send_to) {\n      return data;\n    }\n    const start = data.send_to;\n    return {\n      ...data,\n      send_to: moment(start, 'YYYY-MM-DD'),\n    };\n  };\n\n  return (\n    <Card title={t('add.subscriber')} className='h-100'>\n      <Form\n        name='subscriber-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{\n          ...activeMenu.data,\n          ...getInitialValues(),\n        }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('subject')}\n              name='subject'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('type')}\n              name='type'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select\n                options={options.filter(\n                  (i) => !subscribers.some((e) => e.type === i.value)\n                )}\n                className='w-100'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('email.setting.id')}\n              name='email_setting_id'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchEmailProvider}\n                className='w-100'\n                placeholder={t('email.setting.id')}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <TextEditor languages={languages} form={form} lang={defaultLang} />\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('alt.body')}\n              name='alt_body'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('send.to')}\n              name='send_to'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DatePicker\n                showTime\n                className='w-100'\n                disabledDate={(current) => moment().add(-1, 'days') >= current}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('send')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default MessageSubciribedAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/notification/notification-clone.js",["5921","5922","5923"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space, Spin, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchNotifications } from '../../redux/slices/notification';\nimport blogService from '../../services/blog';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport { useTranslation } from 'react-i18next';\nimport CkeEditorEdit from '../../components/ckeEditorEdit';\n\nexport default function NotificationClone() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { uuid } = useParams();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      type: 'notification',\n      title: getTranslationFields(languages, values),\n      description: getTranslationFields(languages, values, 'description'),\n      short_desc: getTranslationFields(languages, values, 'short_desc'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'notifications';\n    blogService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchNotifications({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`short_desc[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.short_desc,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchNotification = (uuid) => {\n    setLoading(true);\n    blogService\n      .getById(uuid)\n      .then((res) => {\n        let blog = res.data;\n        form.setFieldsValue({\n          ...blog,\n          ...getLanguageFields(blog),\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchNotification(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.notification')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='notification-clone'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{\n            active: true,\n            ...activeMenu.data,\n          }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'short_desc' + item.locale}\n                  label={t('short.description')}\n                  name={`short_desc[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 5) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.5')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <CkeEditorEdit\n                form={form}\n                lang={defaultLang}\n                languages={languages}\n                getLanguageFields={getLanguageFields}\n              />\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/notification/notification-edit.js",["5924","5925","5926"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space, Spin, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchNotifications } from '../../redux/slices/notification';\nimport blogService from '../../services/blog';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport { useTranslation } from 'react-i18next';\nimport CkeEditorEdit from '../../components/ckeEditorEdit';\n\nexport default function NotificationEdit() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { uuid } = useParams();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      type: 'notification',\n      title: getTranslationFields(languages, values),\n      description: getTranslationFields(languages, values, 'description'),\n      short_desc: getTranslationFields(languages, values, 'short_desc'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'notifications';\n    blogService\n      .update(uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchNotifications({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`short_desc[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.short_desc,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchNotification = (uuid) => {\n    setLoading(true);\n    blogService\n      .getById(uuid)\n      .then((res) => {\n        let blog = res.data;\n        form.setFieldsValue({\n          ...blog,\n          ...getLanguageFields(blog),\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchNotification(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.notification')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='notification-edit'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{\n            active: true,\n            ...activeMenu.data,\n          }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'short_desc' + item.locale}\n                  label={t('short.description')}\n                  name={`short_desc[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <CkeEditorEdit\n                form={form}\n                lang={defaultLang}\n                languages={languages}\n                getLanguageFields={getLanguageFields}\n              />\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/notification/notification-add.js",["5927","5928"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { fetchNotifications } from '../../redux/slices/notification';\nimport blogService from '../../services/blog';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport CkeEditor from '../../components/ckeEditor';\n\nexport default function NotificationAdd() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getTranslationFields(values, field = 'title') {\n    const list = languages.map((item) => ({\n      [item.locale]: values[`${field}[${item.locale}]`],\n    }));\n    return Object.assign({}, ...list);\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      type: 'notification',\n      title: getTranslationFields(values),\n      description: getTranslationFields(values, 'description'),\n      short_desc: getTranslationFields(values, 'short_desc'),\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'notifications';\n    blogService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchNotifications({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.notification')} extra={<LanguageList />}>\n      <Form\n        name='notification-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{\n          active: true,\n          ...activeMenu.data,\n        }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input maxLength={50} />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={24}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'short_desc' + item.locale}\n                label={t('short.description')}\n                name={`short_desc[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 5) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.5')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input maxLength={50} />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={24}>\n            <CkeEditor form={form} languages={languages} lang={defaultLang} />\n          </Col>\n        </Row>\n        <Space>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Space>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-value.js",["5929"],[],"import React, { useState, useEffect, useContext } from 'react';\nimport { Button, Space, Table, Image, Card } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchExtraValues } from 'redux/slices/extraValue';\nimport extraService from 'services/extra';\nimport ExtraValueModal from './extra-value-modal';\nimport DeleteButton from 'components/delete-button';\nimport { IMG_URL } from 'configs/app-global';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport FilterColumns from 'components/filter-column';\nimport formatSortType from 'helpers/formatSortType';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\n\nexport default function ExtraValue() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { extraValues, loading, meta } = useSelector(\n    (state) => state.extraValue,\n    shallowEqual,\n  );\n  const { setIsModalVisible } = useContext(Context);\n  const paramsData = {\n    perPage: activeMenu?.data?.perPage || 10,\n    page: activeMenu?.data?.page || 1,\n    group_id: activeMenu?.data?.group_id || null,\n  };\n\n  const [id, setId] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'extra_group_id',\n      key: 'extra_group_id',\n      is_show: true,\n      render: (_, row) => row?.group?.translation?.title,\n    },\n    {\n      title: t('value'),\n      dataIndex: 'value',\n      key: 'value',\n      is_show: true,\n      render: (value, row) => (\n        <Space className='extras'>\n          {row?.group?.type === 'color' ? (\n            <div\n              className='extra-color-wrapper-contain'\n              style={{ backgroundColor: row?.value }}\n            />\n          ) : null}\n          {row?.group?.type === 'image' ? (\n            <Image\n              width={100}\n              src={IMG_URL + row?.value}\n              className='borderRadius'\n            />\n          ) : null}\n          {row?.group?.type === 'image' ? null : <span>{row?.value}</span>}\n        </Space>\n      ),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setId([record.id]);\n              setIsModalVisible(true);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => setModal(null);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const deleteExtra = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    extraService\n      .deleteValue(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchExtraValues(paramsData));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setId(null);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchExtraValues(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchExtraValues(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  async function fetchExtraGroups({ search, page }) {\n    const params = {\n      search: search?.length === 0 ? undefined : search,\n      page: page,\n    };\n    return extraService.getAllGroups(params).then((res) => {\n      return res.data.map((item) => ({\n        label: item?.translation?.title,\n        value: item.id,\n        key: item.id,\n      }));\n    });\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('extra.value')}\n      extra={\n        <Space wrap>\n          <InfiniteSelect\n            placeholder={t('select.group')}\n            fetchOptions={fetchExtraGroups}\n            loading={loading}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ group_id: e?.value })}\n            value={activeMenu.data?.group_id}\n          />\n          <DeleteButton icon={<DeleteOutlined />} onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.extra')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        rowSelection={rowSelection}\n        dataSource={extraValues}\n        rowKey={(record) => record.id}\n        pagination={{\n          pageSize: 10,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        onChange={onChangePagination}\n      />\n      {modal && (\n        <ExtraValueModal\n          isVisible={modal}\n          modal={modal}\n          handleCancel={handleCancel}\n          paramsData={paramsData}\n        />\n      )}\n      <CustomModal\n        click={deleteExtra}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-group.js",["5930"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport extraService from '../../../services/extra';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchExtraGroups } from '../../../redux/slices/extraGroup';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport ExtraGroupModal from './extra-group-modal';\nimport DeleteButton from '../../../components/delete-button';\nimport ExtraGroupShowModal from './extra-group-show-modal';\nimport FilterColumns from '../../../components/filter-column';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport SearchInput from '../../../components/search-input';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\n\nexport default function ExtraGroup() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { extraGroups, meta, loading } = useSelector(\n    (state) => state.extraGroup,\n    shallowEqual\n  );\n\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    column: data?.column,\n    perPage: data?.perPage,\n    sort: data?.sort,\n    page: data?.page,\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EyeOutlined />}\n            onClick={() => setShow(record.id)}\n          />\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([record.id]);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => {\n    setShow(null);\n    setModal(null);\n  };\n\n  const onDeleteExtra = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    extraService\n      .deleteGroup(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchExtraGroups());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchExtraGroups(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchExtraGroups(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      })\n    );\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column } = sorter;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column },\n      })\n    );\n  }\n\n  return (\n    <Card\n      title={t('extra.group')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.extra')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          handleChange={(search) => handleFilter(search, 'search')}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n          className={'w-25'}\n        />\n      </div>\n\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={extraGroups}\n        rowKey={(record) => record.id}\n        pagination={{\n          pageSize: paramsData.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        onChange={onChangePagination}\n      />\n      {modal && <ExtraGroupModal modal={modal} handleCancel={handleCancel} />}\n      <CustomModal\n        click={onDeleteExtra}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n      {show && <ExtraGroupShowModal open={show} handleClose={handleCancel} />}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/replace-product.js",["5931","5932","5933"],[],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, Space, Row, Col, Image, Tag, Divider, Button } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport orderService from 'services/order';\nimport { disableRefetch, removeFromMenu, setRefetch } from 'redux/slices/menu';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Loading from 'components/loading';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport numberToPrice from 'helpers/numberToPrice';\nimport ProductCards from './product-cards';\nimport NewProduct from './new-product';\nimport NoteModal from './note-modal';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function ReplaceProduct() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { order_id, stock_id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const [noteModal, setNoteModal] = useState(false);\n\n  const fetchOrder = () => {\n    setLoading(true);\n    orderService\n      .getById(order_id)\n      .then(({ data }) => {\n        const products = data?.details?.filter(\n          (product) => product?.stock_id === Number(stock_id)\n        );\n        setData({\n          ...products[0],\n          delivery_type: data?.delivery_type,\n          user: data?.user,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    fetchOrder();\n  }, [order_id]);\n\n  useDidUpdate(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  const handleSubmit = (values) => {\n    const nextUrl = `order/details/${order_id}`;\n\n    const body = {\n      products: [\n        {\n          //old product\n          replace_note: values?.note,\n          replace_stock_id: data?.stock?.id,\n          replace_quantity: data?.quantity,\n          //new product\n          stock_id: activeMenu.data?.newProduct?.stock?.id,\n          quantity: activeMenu.data?.newProduct?.quantity,\n        },\n      ],\n\n      currency_id: defaultCurrency?.id,\n      phone: `${values?.phone}`,\n    };\n\n    if (!values?.phone) {\n      delete body.phone;\n    }\n\n    return orderService.replaceProduct(order_id, body).then(() => {\n      setNoteModal(false);\n      toast.success(t('successfully.replaced'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(setRefetch(activeMenu));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <Card key={`${order_id} ${stock_id}`}>\n          <ProductCards />\n          <Divider />\n          <Card title={t('old.product')} bordered>\n            <Row gutter={12}>\n              <Col span={4} style={{ width: '100px', height: '250px' }}>\n                <div\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'contain',\n                    overflow: 'hidden',\n                    borderRadius: '15px',\n                  }}\n                >\n                  <img\n                    src={data?.stock?.product?.img}\n                    placeholder\n                    style={{ width: '100%', height: '100%', objectFit: 'contain' }}\n                  />\n                </div>\n              </Col>\n              <Col span={20}>\n                <h4>{data?.stock?.product?.translation?.title}</h4>\n                <Space>\n                  <p>{t('quantity')}: </p>\n                  <p>{data?.quantity}</p>\n                </Space>\n                <br />\n                <Space>\n                  <p>{t('price')}: </p>\n                  <p>\n                    {numberToPrice(data?.stock?.price, defaultCurrency?.symbol)}\n                  </p>\n                </Space>\n                <br />\n                <Space wrap>\n                  {data?.stock?.extras?.map((extra) => {\n                    if (extra?.group?.type === 'color') {\n                      return (\n                        <span\n                          key={extra?.id}\n                          style={{\n                            display: 'block',\n                            width: '30px',\n                            height: '30px',\n                            backgroundColor: extra?.value?.value,\n                            border: '2px solid #909091',\n                            borderRadius: '50%',\n                          }}\n                        />\n                      );\n                    } else {\n                      return <Tag key={extra?.id}>{extra?.value?.value}</Tag>;\n                    }\n                  })}\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n          <Divider />\n          {activeMenu.data?.newProduct && <NewProduct />}\n          <Space wrap>\n            <Button\n              type={'primary'}\n              disabled={!activeMenu.data?.newProduct}\n              onClick={() => setNoteModal(true)}\n            >\n              {t('next')}\n            </Button>\n          </Space>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n      {noteModal && (\n        <NoteModal\n          showModal={noteModal}\n          setShowModal={setNoteModal}\n          handleSubmit={handleSubmit}\n          userData={data?.user}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-edit.js",["5934"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, PageHeader, Row, Spin } from 'antd';\n\nimport UserInfo from './user-info';\nimport DeliveryInfo from './delivery-info';\nimport ProductInfo from './product-info';\nimport PreviewInfo from './preview-info';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport orderService from 'services/order';\nimport moment from 'moment';\nimport {\n  clearOrder,\n  setOrderCurrency,\n  setOrderData,\n  setOrderItems,\n  setOrderProducts,\n  setOrderTotal,\n} from 'redux/slices/order';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { fetchOrders } from 'redux/slices/orders';\nimport { useTranslation } from 'react-i18next';\nimport transactionService from 'services/transaction';\nimport TransactionDetails from './transaction-details';\n\nexport default function OrderEdit() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { data, total, coupon, orderProducts, orderItems } = useSelector(\n    (state) => state.order,\n    shallowEqual,\n  );\n  const { currencies } = useSelector((state) => state.currency, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n\n  function formatUser(user) {\n    return {\n      label: user.firstname + ' ' + (user.lastname || ''),\n      value: user.id,\n      uuid: user.uuid,\n      key: user.id,\n    };\n  }\n\n  function formatAddress(order) {\n    return order?.address\n      ? {\n          address: order?.address?.address,\n          lat: order?.location?.latitude || order?.address?.location?.latitude,\n          lng:\n            order?.location?.longitude || order?.address?.location?.longitude,\n        }\n      : order?.delivery_point\n        ? {\n            address: order?.delivery_point?.address?.[defaultLang],\n            lat: order?.delivery_point?.location?.latitude,\n            lng: order?.delivery_point?.location?.longitude,\n          }\n        : order?.my_address?.location\n          ? {\n              address: order?.my_address?.location?.address,\n              lat: order?.my_address?.location?.latitude,\n              lng: order?.my_address?.location?.longitude,\n            }\n          : null;\n  }\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then((res) => {\n        const order = res.data;\n\n        const calculate = true;\n        dispatch(setOrderData({ calculate }));\n        const items = order.details.map((item) => ({\n          ...item?.stock?.product,\n          stocks: item?.stock?.extras,\n          stock: item?.stock,\n          stockID: item?.stock,\n          quantity: item?.quantity,\n          img: item?.stock?.product?.img,\n          price: item?.stock?.price,\n          bonus: item?.bonus,\n          addons: item?.addons,\n        }));\n        const orderData = {\n          product_tax: order?.details\n            ?.flatMap((e) => e?.total_price)\n            ?.reduce((sum, e) => sum + e, 0),\n          shop_tax: order?.tax,\n          order_total: order?.total_price,\n        };\n        batch(() => {\n          dispatch(setOrderProducts(items));\n          dispatch(setOrderItems(items));\n          dispatch(setOrderTotal(orderData));\n          dispatch(setOrderCurrency(order?.currency));\n          dispatch(\n            setMenuData({\n              activeMenu,\n              data: {\n                ...activeMenu.data,\n                addressData: formatAddress(order),\n              },\n            }),\n          );\n          dispatch(\n            setOrderData({\n              userUuid: order?.user?.uuid,\n              shop: getFirstShopFromList(order?.shop),\n              delivery_type: order?.delivery_type,\n              delivery_fee: order?.delivery_fee,\n              delivery_date: JSON.stringify(order?.delivery_date),\n              delivery_time: order?.delivery_time,\n              address: formatAddress(order),\n              currency: { id: order?.currency.payment_system },\n              payment_type: order?.transaction,\n              deliveries: { label: order?.delivery_type },\n              status: order?.status,\n            }),\n          );\n        });\n        form.setFieldsValue({\n          delivery_time: moment(order?.delivery_date, 'HH:mm'),\n          delivery_date: moment(order?.delivery_date, 'YYYY-MM-DD'),\n          user: formatUser(order?.user),\n          currency_id: order?.currency?.id,\n          payment_type: {\n            label: order?.transaction?.payment_system?.tag || 'cash',\n            value: order?.transaction?.payment_system?.id || 1,\n          },\n          note: order?.note,\n          delivery: {\n            label: order?.delivery_type,\n            value: order?.shop?.price,\n          },\n          transactionStatus: order.transaction.status,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getFirstShopFromList(shops) {\n    if (!shops) {\n      return null;\n    }\n    return {\n      label: shops.translation?.title,\n      value: shops.id,\n      key: shops.id,\n      open_time: shops.open_time,\n      close_time: shops.close_time,\n    };\n  }\n\n  function createTransaction(id, data) {\n    transactionService\n      .create(id, data)\n      .then((res) => {\n        setOrderId(res.data.id);\n        dispatch(clearOrder());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const orderUpdate = (body, paymentData) => {\n    const payment = {\n      payment_sys_id: paymentData.value,\n    };\n    setLoadingBtn(true);\n    orderService\n      .update(id, body)\n      .then((response) => {\n        createTransaction(response.data.id, payment);\n      })\n      .catch(() => setLoadingBtn(false));\n  };\n\n  function formatProducts(list) {\n    const addons = list?.map((item) => ({\n      quantity: item.quantity,\n      stock_id: item.stockID ? item.stockID?.id : item.stock?.id,\n    }));\n\n    const products = list?.flatMap((item) =>\n      item.addons?.map((addon) => ({\n        quantity: addon.quantity,\n        stock_id: addon.stock_id,\n        parent_id: item.stockID ? item.stockID?.id : item.stock?.id,\n      })),\n    );\n\n    return addons.concat(products);\n  }\n\n  const onFinish = (values) => {\n    const products = formatProducts(orderItems);\n    const body = {\n      currency_id: values.currency_id,\n      rate: currencies.find((item) => item.id === values.currency_id)?.rate,\n      // shop_id: data.shop.value,\n      delivery_fee: data.delivery_fee,\n      coupon: coupon.coupon,\n      tax: total.order_tax,\n      payment_type: values.payment_type?.label,\n      note: values.note,\n      address: {\n        address: activeMenu.data.addressData?.address,\n        office: null,\n        house: null,\n        floor: null,\n      },\n      location: {\n        latitude: activeMenu.data.addressData?.lat,\n        longitude: activeMenu.data.addressData?.lng,\n      },\n      delivery_date:\n        moment(values.delivery_date).format('YYYY-MM-DD') +\n        ' ' +\n        moment(values.delivery_time).format('HH:mm'),\n      user_id: values.user.value,\n      products: products?.filter((item) => !!item),\n      status: data?.status,\n    };\n\n    orderUpdate(body, values.payment_type);\n  };\n\n  const handleCloseInvoice = () => {\n    setOrderId(null);\n    const nextUrl = 'orders-board';\n    batch(() => {\n      dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      dispatch(fetchOrders({}));\n    });\n    navigate(`/${nextUrl}`);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <>\n      <PageHeader\n        title={t('edit.order')}\n        extra={\n          <Button\n            type='primary'\n            loading={loadingBtn}\n            onClick={() => form.submit()}\n            disabled={!orderProducts?.length}\n          >\n            {t('save')}\n          </Button>\n        }\n      />\n      <Form\n        name='order-form'\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        className='order-add'\n        initialValues={{\n          user: data.user || undefined,\n          address: data.address || null,\n          currency_id: data?.currency?.id,\n          payment_type: data.payment_type || null,\n        }}\n      >\n        <Row gutter={24} hidden={loading}>\n          <Col span={16}>\n            <ProductInfo form={form} />\n          </Col>\n          <Col span={8}>\n            <UserInfo form={form} />\n            <DeliveryInfo form={form} />\n            <TransactionDetails form={form} />\n          </Col>\n        </Row>\n        {loading && (\n          <div className='loader'>\n            <Spin />\n          </div>\n        )}\n      </Form>\n      {orderId ? (\n        <PreviewInfo orderId={orderId} handleClose={handleCloseInvoice} />\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/seller-order-details.js",["5935","5936","5937"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Card,\n  Table,\n  Image,\n  Tag,\n  Button,\n  Space,\n  Row,\n  Col,\n  Avatar,\n  Typography,\n  Skeleton,\n  Spin,\n  Badge,\n  Steps,\n  Divider,\n} from 'antd';\nimport {\n  CalendarOutlined,\n  EditOutlined,\n  SwapOutlined,\n} from '@ant-design/icons';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport orderService from 'services/order';\nimport getImage from 'helpers/getImage';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { MdEmail, MdLocationOn } from 'react-icons/md';\nimport ShowLocationsMap from './show-locations.map';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport {\n  BsCalendarDay,\n  BsFillTelephoneFill,\n  BsFillPersonFill,\n} from 'react-icons/bs';\nimport { BiMessageDots, BiMoney } from 'react-icons/bi';\nimport moment from 'moment';\nimport { useRef } from 'react';\nimport { fetchOrderStatus } from 'redux/slices/orderStatus';\nimport useDemo from 'helpers/useDemo';\nimport hideEmail from 'components/hideEmail';\nimport QrCode from 'components/qr-code';\nimport { toast } from 'react-toastify';\nimport { TrackingInfo } from 'components/tracking-info';\nimport hideNumber from 'components/hideNumber';\nimport TransactionStatusModal from './transaction-status-modal';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nexport default function OrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const data = activeMenu.data;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const productListRef = useRef();\n  const totalPriceRef = useRef();\n  const { isDemo } = useDemo();\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [transactionStatusModal, setTransactionStatusModal] = useState(false);\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const expandedRowRender = (record) => {\n    if (!record?.replace_stock) return;\n    const columns = [\n      {\n        title: t('id'),\n        dataIndex: 'id',\n        key: 'id',\n        render: (_, row) => row?.replace_stock?.id,\n      },\n      {\n        title: t('product.name'),\n        dataIndex: 'product',\n        key: 'product',\n        render: (_, row) => (\n          <Space direction='vertical' className='relative'>\n            {row?.replace_stock?.product?.translation?.title}\n            {row?.replace_stock?.extras?.map((extra) => (\n              <Tag key={extra?.id}>\n                {extra.group?.translation?.title}: {extra.value?.value}\n              </Tag>\n            ))}\n          </Space>\n        ),\n      },\n      {\n        title: t('image'),\n        dataIndex: 'img',\n        key: 'img',\n        render: (_, row) => (\n          <Image\n            src={getImage(row?.replace_stock?.product?.img)}\n            alt='product'\n            width={100}\n            height='auto'\n            className='rounded'\n            preview\n            placeholder\n          />\n        ),\n      },\n      {\n        title: t('price'),\n        dataIndex: 'price',\n        key: 'price',\n        render: (_, row) =>\n          numberToPrice(row?.replace_stock?.price, defaultCurrency?.symbol),\n      },\n      {\n        title: t('quantity'),\n        dataIndex: 'replace_quantity',\n        key: 'replace_quantity',\n        render: (_, row) => <span>{row?.replace_quantity}</span>,\n      },\n      {\n        title: t('discount'),\n        dataIndex: 'discount',\n        key: 'discount',\n        render: (_, row) =>\n          numberToPrice(\n            row?.replace_stock?.discount ?? 0,\n            defaultCurrency?.symbol,\n          ),\n      },\n      {\n        title: t('tax'),\n        dataIndex: 'tax',\n        key: 'tax',\n        render: (_, row) =>\n          numberToPrice(row?.replace_stock?.tax, defaultCurrency?.symbol),\n      },\n      {\n        title: t('total.price'),\n        dataIndex: 'total_price',\n        key: 'total_price',\n        render: (_, row) => {\n          return numberToPrice(\n            row?.replace_stock?.total_price,\n            defaultCurrency?.symbol,\n          );\n        },\n      },\n    ];\n\n    return (\n      <>\n        <span\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <SwapOutlined\n            style={{\n              padding: '10px',\n              margin: '10px 0 50px 0',\n              border: '2px solid #cad2de',\n              borderRadius: '30%',\n            }}\n            rotate={90}\n          />\n        </span>\n        <Table columns={columns} dataSource={[record]} pagination={false} />\n      </>\n    );\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => {\n        return row.stock?.id;\n      },\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => (\n        <Space direction='vertical' className='relative'>\n          {row.stock?.product?.translation?.title}\n          {row.stock?.extras?.map((extra) => (\n            <Tag key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row.stock?.product?.img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'origin_price',\n      key: 'origin_price',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (text) => <span>{text}</span>,\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'rate_discount',\n      key: 'rate_discount',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (_, row) => numberToPrice(row?.tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (_, row) => {\n        return numberToPrice(row?.total_price, defaultCurrency?.symbol);\n      },\n    },\n  ];\n\n  const documentColumns = [\n    {\n      title: t('date'),\n      dataIndex: 'date',\n      key: 'date',\n      render: (date) => moment(date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('document'),\n      dataIndex: 'document',\n      key: 'document',\n    },\n    {\n      title: t('number'),\n      dataIndex: 'number',\n      key: 'number',\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'price',\n      key: 'price',\n    },\n  ];\n\n  const documents = [\n    {\n      price: numberToPrice(data?.total_price, defaultCurrency.symbol),\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('invoice'),\n      date: moment(data?.created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      price: '-',\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('delivery.receipt'),\n      date: moment(data?.created_at).format('YYYY-MM-DD HH:mm'),\n    },\n  ];\n\n  const handleCloseModal = () => {\n    setLocationsMap(null);\n  };\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  const goToUser = () => {\n    dispatch(\n      addMenu({\n        url: `users/user/${data?.user.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${data?.user.uuid}`, {\n      state: { user_id: data?.user.id },\n    });\n  };\n\n  const handleUpdateTracking = useCallback(\n    (body) => {\n      setIsUpdating(true);\n      orderService\n        .updateTracking(data?.id, body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          fetchOrder();\n        })\n        .finally(() => {\n          setIsUpdating(false);\n        });\n    },\n    [data?.id],\n  );\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n      if (statusList.length === 0) {\n        dispatch(fetchOrderStatus({}));\n      }\n    }\n  }, [activeMenu.refetch]);\n\n  const handleShowModal = () => setLocationsMap(id);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.user?.firstname}{' '}\n            {data?.user?.lastname || ''}\n          </>\n        }\n      />\n\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='justify-content-between w-100'>\n              <Space className='align-items-start'>\n                <CalendarOutlined className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('delivery.date')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.delivery_date} {data?.delivery_time}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  totalPriceRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <BiMoney className='order-card-icon' />\n\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('total.price')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} loading={loading} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {numberToPrice(\n                        data?.total_price,\n                        defaultCurrency?.symbol,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMessageDots className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('messages')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.review ? 1 : 0}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  productListRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <FiShoppingCart className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('products')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.details?.reduce(\n                        (total, item) => (total += item.quantity),\n                        0,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n            </Space>\n          </Card>\n        </Col>\n        {data?.status !== 'canceled' && (\n          <Col span={24}>\n            <Card>\n              <Steps\n                current={statusList?.findIndex(\n                  (item) => item.name === data?.status,\n                )}\n              >\n                {statusList?.slice(0, -1).map((item) => (\n                  <Steps.Step key={item.id} title={t(item.name)} />\n                ))}\n              </Steps>\n            </Card>\n          </Col>\n        )}\n        <Col span={16}>\n          <Spin spinning={loading}>\n            <Card style={{ minHeight: '200px' }}>\n              <h3>{t('details')}:</h3>\n              <Row hidden={loading} className='mb-3 order_detail' gutter={10}>\n                <Col span={12}>\n                  <div>\n                    {t('created.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' />{' '}\n                      {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}{' '}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' /> {data?.delivery_date}{' '}\n                      {data?.delivery_time}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.status')}:\n                    <span\n                      style={{ cursor: 'pointer' }}\n                      className='ml-2'\n                      onClick={() => setTransactionStatusModal(true)}\n                    >\n                      {t(data?.transaction?.status)} <EditOutlined />\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('note')}:\n                    <span className='ml-2'>\n                      {t(!!data?.note ? data?.note : '')}\n                    </span>\n                  </div>\n                </Col>\n                <Col span={12}>\n                  <div>\n                    {t('status')}:\n                    <span className='ml-2'>\n                      {data?.status === 'new' ? (\n                        <Tag color='blue'>{t(data?.status)}</Tag>\n                      ) : data?.status === 'canceled' ? (\n                        <Tag color='error'>{t(data?.status)}</Tag>\n                      ) : (\n                        <Tag color='cyan'>{t(data?.status)}</Tag>\n                      )}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.type')}:\n                    <span className='ml-2'>{data?.delivery_type}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.type')}:\n                    <span className='ml-2'>\n                      {t(data?.transaction?.payment_system?.tag)}\n                    </span>\n                  </div>\n                  <br />\n                </Col>\n              </Row>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <h3>{t('delivery.address')}:</h3>\n                  <div>\n                    {!!data?.address ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.address?.street_house_number ?? t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.address?.zipcode ??\n                            data?.address?.zip_code ??\n                            t('not.given')}\n                        </div>\n                      </>\n                    ) : !!data?.my_address ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.my_address?.street_house_number ??\n                            t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.my_address?.zipcode ?? t('not.given')}\n                        </div>\n                      </>\n                    ) : data?.delivery_point ? (\n                      <>\n                        <div>\n                          {t('address')}:{' '}\n                          {data?.delivery_point?.address?.[defaultLang] ??\n                            t('no.address')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'digital' ? (\n                      <div>{t('digital.delivery')}</div>\n                    ) : (\n                      <div>{t('no.address')}</div>\n                    )}\n                  </div>\n                  <Button className='map_show mt-3' onClick={handleShowModal}>\n                    <MdLocationOn style={{ marginRight: '8px' }} />{' '}\n                    {t('show.locations')}\n                  </Button>\n                </Col>\n                <Col span={12}>\n                  <QrCode orderId={id} />\n                </Col>\n              </Row>\n            </Card>\n          </Spin>\n          <Card title={t('documents')}>\n            <Table\n              columns={documentColumns}\n              dataSource={documents}\n              pagination={false}\n              loading={loading}\n            />\n          </Card>\n        </Col>\n        <Col span={8} className='order_info'>\n          {!!data?.username && (\n            <Card title={t('order.receiver')}>\n              <div className='customer-info'>\n                <span className='title'>{t('name')}</span>\n                <span className='description'>\n                  <BsFillPersonFill />\n                  {data?.username}\n                </span>\n              </div>\n              <div className='customer-info'>\n                <span className='title'>{t('phone')}</span>\n                <span className='description'>\n                  <BsFillTelephoneFill />\n                  {data?.phone}\n                </span>\n              </div>\n            </Card>\n          )}\n\n          {data?.type === 2 && data?.delivery_type === 'delivery' && (\n            <Card title={t('tracking.info')}>\n              <TrackingInfo\n                onSubmit={handleUpdateTracking}\n                isSubmitting={isUpdating}\n                initialData={{\n                  track_name: data?.track_name,\n                  track_id: data?.track_id,\n                  track_url: data?.track_url,\n                }}\n              />\n            </Card>\n          )}\n\n          <Card\n            title={\n              <Space>\n                {t('customer.info')}\n                <EditOutlined onClick={() => goToUser()} />\n              </Space>\n            }\n          >\n            <div className='d-flex w-100 customer-info-container'>\n              {loading ? (\n                <Skeleton.Avatar size={64} shape='square' />\n              ) : (\n                <Avatar shape='square' size={64} src={data?.user?.img} />\n              )}\n\n              <h5 className='customer-name'>\n                {loading ? (\n                  <Skeleton.Button size={20} style={{ width: 70 }} />\n                ) : (\n                  data?.user?.firstname + ' ' + (data?.user?.lastname || '')\n                )}\n              </h5>\n\n              <div className='customer-info-detail'>\n                <div className='customer-info'>\n                  <span className='title'>{t('phone')}</span>\n                  <span className='description'>\n                    <BsFillTelephoneFill />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : data?.user?.phone ? (\n                      ReactAppIsDemo ? (\n                        hideNumber(data?.user?.phone)\n                      ) : (\n                        data?.user?.phone\n                      )\n                    ) : (\n                      t('no.phone')\n                    )}\n                  </span>\n                </div>\n\n                <div className='customer-info'>\n                  <span className='title'>{t('email')}</span>\n                  <span className='description'>\n                    <MdEmail />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : ReactAppIsDemo ? (\n                      hideEmail(data?.user?.email)\n                    ) : (\n                      data?.user?.email\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('registration.date')}</span>\n                  <span className='description'>\n                    <BsCalendarDay />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      moment(data?.user?.created_at).format('DD-MM-YYYY, HH:mm')\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('orders.count')}</span>\n                  <span className='description'>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#3d7de3' }}\n                        count={data?.user?.orders_count || 0}\n                      />\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('spent.since.registration')}</span>\n                  <span className='description'>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#48e33d' }}\n                        count={numberToPrice(\n                          data?.user?.orders_sum_price,\n                          defaultCurrency?.symbol,\n                        )}\n                      />\n                    )}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </Card>\n          {data?.review && !loading && (\n            <Card title={t('messages')}>\n              <div className='order-message'>\n                <span className='message'>{data?.review?.comment}</span>\n                <Space className='w-100 justify-content-end'>\n                  <span className='date'>\n                    {moment(data?.review?.created_at).format(\n                      'YYYY-MM-DD HH:mm',\n                    )}\n                  </span>\n                </Space>\n              </div>\n            </Card>\n          )}\n          {data?.shop && (\n            <Card\n              title={`${t('shop.details')}: #${data?.shop?.id}`}\n              loading={loading}\n            >\n              <Row gutter={12}>\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    columnGap: '20px',\n                    marginBottom: '20px',\n                  }}\n                >\n                  <div\n                    style={{\n                      width: '100px',\n                      height: '100px',\n                      backgroundColor: '#f5f5f5',\n                      overflow: 'hidden',\n                      borderRadius: '10px',\n                      position: 'relative',\n                    }}\n                  >\n                    <Image\n                      alt={t('shop.logo')}\n                      style={{ objectFit: 'contain' }}\n                      src={\n                        data?.shop?.logo_img ||\n                        'https://via.placeholder.com/150'\n                      }\n                      width={100}\n                      height={100}\n                      preview={false}\n                    />\n                  </div>\n                  <div\n                    style={{\n                      width: `calc(100% - 100px - 20px)`,\n                    }}\n                  >\n                    <h5\n                      style={{\n                        maxWidth: '100%',\n                        whiteSpace: 'nowrap',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                      }}\n                    >\n                      {data?.shop?.translation?.title || '--'}\n                    </h5>\n                    <p>\n                      {data?.shop?.open ? (\n                        <Tag color='green'>{t('open')}</Tag>\n                      ) : (\n                        <Tag color='red'>{t('closed')}</Tag>\n                      )}\n                    </p>\n                  </div>\n                </Col>\n                <Col span={24}>\n                  {data?.shop?.phone && (\n                    <p>\n                      <strong>{t('phone')}:</strong> {data?.shop?.phone}\n                    </p>\n                  )}\n                  {data?.shop?.translation?.address && (\n                    <p>\n                      <strong>{t('address')}:</strong>{' '}\n                      {data?.shop?.translation?.address}\n                    </p>\n                  )}\n                </Col>\n              </Row>\n            </Card>\n          )}\n        </Col>\n        <Col span={24}>\n          <Card className='w-100 order-table' title={t('order.products')}>\n            <Divider />\n            <Table\n              ref={productListRef}\n              scroll={{ x: true }}\n              columns={columns}\n              dataSource={activeMenu.data?.details || []}\n              loading={loading}\n              rowKey={(record) => record.id}\n              pagination={false}\n              expandable={{\n                expandedRowRender,\n                expandIcon: ({ expanded, onExpand, record }) =>\n                  expanded ? (\n                    <SwapOutlined\n                      onClick={(e) => onExpand(record, e)}\n                      rotate={90}\n                    />\n                  ) : (\n                    <SwapOutlined\n                      onClick={(e) => onExpand(record, e)}\n                      rotate={90}\n                    />\n                  ),\n                defaultExpandedRowKeys: ['0'],\n              }}\n            />\n            <Space\n              size={100}\n              className='d-flex justify-content-end w-100 order-table__summary'\n            >\n              <div>\n                <span>{t('delivery.fee')}:</span>\n                <br />\n                <span>{t('order.tax')}:</span>\n                <br />\n                <span>{t('product')}:</span>\n                <br />\n                <span>{t('discount')}:</span>\n                <br />\n                <span>{t('service.fee')}:</span>\n                <br />\n                <span>{t('coupon.price')}:</span>\n                <br />\n                <h3>{t('total.price')}:</h3>\n              </div>\n              <div>\n                <span>\n                  {numberToPrice(\n                    data?.delivery_fee ?? 0,\n                    defaultCurrency?.symbol,\n                  )}\n                </span>\n                <br />\n                <span>{numberToPrice(data?.tax, defaultCurrency?.symbol)}</span>\n                <br />\n                <span>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.total_discount, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.service_fee, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.coupon_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <h3 ref={totalPriceRef}>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </div>\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {transactionStatusModal && (\n        <TransactionStatusModal\n          orderId={id}\n          handleCancel={() => setTransactionStatusModal(false)}\n          transactionDetails={data?.transaction}\n          fetchOrder={fetchOrder}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-details.js",["5938","5939"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Card,\n  Table,\n  Image,\n  Tag,\n  Button,\n  Space,\n  Row,\n  Col,\n  Avatar,\n  Typography,\n  Skeleton,\n  Spin,\n  Badge,\n  Steps,\n  Divider,\n} from 'antd';\nimport {\n  CalendarOutlined,\n  EditOutlined,\n  SwapOutlined,\n} from '@ant-design/icons';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport orderService from 'services/order';\nimport getImage from 'helpers/getImage';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport OrderStatusModal from './orderStatusModal';\nimport OrderDeliveryman from './orderDeliveryman';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { clearOrder } from 'redux/slices/order';\nimport { MdEmail, MdLocationOn } from 'react-icons/md';\nimport ShowLocationsMap from './show-locations.map';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport { IMG_URL } from 'configs/app-global';\nimport {\n  BsCalendarDay,\n  BsFillTelephoneFill,\n  BsFillPersonFill,\n} from 'react-icons/bs';\nimport { BiMessageDots, BiMoney } from 'react-icons/bi';\nimport moment from 'moment';\nimport { useRef } from 'react';\nimport { fetchOrderStatus } from 'redux/slices/orderStatus';\nimport useDemo from 'helpers/useDemo';\nimport hideEmail from 'components/hideEmail';\nimport QrCode from 'components/qr-code';\nimport hideNumber from 'components/hideNumber';\nimport TransactionStatusModal from './transaction-status-modal';\nimport { TrackingInfo } from 'components/tracking-info';\nimport { toast } from 'react-toastify';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nexport default function OrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const data = activeMenu.data;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const productListRef = useRef();\n  const totalPriceRef = useRef();\n  const { isDemo } = useDemo();\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [transactionStatusModal, setTransactionStatusModal] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n\n  const expandedRowRender = (record) => {\n    if (!record?.replace_stock) return;\n    const columns = [\n      {\n        title: t('id'),\n        dataIndex: 'id',\n        key: 'id',\n        render: (_, row) => row?.replace_stock?.id,\n      },\n      {\n        title: t('product.name'),\n        dataIndex: 'product',\n        key: 'product',\n        render: (_, row) => (\n          <Space direction='vertical' className='relative'>\n            {row?.replace_stock?.product?.translation?.title}\n            {row?.replace_stock?.extras?.map((extra) => (\n              <Tag key={extra?.id}>\n                {extra?.group?.translation?.title}: {extra?.value?.value}\n              </Tag>\n            ))}\n          </Space>\n        ),\n      },\n      {\n        title: t('image'),\n        dataIndex: 'img',\n        key: 'img',\n        render: (_, row) => (\n          <Image\n            src={getImage(row?.replace_stock?.product?.img)}\n            alt='product'\n            width={100}\n            height='auto'\n            className='rounded'\n            preview\n            placeholder\n          />\n        ),\n      },\n      {\n        title: t('price'),\n        dataIndex: 'price',\n        key: 'price',\n        render: (_, row) =>\n          numberToPrice(row?.replace_stock?.price, defaultCurrency?.symbol),\n      },\n      {\n        title: t('quantity'),\n        dataIndex: 'replace_quantity',\n        key: 'replace_quantity',\n        render: (quantity, row) => {\n          return (\n            <span>\n              {quantity * (row?.replace_stock?.product?.interval || 1)}\n            </span>\n          );\n        },\n      },\n      {\n        title: t('discount'),\n        dataIndex: 'discount',\n        key: 'discount',\n        render: (_, row) =>\n          numberToPrice(\n            row?.replace_stock?.discount ?? 0,\n            defaultCurrency?.symbol,\n          ),\n      },\n      {\n        title: t('tax'),\n        dataIndex: 'tax',\n        key: 'tax',\n        render: (_, row) =>\n          numberToPrice(row?.replace_stock?.tax, defaultCurrency?.symbol),\n      },\n      {\n        title: t('total.price'),\n        dataIndex: 'total_price',\n        key: 'total_price',\n        render: (_, row) => {\n          return numberToPrice(\n            row?.replace_stock?.total_price,\n            defaultCurrency?.symbol,\n          );\n        },\n      },\n    ];\n\n    return (\n      <>\n        <span\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <SwapOutlined\n            style={{\n              padding: '10px',\n              margin: '10px 0 50px 0',\n              border: '2px solid #cad2de',\n              borderRadius: '30%',\n            }}\n            rotate={90}\n          />\n        </span>\n        <Table columns={columns} dataSource={[record]} pagination={false} />\n      </>\n    );\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => {\n        return row?.stock?.id;\n      },\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => (\n        <Space direction='vertical' className='relative'>\n          {row?.stock?.product?.translation?.title}\n          {row?.stock?.extras?.map((extra) => (\n            <Tag key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row?.stock?.product?.img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'origin_price',\n      key: 'origin_price',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (quantity, row) => {\n        return row?.bonus ? (\n          <Tag color='green'>{t('bonus')}</Tag>\n        ) : (\n          <span>{quantity * (row?.stock?.product?.interval || 1)}</span>\n        );\n      },\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'rate_discount',\n      key: 'rate_discount',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (_, row) => numberToPrice(row?.tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (_, row) => {\n        return numberToPrice(row?.total_price, defaultCurrency?.symbol);\n      },\n    },\n    {\n      title: t('actions'),\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, row) => (\n        <Space>\n          <Button\n            type={'primary'}\n            icon={<SwapOutlined />}\n            onClick={() => goToReplaceProduct(row)}\n            disabled={\n              (data?.status !== 'new' && data?.status !== 'accepted') ||\n              row?.bonus\n            }\n          />\n        </Space>\n      ),\n    },\n    {\n      title: t('note'),\n      dataIndex: 'note',\n      key: 'note',\n      render: (note) => note || '--',\n    },\n  ];\n\n  const documentColumns = [\n    {\n      title: t('date'),\n      dataIndex: 'date',\n      key: 'date',\n      render: (date) => moment(date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('document'),\n      dataIndex: 'document',\n      key: 'document',\n    },\n    {\n      title: t('number'),\n      dataIndex: 'number',\n      key: 'number',\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'price',\n      key: 'price',\n    },\n  ];\n\n  const documents = [\n    {\n      price: numberToPrice(data?.total_price, defaultCurrency.symbol),\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('invoice'),\n      date: moment(data?.created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      price: '-',\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('delivery.receipt'),\n      date: moment(data?.created_at).format('YYYY-MM-DD HH:mm'),\n    },\n  ];\n\n  const handleCloseModal = () => {\n    setOrderId(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n  };\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  const goToEdit = () => {\n    dispatch(clearOrder());\n    dispatch(\n      addMenu({\n        url: `order/${id}`,\n        id: 'order_edit',\n        name: t('edit.order'),\n      }),\n    );\n    navigate(`/order/${id}`);\n  };\n\n  const handleUpdateTracking = useCallback(\n    (body) => {\n      setIsUpdating(true);\n      orderService\n        .updateTracking(data?.id, body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          fetchOrder();\n        })\n        .finally(() => {\n          setIsUpdating(false);\n        });\n    },\n    [data?.id],\n  );\n\n  const goToUser = () => {\n    dispatch(\n      addMenu({\n        url: `users/user/${data?.user.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${data?.user.uuid}`, {\n      state: { user_id: data?.user.id },\n    });\n  };\n\n  const goToReplaceProduct = (row) => {\n    dispatch(\n      addMenu({\n        url: `order/details/${data?.id}/replace/${row?.stock?.id}`,\n        id: 'replace_product',\n        name: t('replace.product'),\n      }),\n    );\n    navigate(`/order/details/${data?.id}/replace/${row?.stock?.id}`, {\n      state: { data },\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n      if (statusList.length === 0) {\n        dispatch(fetchOrderStatus({}));\n      }\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.user?.firstname}{' '}\n            {data?.user?.lastname || ''}\n          </>\n        }\n        extra={\n          data?.status !== 'delivered' && data?.status !== 'canceled' ? (\n            <Space>\n              {data?.status !== 'delivered' && data?.status !== 'canceled' ? (\n                <Button type='primary' onClick={() => setOrderId(data?.id)}>\n                  {t('change.status')}\n                </Button>\n              ) : null}\n              <Button type='primary' icon={<EditOutlined />} onClick={goToEdit}>\n                {t('edit')}\n              </Button>\n            </Space>\n          ) : (\n            ''\n          )\n        }\n      />\n\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='justify-content-between w-100'>\n              <Space className='align-items-start'>\n                <CalendarOutlined className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('delivery.date')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.delivery_date} {data?.delivery_time}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  totalPriceRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <BiMoney className='order-card-icon' />\n\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('total.price')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} loading={loading} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {numberToPrice(\n                        data?.total_price,\n                        defaultCurrency?.symbol,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMessageDots className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('messages')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.review ? 1 : 0}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  productListRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <FiShoppingCart className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('products')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.details?.reduce(\n                        (total, item) => (total += item.quantity || 0),\n                        0,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n            </Space>\n          </Card>\n        </Col>\n        {data?.status !== 'canceled' && (\n          <Col span={24}>\n            <Card>\n              <Steps\n                current={statusList?.findIndex(\n                  (item) => item.name === data?.status,\n                )}\n              >\n                {statusList\n                  ?.slice(0, -1)\n                  ?.filter((item) => item?.active)\n                  .map((item) => (\n                    <Steps.Step key={item.id} title={t(item.name)} />\n                  ))}\n              </Steps>\n            </Card>\n          </Col>\n        )}\n        <Col span={16}>\n          <Spin spinning={loading}>\n            <Card style={{ minHeight: '200px' }}>\n              <h3>{t('details')}:</h3>\n              <Row hidden={loading} className='mb-3 order_detail' gutter={10}>\n                <Col span={12}>\n                  <div>\n                    {t('created.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' />{' '}\n                      {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}{' '}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' /> {data?.delivery_date}{' '}\n                      {data?.delivery_time}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.status')}:\n                    <span\n                      style={{ cursor: 'pointer' }}\n                      className='ml-2'\n                      onClick={() => setTransactionStatusModal(true)}\n                    >\n                      {t(data?.transaction?.status)} <EditOutlined />\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('note')}:\n                    <span className='ml-2'>\n                      {t(!!data?.note ? data?.note : '')}\n                    </span>\n                  </div>\n                </Col>\n                <Col span={12}>\n                  <div>\n                    {t('status')}:\n                    <span className='ml-2'>\n                      {data?.status === 'new' ? (\n                        <Tag color='blue'>{t(data?.status)}</Tag>\n                      ) : data?.status === 'canceled' ? (\n                        <Tag color='error'>{t(data?.status)}</Tag>\n                      ) : (\n                        <Tag color='cyan'>{t(data?.status)}</Tag>\n                      )}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.type')}:\n                    <span className='ml-2'>{data?.delivery_type}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.type')}:\n                    <span className='ml-2'>\n                      {t(data?.transaction?.payment_system?.tag)}\n                    </span>\n                  </div>\n                  <br />\n                </Col>\n              </Row>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <h3>{t('delivery.address')}:</h3>\n                  <div>\n                    {!!data?.address ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.address?.street_house_number ?? t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.address?.zipcode ??\n                            data?.address?.zip_code ??\n                            t('not.given')}\n                        </div>\n                      </>\n                    ) : !!data?.my_address ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.my_address?.street_house_number ??\n                            t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.my_address?.zipcode ?? t('not.given')}\n                        </div>\n                      </>\n                    ) : data?.delivery_point ? (\n                      <>\n                        <div>\n                          {t('address')}:{' '}\n                          {data?.delivery_point?.address?.[defaultLang] ??\n                            t('no.address')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'digital' ? (\n                      <div>{t('digital.delivery')}</div>\n                    ) : (\n                      <div>{t('no.address')}</div>\n                    )}\n                  </div>\n                  <Button\n                    className='map_show mt-3'\n                    onClick={() => setLocationsMap(id)}\n                  >\n                    <MdLocationOn style={{ marginRight: '8px' }} />{' '}\n                    {t('show.locations')}\n                  </Button>\n                </Col>\n                <Col span={12}>\n                  <QrCode orderId={id} />\n                </Col>\n              </Row>\n            </Card>\n          </Spin>\n          <Card title={t('documents')}>\n            <Table\n              columns={documentColumns}\n              dataSource={documents}\n              pagination={false}\n              loading={loading}\n            />\n          </Card>\n        </Col>\n        <Col span={8} className='order_info'>\n          {data?.delivery_type === 'delivery' && (\n            <Card\n              title={t('deliveryman')}\n              extra={\n                data?.status === 'ready' &&\n                data?.delivery_type !== 'pickup' && (\n                  <Button onClick={() => setOrderDeliveryDetails(data)}>\n                    {t('change')}\n                    <EditOutlined />\n                  </Button>\n                )\n              }\n            >\n              {data?.status === 'new' || data?.status === 'accepted' ? (\n                <p>{t('order_status_ready')}</p>\n              ) : (\n                ''\n              )}\n              {data?.status !== 'new' &&\n              data?.status !== 'accepted' &&\n              !data?.deliveryman ? (\n                <p>\n                  {t('The supplier is not assigned or delivery type pickup')}\n                </p>\n              ) : (\n                ''\n              )}\n\n              {data?.deliveryman && (\n                <Space>\n                  <Avatar\n                    shape='square'\n                    size={64}\n                    src={IMG_URL + data?.deliveryman?.img}\n                  />\n                  <div>\n                    <h5>\n                      {data?.deliveryman?.firstname}{' '}\n                      {data?.deliveryman?.lastname || ''}\n                    </h5>\n                    <span className='delivery-info'>\n                      <BsFillTelephoneFill />\n                      {data?.deliveryman?.phone\n                        ? hideNumber(data?.deliveryman?.phone)\n                        : t('no.phone')}\n                    </span>\n\n                    <div className='delivery-info'>\n                      <b>\n                        <MdEmail size={16} />\n                      </b>\n                      <span>\n                        {isDemo || ReactAppIsDemo\n                          ? hideEmail(data?.deliveryman?.email)\n                          : data?.deliveryman?.email}\n                      </span>\n                    </div>\n                  </div>\n                </Space>\n              )}\n            </Card>\n          )}\n\n          {data?.type === 2 && data?.delivery_type === 'delivery' && (\n            <Card title={t('tracking.info')}>\n              <TrackingInfo\n                onSubmit={handleUpdateTracking}\n                isSubmitting={isUpdating}\n                initialData={{\n                  track_name: data?.track_name,\n                  track_id: data?.track_id,\n                  track_url: data?.track_url,\n                }}\n              />\n            </Card>\n          )}\n\n          {!!data?.username && (\n            <Card title={t('order.receiver')}>\n              <div className='customer-info'>\n                <span className='title'>{t('name')}</span>\n                <span className='description'>\n                  <BsFillPersonFill />\n                  {data?.username}\n                </span>\n              </div>\n              <div className='customer-info'>\n                <span className='title'>{t('phone')}</span>\n                <span className='description'>\n                  <BsFillTelephoneFill />\n                  {data?.phone}\n                </span>\n              </div>\n            </Card>\n          )}\n\n          {!!data?.user && (\n            <Card\n              title={\n                <Space>\n                  {t('customer.info')}\n                  <EditOutlined onClick={() => goToUser()} />\n                </Space>\n              }\n            >\n              <div className='d-flex w-100 customer-info-container'>\n                {loading ? (\n                  <Skeleton.Avatar size={64} shape='square' />\n                ) : (\n                  <Avatar shape='square' size={64} src={data?.user?.img} />\n                )}\n\n                <h5 className='customer-name'>\n                  {loading ? (\n                    <Skeleton.Button size={20} style={{ width: 70 }} />\n                  ) : (\n                    data?.user?.firstname + ' ' + (data?.user?.lastname || '')\n                  )}\n                </h5>\n\n                <div className='customer-info-detail'>\n                  <div className='customer-info'>\n                    <span className='title'>{t('phone')}</span>\n                    <span className='description'>\n                      <BsFillTelephoneFill />\n                      {loading ? (\n                        <Skeleton.Button size={16} />\n                      ) : data?.user?.phone ? (\n                        ReactAppIsDemo ? (\n                          hideNumber(data?.user?.phone)\n                        ) : (\n                          data?.user?.phone\n                        )\n                      ) : (\n                        t('no.phone')\n                      )}\n                    </span>\n                  </div>\n\n                  <div className='customer-info'>\n                    <span className='title'>{t('email')}</span>\n                    <span className='description'>\n                      <MdEmail />\n                      {loading ? (\n                        <Skeleton.Button size={16} />\n                      ) : isDemo || ReactAppIsDemo ? (\n                        hideEmail(data?.user?.email)\n                      ) : (\n                        data?.user?.email\n                      )}\n                    </span>\n                  </div>\n                  <div className='customer-info'>\n                    <span className='title'>{t('registration.date')}</span>\n                    <span className='description'>\n                      <BsCalendarDay />\n                      {loading ? (\n                        <Skeleton.Button size={16} />\n                      ) : (\n                        moment(data?.user?.created_at).format(\n                          'DD-MM-YYYY, HH:mm',\n                        )\n                      )}\n                    </span>\n                  </div>\n                  <div className='customer-info'>\n                    <span className='title'>{t('orders.count')}</span>\n                    <span className='description'>\n                      {loading ? (\n                        <Skeleton.Button size={16} />\n                      ) : (\n                        <Badge\n                          showZero\n                          style={{ backgroundColor: '#3d7de3' }}\n                          count={data?.user?.orders_count || 0}\n                        />\n                      )}\n                    </span>\n                  </div>\n                  <div className='customer-info'>\n                    <span className='title'>\n                      {t('spent.since.registration')}\n                    </span>\n                    <span className='description'>\n                      {loading ? (\n                        <Skeleton.Button size={16} />\n                      ) : (\n                        <Badge\n                          showZero\n                          style={{ backgroundColor: '#48e33d' }}\n                          count={numberToPrice(\n                            data?.user?.orders_sum_price,\n                            defaultCurrency?.symbol,\n                          )}\n                        />\n                      )}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          )}\n          {data?.review && !loading && (\n            <Card title={t('messages')}>\n              <div className='order-message'>\n                <span className='message'>{data?.review?.comment}</span>\n                <Space className='w-100 justify-content-end'>\n                  <span className='date'>\n                    {moment(data?.review?.created_at).format(\n                      'YYYY-MM-DD HH:mm',\n                    )}\n                  </span>\n                </Space>\n              </div>\n            </Card>\n          )}\n          {data?.shop && (\n            <Card\n              title={`${t('shop.details')}: #${data?.shop?.id}`}\n              loading={loading}\n            >\n              <Row gutter={12}>\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    columnGap: '20px',\n                    marginBottom: '20px',\n                  }}\n                >\n                  <div\n                    style={{\n                      width: '100px',\n                      height: '100px',\n                      backgroundColor: '#f5f5f5',\n                      overflow: 'hidden',\n                      borderRadius: '10px',\n                      position: 'relative',\n                    }}\n                  >\n                    <Image\n                      alt={t('shop.logo')}\n                      style={{ objectFit: 'contain' }}\n                      src={\n                        data?.shop?.logo_img ||\n                        'https://via.placeholder.com/150'\n                      }\n                      width={100}\n                      height={100}\n                      preview={false}\n                    />\n                  </div>\n                  <div\n                    style={{\n                      width: `calc(100% - 100px - 20px)`,\n                    }}\n                  >\n                    <h5\n                      style={{\n                        maxWidth: '100%',\n                        whiteSpace: 'nowrap',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                      }}\n                    >\n                      {data?.shop?.translation?.title || '--'}\n                    </h5>\n                    <p>\n                      {data?.shop?.open ? (\n                        <Tag color='green'>{t('open')}</Tag>\n                      ) : (\n                        <Tag color='red'>{t('closed')}</Tag>\n                      )}\n                    </p>\n                  </div>\n                </Col>\n                <Col span={24}>\n                  {data?.shop?.phone && (\n                    <p>\n                      <strong>{t('phone')}:</strong> {data?.shop?.phone}\n                    </p>\n                  )}\n                  {data?.shop?.translation?.address && (\n                    <p>\n                      <strong>{t('address')}:</strong>{' '}\n                      {data?.shop?.translation?.address}\n                    </p>\n                  )}\n                </Col>\n              </Row>\n            </Card>\n          )}\n        </Col>\n        <Col span={24}>\n          <Card className='w-100 order-table' title={t('order.products')}>\n            <Divider />\n            <Table\n              ref={productListRef}\n              scroll={{ x: true }}\n              columns={columns}\n              dataSource={activeMenu.data?.details || []}\n              loading={loading}\n              rowKey={(record) => record?.id}\n              pagination={false}\n              expandable={{\n                expandedRowRender,\n                expandIcon: ({ expanded, onExpand, record }) =>\n                  expanded ? (\n                    <SwapOutlined\n                      onClick={(e) => onExpand(record, e)}\n                      rotate={90}\n                    />\n                  ) : (\n                    <SwapOutlined\n                      onClick={(e) => onExpand(record, e)}\n                      rotate={90}\n                    />\n                  ),\n                defaultExpandedRowKeys: ['0'],\n              }}\n            />\n            <Space\n              size={100}\n              className='d-flex justify-content-end w-100 order-table__summary'\n            >\n              <div>\n                <span>{t('delivery.fee')}:</span>\n                <br />\n                <span>{t('order.tax')}:</span>\n                <br />\n                <span>{t('product')}:</span>\n                <br />\n                <span>{t('discount')}:</span>\n                <br />\n                <span>{t('service.fee')}:</span>\n                <br />\n                <span>{t('coupon.price')}:</span>\n                <br />\n                <h3>{t('total.price')}:</h3>\n              </div>\n              <div>\n                <span>\n                  {numberToPrice(\n                    data?.delivery_fee ?? 0,\n                    defaultCurrency?.symbol,\n                  )}\n                </span>\n                <br />\n                <span>{numberToPrice(data?.tax, defaultCurrency?.symbol)}</span>\n                <br />\n                <span>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.total_discount, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.service_fee, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.coupon_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <h3 ref={totalPriceRef}>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </div>\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n      {orderId && (\n        <OrderStatusModal\n          orderId={orderId}\n          handleCancel={handleCloseModal}\n          refetchPage={fetchOrder}\n        />\n      )}\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {transactionStatusModal && (\n        <TransactionStatusModal\n          orderId={id}\n          handleCancel={() => setTransactionStatusModal(false)}\n          transactionDetails={data?.transaction}\n          fetchOrder={fetchOrder}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/order-board.js",[],["5940"],"/home/mostafa/Magde/new/frontadminreact/src/views/order/order-list.js",["5941","5942"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Button,\n  Space,\n  Table,\n  Card,\n  Tabs,\n  Tag,\n  DatePicker,\n  Tooltip,\n} from 'antd';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\nimport {\n  ClearOutlined,\n  DeleteOutlined,\n  DownloadOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenu,\n  setMenuData,\n} from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { clearItems, fetchOrders } from 'redux/slices/orders';\nimport formatSortType from 'helpers/formatSortType';\nimport SearchInput from 'components/search-input';\nimport { clearOrder } from 'redux/slices/order';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { DebounceSelect } from 'components/search';\nimport userService from 'services/user';\nimport OrderStatusModal from './orderStatusModal';\nimport OrderDeliveryman from './orderDeliveryman';\nimport FilterColumns from 'components/filter-column';\nimport { fetchOrderStatus } from 'redux/slices/orderStatus';\n\nimport ShowLocationsMap from './show-locations.map';\nimport DownloadModal from './downloadModal';\nimport { toast } from 'react-toastify';\nimport DeleteButton from 'components/delete-button';\nimport orderService from 'services/order';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\nimport moment from 'moment';\nimport { export_url } from 'configs/app-global';\nimport { BiMap } from 'react-icons/bi';\nimport { CgExport } from 'react-icons/cg';\nimport shopService from 'services/restaurant';\nimport { batch } from 'react-redux';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport OrderTypeSwitcher from './order-type-switcher';\nimport regionService from 'services/deliveryzone/region';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nconst { TabPane } = Tabs;\nconst { RangePicker } = DatePicker;\n\nexport default function OrderList() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const [orderId, setOrderId] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [downloadModal, setDownloadModal] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [searchParams] = useSearchParams();\n  const pageType = searchParams.get('type');\n  const statuses = [\n    { name: 'all', id: '0', active: true, sort: 0 },\n    ...statusList,\n  ];\n\n  const goToEdit = (row) => {\n    batch(() => {\n      dispatch(clearOrder());\n      dispatch(\n        addMenu({\n          url: `order/${row.id}`,\n          id: 'order_edit',\n          name: t('edit.order'),\n        }),\n      );\n    });\n    navigate(`/order/${row.id}`);\n  };\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `order/details${row.type === 2 ? '/seller' : ''}/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/order/details${row.type === 2 ? '/seller' : ''}/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (user) => {\n        if (!user) {\n          return <Tag color='red'>{t('deleted.user')}</Tag>;\n        }\n        return (\n          <div>\n            {user?.firstname || ''} {user?.lastname || ''}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div className='cursor-pointer'>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {status !== 'delivered' && status !== 'canceled' && row.type !== 2 ? (\n            <EditOutlined\n              onClick={(e) => {\n                e.stopPropagation();\n                setOrderId(row?.id);\n              }}\n            />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      is_show: true,\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      render: (deliveryman, row) => (\n        <div>\n          {row.status === 'ready' &&\n          row?.delivery_type === 'delivery' &&\n          row.type !== 2 ? (\n            <Button type='link' onClick={() => setOrderDeliveryDetails(row)}>\n              <Space>\n                {deliveryman\n                  ? `${deliveryman.firstname} ${deliveryman.lastname}`\n                  : t('add.deliveryman')}\n                <EditOutlined />\n              </Space>\n            </Button>\n          ) : (\n            <div>\n              {deliveryman?.firstname} {deliveryman?.lastname}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('number.of.products'),\n      dataIndex: 'order_details_count',\n      key: 'order_details_count',\n      is_show: true,\n      render: (order_details_count) => {\n        return (\n          <div className='text-lowercase'>\n            {order_details_count || 0} {t('products')}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('amount'),\n      is_show: true,\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price, row) => {\n        const status = row.transaction?.status;\n        return (\n          <>\n            <span>{numberToPrice(total_price, defaultCurrency.symbol)}</span>\n            <br />\n            <span\n              className={\n                status === 'progress'\n                  ? 'text-primary'\n                  : status === 'paid'\n                  ? 'text-success'\n                  : status === 'rejected'\n                  ? 'text-danger'\n                  : 'text-info'\n              }\n            >\n              {row.transaction?.status}\n            </span>\n          </>\n        );\n      },\n    },\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('delivery.date'),\n      is_show: true,\n      dataIndex: 'delivery_date',\n      key: 'delivery_date',\n      render: (delivery_date) =>\n        moment(delivery_date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              icon={<BiMap />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setLocationsMap(row.id);\n              }}\n            />\n            <Button\n              icon={<EyeOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                goToShow(row);\n              }}\n            />\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                goToEdit(row);\n              }}\n              disabled={\n                row.status === 'delivered' ||\n                row.status === 'canceled' ||\n                row.type === 2\n              }\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n            <Button\n              icon={<DownloadOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setDownloadModal(row.id);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [downloading, setDownloading] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const [role, setRole] = useState(queryParams.values.status || 'all');\n  const immutable = activeMenu.data?.role || role;\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'months'),\n    moment(),\n  );\n  const { orders, loading, params, meta } = useSelector(\n    (state) => state.orders,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    region_id: data?.region?.value,\n    country_id: data?.country?.value,\n    city_id: data?.city?.value,\n    status: immutable === 'all' ? undefined : immutable,\n    type: pageType === 'all' ? undefined : '1',\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    delivery_type: type !== 'scheduled' ? type : undefined,\n    delivery_date_from:\n      type === 'scheduled'\n        ? moment().add(1, 'day').format('YYYY-MM-DD')\n        : undefined,\n    date_from: dateRange?.[0]?.format('YYYY-MM-DD') || null,\n    date_to: dateRange?.[1]?.format('YYYY-MM-DD') || null,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    orderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchOrders(paramsData));\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchOrders(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.search(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item?.firstname} ${item?.lastname}`,\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  const goToOrderCreate = () => {\n    batch(() => {\n      dispatch(clearOrder());\n      dispatch(\n        setMenu({\n          id: 'pos.system_01',\n          name: 'pos.system',\n          url: 'pos-system',\n        }),\n      );\n    });\n    navigate('/pos-system');\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    orderService\n      .export(paramsData)\n      .then((res) => (window.location.href = export_url + res?.data?.file_name))\n      .finally(() => setDownloading(false));\n  };\n\n  const onChangeTab = (status) => {\n    const orderStatus = status;\n    dispatch(setMenuData({ activeMenu, data: { role: orderStatus, page: 1 } }));\n    setRole(status);\n    navigate(`?status=${orderStatus}`);\n  };\n\n  const handleCloseModal = () => {\n    setOrderId(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n    setDownloadModal(null);\n  };\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  const fetchRegions = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    return regionService.get(params).then(({ data }) =>\n      data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchCountry = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      region_id: activeMenu?.data?.region?.value,\n    };\n\n    return countryService.get(params).then(({ data }) =>\n      data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchCity = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      country_id: activeMenu?.data?.country?.value,\n    };\n\n    return cityService.get(params).then(({ data }) =>\n      data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  useEffect(() => {\n    batch(() => {\n      dispatch(fetchOrders(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    });\n  }, [activeMenu?.refetch, pageType]);\n\n  useEffect(() => {\n    dispatch(fetchOrderStatus({}));\n  }, []);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        }),\n      );\n      dispatch(fetchOrders({ status: null, page: data?.page, perPage: 20 }));\n    });\n  };\n\n  return (\n    <>\n      <Space className='justify-content-end w-100 mb-3'>\n        {pageType !== 'all' && <OrderTypeSwitcher listType='orders' />}\n        <Button\n          onClick={excelExport}\n          loading={downloading}\n          style={{ width: '100%' }}\n        >\n          <CgExport className='mr-2' />\n          {t('export')}\n        </Button>\n        <Button\n          onClick={handleClear}\n          style={{ width: '100%' }}\n          icon={<ClearOutlined />}\n        >\n          {t('clear')}\n        </Button>\n        <Button\n          type='primary'\n          icon={<PlusCircleOutlined />}\n          onClick={goToOrderCreate}\n          style={{ width: '100%' }}\n        >\n          {t('add.order')}\n        </Button>\n      </Space>\n      <Card>\n        <Space wrap className='order-filter'>\n          <SearchInput\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n          />\n          <DebounceSelect\n            placeholder={t('select.shop')}\n            fetchOptions={fetchShops}\n            style={{ width: '100%' }}\n            onSelect={(shop) => handleFilter(shop.value, 'shop_id')}\n            onDeselect={() => handleFilter(null, 'shop_id')}\n            allowClear={true}\n            value={data?.shop_id}\n          />\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter(user.value, 'user_id')}\n            onDeselect={() => handleFilter(null, 'user_id')}\n            style={{ width: '100%' }}\n            value={data?.user_id}\n          />\n          <DebounceSelect\n            placeholder={t('select.region')}\n            fetchOptions={fetchRegions}\n            onSelect={(region) => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: {\n                    ...data,\n                    region,\n                    country: null,\n                    city: null,\n                  },\n                }),\n              );\n            }}\n            onDeselect={() => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: {\n                    ...data,\n                    region: null,\n                    country: null,\n                    city: null,\n                  },\n                }),\n              );\n            }}\n            allowClear={true}\n            style={{ width: '100%' }}\n            value={data?.region}\n            autoComplete={'none'}\n          />\n          <DebounceSelect\n            placeholder={t('select.country')}\n            fetchOptions={fetchCountry}\n            refetchOptions={true}\n            onSelect={(country) => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: {\n                    ...data,\n                    country,\n                    city: null,\n                  },\n                }),\n              );\n            }}\n            onDeselect={() => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: { ...data, country: null, city: null },\n                }),\n              );\n            }}\n            style={{ width: '100%' }}\n            value={data?.country}\n            autoComplete={'none'}\n            disabled={!data?.region?.value}\n            allowClear={true}\n          />\n          <DebounceSelect\n            placeholder={t('select.city')}\n            fetchOptions={fetchCity}\n            refetchOptions={true}\n            onSelect={(city) =>\n              dispatch(setMenuData({ activeMenu, data: { ...data, city } }))\n            }\n            onDeselect={() =>\n              dispatch(\n                setMenuData({ activeMenu, data: { ...data, city: null } }),\n              )\n            }\n            style={{ width: '100%' }}\n            value={data?.city}\n            autoComplete={'none'}\n            disabled={!data?.country?.value || !data?.region?.value}\n            allowClear={true}\n          />\n          <RangePicker\n            value={dateRange}\n            onChange={(values) => {\n              handleFilter((prev) => ({\n                ...prev,\n                ...{\n                  date_from: values?.[0]?.format('YYYY-MM-DD'),\n                  date_to: values?.[1]?.format('YYYY-MM-DD'),\n                },\n              }));\n              setDateRange(values);\n            }}\n            disabledDate={(current) => {\n              return current && current > moment().endOf('day');\n            }}\n            style={{ width: '250px' }}\n          />\n        </Space>\n      </Card>\n\n      <Card>\n        <Space className='justify-content-between align-items-start w-100'>\n          <Tabs onChange={onChangeTab} type='card' activeKey={immutable}>\n            {statuses\n              .filter((ex) => ex.active === true)\n              .map((item) => {\n                return <TabPane tab={t(item.name)} key={item.name} />;\n              })}\n          </Tabs>\n          <Space>\n            <Tooltip title={t('delete.selected')}>\n              <DeleteButton type='primary' onClick={allDelete} />\n            </Tooltip>\n            <FilterColumns setColumns={setColumns} columns={columns} iconOnly />\n          </Space>\n        </Space>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={orders}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            // total: statistic?.orders_count,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          onRow={(record) => {\n            return {\n              onClick: () => {\n                goToShow(record);\n              },\n            };\n          }}\n        />\n      </Card>\n\n      {orderId && (\n        <OrderStatusModal\n          orderId={orderId}\n          handleCancel={handleCloseModal}\n          refetchPage={() =>\n            batch(() => {\n              dispatch(fetchOrders(paramsData));\n              dispatch(disableRefetch(activeMenu));\n            })\n          }\n        />\n      )}\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {downloadModal && (\n        <DownloadModal id={downloadModal} handleCancel={handleCloseModal} />\n      )}\n      <CustomModal\n        click={orderDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/seller-order-list.js",["5943","5944"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Button,\n  Space,\n  Table,\n  Card,\n  Tabs,\n  Tag,\n  DatePicker,\n  Tooltip,\n} from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  ClearOutlined,\n  DeleteOutlined,\n  DownloadOutlined,\n  EyeOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { clearItems, fetchOrders } from 'redux/slices/orders';\nimport formatSortType from 'helpers/formatSortType';\nimport SearchInput from 'components/search-input';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { DebounceSelect } from 'components/search';\nimport userService from 'services/user';\nimport FilterColumns from 'components/filter-column';\nimport { fetchOrderStatus } from 'redux/slices/orderStatus';\n\nimport ShowLocationsMap from './show-locations.map';\nimport DownloadModal from './downloadModal';\nimport { toast } from 'react-toastify';\nimport DeleteButton from 'components/delete-button';\nimport orderService from 'services/order';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\nimport moment from 'moment';\nimport { export_url } from 'configs/app-global';\nimport { BiMap } from 'react-icons/bi';\nimport { CgExport } from 'react-icons/cg';\nimport shopService from 'services/restaurant';\nimport { batch } from 'react-redux';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport regionService from 'services/deliveryzone/region';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nconst { TabPane } = Tabs;\nconst { RangePicker } = DatePicker;\n\nexport default function OrderList() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [downloadModal, setDownloadModal] = useState(null);\n  const statuses = [\n    { name: 'all', id: '0', active: true, sort: 0 },\n    ...statusList,\n  ];\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `order/details/seller/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/order/details/seller/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (user) => (\n        <div>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div className='cursor-pointer'>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      is_show: true,\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      render: (deliveryman, row) => (\n        <div>\n          {row.status === 'ready' && row.delivery_type !== 'pickup' ? null : (\n            <div>\n              {deliveryman?.firstname} {deliveryman?.lastname}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('number.of.products'),\n      dataIndex: 'order_details_count',\n      key: 'order_details_count',\n      is_show: true,\n      render: (order_details_count) => {\n        return (\n          <div className='text-lowercase'>\n            {order_details_count || 0} {t('products')}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('amount'),\n      is_show: true,\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price, row) => {\n        const status = row.transaction?.status;\n        return (\n          <>\n            <span>{numberToPrice(total_price, defaultCurrency.symbol)}</span>\n            <br />\n            <span\n              className={\n                status === 'progress'\n                  ? 'text-primary'\n                  : status === 'paid'\n                    ? 'text-success'\n                    : status === 'rejected'\n                      ? 'text-danger'\n                      : 'text-info'\n              }\n            >\n              {row.transaction?.status}\n            </span>\n          </>\n        );\n      },\n    },\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('delivery.date'),\n      is_show: true,\n      dataIndex: 'delivery_date',\n      key: 'delivery_date',\n      render: (delivery_date) =>\n        moment(delivery_date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              icon={<BiMap />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setLocationsMap(row.id);\n              }}\n            />\n            <Button\n              icon={<EyeOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                goToShow(row);\n              }}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n            <Button\n              icon={<DownloadOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setDownloadModal(row.id);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [downloading, setDownloading] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const [role, setRole] = useState(queryParams.values.status || 'all');\n  const immutable = activeMenu.data?.role || role;\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'months'),\n    moment(),\n  );\n  const { orders, loading, params, meta } = useSelector(\n    (state) => state.orders,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    region_id: data?.region?.value,\n    country_id: data?.country?.value,\n    city_id: data?.city?.value,\n    status: immutable === 'all' ? undefined : immutable,\n    type: '2',\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    delivery_type: type !== 'scheduled' ? type : undefined,\n    delivery_date_from:\n      type === 'scheduled'\n        ? moment().add(1, 'day').format('YYYY-MM-DD')\n        : undefined,\n    date_from: dateRange?.[0]?.format('YYYY-MM-DD') || null,\n    date_to: dateRange?.[1]?.format('YYYY-MM-DD') || null,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    orderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchOrders(paramsData));\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchOrders(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.search(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item?.firstname} ${item?.lastname}`,\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  const excelExport = () => {\n    setDownloading(true);\n    orderService\n      .export(paramsData)\n      .then((res) => (window.location.href = export_url + res?.data?.file_name))\n      .finally(() => setDownloading(false));\n  };\n\n  const onChangeTab = (status) => {\n    const orderStatus = status;\n    dispatch(setMenuData({ activeMenu, data: { role: orderStatus, page: 1 } }));\n    setRole(status);\n    navigate(`?status=${orderStatus}`);\n  };\n\n  const handleCloseModal = () => {\n    setLocationsMap(null);\n    setDownloadModal(null);\n  };\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  const fetchRegions = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    return regionService.get(params).then(({ data }) =>\n      data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchCountry = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      region_id: activeMenu?.data?.region?.value,\n    };\n\n    return countryService.get(params).then(({ data }) =>\n      data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchCity = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      country_id: activeMenu?.data?.country?.value,\n    };\n\n    return cityService.get(params).then(({ data }) =>\n      data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      batch(() => {\n        dispatch(fetchOrders(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu?.refetch]);\n\n  useEffect(() => {\n    dispatch(fetchOrderStatus({}));\n  }, []);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        }),\n      );\n      dispatch(fetchOrders({ status: null, page: data?.page, perPage: 20 }));\n    });\n  };\n\n  return (\n    <>\n      <Space className='justify-content-end w-100 mb-3'>\n        <Button\n          onClick={excelExport}\n          loading={downloading}\n          style={{ width: '100%' }}\n        >\n          <CgExport className='mr-2' />\n          {t('export')}\n        </Button>\n        <Button\n          onClick={handleClear}\n          style={{ width: '100%' }}\n          icon={<ClearOutlined />}\n        >\n          {t('clear')}\n        </Button>\n      </Space>\n      <Card>\n        <Space wrap className='order-filter'>\n          <SearchInput\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n          />\n          <DebounceSelect\n            placeholder={t('select.shop')}\n            fetchOptions={fetchShops}\n            style={{ width: '100%' }}\n            onSelect={(shop) => handleFilter(shop.value, 'shop_id')}\n            onDeselect={() => handleFilter(null, 'shop_id')}\n            allowClear={true}\n            value={data?.shop_id}\n          />\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter(user.value, 'user_id')}\n            onDeselect={() => handleFilter(null, 'user_id')}\n            style={{ width: '100%' }}\n            value={data?.user_id}\n          />\n          <DebounceSelect\n            placeholder={t('select.region')}\n            fetchOptions={fetchRegions}\n            onSelect={(region) => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: {\n                    ...data,\n                    region,\n                    country: null,\n                    city: null,\n                  },\n                }),\n              );\n            }}\n            onDeselect={() => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: {\n                    ...data,\n                    region: null,\n                    country: null,\n                    city: null,\n                  },\n                }),\n              );\n            }}\n            allowClear={true}\n            style={{ width: '100%' }}\n            value={data?.region}\n            autoComplete={'none'}\n          />\n          <DebounceSelect\n            placeholder={t('select.country')}\n            fetchOptions={fetchCountry}\n            refetchOptions={true}\n            onSelect={(country) => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: {\n                    ...data,\n                    country,\n                    city: null,\n                  },\n                }),\n              );\n            }}\n            onDeselect={() => {\n              dispatch(\n                setMenuData({\n                  activeMenu,\n                  data: { ...data, country: null, city: null },\n                }),\n              );\n            }}\n            style={{ width: '100%' }}\n            value={data?.country}\n            autoComplete={'none'}\n            disabled={!data?.region?.value}\n            allowClear={true}\n          />\n          <DebounceSelect\n            placeholder={t('select.city')}\n            fetchOptions={fetchCity}\n            refetchOptions={true}\n            onSelect={(city) =>\n              dispatch(setMenuData({ activeMenu, data: { ...data, city } }))\n            }\n            onDeselect={() =>\n              dispatch(\n                setMenuData({ activeMenu, data: { ...data, city: null } }),\n              )\n            }\n            style={{ width: '100%' }}\n            value={data?.city}\n            autoComplete={'none'}\n            disabled={!data?.country?.value || !data?.region?.value}\n            allowClear={true}\n          />\n          <RangePicker\n            value={dateRange}\n            onChange={(values) => {\n              handleFilter((prev) => ({\n                ...prev,\n                ...{\n                  date_from: values?.[0]?.format('YYYY-MM-DD'),\n                  date_to: values?.[1]?.format('YYYY-MM-DD'),\n                },\n              }));\n              setDateRange(values);\n            }}\n            disabledDate={(current) => {\n              return current && current > moment().endOf('day');\n            }}\n            style={{ width: '100%' }}\n          />\n        </Space>\n      </Card>\n\n      <Card>\n        <Space className='justify-content-between align-items-start w-100'>\n          <Tabs onChange={onChangeTab} type='card' activeKey={immutable}>\n            {statuses\n              .filter((ex) => ex.active === true)\n              .map((item) => {\n                return <TabPane tab={t(item.name)} key={item.name} />;\n              })}\n          </Tabs>\n          <Space>\n            <Tooltip title={t('delete.selected')}>\n              <DeleteButton type='primary' onClick={allDelete} />\n            </Tooltip>\n            <FilterColumns setColumns={setColumns} columns={columns} iconOnly />\n          </Space>\n        </Space>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={orders}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            // total: statistic?.orders_count,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          onRow={(record) => {\n            return {\n              onClick: () => {\n                goToShow(record);\n              },\n            };\n          }}\n        />\n      </Card>\n\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {downloadModal && (\n        <DownloadModal id={downloadModal} handleCancel={handleCloseModal} />\n      )}\n      <CustomModal\n        click={orderDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/pages/page-edit.js",["5945","5946"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchPages } from '../../redux/slices/pages';\nimport pageService from '../../services/pages';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport MediaUpload from '../../components/upload';\nimport { typeList } from './type-list';\nimport { IMG_URL, api_url } from 'configs/app-global';\nimport CkeEditor from 'components/ckeEditor';\nimport axios from 'axios';\nimport getTranslationFields from 'helpers/getTranslationFields';\n\nconst PageEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [type, setType] = useState(null);\n\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const [image, setImage] = useState(\n    activeMenu.data?.galleries?.[0]\n      ? [createImage(activeMenu.data.galleries?.[0].path)]\n      : [],\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = (alias) => {\n    setLoading(true);\n    pageService\n      .getById(alias)\n      .then((res) => {\n        let page = res.data;\n        const data = {\n          ...page,\n          ...getLanguageFields(page),\n          ...page.buttons,\n        };\n        form.setFieldsValue(data);\n        setImage([createImage(page.galleries[0].path)]);\n        setType(page.type);\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      images: image.map((img) => img.name),\n      active: Number(values.active),\n      type: values.type,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      buttons: {\n        google_play_button_link: values?.google_play_button_link,\n        app_store_button_link: values?.app_store_button_link,\n      },\n    };\n\n    const trimAndCheckLength = (value) => value?.trim()?.length;\n\n    if (!trimAndCheckLength(values?.google_play_button_link)) {\n      delete body.buttons?.google_play_button_link;\n    }\n\n    if (!trimAndCheckLength(values?.app_store_button_link)) {\n      delete body.buttons?.app_store_button_link;\n    }\n\n    if (\n      !trimAndCheckLength(values?.app_store_button_link) &&\n      !trimAndCheckLength(values?.google_play_button_link)\n    ) {\n      delete body.buttons;\n    }\n\n    axios({\n      method: 'put',\n      url: `${api_url}dashboard/admin/pages/${id}`,\n      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      data: body,\n      params: {},\n    })\n      .then(() => {\n        const nextUrl = 'pages';\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchPages());\n      })\n      .catch((err) => toast.error(err.response?.data?.message))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) getBanner(id);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.page')} className='h-100' extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='banner-add'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12} />\n            <Col span={24}>\n              <CkeEditor form={form} languages={languages} lang={defaultLang} />\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('type')}\n                name='type'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select options={typeList} className='w-100' disabled />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n            {type !== 'delivery' && type !== 'about' && (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('google_play_button_link')}\n                    name='google_play_button_link'\n                  >\n                    <Input className='w-100' />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('app_store_button_link')}\n                    name='app_store_button_link'\n                  >\n                    <Input className='w-100' />\n                  </Form.Item>\n                </Col>\n              </>\n            )}\n\n            <Col span={12}>\n              <Form.Item label={t('image')}>\n                <MediaUpload\n                  type='receipts'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button\n                type='primary'\n                htmlType='submit'\n                loading={loadingBtn}\n                disabled={loadingBtn}\n              >\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default PageEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/pages/page-add.js",["5947"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { fetchPages } from 'redux/slices/pages';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport MediaUpload from 'components/upload';\nimport { IMG_URL, api_url } from 'configs/app-global';\nimport { typeList } from './type-list';\nimport CkeEditor from 'components/ckeEditor';\nimport axios from 'axios';\nimport getTranslationFields from 'helpers/getTranslationFields';\n\nconst PageAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [type, setType] = useState(null);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const { pages } = useSelector((state) => state.pages, shallowEqual);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n  const [image, setImage] = useState(\n    activeMenu.data?.galleries?.[0]\n      ? [createImage(activeMenu.data.galleries?.[0].path)]\n      : [],\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      images: image.map((img) => img.name),\n      active: Number(values.active),\n      type: values.type,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      buttons: {\n        google_play_button_link: values?.google_play_button_link,\n        app_store_button_link: values?.app_store_button_link,\n      },\n    };\n\n    const trimAndCheckLength = (value) => value?.trim()?.length;\n\n    if (!trimAndCheckLength(values?.google_play_button_link)) {\n      delete body.buttons?.google_play_button_link;\n    }\n\n    if (!trimAndCheckLength(values?.app_store_button_link)) {\n      delete body.buttons?.app_store_button_link;\n    }\n\n    if (\n      !trimAndCheckLength(values?.app_store_button_link) &&\n      !trimAndCheckLength(values?.google_play_button_link)\n    ) {\n      delete body.buttons;\n    }\n\n    axios({\n      method: 'post',\n      url: `${api_url}dashboard/admin/pages`,\n      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      data: body,\n      params: {},\n    })\n      .then(() => {\n        const nextUrl = 'pages';\n        toast.success(t('successfully.created'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchPages({}));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => toast.error(err.response?.data?.message))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.pages')} className='h-100' extra={<LanguageList />}>\n      <Form\n        name='page-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12} />\n          <Col span={24}>\n            <CkeEditor form={form} languages={languages} lang={defaultLang} />\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('type')}\n              name='type'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select\n                onChange={(e) => setType(e)}\n                options={typeList.filter(\n                  (i) => !pages.some((e) => e.type === i.value),\n                )}\n                className='w-100'\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n          {type !== 'delivery' && type !== 'about' && (\n            <>\n              <Col span={12}>\n                <Form.Item\n                  label={t('google_play_button_link')}\n                  name='google_play_button_link'\n                >\n                  <Input className='w-100' />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('app_store_button_link')}\n                  name='app_store_button_link'\n                >\n                  <Input className='w-100' />\n                </Form.Item>\n              </Col>\n            </>\n          )}\n          <Col span={12}>\n            <Form.Item label={t('image')}>\n              <MediaUpload\n                type='other'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default PageAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/payment-payloads/payload-edit.js",["5948","5949"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport Paystack from 'assets/images/paystack.svg';\nimport { FaPaypal } from 'react-icons/fa';\nimport { SiStripe, SiRazorpay, SiFlutter } from 'react-icons/si';\nimport { paymentPayloadService } from 'services/paymentPayload';\nimport { AsyncSelect } from 'components/async-select';\nimport currencyService from 'services/currency';\nimport i18n from 'configs/i18next';\nimport { fetchPaymentPayloads } from 'redux/slices/paymentPayload';\nimport MediaUpload from 'components/upload';\n\nconst PaymentPayloadEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const [activePayment, setActivePayment] = useState(null);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: name,\n    };\n  };\n\n  const getPayload = (id) => {\n    setLoading(true);\n    paymentPayloadService\n      .getById(id)\n      .then(({ data }) => {\n        setActivePayment({\n          label: data?.payment?.tag,\n          value: data?.payment?.id,\n          key: data?.payment?.id,\n        });\n        form.setFieldsValue({\n          ...data.payload,\n          demo: Boolean(data?.payload?.demo),\n          payment_id: data?.payment.tag,\n          paypal_validate_ssl: Boolean(data?.payload?.paypal_validate_ssl),\n          // sandbox: Boolean(data?.payload?.sandbox),\n        });\n\n        setImage([createImage(data?.payload.logo)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    delete values.payment_id;\n    if (activePayment?.label === 'flutter-wave' && !image[0]) {\n      toast.error(t('choose.payload.image'));\n      return;\n    }\n    setLoadingBtn(true);\n    const body = {\n      payment_id: activePayment.value,\n      payload: {\n        ...values,\n        logo: image[0] ? image[0].name : undefined,\n        currency: values.currency?.label || values.currency,\n        paypal_validate_ssl: values?.paypal_validate_ssl\n          ? Number(values.paypal_validate_ssl)\n          : undefined,\n        sandbox: Number(Boolean(values?.sandbox)),\n        demo: values?.demo ? Number(Boolean(values?.demo)) : undefined,\n        sub_merchant_key: values?.sub_merchant_key?.length\n          ? values?.sub_merchant_key\n          : undefined,\n      },\n    };\n\n    paymentPayloadService\n      .update(id, body)\n      .then(() => {\n        const nextUrl = 'payment-payloads';\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchPaymentPayloads({}));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getPayload(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const handleAddIcon = (data) => {\n    switch (data) {\n      case 'Paypal':\n        return <FaPaypal size={80} />;\n      case 'Stripe':\n        return <SiStripe size={80} />;\n      case 'Razorpay':\n        return <SiRazorpay size={80} />;\n      case 'Paystack':\n        return <img src={Paystack} alt='img' width='80' height='80' />;\n      case 'flutter-wave':\n        return <SiFlutter size={80} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card title={t('edit.payment.payloads')} className='h-100'>\n      {!loading ? (\n        <Form\n          name='edit.payment.payloads'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col\n              span={\n                activePayment?.label === 'cash' ||\n                activePayment?.label === 'wallet'\n                  ? 12\n                  : 24\n              }\n            >\n              <Form.Item\n                label={t('payment')}\n                name='payment_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  notFoundContent={\n                    loading ? <Spin size='small' /> : 'no results'\n                  }\n                  allowClear\n                  disabled\n                />\n              </Form.Item>\n            </Col>\n\n            {activePayment?.label === 'cash' ||\n            activePayment?.label === 'wallet' ? (\n              ''\n            ) : (\n              <>\n                <Col\n                  span={24}\n                  className='d-flex justify-content-center mt-4 mb-5'\n                >\n                  {handleAddIcon(activePayment?.label)}\n                </Col>\n\n                {activePayment?.label === 'paystack' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paystack.pk')}\n                        name='paystack_pk'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paystack.sk')}\n                        name='paystack_sk'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>{' '}\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label === 'paypal' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.mode')}\n                        name='paypal_mode'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Select\n                          options={[\n                            { value: 'live', label: t('live') },\n                            { value: 'sandbox', label: t('sandbox') },\n                          ]}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.sandbox.client.id')}\n                        name='paypal_sandbox_client_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.sandbox.client.secret')}\n                        name='paypal_sandbox_client_secret'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.sandbox.app.id')}\n                        name='paypal_sandbox_app_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.live.client.id')}\n                        name='paypal_live_client_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.live.client.secret')}\n                        name='paypal_live_client_secret'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.live.app.id')}\n                        name='paypal_live_app_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.payment.action')}\n                        name='paypal_payment_action'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Select\n                          options={[\n                            { value: 'Sale', label: t('sale') },\n                            { value: 'Order', label: t('order') },\n                            {\n                              value: 'Authorization',\n                              label: t('authorization'),\n                            },\n                          ]}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.currency')}\n                        name='paypal_currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title} (${item.symbol || ''})`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.locale')}\n                        name='paypal_locale'\n                        rules={[{ required: true, message: t('required') }]}\n                        valuePropName='value'\n                      >\n                        <Select\n                          placeholder={t('select.locale')}\n                          defaultValue={{\n                            label: languages.find(\n                              (item) => item.locale === i18n.language,\n                            )?.title,\n                            value: i18n.language,\n                          }}\n                          options={languages?.map((lang) => ({\n                            value: lang.locale,\n                            label: lang.title,\n                          }))}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('paypal.validate.ssl')}\n                        name='paypal_validate_ssl'\n                        valuePropName='checked'\n                      >\n                        <Switch />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label === 'stripe' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('stripe.pk')}\n                        name='stripe_pk'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('stripe.sk')}\n                        name='stripe_sk'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>{' '}\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label === 'razorpay' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('razorpay.key')}\n                        name='razorpay_key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('razorpay.secret')}\n                        name='razorpay_secret'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>{' '}\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label === 'flutter-wave' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('payload.title')}\n                        name='title'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('payload.description')}\n                        name='description'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('flw_pk')}\n                        name='flw_pk'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('flw_sk')}\n                        name='flw_sk'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>{' '}\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('key')}\n                        name='key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={6}>\n                      <Form.Item rules={[{ required: true }]} label={t('logo')}>\n                        <MediaUpload\n                          type='brands'\n                          imageList={image}\n                          setImageList={setImage}\n                          form={form}\n                          multiple={false}\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label.toLowerCase() === 'mollie' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('partner.id')}\n                        name='partner_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('profile.id')}\n                        name='profile_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('secret.key')}\n                        name='secret_key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={6}>\n                      <Form.Item rules={[{ required: true }]} label={t('logo')}>\n                        <MediaUpload\n                          type='brands'\n                          imageList={image}\n                          setImageList={setImage}\n                          form={form}\n                          multiple={false}\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label?.toLowerCase() === 'moya-sar' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('public.key')}\n                        name='public_key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('secret.key')}\n                        name='secret_key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('secret.token')}\n                        name='secret_token'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={6}>\n                      <Form.Item rules={[{ required: true }]} label={t('logo')}>\n                        <MediaUpload\n                          type='brands'\n                          imageList={image}\n                          setImageList={setImage}\n                          form={form}\n                          multiple={false}\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label?.toLowerCase() === 'paytabs' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('server.key')}\n                        name='server_key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('profile.id')}\n                        name='profile_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('client.key')}\n                        name='client_key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label?.toLowerCase() === 'zain-cash' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('url')}\n                        name='url'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('msisdn')}\n                        name='msisdn'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('merchantId')}\n                        name='merchantId'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('key')}\n                        name='key'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label?.toLowerCase() === 'mercado-pago' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('token')}\n                        name='token'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('sandbox')}\n                        name='sandbox'\n                        valuePropName='checked'\n                      >\n                        <Switch />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label?.toLowerCase() === 'maksekeskus' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('shop.id')}\n                        name='shop_id'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('key.publishable')}\n                        name='key_publishable'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('country')}\n                        name='country'\n                        rules={[\n                          {\n                            required: true,\n                            message: t('required'),\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('locale')}\n                        name='locale'\n                        rules={[\n                          {\n                            required: true,\n                            message: t('required'),\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('demo')}\n                        name='demo'\n                        valuePropName='checked'\n                      >\n                        <Switch />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : activePayment?.label?.toLowerCase() === 'iyzico' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        name='api_key'\n                        label={t('api.key')}\n                        rules={[\n                          {\n                            required: true,\n                            message: t('required'),\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        name='secret_key'\n                        label={t('secret.key')}\n                        rules={[\n                          {\n                            required: true,\n                            message: t('required'),\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        name='sub_merchant_key'\n                        label={t('sub.merchant.key')}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('currency')}\n                        name='currency'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <AsyncSelect\n                          placeholder={t('select.currency')}\n                          valuePropName='label'\n                          defaultValue={{\n                            value: defaultCurrency.id,\n                            label: defaultCurrency.title,\n                          }}\n                          fetchOptions={() =>\n                            currencyService.getAll().then(({ data }) => {\n                              return data\n                                .filter((item) => item.active)\n                                .map((item) => ({\n                                  value: item.id,\n                                  label: `${item.title}`,\n                                  key: item.id,\n                                }));\n                            })\n                          }\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('sandbox')}\n                        name='sandbox'\n                        valuePropName='checked'\n                      >\n                        <Switch />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : null}\n              </>\n            )}\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button\n                type='primary'\n                htmlType='submit'\n                loading={loadingBtn}\n                disabled={loadingBtn}\n              >\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default PaymentPayloadEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/payment-payloads/payload-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-edit.js",["5950","5951"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin, Steps } from 'antd';\nimport { IMG_URL } from '../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport { steps } from './steps';\nimport recieptService from '../../services/reciept';\n\nconst { Step } = Steps;\n\nconst RecieptEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const [current, setCurrent] = useState(activeMenu.data?.step || 0);\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n  const [image, setImage] = useState(\n    activeMenu.data?.galleries[0]\n      ? [createImage(activeMenu.data.galleries[0].path)]\n      : []\n  );\n  const [back, setBack] = useState(\n    activeMenu.data?.galleries[1]\n      ? [createImage(activeMenu.data.galleries[1].path)]\n      : []\n  );\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    recieptService\n      .getById(id)\n      .then((res) => {\n        let recept = res.data;\n        form.setFieldsValue({\n          ...recept,\n          title: {\n            [defaultLang]: recept.translation.title,\n          },\n          description: {\n            [defaultLang]: recept.translation.description,\n          },\n          instruction: Object.assign(\n            {},\n            ...recept.instructions.map((ins) => ({\n              [ins.locale]: ins.title,\n            }))\n          ),\n          ingredient: Object.assign(\n            {},\n            ...recept.ingredients.map((ing) => ({\n              [ing.locale]: ing.title,\n            }))\n          ),\n          nutrition: recept.nutritions?.map((nutrition) => ({\n            percentage: nutrition?.percentage?.toString(),\n            weight: nutrition.weight,\n            ...Object.assign(\n              {},\n              ...nutrition.translations.flatMap((translation) => ({\n                [translation.locale]: translation.title,\n              }))\n            ),\n          })),\n          category_id: {\n            value: recept.category.id,\n            label: recept.category.translation?.title,\n          },\n          shop_id: {\n            value: recept.shop.id,\n            label: recept.shop.translation?.title,\n          },\n          stocks: recept.stocks.map((item) => ({\n            stock_id: {\n              value: item.id,\n              label: item?.product?.translation?.title,\n            },\n            ...item,\n          })),\n        });\n        setImage([createImage(recept.galleries[0].path)]);\n        setBack([createImage(recept.galleries[1].path)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const images = [...image, ...back];\n\n  const onFinish = (values) => {\n    form.validateFields();\n    const body = {\n      ...values,\n      category_id: values.category_id.value,\n      images: images.map((img) => img.name),\n      shop_id: values.shop_id.value,\n      active_time: values.active_time.toString(),\n      total_time: values.total_time.toString(),\n      nutrition: values.nutrition.map((item) => ({\n        ...item,\n        percentage: String(item.percentage),\n        weight: String(item.weight),\n      })),\n      stocks: values.stocks?.map((stock) => ({\n        min_quantity: stock.min_quantity,\n        stock_id: stock.stock_id.value,\n      })),\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/recept';\n    recieptService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBox(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.recepe')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n        >\n          <Steps current={current}>\n            {steps.map((item) => (\n              <Step title={t(item.title)} key={item.title} />\n            ))}\n          </Steps>\n          {steps.map((item) => {\n            const Component = item.content;\n            return (\n              <div\n                key={item.title}\n                className={`steps-content ${\n                  item.step !== current + 1 && 'hidden'\n                }`}\n              >\n                <Component\n                  next={next}\n                  prev={prev}\n                  loading={loadingBtn}\n                  image={image}\n                  setImage={setImage}\n                  back={back}\n                  setBack={setBack}\n                />\n              </div>\n            );\n          })}\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default RecieptEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-add.js",["5952"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Steps } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\n\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport { steps } from './steps';\nimport recieptService from '../../services/reciept';\nimport { IMG_URL } from 'configs/app-global';\n\nconst { Step } = Steps;\n\nconst ReceptAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n  const [image, setImage] = useState(\n    activeMenu.data?.galleries?.[0]\n      ? [createImage(activeMenu.data?.galleries?.[0].path)]\n      : []\n  );\n  const [back, setBack] = useState(\n    activeMenu.data?.galleries?.[1]\n      ? [createImage(activeMenu.data?.galleries?.[1].path)]\n      : []\n  );\n  const images = [...image, ...back];\n\n  const [current, setCurrent] = useState(activeMenu.data?.step || 0);\n\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    form.validateFields();\n    const body = {\n      ...values,\n      images: images.map((img) => img.name),\n      category_id: values.category_id.value,\n      shop_id: values.shop_id.value,\n      active_time: values.active_time.toString(),\n      total_time: values.total_time.toString(),\n      nutrition: values.nutrition.map((item) => ({\n        ...item,\n        percentage: String(item.percentage),\n        weight: String(item.weight),\n      })),\n      stocks: values.stocks?.map((stock) => ({\n        min_quantity: stock.min_quantity,\n        stock_id: stock.stock_id.value,\n      })),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/recept';\n    recieptService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.recepe')} extra={<LanguageList />}>\n      <Form\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Steps current={current}>\n          {steps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n        {steps.map((item) => {\n          const Component = item.content;\n          return (\n            <div\n              key={item.title}\n              className={`steps-content ${\n                item.step !== current + 1 && 'hidden'\n              }`}\n            >\n              <Component\n                next={next}\n                prev={prev}\n                loading={loadingBtn}\n                image={image}\n                setImage={setImage}\n                back={back}\n                setBack={setBack}\n              />\n            </div>\n          );\n        })}\n      </Form>\n    </Card>\n  );\n};\n\nexport default ReceptAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-clone.js",["5953","5954"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport { fetchRecipeCategories } from '../../redux/slices/recipe-category';\n\nconst RecipeCategoryClone = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const { uuid } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'receipt',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: null,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/recipe-categories';\n\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchRecipeCategories());\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('recipe.category.clone')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2'))\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 5) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.5'))\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image?.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default RecipeCategoryClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-edit.js",["5955","5956","5957"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport { fetchRecipeCategories } from '../../redux/slices/recipe-category';\n\nconst RecipeCategoryEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const locations = useLocation();\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.category, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'receipt',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: null,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/recipe-categories';\n    if (locations.state === 'edit') {\n      categoryService\n        .update(uuid, body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchRecipeCategories());\n          navigate(`/${nextUrl}`);\n        })\n        .catch((err) => setError(err.response.data.params))\n        .finally(() => setLoadingBtn(false));\n    } else {\n      categoryService\n        .create(body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchRecipeCategories());\n          navigate(`/${nextUrl}`);\n        })\n        .catch((err) => setError(err.response.data.params))\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.category')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2'))\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 5) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.5'))\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image?.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default RecipeCategoryEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/category-add.js",["5958"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport LanguageList from '../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport { fetchRecipeCategories } from '../../redux/slices/recipe-category';\n\nconst RecipeCategoryAdd = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'receipt',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: null,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'catalog/recipe-categories';\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(fetchRecipeCategories());\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.category')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          parent_id: { title: '---', value: 0, key: 0 },\n          active: true,\n          ...activeMenu.data,\n        }}\n        form={form}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.title + index}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                help={\n                  error\n                    ? error[`title.${defaultLang}`]\n                      ? error[`title.${defaultLang}`][0]\n                      : null\n                    : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('name')} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.locale + index}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 5) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.5'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={4} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('keywords')}\n              name='keywords'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select mode='tags' style={{ width: '100%' }}></Select>\n            </Form.Item>\n          </Col>\n\n          <Col span={4}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  validator() {\n                    if (image?.length === 0) {\n                      return Promise.reject(new Error(t('required')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <MediaUpload\n                type='categories'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={2}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default RecipeCategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/refund/refund-details.js",["5959","5960","5961"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  Table,\n  Image,\n  Tag,\n  Button,\n  Space,\n  Row,\n  Col,\n  Avatar,\n  Typography,\n  Skeleton,\n  Spin,\n  Badge,\n  Steps,\n  Divider,\n} from 'antd';\nimport { CalendarOutlined, EditOutlined } from '@ant-design/icons';\nimport { Link, useParams } from 'react-router-dom';\nimport getImage from 'helpers/getImage';\nimport { shallowEqual, useDispatch, useSelector, batch } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport OrderStatusModal from './status-modal';\n\nimport { fetchDeliverymans } from 'redux/slices/deliveryman';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { fetchOrderStatus } from 'redux/slices/orderStatus';\nimport { MdEmail } from 'react-icons/md';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport { IMG_URL } from 'configs/app-global';\nimport { BsCalendarDay, BsFillTelephoneFill } from 'react-icons/bs';\nimport { BiMessageDots, BiMoney } from 'react-icons/bi';\nimport moment from 'moment';\nimport { useRef } from 'react';\nimport refundService from 'services/refund';\nimport hideEmail from 'components/hideEmail';\nimport hideNumber from 'components/hideNumber';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\nconst status = ['pending', 'accepted', 'canceled'];\n\nexport default function OrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n\n  const data = activeMenu?.data?.order;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const productListRef = useRef();\n  const totalPriceRef = useRef();\n\n  const [loading, setLoading] = useState(false);\n  const [orderDetails, setOrderDetails] = useState(null);\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const shops = data?.details?.flatMap((detail) => detail?.shop);\n  const products = data?.details;\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => row.stock?.product_id,\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => row.stock?.product?.translation?.title,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row.stock?.product?.img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'origin_price',\n      key: 'origin_price',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'discount',\n      key: 'discount',\n      render: (_, row) => numberToPrice(row?.stock?.discount),\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (tax, row) =>\n        numberToPrice(row?.stock?.tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.total_price, defaultCurrency?.symbol),\n    },\n  ];\n\n  const documentColumns = [\n    {\n      title: t('date'),\n      dataIndex: 'date',\n      key: 'date',\n    },\n    {\n      title: t('document'),\n      dataIndex: 'document',\n      key: 'document',\n    },\n    {\n      title: t('number'),\n      dataIndex: 'number',\n      key: 'number',\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'price',\n      key: 'price',\n    },\n  ];\n\n  const documents = [\n    {\n      price: numberToPrice(data?.total_price, defaultCurrency?.symbol),\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('invoice'),\n      date: data?.delivery_date,\n    },\n    {\n      price: '-',\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('delivery.receipt'),\n      date: data?.delivery_date,\n    },\n  ];\n\n  const handleCloseModal = () => setOrderDetails(null);\n\n  function fetchOrder() {\n    setLoading(true);\n    refundService\n      .getById(id)\n      .then(({ data }) => {\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n      batch(() => {\n        dispatch(fetchOrderStatus({}));\n        dispatch(fetchDeliverymans({}));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.user?.firstname}{' '}\n            {data?.user?.lastname || ''}\n          </>\n        }\n        extra={\n          data?.status !== 'delivered' && data?.status !== 'canceled' ? (\n            <Space>\n              {data?.status !== 'delivered' && data?.status !== 'canceled' ? (\n                <Button type='primary' onClick={() => setOrderDetails(data)}>\n                  {t('change.status')}\n                </Button>\n              ) : null}\n            </Space>\n          ) : (\n            ''\n          )\n        }\n      />\n\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='justify-content-between w-100'>\n              <Space className='align-items-start'>\n                <CalendarOutlined className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('delivery.date')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.delivery_date} {data?.delivery_time}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  totalPriceRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <BiMoney className='order-card-icon' />\n\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('total.price')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} loading={loading} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {numberToPrice(\n                        data?.total_price,\n                        defaultCurrency?.symbol,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMessageDots className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('messages')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.review ? 1 : 0}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  productListRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <FiShoppingCart className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('products')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.details?.reduce(\n                        (total, item) => (total += item.quantity),\n                        0,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n            </Space>\n          </Card>\n        </Col>\n        {data?.status !== 'canceled' && (\n          <Col span={24}>\n            <Card>\n              <Steps\n                current={statusList?.findIndex(\n                  (item) => item.name === data?.status,\n                )}\n              >\n                {statusList?.slice(0, -1).map((item) => (\n                  <Steps.Step key={item.id} title={t(item.name)} />\n                ))}\n              </Steps>\n            </Card>\n          </Col>\n        )}\n        <Col span={16}>\n          <Spin spinning={loading}>\n            <Card style={{ minHeight: '200px' }}>\n              <h3>{t('details')}:</h3>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <div>\n                    {t('created.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' />{' '}\n                      {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}{' '}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' /> {data?.delivery_date}{' '}\n                      {data?.delivery_time}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.status')}:\n                    <span className='ml-2'>{t(data?.transaction?.status)}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('cause')}:\n                    <span className='ml-2' style={{ color: 'red' }}>\n                      {activeMenu.data?.cause}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('answer')}:\n                    <span className='ml-2'>\n                      {activeMenu.data?.answer ?? t('no.answer')}\n                    </span>\n                  </div>\n                </Col>\n                <Col span={12}>\n                  <div>\n                    {t('status')}:\n                    <span className='ml-2'>\n                      {activeMenu.data?.status === 'pending' ? (\n                        <Tag color='blue'>{t(activeMenu.data?.status)}</Tag>\n                      ) : activeMenu.data?.status === 'canceled' ? (\n                        <Tag color='error'>{t(activeMenu.data?.status)}</Tag>\n                      ) : (\n                        <Tag color='cyan'>{t(activeMenu.data?.status)}</Tag>\n                      )}\n                      {activeMenu.data?.status !== 'canceled' &&\n                        activeMenu.data?.status !== 'accepted' && (\n                          <EditOutlined\n                            onClick={() => setOrderDetails(activeMenu?.data)}\n                          />\n                        )}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.type')}:\n                    <span className='ml-2'>{data?.delivery_type}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.type')}:\n                    <span className='ml-2'>\n                      {t(data?.transaction?.payment_system?.tag)}\n                    </span>\n                  </div>\n                  <br />\n                </Col>\n              </Row>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <h3>{t('delivery.address')}:</h3>\n                  <div>\n                    {data?.delivery_type === 'delivery' ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.my_address?.street_house_number ??\n                            t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.my_address?.zipcode ?? t('not.given')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'point' ? (\n                      <>\n                        <div>\n                          {t('address')}:{' '}\n                          {data?.delivery_point?.address?.[defaultLang] ??\n                            t('no.address')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'digital' ? (\n                      <div>{t('digital.delivery')}</div>\n                    ) : (\n                      <div>{t('no.address')}</div>\n                    )}\n                  </div>\n                </Col>\n              </Row>\n            </Card>\n          </Spin>\n          <Card title={t('documents')}>\n            <Table\n              columns={documentColumns}\n              dataSource={documents || []}\n              pagination={false}\n              loading={loading}\n            />\n          </Card>\n          <Card className='w-100 order-table'>\n            <Table\n              ref={productListRef}\n              scroll={{ x: true }}\n              columns={columns}\n              dataSource={products || []}\n              loading={loading}\n              rowKey={(record) => record.id}\n              pagination={false}\n            />\n            <Space\n              size={100}\n              className='d-flex justify-content-end w-100 order-table__summary'\n            >\n              <div>\n                <span>{t('delivery.fee')}:</span>\n                <br />\n                <span>{t('order.tax')}:</span>\n                <br />\n                <span>{t('product')}:</span>\n                <br />\n                <span>{t('coupon')}:</span>\n                <br />\n                <span>{t('discount')}:</span>\n                <br />\n                <h3>{t('total.price')}:</h3>\n              </div>\n              <div>\n                <span>\n                  {numberToPrice(data?.delivery_fee, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>{numberToPrice(data?.tax, defaultCurrency?.symbol)}</span>\n                <br />\n                <span>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.coupon?.price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.total_discount, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <h3 ref={totalPriceRef}>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </div>\n            </Space>\n          </Card>\n        </Col>\n        <Col span={8} className='order_info'>\n          {data?.status === 'ready' && data?.delivery_type !== 'pickup' && (\n            <Card\n              title={t('deliveryman')}\n              extra={\n                data?.status === 'ready' &&\n                data?.delivery_type !== 'pickup' && (\n                  <Button>\n                    {t('change')}\n                    <EditOutlined />\n                  </Button>\n                )\n              }\n            >\n              {data?.deliveryman && (\n                <Space>\n                  <Avatar\n                    shape='square'\n                    size={64}\n                    src={IMG_URL + data?.deliveryman?.img}\n                  />\n                  <div>\n                    <h5>\n                      {data?.deliveryman?.firstname}{' '}\n                      {data?.deliveryman?.lastname || ''}\n                    </h5>\n                    <span className='delivery-info'>\n                      <BsFillTelephoneFill />\n                      {data?.deliveryman?.phone}\n                    </span>\n\n                    <div className='delivery-info'>\n                      <b>\n                        <MdEmail size={16} />\n                      </b>\n                      <span>{data?.deliveryman?.email}</span>\n                    </div>\n                  </div>\n                </Space>\n              )}\n            </Card>\n          )}\n\n          <Card title={<Space>{t('customer.info')}</Space>}>\n            <div className='d-flex w-100 customer-info-container'>\n              {loading ? (\n                <Skeleton.Avatar size={64} shape='square' />\n              ) : (\n                <Avatar\n                  shape='square'\n                  size={64}\n                  src={IMG_URL + data?.user?.img}\n                />\n              )}\n\n              <h5 className='customer-name'>\n                {loading ? (\n                  <Skeleton.Button size={20} style={{ width: 70 }} />\n                ) : (\n                  data?.user?.firstname + ' ' + (data?.user?.lastname || '')\n                )}\n              </h5>\n\n              <Row gutter={12}>\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'flex-start',\n                    columnGap: '15px',\n                  }}\n                >\n                  <h4>{t('phone')}:</h4>\n                  <h5>\n                    <BsFillTelephoneFill />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : ' ' + data?.user?.phone ? (\n                      ReactAppIsDemo ? (\n                        hideNumber(data?.user?.phone)\n                      ) : (\n                        data?.user?.phone\n                      )\n                    ) : (\n                      t('none')\n                    )}\n                  </h5>\n                </Col>\n\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'flex-start',\n                    columnGap: '15px',\n                  }}\n                >\n                  <h4>{t('email')}:</h4>\n                  <h5>\n                    <MdEmail />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : ' ' + data?.user?.email ? (\n                      ReactAppIsDemo ? (\n                        hideEmail(data?.user?.email)\n                      ) : (\n                        data?.user?.email\n                      )\n                    ) : (\n                      'none'\n                    )}\n                  </h5>\n                </Col>\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'flex-start',\n                    columnGap: '15px',\n                  }}\n                >\n                  <h4>{t('registration.date')}:</h4>\n                  <h5>\n                    <BsCalendarDay />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      ' ' +\n                      moment(data?.user?.created_at).format('DD-MM-YYYY, HH:mm')\n                    )}\n                  </h5>\n                </Col>\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'flex-start',\n                    columnGap: '15px',\n                  }}\n                >\n                  <h4>{t('orders.count')}:</h4>\n                  <h5>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#3d7de3' }}\n                        count={data?.user?.o_count || 0}\n                      />\n                    )}\n                  </h5>\n                </Col>\n                <Col\n                  span={24}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'flex-start',\n                    columnGap: '15px',\n                  }}\n                >\n                  <h4>{t('spent.since.registration')}:</h4>\n                  <h5>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#48e33d' }}\n                        count={numberToPrice(\n                          data?.user?.o_sum,\n                          defaultCurrency?.symbol,\n                        )}\n                      />\n                    )}\n                  </h5>\n                </Col>\n              </Row>\n            </div>\n          </Card>\n          {data?.review && !loading && (\n            <Card title={t('messages')}>\n              <div className='order-message'>\n                <span className='message'>{data?.review.comment}</span>\n                <Space className='w-100 justify-content-end'>\n                  <span className='date'>\n                    {moment(data?.review.created_at).format('YYYY-MM-DD hh:mm')}\n                  </span>\n                </Space>\n              </div>\n            </Card>\n          )}\n          <Card title={t('store.information')}>\n            {loading ? (\n              <Skeleton avatar shape='square' paragraph={{ rows: 2 }} />\n            ) : (\n              <>\n                <Space className='w-100'>\n                  <Avatar\n                    shape='square'\n                    size={64}\n                    src={IMG_URL + data?.shop?.logo_img}\n                  />\n                  <div>\n                    <h5>{data?.shop?.translation.title}</h5>\n                    <div className='delivery-info'>\n                      <b>\n                        <BsFillTelephoneFill />\n                      </b>\n                      <span>{data?.shop?.phone}</span>\n                    </div>\n                  </div>\n                </Space>\n              </>\n            )}\n          </Card>\n        </Col>\n      </Row>\n      {orderDetails && (\n        <OrderStatusModal\n          orderDetails={orderDetails}\n          handleCancel={handleCloseModal}\n          status={status}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-clone.js",["5962"],[],"import React, { useState, useEffect } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport { steps } from './steps';\nimport { Card, Steps } from 'antd';\nimport UserEdit from './user';\nimport { useQueryParams } from '../../helpers/useQueryParams';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport restaurantService from '../../services/restaurant';\nimport { useParams } from 'react-router-dom';\nimport { IMG_URL } from '../../configs/app-global';\nimport Loading from '../../components/loading';\nimport RestaurantMain from './main';\nimport RestaurantDelivery from './restaurantDelivery';\nimport Map from '../../components/shop/map';\nconst { Step } = Steps;\n\nconst RestaurantClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  const fetchRestaurant = (uuid) => {\n    setLoading(true);\n    restaurantService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          logo_img: createImages(res.data.logo_img),\n          background_img: createImages(res.data.background_img),\n          user: '',\n          delivery_time_from: res.data?.delivery_time.from,\n          delivery_time_to: res.data?.delivery_time.to,\n          delivery_time_type: res.data?.delivery_time.type,\n          recommended: res.data.mark === 'recommended',\n          categories: res.data?.categories.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          tags: res.data?.tags.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const createImages = (items) => {\n    return {\n      items,\n      uid: items,\n      url: IMG_URL + items,\n      name: items,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch && uuid) {\n      fetchRestaurant(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('restaurant.clone')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <RestaurantMain next={next} loading={loading} user={false} />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <Map next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <RestaurantDelivery next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Four-content' && (\n            <UserEdit next={next} prev={prev} />\n          )}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\nexport default RestaurantClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-edit.js",["5963"],[],"import React, { useState, useEffect } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport { steps } from './steps';\nimport { Card, Steps } from 'antd';\nimport UserEdit from './user';\nimport { useQueryParams } from '../../helpers/useQueryParams';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport restaurantService from '../../services/restaurant';\nimport { useParams } from 'react-router-dom';\nimport Loading from '../../components/loading';\nimport RestaurantMain from './main';\nimport RestaurantDelivery from './restaurantDelivery';\nimport Map from '../../components/shop/map';\nconst { Step } = Steps;\n\nconst RestaurantEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  const fetchRestaurant = (uuid) => {\n    setLoading(true);\n    restaurantService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          logo_img: createImages(res.data.logo_img),\n          background_img: createImages(res.data.background_img),\n          user: {\n            label: res.data.seller.firstname + ' ' + res.data.seller.lastname,\n            value: res.data.seller.id,\n          },\n          delivery_time_from: res.data?.delivery_time.from,\n          delivery_time_to: res.data?.delivery_time.to,\n          delivery_time_type: res.data?.delivery_time.type,\n          recommended: res.data.mark === 'recommended',\n          categories: res.data?.categories?.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          tags: res.data?.tags.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const createImages = (items) => {\n    return {\n      items,\n      uid: items,\n      url: items,\n      name: items,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch && uuid) {\n      fetchRestaurant(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('restaurant.edit')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <RestaurantMain\n              next={next}\n              loading={loading}\n              action_type={'edit'}\n              user={true}\n            />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <Map next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <RestaurantDelivery next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Four-content' && (\n            <UserEdit next={next} prev={prev} />\n          )}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\nexport default RestaurantEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-orders/index.js",["5964"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Space, Table, Card, Tabs, Tag, DatePicker } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  ClearOutlined,\n  DeleteOutlined,\n  DownloadOutlined,\n  EditOutlined,\n  EyeOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { DebounceSelect } from '../../components/search';\n\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { fetchOrders } from '../../redux/slices/orders';\nimport formatSortType from '../../helpers/formatSortType';\nimport SearchInput from '../../components/search-input';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport OrderStatusModal from '../order/orderStatusModal';\nimport OrderDeliveryman from '../order/orderDeliveryman';\nimport FilterColumns from '../../components/filter-column';\nimport { BiMap } from 'react-icons/bi';\nimport ShowLocationsMap from '../order/show-locations.map';\nimport DownloadModal from '../order/downloadModal';\nimport { toast } from 'react-toastify';\nimport DeleteButton from '../../components/delete-button';\nimport orderService from '../../services/order';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { export_url } from '../../configs/app-global';\nimport Loading from '../../components/loading';\nimport DeliveryStatistic from '../../components/delivery-statistic';\nimport deliveryService from '../../services/delivery';\nimport moment from 'moment';\nconst { RangePicker } = DatePicker;\nconst { TabPane } = Tabs;\n\nexport default function DeliveryOrder() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [orderDetails, setOrderDetails] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [dowloadModal, setDowloadModal] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const statuses = [\n    { id: 7, name: 'all' },\n    { id: 8, name: 'un_assigned_order' },\n    { id: 3, name: 'ready' },\n    { id: 4, name: 'on_a_way' },\n    { id: 5, name: 'delivered' },\n    { id: 6, name: 'canceled' },\n  ];\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      })\n    );\n    navigate(`/order/details/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (user) => (\n        <div>\n          {user?.firstname} {user?.lastname}\n        </div>\n      ),\n    },\n    {\n      title: t('number.of.products'),\n      is_show: true,\n      dataIndex: 'order_details_count',\n      key: 'order_details_count',\n      render: (order_details_count) => (\n        <div className='text-lowercase'>\n          {order_details_count || 0} {t('products')}\n        </div>\n      ),\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {status !== 'delivered' && status !== 'canceled' ? (\n            <EditOutlined onClick={() => setOrderDetails(row)} />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      is_show: true,\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      render: (deliveryman, row) => (\n        <div>\n          {row.status === 'ready' && row.delivery_type !== 'pickup' ? (\n            <Button type='link' onClick={() => setOrderDeliveryDetails(row)}>\n              <Space>\n                {deliveryman\n                  ? `${deliveryman.firstname} ${deliveryman.lastname}`\n                  : t('add.deliveryman')}\n                <EditOutlined />\n              </Space>\n            </Button>\n          ) : (\n            <div>\n              {deliveryman?.firstname} {deliveryman?.lastname}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('amount'),\n      is_show: true,\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price) =>\n        numberToPrice(total_price, defaultCurrency.symbol),\n    },\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button icon={<BiMap />} onClick={() => setLocationsMap(row.id)} />\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n            <Button\n              icon={<DownloadOutlined />}\n              onClick={() => setDowloadModal(row.id)}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [downloading, setDownloading] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const immutable = activeMenu.data?.role || role;\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const { orders, meta, loading, params, statistic } = useSelector(\n    (state) => state.orders,\n    shallowEqual\n  );\n  const data = activeMenu?.data;\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    orderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchOrders());\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search: data?.search,\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n      deliveryman: data?.deliveryman?.value,\n      date_from: data?.date_from,\n      date_to: data?.date_to,\n      status: data?.status === 'un_assigned_order' ? undefined : data?.status,\n      'isset-deliveryman': data?.status === 'un_assigned_order' ? 1 : 0,\n    };\n    dispatch(fetchOrders(paramsData));\n  }, [activeMenu?.data]);\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    orderService\n      .export()\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const handleCloseModal = () => {\n    setOrderDetails(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n    setDowloadModal(null);\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      const params = {\n        status: data?.status,\n        page: data?.page,\n        perPage: 10,\n        type: 'delivery',\n      };\n      dispatch(fetchOrders(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilterDate = (item) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: {\n          ...data,\n          date_from: item\n            ? moment(item?.[0]).format('YYYY-MM-DD').toString()\n            : undefined,\n          date_to: item\n            ? moment(item?.[1]).format('YYYY-MM-DD').toString()\n            : undefined,\n        },\n      })\n    );\n  };\n\n  const fetchDeliveryMan = (search) => {\n    const data = { search };\n    return deliveryService.getAll(data).then((res) =>\n      res.data.map((item) => ({\n        label: item.firstname + ' ' + item.lastname,\n        value: item.id,\n      }))\n    );\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <div>\n        {loading ? (\n          <Loading />\n        ) : (\n          <DeliveryStatistic data={statistic} orders={orders} />\n        )}\n      </div>\n      <Card className='p-0'>\n        <Space wrap size={[12, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <RangePicker\n            format='YYYY-MM-DD'\n            onChange={(e) => handleFilterDate(e)}\n            // value={[\n            //   moment(activeMenu.data?.date_from),\n            //   moment(activeMenu.data?.date_to),\n            // ]}\n          />\n          <DebounceSelect\n            className='w-100'\n            debounceTimeout={500}\n            placeholder={t('select.deliveryman')}\n            fetchOptions={fetchDeliveryMan}\n            allowClear={true}\n            onChange={(value) => handleFilter({ deliveryman: value })}\n            value={activeMenu.data?.deliveryman}\n          />\n          <Button onClick={excelExport} loading={downloading}>\n            <UploadOutlined />\n            {t('export')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            icon={<ClearOutlined />}\n            onClick={handleClear}\n            disabled={!activeMenu.data}\n            style={{ minWidth: 100 }}\n          />\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      </Card>\n      <Card title={t('orders')}>\n        <Tabs\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n          activeKey={immutable}\n        >\n          {statuses.map((item) => (\n            <TabPane tab={t(item.name)} key={item.name} />\n          ))}\n        </Tabs>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={orders}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: params.page,\n            total: meta.total,\n            defaultCurrent: params.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n\n      <CustomModal\n        click={orderDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n\n      {orderDetails && (\n        <OrderStatusModal\n          orderDetails={orderDetails}\n          handleCancel={handleCloseModal}\n          status={statuses}\n        />\n      )}\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {dowloadModal && (\n        <DownloadModal id={dowloadModal} handleCancel={handleCloseModal} />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/parcelReviews.js",["5965","5966"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { DeleteOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from '../../services/review';\nimport { fetchParcelReviews } from '../../redux/slices/parcelReview';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport ParcelReviewShowModal from './parcelReviewShow';\n\nexport default function OrderReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToDetail = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      })\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const goToShop = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-shop',\n        url: `shop/${row.uuid}`,\n        name: t('edit.shop'),\n      })\n    );\n    navigate(`/shop/${row.uuid}`);\n  };\n\n  const goToOrder = (id) => {\n    dispatch(\n      addMenu({\n        id: 'order_details',\n        url: `order/details/${id}`,\n        name: t('order.details'),\n      })\n    );\n    navigate(`/order/details/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('order.id'),\n      dataIndex: 'parcel_order',\n      key: 'parcel_order',\n      render: (parcel_order) => (\n        <div className='text-hover' onClick={() => goToOrder(parcel_order.id)}>\n          #{parcel_order.id}\n        </div>\n      ),\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToDetail(user)}>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToDetail(user)}>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.parcelReview,\n    shallowEqual\n  );\n\n  console.log('reviews => ', reviews);\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchParcelReviews());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchParcelReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchParcelReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } })\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('parcel.reviews')}\n      extra={\n        <Space wrap>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <ParcelReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/deliveryBoyReviews.js",["5967"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { DeleteOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from 'services/review';\nimport OrderReviewShowModal from './orderReviewShow';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport { fetchDeliveryboyReviews } from 'redux/slices/deliveryboyReview';\n\nexport default function DeliveryBoyReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToDetail = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (assign_user) => (\n        <div className='text-hover' onClick={() => goToDetail(assign_user)}>\n          {assign_user?.firstname} {assign_user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToDetail(user)}>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate allowHalf disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.deliveryboyReview,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    assign: 'deliveryman',\n  };\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchDeliveryboyReviews());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchDeliveryboyReviews(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchDeliveryboyReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('deliveryboy.reviews')}\n      extra={\n        <Space wrap>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <OrderReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/productReviews.js",["5968"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { DeleteOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from '../../services/review';\nimport { fetchProductReviews } from '../../redux/slices/productReview';\nimport ProductReviewShowModal from './productReviewShow';\nimport { useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\n\nexport default function ProductReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToDetail = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const goToProduct = (row) => {\n    dispatch(\n      addMenu({\n        id: `product-edit`,\n        url: `product/${row.uuid}`,\n        name: t('edit.product'),\n      }),\n    );\n    navigate(`/product/${row.uuid}`);\n  };\n\n  const goToShop = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-shop',\n        url: `shop/${row.uuid}`,\n        name: t('edit.shop'),\n      }),\n    );\n    navigate(`/shop/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToDetail(user)}>\n          {user?.firstname || ''} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (shop) => (\n        <div className='text-hover' onClick={() => goToShop(shop)}>\n          {shop?.translation?.title}\n        </div>\n      ),\n    },\n    {\n      title: t('product'),\n      dataIndex: 'product',\n      key: 'product',\n      is_show: true,\n      render: (product) => (\n        <div className='text-hover' onClick={() => goToProduct(product)}>\n          {product?.translation?.title}\n        </div>\n      ),\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.productReview,\n    shallowEqual,\n  );\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchProductReviews());\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchProductReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchProductReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('product.reviews')}\n      extra={\n        <Space wrap>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params?.perPage,\n          page: params?.page,\n          total: meta?.total,\n          defaultCurrent: params?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <ProductReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/orderReviews.js",["5969"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { DeleteOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from '../../services/review';\nimport { fetchOrderReviews } from '../../redux/slices/orderReview';\nimport OrderReviewShowModal from './orderReviewShow';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\n\nexport default function OrderReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToDetail = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      })\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const goToShop = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-shop',\n        url: `shop/${row.uuid}`,\n        name: t('edit.shop'),\n      })\n    );\n    navigate(`/shop/${row.uuid}`);\n  };\n\n  const goToOrder = (id) => {\n    dispatch(\n      addMenu({\n        id: 'order_details',\n        url: `order/details/${id}`,\n        name: t('order.details'),\n      })\n    );\n    navigate(`/order/details/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('order.id'),\n      dataIndex: 'order',\n      key: 'order',\n      render: (order) => (\n        <div className='text-hover' onClick={() => goToOrder(order.id)}>\n          #{order.id}\n        </div>\n      ),\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToDetail(user)}>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (shop) => {\n        return (\n          <div className='text-hover' onClick={() => goToShop(shop)}>\n            {shop?.translation?.title}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.orderReview,\n    shallowEqual\n  );\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchOrderReviews());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchOrderReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchOrderReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } })\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('order.reviews')}\n      extra={\n        <Space wrap>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <OrderReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/currencies/index.js",["5970"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport currencyService from '../../services/currency';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../redux/slices/menu';\nimport { fetchCurrencies } from '../../redux/slices/currency';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from '../../components/filter-column';\nimport DeleteButton from '../../components/delete-button';\nimport useDidUpdate from '../../helpers/useDidUpdate';\n\nconst Currencies = () => {\n  const { t } = useTranslation();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { currencies, loading } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `currency/${row.id}`,\n        id: 'currency_edit',\n        name: t('edit.currency'),\n      })\n    );\n    navigate(`/currency/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n    },\n    {\n      title: t('symbol'),\n      dataIndex: 'symbol',\n      key: 'symbol',\n      is_show: true,\n    },\n    {\n      title: t('rate'),\n      dataIndex: 'rate',\n      key: 'rate',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n\n            {row.default ? (\n              ''\n            ) : (\n              <DeleteButton\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  setId([row.id]);\n                  setIsModalVisible(true);\n                  setText(true);\n                }}\n              />\n            )}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const deleteCurrency = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    currencyService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchCurrencies());\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      status: data?.role || 'published',\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchCurrencies(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    const data = activeMenu.data;\n    const params = {\n      status: data?.role || 'published',\n    };\n    if (activeMenu.refetch) {\n      dispatch(fetchCurrencies(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add-currencies',\n        url: `currency/add`,\n        name: t('add.currency'),\n      })\n    );\n    navigate(`/currency/add`);\n  };\n\n  return (\n    <Card\n      title={t('currencies')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.currency')}\n          </Button>\n          <DeleteButton onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={currencies}\n        rowKey={(record) => record.id}\n        loading={loading}\n        pagination={false}\n      />\n      <CustomModal\n        click={deleteCurrency}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n};\n\nexport default Currencies;\n","/home/mostafa/Magde/new/frontadminreact/src/views/faq/index.js",["5971","5972"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport GlobalContainer from '../../components/global-container';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport faqService from '../../services/faq';\nimport { fetchFaqs } from '../../redux/slices/faq';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport moment from 'moment';\n\nexport default function FAQ() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `faq/${row.uuid}`,\n        id: `faq_${row.uuid}`,\n        name: t('edit.faq'),\n      }),\n    );\n    navigate(`/faq/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('question'),\n      dataIndex: 'translation',\n      key: 'translation',\n      is_show: true,\n      render: (translation) => translation?.question,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active, row) => (\n        <Switch\n          checked={active}\n          onChange={() => {\n            setId(row.uuid);\n            setIsDelete(false);\n            setIsModalVisible(true);\n          }}\n        />\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.uuid]);\n                setIsDelete(true);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [isDelete, setIsDelete] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { faqs, meta, loading, params } = useSelector(\n    (state) => state.faq,\n    shallowEqual,\n  );\n\n  const faqDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    faqService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchFaqs());\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const faqSetActive = () => {\n    setLoadingBtn(true);\n    faqService\n      .setActive(id)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchFaqs());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchFaqs());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchFaqs(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.faq',\n        url: `faq/add`,\n        name: t('add.faq'),\n      }),\n    );\n    navigate(`/faq/add`);\n  };\n\n  return (\n    <Card\n      title={t('faqs')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.faq')}\n          </Button>\n          <DeleteButton\n            className=''\n            type='danger'\n            onClick={() => {\n              allDelete();\n              setIsDelete(true);\n            }}\n          >\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={faqs}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record?.uuid}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={isDelete ? faqDelete : faqSetActive}\n        text={\n          !isDelete\n            ? t('set.active.faq')\n            : text\n            ? t('delete')\n            : t('delete.selected')\n        }\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/socialSettings.js",["5973","5974"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport settingService from '../../services/settings';\nimport { toast } from 'react-toastify';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchSettings as getSettings } from '../../redux/slices/globalSettings';\nimport Loading from '../../components/loading';\n\nexport default function SocialSettings() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createSettings = (list) => {\n    const result = list.map((item) => ({\n      [item.key]: item.value,\n    }));\n    return Object.assign({}, ...result);\n  };\n\n  function fetchSettings() {\n    setLoading(true);\n    settingService\n      .get()\n      .then((res) => {\n        const data = createSettings(res.data);\n        form.setFieldsValue(data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSettings();\n    }\n  }, [activeMenu.refetch]);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    updateSettings(values);\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{ ...activeMenu.data }}\n    >\n      {!loading ? (\n        <Card\n          title={t('social.settings')}\n          extra={\n            <Button\n              type='primary'\n              onClick={() => form.submit()}\n              loading={loadingBtn}\n            >\n              {t('save')}\n            </Button>\n          }\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={'Instagram'}\n                name='instagram'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Facebook'}\n                name='facebook'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Twitter'}\n                name='twitter'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n    </Form>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/app-setting.js",["5975","5976"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport settingService from '../../services/settings';\nimport { toast } from 'react-toastify';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchSettings as getSettings } from '../../redux/slices/globalSettings';\nimport Loading from '../../components/loading';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function AppSettings() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { isDemo } = useDemo();\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createSettings = (list) => {\n    const result = list.map((item) => ({\n      [item.key]: item.value,\n    }));\n    return Object.assign({}, ...result);\n  };\n\n  function fetchSettings() {\n    setLoading(true);\n    settingService\n      .get()\n      .then((res) => {\n        const data = createSettings(res.data);\n        form.setFieldsValue(data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSettings();\n    }\n  }, [activeMenu.refetch]);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    updateSettings(values);\n  };\n\n  const handleClick = () => {\n    if (isDemo) {\n      toast.warning(t('cannot.work.demo'));\n      return;\n    }\n    form.submit();\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{ ...activeMenu.data }}\n    >\n      {!loading ? (\n        <Card\n          title={t('social.settings')}\n          extra={\n            <Button\n              type='primary'\n              onClick={() => handleClick()}\n              loading={loadingBtn}\n            >\n              {t('save')}\n            </Button>\n          }\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={'Vendor App IOS'}\n                name='vendor_app_ios'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Vendor App Android'}\n                name='vendor_app_android'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={'Delivery App IOS'}\n                name='delivery_app_ios'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Delivery App Android'}\n                name='delivery_app_android'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={'Customer App IOS'}\n                name='customer_app_ios'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Customer App Android'}\n                name='customer_app_android'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n    </Form>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/firebaseConfig.js",["5977","5978"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport settingService from '../../services/settings';\nimport { toast } from 'react-toastify';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchSettings as getSettings } from '../../redux/slices/globalSettings';\nimport Loading from '../../components/loading';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function FirebaseConfig() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { isDemo } = useDemo();\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createSettings = (list) => {\n    const result = list.map((item) => ({\n      [item.key]: item.value,\n    }));\n    return Object.assign({}, ...result);\n  };\n\n  function fetchSettings() {\n    setLoading(true);\n    settingService\n      .get()\n      .then((res) => {\n        const data = createSettings(res.data);\n        form.setFieldsValue(data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSettings();\n    }\n  }, [activeMenu.refetch]);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    updateSettings(values);\n  };\n\n  const handleClick = () => {\n    if (isDemo) {\n      toast.warning(t('cannot.work.demo'));\n      return;\n    }\n    form.submit();\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{ ...activeMenu.data }}\n    >\n      {!loading ? (\n        <Card\n          title={t('firebase.config')}\n          extra={\n            <Button\n              type='primary'\n              onClick={() => handleClick()}\n              loading={loadingBtn}\n            >\n              {t('save')}\n            </Button>\n          }\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('api.key')}\n                name='api_key'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'IOS ' + t('api.key')}\n                name='ios_api_key'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Android ' + t('api.key')}\n                name='android_api_key'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('server.key')}\n                name='server_key'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('vapid.key')}\n                name='vapid_key'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('auth.domain')}\n                name='auth_domain'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('project.id')}\n                name='project_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('storage.bucket')}\n                name='storage_bucket'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('messaging.sender.id')}\n                name='messaging_sender_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('app.id')}\n                name='app_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('measurement.id')}\n                name='measurement_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n    </Form>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/referral-setting.js",["5979","5980"],[],"import {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Space,\n} from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport moment from 'moment';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport referralService from '../../services/referral';\nimport { fetchSettings as getSettings } from '../../redux/slices/globalSettings';\nimport LanguageList from '../../components/language-list';\nimport MediaUpload from '../../components/upload';\n\nconst ReferalSetting = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const { settings } = useSelector((state) => state.globalSettings);\n  const referral = Number(settings.referral_active);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [image, setImage] = useState(\n    activeMenu.data?.logo_img ? [activeMenu.data?.logo_img] : []\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.expired_at = JSON.stringify(data?.expired_at);\n      dispatch(setMenuData({ activeMenu, data: data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n      [`faq[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.faq,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function fetchSettings() {\n    setLoading(true);\n    referralService\n      .get()\n      .then((res) => {\n        const data = res.data[0];\n        const result = {\n          ...getLanguageFields(data),\n          price_from: data.price_from,\n          price_to: data.price_to,\n          expired_at: data.expired_at ? moment(data.expired_at) : undefined,\n          active: data.active,\n          image: [createImages(data.img)],\n        };\n        form.setFieldsValue(result);\n        setImage([createImages(data.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  const createImages = (items) => {\n    return {\n      items,\n      uid: items,\n      url: items,\n      name: items,\n    };\n  };\n\n  const onFinish = (values) => {\n    const data = {\n      ...values,\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      img: image[0].name,\n    };\n    setLoadingBtn(true);\n\n    referralService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const getInitialTimes = () => {\n    if (!activeMenu.data?.expired_at) {\n      return {};\n    }\n    const data = JSON.parse(activeMenu.data?.expired_at);\n    return {\n      expired_at: moment(data, 'HH:mm:ss'),\n    };\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSettings();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('referral.settings')}\n      loading={loading}\n      extra={\n        <Space>\n          <LanguageList />\n          <Button\n            type='primary'\n            onClick={() => form.submit()}\n            loading={loadingBtn}\n            disabled={referral !== 1}\n          >\n            {t('save')}\n          </Button>\n        </Space>\n      }\n    >\n      <Form\n        layout='vertical'\n        initialValues={{\n          ...activeMenu.data,\n          active: true,\n          ...getInitialTimes(),\n        }}\n        form={form}\n        onFinish={onFinish}\n        name='referral-settings'\n      >\n        <Row gutter={24}>\n          <Col span={24}>\n            {referral !== 1 ? (\n              <h3 className='text-center mt-2 mb-4'>\n                {t('no.active.referral')}\n              </h3>\n            ) : null}\n          </Col>\n          <Col span={12}>\n            {languages.map((item, idx) => (\n              <Form.Item\n                key={'title' + idx}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input disabled={referral !== 1} />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            {languages.map((item, idx) => (\n              <Form.Item\n                key={'description' + idx}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 5) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.5'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={3} disabled={referral !== 1} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              name='price_from'\n              label={t('sender.price')}\n              rules={[\n                { required: true, message: t('required') },\n                { type: 'number', min: 0, message: t('must.be.positive') },\n              ]}\n            >\n              <InputNumber className='w-100' disabled={referral !== 1} />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            {languages.map((item, idx) => (\n              <Form.Item\n                key={'terms' + idx}\n                label={t('terms')}\n                name={`faq[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={3} disabled={referral !== 1} />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='price_to'\n              label={t('distribution.price')}\n              rules={[\n                { required: true, message: t('required') },\n                { type: 'number', min: 0, message: t('must.be.positive') },\n              ]}\n            >\n              <InputNumber className='w-100' disabled={referral !== 1} />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              name='expired_at'\n              label={t('expired.at')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DatePicker\n                className='w-100'\n                disabledDate={(current) => moment().add(-1, 'days') >= current}\n                disabled={referral !== 1}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12} disabled={referral !== 1}>\n            <Form.Item\n              label={t('image')}\n              disabled={referral !== 1}\n              name='images'\n              rules={[\n                {\n                  required: image.length === 0,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='referral'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n                name='referral'\n                disabled={referral !== 1}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Card>\n  );\n};\n\nexport default ReferalSetting;\n","/home/mostafa/Magde/new/frontadminreact/src/views/privacy/terms.js",["5981","5982"],[],"import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport privacyService from '../../services/privacy';\nimport { useTranslation } from 'react-i18next';\nimport Loading from '../../components/loading';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\n\nexport default function Terms() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function fetchTerms() {\n    setLoading(true);\n    privacyService\n      .getTerms()\n      .then(({ data }) =>\n        form.setFieldsValue({\n          ...getLanguageFields(data),\n        })\n      )\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchTerms();\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values),\n      description: getTranslationFields(languages, values, 'description'),\n    };\n    setLoadingBtn(true);\n    privacyService\n      .createTerms(body)\n      .then(() => {\n        toast.success(t('successfully.saved'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('terms')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='terms-form'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={activeMenu.data}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  valuePropName='data'\n                  getValueFromEvent={(event, editor) => {\n                    const data = editor.getData();\n                    return data;\n                  }}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <CKEditor editor={ClassicEditor} />\n                </Form.Item>\n              ))}\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/gallery/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/extras/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/privacy/policy.js",["5983","5984"],[],"import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Space } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport privacyService from '../../services/privacy';\nimport { useTranslation } from 'react-i18next';\nimport Loading from '../../components/loading';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\n\nexport default function Policy() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function fetchPolicy() {\n    setLoading(true);\n    privacyService\n      .getPolicy()\n      .then(({ data }) =>\n        form.setFieldsValue({\n          ...getLanguageFields(data),\n        })\n      )\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchPolicy();\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values),\n      description: getTranslationFields(languages, values, 'description'),\n    };\n    setLoadingBtn(true);\n    privacyService\n      .createPolicy(body)\n      .then(() => {\n        toast.success(t('successfully.saved'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('policy')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='policy-form'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={activeMenu.data}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  valuePropName='data'\n                  getValueFromEvent={(event, editor) => {\n                    const data = editor.getData();\n                    return data;\n                  }}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <CKEditor editor={ClassicEditor} />\n                </Form.Item>\n              ))}\n            </Col>\n          </Row>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/languages/index.js",["5985"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Table, Image, Space, Tag, Card } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Context } from '../../context/context';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport languagesService from '../../services/languages';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getImage from '../../helpers/getImage';\nimport DeleteButton from '../../components/delete-button';\nimport { fetchLang } from '../../redux/slices/languages';\nimport FilterColumns from '../../components/filter-column';\nimport useDemo from '../../helpers/useDemo';\n\nconst Languages = () => {\n  const { t } = useTranslation();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [id, setId] = useState(null);\n  const [type, setType] = useState('');\n  const { setIsModalVisible } = useContext(Context);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { isDemo, demoFunc } = useDemo();\n  const { allLanguages, loading } = useSelector(\n    (state) => state.languages,\n    shallowEqual\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `language/${row.id}`,\n        id: 'language_edit',\n        name: t('edit.language'),\n      })\n    );\n    navigate(`/language/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={getImage(img)}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active) =>\n        active ? (\n          <Tag color='cyan'> {t('active')}</Tag>\n        ) : (\n          <Tag color='yellow'>{t('inactive')}</Tag>\n        ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n\n            {row.default === 1 ? (\n              ''\n            ) : (\n              <DeleteButton\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  setId([row.id]);\n                  setType('deleteLang');\n                  setIsModalVisible(true);\n                }}\n              />\n            )}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const setDefaultLang = () => {\n    setLoadingBtn(true);\n    languagesService\n      .setDefault(id)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        setIsModalVisible(false);\n        dispatch(fetchLang());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const deleteLang = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    languagesService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchLang());\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchLang());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.language',\n        url: `language/add`,\n        name: t('add.language'),\n      })\n    );\n    navigate(`/language/add`);\n  };\n\n  return (\n    <Card\n      title={t('languages')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.language')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={allLanguages}\n        rowKey={(record) => record.id}\n        loading={loading}\n        pagination={false}\n        rowSelection={{\n          selectedRowKeys: [allLanguages.find((item) => item.default)?.id],\n          type: 'radio',\n          onChange: (values) => {\n            if (isDemo) {\n              demoFunc();\n              return;\n            }\n            setIsModalVisible(true);\n            setId(values[0]);\n            setType(true);\n          },\n        }}\n      />\n      <CustomModal\n        click={type === 'deleteLang' ? deleteLang : setDefaultLang}\n        text={\n          type !== 'deleteLang' ? t('change.default.language') : t('delete')\n        }\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n};\n\nexport default Languages;\n","/home/mostafa/Magde/new/frontadminreact/src/views/notification/index.js",["5986","5987"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CloudUploadOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Space, Table, Tag, Tooltip } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchNotifications } from '../../redux/slices/notification';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport blogService from '../../services/blog';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport moment from 'moment';\n\nexport default function Notifications() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `notification/${row.uuid}`,\n        id: 'notification_edit',\n        name: t('edit.notification'),\n      }),\n    );\n    navigate(`/notification/${row.uuid}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        id: `notification-clone`,\n        url: `notification-clone/${row.uuid}`,\n        name: t('notification.clone'),\n      }),\n    );\n    navigate(`/notification-clone/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD'),\n    },\n    {\n      title: t('published.at'),\n      dataIndex: 'published_at',\n      key: 'published_at',\n      is_show: true,\n      render: (published_at) => (\n        <>\n          {published_at ? (\n            <Tag color='red'>{moment(published_at).format('YYYY-MM-DD')}</Tag>\n          ) : (\n            <Tag color='blue'>{t('not.published')}</Tag>\n          )}\n        </>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        console.log('row', row);\n        return (\n          <Space>\n            {!row.published_at ? (\n              <Space>\n                <Tooltip title={t('publish')}>\n                  <Button\n                    disabled={!row.active}\n                    icon={<CloudUploadOutlined />}\n                    onClick={() => {\n                      setId(row.uuid);\n                      setIsDelete(false);\n                      setIsPublish(true);\n                      setIsModalVisible(true);\n                    }}\n                  />\n                </Tooltip>\n                <Button\n                  type='primary'\n                  icon={<EditOutlined />}\n                  onClick={() => goToEdit(row)}\n                />\n              </Space>\n            ) : (\n              ''\n            )}\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsDelete(true);\n                setIsModalVisible(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [isDelete, setIsDelete] = useState(null);\n  const [isPublish, setIsPublish] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('published');\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: immutable ? undefined : immutable,\n  };\n\n  const { notifications, meta, loading, params } = useSelector(\n    (state) => state.notification,\n    shallowEqual,\n  );\n\n  const notificationDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    blogService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchNotifications());\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  const notificationPublish = () => {\n    setLoadingBtn(true);\n    blogService\n      .publish(id)\n      .then(() => {\n        toast.success(t('successfully.published'));\n        dispatch(fetchNotifications());\n        setIsModalVisible(false);\n        setIsPublish(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const notificationSetActive = () => {\n    setLoadingBtn(true);\n    blogService\n      .setActive(id)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchNotifications());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchNotifications(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchNotifications(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setIsDelete(true);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.notification',\n        url: `notification/add`,\n        name: t('add.notification'),\n      }),\n    );\n    navigate(`/notification/add`);\n  };\n\n  return (\n    <Card\n      title={t('notifications')}\n      extra={\n        <Space>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.notification')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={notifications}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={\n          isPublish\n            ? notificationPublish\n            : isDelete\n            ? notificationDelete\n            : notificationSetActive\n        }\n        text={\n          isPublish\n            ? t('publish.notification')\n            : isDelete\n            ? t('delete.notification')\n            : t('set.active.notification')\n        }\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/index.js",["5988"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport { fetchMessageSubscriber } from '../../redux/slices/messegeSubscriber';\nimport messageSubscriberService from '../../services/messageSubscriber';\nimport moment from 'moment';\nimport FilterColumns from '../../components/filter-column';\n\nconst MessageSubciribed = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `message/subscriber/${row.id}`,\n        id: 'subciribed_edit',\n        name: t('edit.subscriber'),\n      })\n    );\n    navigate(`/message/subscriber/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('send.to'),\n      dataIndex: 'send_to',\n      key: 'send_to',\n      is_show: true,\n      render: (expired_at) => (\n        <div>\n          {moment(new Date()).isBefore(expired_at) ? (\n            <Tag color='blue'>{expired_at}</Tag>\n          ) : (\n            <Tag color='error'>{expired_at}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setType(false);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [type, setType] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { subscribers, loading } = useSelector(\n    (state) => state.messageSubscriber,\n    shallowEqual\n  );\n\n  const subscriberDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    messageSubscriberService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchMessageSubscriber());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchMessageSubscriber());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchMessageSubscriber({ perPage: pageSize, page: current }));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'message_subscriber_add',\n        url: `message/subscriber/add`,\n        name: t('add.subciribed'),\n      })\n    );\n    navigate(`/message/subscriber/add`);\n  };\n\n  return (\n    <Card\n      title={t('message.subscriber')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.subscriber')}\n          </Button>\n\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={subscribers}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={subscriberDelete}\n        text={\n          type ? t('set.active.banner') : text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default MessageSubciribed;\n","/home/mostafa/Magde/new/frontadminreact/src/views/pages/index.js",["5989"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Table } from 'antd';\nimport { IMG_URL } from 'configs/app-global';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport pagesService from 'services/pages';\nimport { fetchPages } from 'redux/slices/pages';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport RiveResult from 'components/rive-result';\n\nconst Page = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { pages, meta, loading } = useSelector(\n    (state) => state.pages,\n    shallowEqual\n  );\n  const [id, setId] = useState(null);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={IMG_URL + img}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n      render: (type) => type.toUpperCase(),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.type]);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAddBanners = () => {\n    dispatch(\n      addMenu({\n        id: 'page_add',\n        url: 'page/add',\n        name: t('add.page'),\n      })\n    );\n    navigate('/page/add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'page_edit',\n        url: `page/${row.id}`,\n        name: t('edit.page'),\n      })\n    );\n    navigate(`/page/${row.id}`);\n  };\n\n  const pageDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    pagesService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchPages());\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPages());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchPages({ perPage: pageSize, page: current }));\n  };\n\n  return (\n    <Card\n      title={t('pages')}\n      navLInkTo={''}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBanners}\n          >\n            {t('add.pages')}\n          </Button>\n\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={pages}\n        loading={loading}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        locale={{\n          emptyText: <RiveResult />,\n        }}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={pageDelete}\n        text={t('delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default Page;\n","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/index.js",["5990"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Typography } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { fetchRecepts } from '../../redux/slices/reciept';\nimport { IMG_URL } from '../../configs/app-global';\nimport recieptService from '../../services/reciept';\n\nconst Reciepts = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    search: data?.search ? data.search : undefined,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const { recepts, meta, loading } = useSelector(\n    (state) => state.reciept,\n    shallowEqual\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `recept/edit/${row.id}`,\n        id: 'recepe_edit',\n        name: t('edit.recepe'),\n      })\n    );\n    navigate(`/recept/edit/${row.id}`, { state: 'edit' });\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'recepe_add',\n        url: 'recept/add',\n        name: t('add.recepe'),\n      })\n    );\n    navigate('/recept/add');\n  };\n\n  const goToShop = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-shop',\n        url: `shop/${row.uuid}`,\n        name: t('edit.shop'),\n      })\n    );\n    navigate(`/shop/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      render: (_, row) => row.translation?.title,\n      is_show: true,\n    },\n    {\n      title: t('shop/restaurant'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (shop, row) => (\n        <Space>\n          <Image\n            width={100}\n            src={IMG_URL + row.bg_img}\n            alt={shop?.translation?.title}\n            preview\n            placeholder\n            className='rounded'\n          />\n          <Typography.Text\n            className='text-hover'\n            onClick={() => goToShop(shop)}\n          >\n            {shop?.translation?.title}\n          </Typography.Text>\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => (\n        <Image\n          width={100}\n          src={IMG_URL + img}\n          preview\n          placeholder\n          className='rounded'\n        />\n      ),\n    },\n    {\n      title: t('recipe.category'),\n      dataIndex: 'category',\n      key: 'category',\n      is_show: true,\n      render: (category) => category?.translation?.title,\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'discount',\n      key: 'discount',\n      is_show: true,\n      render: (_, row) =>\n        row.discount_type === 'fix'\n          ? numberToPrice(row.discount_price, defaultCurrency.symbol)\n          : `${row.discount_price} %`,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const brandDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    recieptService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchRecepts(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchRecepts(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchRecepts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap className='justify-content-end w-100'>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.recepe')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('recepes')}>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={recepts}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n      <CustomModal\n        click={brandDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default Reciepts;\n","/home/mostafa/Magde/new/frontadminreact/src/views/payment-payloads/index.js",["5991"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport CustomModal from 'components/modal';\nimport { toast } from 'react-toastify';\nimport { Context } from 'context/context';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport { fetchPaymentPayloads } from 'redux/slices/paymentPayload';\nimport { paymentPayloadService } from 'services/paymentPayload';\n\nexport default function PaymentPayloads() {\n  const { t } = useTranslation();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const navigate = useNavigate();\n  const [text, setText] = useState(null);\n  const { payloads, loading } = useSelector(\n    (state) => state.paymentPayload,\n    shallowEqual,\n  );\n  const [columns, setColumns] = useState([\n    {\n      title: t('payment.id'),\n      is_show: true,\n      dataIndex: 'payment_id',\n      key: 'payment_id',\n    },\n    {\n      title: t('title'),\n      is_show: true,\n      dataIndex: 'title',\n      key: 'title',\n      render: (title, row) => {\n        return <>{row.payment?.tag}</>;\n      },\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      dataIndex: 'options',\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.payment_id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `payment-payloads/edit/${row.payment_id}`,\n        id: 'edit.payment.payloads',\n        name: t('edit.payment.payloads'),\n      }),\n    );\n    navigate(`/payment-payloads/edit/${row.payment_id}`);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPaymentPayloads());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchPaymentPayloads({ perPage: pageSize, page: current }));\n  };\n\n  const paymentDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    paymentPayloadService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchPaymentPayloads());\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.payment.payloads',\n        url: 'payment-payloads/add',\n        name: t('add.payment.payloads'),\n      }),\n    );\n    navigate('/payment-payloads/add');\n  };\n\n  return (\n    <Card\n      title={t('payment')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.payment.payloads')}\n          </Button>\n          <DeleteButton className='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={payloads}\n        rowKey={(record) => record.payment_id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={paymentDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/settings.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/translations/import.js",["5992"],[],"import React from 'react';\nimport { Button, Card } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Dragger from 'antd/lib/upload/Dragger';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { setMenuData } from 'redux/slices/menu';\nimport translationServices from 'services/translation';\n\nexport default function TranslationsImport() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const createFile = (file) => {\n    return {\n      uid: file.name,\n      name: file.name,\n      status: 'done',\n      url: file.name,\n      created: true,\n    };\n  };\n\n  const handleUpload = ({ file, onSuccess, onError }) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    translationServices\n      .import(formData)\n      .then(() => {\n        toast.success(t('successfully.import'));\n        dispatch(setMenuData({ activeMenu, data: createFile(file) }));\n        onSuccess('ok');\n      })\n      .catch((err) => {\n        onError(err.message);\n      });\n  };\n\n  return (\n    <Card title={t('import')}>\n      <Dragger\n        name='file'\n        multiple={false}\n        maxCount={1}\n        customRequest={handleUpload}\n        defaultFileList={activeMenu?.data ? [activeMenu?.data] : null}\n        accept='.csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      >\n        <p className='ant-upload-drag-icon'>\n          <InboxOutlined />\n        </p>\n        <p className='ant-upload-text'>{t('upload-drag')}</p>\n        <p className='ant-upload-hint'>{t('upload-text')}</p>\n      </Dragger>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/index.js",["5993"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  ClearOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tabs, Tag, Switch } from 'antd';\nimport { export_url } from '../../configs/app-global';\nimport { Context } from '../../context/context';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport formatSortType from '../../helpers/formatSortType';\nimport { fetchRecipeCategories } from '../../redux/slices/recipe-category';\nimport RecipeCategoryStatusModal from './categoryStatusModal';\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst { TabPane } = Tabs;\nconst roles = ['all', 'pending', 'published', 'unpublished'];\n\nconst RecipeCategories = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const [active, setActive] = useState(null);\n  const [recipeData, setRecipeData] = useState(null);\n  const immutable = activeMenu.data?.role || role;\n\n  function goToEdit(row) {\n    dispatch(\n      addMenu({\n        url: `recipe-category/edit/${row.uuid}`,\n        id: 'category_edit',\n        name: t('edit.category'),\n      })\n    );\n    navigate(`/recipe-category/edit/${row.uuid}`, { state: 'edit' });\n  }\n\n  const goToAddCategory = () => {\n    dispatch(\n      addMenu({\n        id: 'category-add',\n        url: 'recipe-category/add',\n        name: t('add.category'),\n      })\n    );\n    navigate('/recipe-category/add');\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        url: `recipe-categories/import`,\n        id: 'category_import',\n        name: t('import.category'),\n      })\n    );\n    navigate(`/recipe-categories/import`);\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `category-clone`,\n        url: `recipe-category-clone/${uuid}`,\n        name: t('category.clone'),\n      })\n    );\n    navigate(`/recipe-category-clone/${uuid}`, { state: 'clone' });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={img || 'https://via.placeholder.com/150'}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setRecipeData(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { categories, meta, loading } = useSelector(\n    (state) => state.recipeCategory,\n    shallowEqual\n  );\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    pageSize: meta.per_page,\n    page: data?.page || 1,\n    status: immutable === 'all' ? undefined : immutable,\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    categoryService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchRecipeCategories(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchRecipeCategories(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchRecipeCategories(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const excelExport = () => {\n    setDownloading(true);\n\n    const params = {\n      type: 'receipt',\n      status: role === 'all' ? undefined : role,\n    };\n\n    categoryService\n      .export(params)\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      })\n    );\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    categoryService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchRecipeCategories(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button style={{ minWidth: 150 }} onClick={goToImport}>\n            <CgImport className='mr-2' />\n            {t('import')}\n          </Button>\n          <Button\n            style={{ minWidth: 150 }}\n            loading={downloading}\n            onClick={excelExport}\n          >\n            <CgExport className='mr-2' />\n            {t('export')}\n          </Button>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddCategory}\n          >\n            {t('add.category')}\n          </Button>\n          <Button\n            icon={<ClearOutlined />}\n            onClick={handleClear}\n            disabled={!activeMenu.data}\n            style={{ minWidth: 100 }}\n          />\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('categories')}>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={categories}\n          pagination={{\n            pageSize: meta.per_page,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n\n      <CustomModal\n        click={active ? handleActive : categoryDelete}\n        text={\n          active\n            ? t('set.active.product')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        setText={setId}\n        setActive={setActive}\n        loading={loadingBtn}\n      />\n\n      {recipeData && (\n        <RecipeCategoryStatusModal\n          data={recipeData}\n          handleCancel={() => setRecipeData(null)}\n          paramsData={paramsData}\n        />\n      )}\n    </>\n  );\n};\n\nexport default RecipeCategories;\n","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/index.js",["5994"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tabs, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { IMG_URL } from '../../configs/app-global';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport restaurantService from '../../services/restaurant';\nimport { fetchRestourant } from '../../redux/slices/restourant';\nimport { useTranslation } from 'react-i18next';\nimport RestaurantStatusModal from './restaurant-status-modal';\nimport DeleteButton from '../../components/delete-button';\nimport CustomDrower from '../../components/CustomDrower';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport i18n from '../../configs/i18next';\nimport { BiFilterAlt } from 'react-icons/bi';\nimport FilterColumns from '../../components/filter-column';\nimport formatSortType from '../../helpers/formatSortType';\n\nconst { TabPane } = Tabs;\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\nconst roles = ['all', 'new', 'approved', 'rejected'];\n\nconst Restaurants = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [restourantStatus, setRestourantStatus] = useState(null);\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const [openDrower, setOpenDrower] = useState(false);\n  const [text, setText] = useState(null);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-restaurant',\n        url: `restaurant/${row.uuid}`,\n        name: t('edit.restaurant'),\n      })\n    );\n    navigate(`/restaurant/${row.uuid}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        id: 'restaurant-clone',\n        url: `restaurant-clone/${row.uuid}`,\n        name: t('restaurant.clone'),\n      })\n    );\n    navigate(`/restaurant-clone/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'name',\n      is_show: true,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('logo'),\n      dataIndex: 'logo_img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            alt='images'\n            className='img rounded'\n            src={img || 'https://via.placeholder.com/150'}\n            effect='blur'\n            width={50}\n            height={50}\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('background'),\n      dataIndex: 'back',\n      is_show: true,\n      render: (img) => {\n        return (\n          <Image\n            alt={'images background'}\n            className='img rounded'\n            src={img ? IMG_URL + img : 'https://via.placeholder.com/150'}\n            effect='blur'\n            width={50}\n            height={50}\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('seller'),\n      dataIndex: 'seller',\n      is_show: true,\n    },\n    {\n      title: t('open.time'),\n      dataIndex: 'open',\n      is_show: true,\n      render: (_, row) => {\n        return row.open ? (\n          <Tag color='blue'> {t('open')} </Tag>\n        ) : (\n          <Tag color='red'> {t('closed')} </Tag>\n        );\n      },\n    },\n    {\n      title: t('tax'),\n      is_show: true,\n      dataIndex: 'tax',\n      render: (tax) => `${tax} %`,\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      is_show: true,\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'rejected' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setRestourantStatus(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n            {user?.role !== 'manager' ? (\n              <DeleteButton\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  setId([row.id]);\n                  setIsModalVisible(true);\n                  setText(true);\n                }}\n              />\n            ) : (\n              ''\n            )}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [role, setRole] = useState('all');\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { restourants, meta, loading, params } = useSelector(\n    (state) => state.restourant,\n    shallowEqual\n  );\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu?.data;\n  const paramsData = {\n    search: data?.search,\n    lang: data?.filter?.equal === 'equal' ? data?.filter?.lang : i18n.language,\n    not_lang: data?.filter?.equal === 'not_equal' ? data?.filter?.lang : null,\n    status: immutable === 'all' ? undefined : immutable || undefined,\n    page: data?.page,\n    perPage: data?.perPage,\n    sort: data?.sort,\n    column: data?.column,\n  };\n\n  const restaurantDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    restaurantService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchRestourant(paramsData));\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchRestourant(paramsData));\n      dispatch(disableRefetch(activeMenu));\n      setRole('all');\n    }\n  }, [activeMenu.refetch]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add-restaurant',\n        url: `restaurant/add`,\n        name: t('add.restaurant'),\n      })\n    );\n    navigate(`/restaurant/add`);\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchRestourant(paramsData));\n  }, [activeMenu.data]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('restaurants')}\n      extra={\n        <Space wrap>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.restaurant')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            className='settings-button'\n            onClick={() => setOpenDrower(true)}\n          >\n            <BiFilterAlt className='icon' />\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          handleChange={(e) => handleFilter({ search: e })}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n          className={'w-25'}\n        />\n      </div>\n      <Tabs\n        className='mt-3'\n        activeKey={immutable}\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n      >\n        {roles.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={restourants}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n      {restourantStatus && (\n        <RestaurantStatusModal\n          data={restourantStatus}\n          handleCancel={() => setRestourantStatus(null)}\n          paramsData={paramsData}\n        />\n      )}\n      <CustomModal\n        click={restaurantDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {openDrower && (\n        <CustomDrower\n          handleClose={() => setOpenDrower(false)}\n          openDrower={openDrower}\n          setMenuData={setMenuData}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport default Restaurants;\n","/home/mostafa/Magde/new/frontadminreact/src/views/refund/index.js",["5995"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tabs, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { EyeOutlined } from '@ant-design/icons';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumn from '../../components/filter-column';\nimport { fetchRefund } from '../../redux/slices/refund';\nimport refundService from '../../services/refund';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport moment from 'moment';\n\nconst { TabPane } = Tabs;\nconst roles = ['pending', 'accepted', 'canceled'];\n\nconst Refunds = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { refund_delete } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  const goToShow = (id) => {\n    dispatch(\n      addMenu({\n        url: `refund/details/${id}`,\n        id: 'refund_details',\n        name: t('refund.details'),\n      }),\n    );\n    navigate(`/refund/details/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('order.id'),\n      is_show: true,\n      dataIndex: 'order.id',\n      key: 'order.id',\n      render: (_, row) => <div>{row.order.id}</div>,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, row) => (\n        <div>\n          {row.order.user?.firstname} {row.order.user?.lastname}\n        </div>\n      ),\n    },\n    // {\n    //   title: t('shop'),\n    //   is_show: true,\n    //   dataIndex: 'shop',\n    //   key: 'shop',\n    //   render: (_, row) => <div>{row.order.shop?.translation?.title}</div>,\n    // },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row.id)} />\n            {refund_delete === '0' ? null : (\n              <DeleteButton\n                onClick={() => {\n                  setId([row.id]);\n                  setIsModalVisible(true);\n                  setText(true);\n                }}\n              />\n            )}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const [role, setRole] = useState('pending');\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { refund, meta, loading, params } = useSelector(\n    (state) => state.refund,\n    shallowEqual,\n  );\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    pageSize: meta.per_page,\n    page: data?.page,\n    status: immutable || 'published',\n  };\n\n  const refundDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    refundService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchRefund(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchRefund(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchRefund(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('refunds')}\n      extra={\n        <Space>\n          {refund_delete === '0' ? null : (\n            <Space>\n              <DeleteButton size='' onClick={allDelete}>\n                {t('delete.selected')}\n              </DeleteButton>\n            </Space>\n          )}\n          <FilterColumn columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          className='w-25'\n          handleChange={(e) => handleFilter({ search: e })}\n          resetSearch={!activeMenu.data?.search}\n          defaultValue={activeMenu.data?.search}\n        />\n      </div>\n      <Tabs\n        className='mt-3'\n        activeKey={immutable}\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n      >\n        {roles.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={refund}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={refundDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default Refunds;\n","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/tag-clone.js",["5996","5997","5998"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport MediaUpload from '../../components/upload';\nimport shopTagService from '../../services/shopTag';\nimport { fetchShopTag } from '../../redux/slices/shopTag';\n\nconst TagClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.img ? activeMenu.data?.img : []\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item,\n      name: item,\n      url: item,\n    }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getTag = (alias) => {\n    setLoading(true);\n    shopTagService\n      .getById(alias)\n      .then((res) => {\n        let tag = res.data;\n\n        const data = {\n          images: createImages([tag.img]),\n          ...getLanguageFields(tag),\n        };\n        form.setFieldsValue(data);\n        setImage(createImages([tag.img]));\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      images: image.map((image) => image.name),\n      title: getTranslationFields(languages, values, 'title'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'shop-tag';\n    shopTagService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchShopTag());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getTag(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('shop.banner')} className='h-100' extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='shop-add'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                rules={[\n                  {\n                    required: !image.length,\n                    message: t('required'),\n                  },\n                ]}\n                label={t('image')}\n                name='images'\n              >\n                <MediaUpload\n                  type='products'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  length='1'\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button\n                type='primary'\n                htmlType='submit'\n                loading={loadingBtn}\n                disabled={loadingBtn}\n              >\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default TagClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/tag-add.js",["5999"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport LanguageList from '../../components/language-list';\nimport MediaUpload from '../../components/upload';\nimport shopTagService from '../../services/shopTag';\nimport { fetchShopTag } from '../../redux/slices/shopTag';\n\nconst TagAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [image, setImage] = useState([]);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      images: image.map((image) => image.name),\n      title: getTranslationFields(languages, values, 'title'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'shop-tag';\n    shopTagService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchShopTag());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.shop.tag')} className='h-100' extra={<LanguageList />}>\n      <Form\n        name='add.shop.tag'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ clickable: true, ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n              label={t('image')}\n              name='images'\n            >\n              <MediaUpload\n                type='products'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                length='1'\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default TagAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/tag-edit.js",["6000","6001","6002"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport MediaUpload from '../../components/upload';\nimport shopTagService from '../../services/shopTag';\nimport { fetchShopTag } from '../../redux/slices/shopTag';\n\nconst TagEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.img ? activeMenu.data?.img : []\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item,\n      name: item,\n      url: item,\n    }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = (alias) => {\n    setLoading(true);\n    shopTagService\n      .getById(alias)\n      .then((res) => {\n        let tag = res.data;\n\n        const data = {\n          images: createImages([tag.img]),\n          ...getLanguageFields(tag),\n        };\n        form.setFieldsValue(data);\n        setImage(createImages([tag.img]));\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      images: image.map((image) => image.name),\n      title: getTranslationFields(languages, values, 'title'),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'shop-tag';\n    shopTagService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchShopTag());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBanner(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.shop.tag')} className='h-100' extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='edit.shop.tag'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n                label={t('image')}\n                name='images'\n              >\n                <MediaUpload\n                  type='shop-tags'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button\n                type='primary'\n                htmlType='submit'\n                loading={loadingBtn}\n                disabled={loadingBtn}\n              >\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default TagEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/order-status/index.js",["6003"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Switch, Table } from 'antd';\nimport GlobalContainer from '../../components/global-container';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport OrderStatusService from '../../services/orderStatus';\nimport { fetchOrderStatus } from '../../redux/slices/orderStatus';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\n\nconst OrderStatus = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => {\n    \n        return (\n          <Switch\n            key={row.id + active}\n            onChange={() => {\n              setIsModalVisible(true);\n              setActiveId(row.id);\n            }}\n            checked={active}\n            disabled={\n              row.name === 'canceled' ||\n              row.name === 'delivered' ||\n              row.name === 'accepted'\n            }\n          />\n        );\n      },\n    },\n  ];\n\n  const { setIsModalVisible } = useContext(Context);\n  const [activeId, setActiveId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { statusList, loading } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual\n  );\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    OrderStatusService.status(activeId)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchOrderStatus());\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchOrderStatus());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n\n  return (\n    <GlobalContainer headerTitle={t('order.status')}>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={statusList}\n        rowKey={(record) => record.id}\n        loading={loading}\n      />\n      <CustomModal\n        click={handleActive}\n        text={t('set.active.order.status')}\n        loading={loadingBtn}\n      />\n    </GlobalContainer>\n  );\n};\n\nexport default OrderStatus;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shop-clone.js",["6004"],[],"import React, { useState, useEffect } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport { steps } from './steps';\nimport { Card, Steps } from 'antd';\nimport ShopMain from './main';\nimport UserEdit from './user';\nimport { useQueryParams } from '../../helpers/useQueryParams';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport shopService from '../../services/shop';\nimport { useParams } from 'react-router-dom';\nimport ShopDelivery from './shopDelivery';\nimport Loading from '../../components/loading';\nimport Map from '../../components/shop/map';\nconst { Step } = Steps;\n\nconst ShopClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  const fetchShop = (uuid) => {\n    setLoading(true);\n    shopService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          logo_img: createImages(res.data.logo_img),\n          background_img: createImages(res.data.background_img),\n          user: '',\n          delivery_time_from: res.data?.delivery_time.from,\n          delivery_time_to: res.data?.delivery_time.to,\n          delivery_time_type: res.data?.delivery_time.type,\n          recommended: res.data.mark === 'recommended',\n          categories: res.data?.categories.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          tags: res.data?.tags.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const createImages = (items) => {\n    return {\n      items,\n      uid: items,\n      url: items,\n      name: items,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch && uuid) {\n      fetchShop(uuid);\n    }\n  }, [activeMenu.refetch, current]);\n\n  return (\n    <Card title={t('shop.clone')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <ShopMain next={next} loading={loading} user={true} />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <Map next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <ShopDelivery next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Four-content' && (\n            <UserEdit next={next} prev={prev} />\n          )}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\nexport default ShopClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/payments/index.js",["6005"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Table, Switch } from 'antd';\nimport { Context } from '../../context/context';\nimport GlobalContainer from '../../components/global-container';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchPayments } from '../../redux/slices/payment';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport paymentService from '../../services/payment';\nimport { useTranslation } from 'react-i18next';\nimport PaymentEditModal from './paymentEditModal';\n\nexport default function Payments() {\n  const { t } = useTranslation();\n  const [id, setId] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const { payments, loading } = useSelector(\n    (state) => state.payment,\n    shallowEqual\n  );\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const columns = [\n    {\n      title: t('title'),\n      dataIndex: 'tag',\n      key: 'tag',\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.id);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    // {\n    //   title: t('options'),\n    //   key: 'options',\n    //   render: (options, row) => (\n    //     <Space>\n    //       <Button\n    //         type='primary'\n    //         icon={<EditOutlined />}\n    //         onClick={() => setModal(row)}\n    //       />\n    //     </Space>\n    //   ),\n    // },\n  ];\n\n  function setActivePayments() {\n    setLoadingBtn(true);\n    paymentService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        setId(null);\n        dispatch(fetchPayments());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPayments());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <GlobalContainer headerTitle={t('payments')}>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={payments}\n        rowKey={(record) => record.id}\n        loading={loading}\n        pagination={false}\n      />\n      <CustomModal\n        click={setActivePayments}\n        text={t('set.active.payment')}\n        loading={loadingBtn}\n      />\n      {modal && (\n        <PaymentEditModal modal={modal} handleCancel={() => setModal(null)} />\n      )}\n    </GlobalContainer>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shop-edit.js",["6006"],[],"import React, { useState, useEffect } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport LanguageList from 'components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport { steps } from './steps';\nimport { Card, Steps } from 'antd';\nimport ShopMain from './main';\nimport UserEdit from './user';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport shopService from 'services/shop';\nimport { useParams } from 'react-router-dom';\nimport ShopDelivery from './shopDelivery';\nimport Loading from 'components/loading';\nimport ShopLocations from 'components/shop/shop-locations';\nimport ShopSocial from './social';\nconst { Step } = Steps;\n\nconst ShopsEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  const fetchShop = (uuid) => {\n    setLoading(true);\n    shopService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          logo_img: createImages(res.data.logo_img),\n          background_img: createImages(res.data.background_img),\n          user: {\n            label:\n              res.data?.seller?.firstname + ' ' + res.data?.seller?.lastname,\n            value: res.data?.seller?.id,\n          },\n          delivery_time_from: res.data?.delivery_time.from || 0,\n          delivery_time_to: res.data?.delivery_time.to || 0,\n          delivery_time_type: res.data?.delivery_time.type,\n          recommended: res.data.mark === 'recommended',\n          categories: res.data?.categories?.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          tags: res.data?.tags?.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          price: res.data?.price || 0,\n          price_per_km: res.data?.price_per_km || 0,\n          min_amount: res.data?.min_amount || 0,\n          tax: res.data?.tax || 0,\n          percentage: res.data?.percentage || 0,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const createImages = (items) => {\n    return {\n      items,\n      uid: items,\n      url: items,\n      name: items,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch && uuid) {\n      fetchShop(uuid);\n    }\n  }, [activeMenu.refetch, current, uuid]);\n\n  return (\n    <Card title={t('shop.edit')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <ShopMain\n              next={next}\n              loading={loading}\n              action_type={'edit'}\n              user={activeMenu.data?.seller}\n            />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <ShopLocations next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <ShopSocial next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Fourth-content' && (\n            <ShopDelivery next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Fifth-content' && (\n            <UserEdit next={next} prev={prev} />\n          )}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\nexport default ShopsEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/update/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shops/shops-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/sms-payload/sms-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/system-information/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/sms-payload/sms-edit.js",[],["6007"],"/home/mostafa/Magde/new/frontadminreact/src/views/translations/index.js",["6008","6009"],[],"import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { Button, Card, Form, Input, Select, Space, Table } from 'antd';\nimport translationService from 'services/translation';\nimport { toast } from 'react-toastify';\nimport {\n  EditOutlined,\n  PlusCircleOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\nimport TranslationCreateModal from './translationCreateModal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport SearchInput from 'components/search-input';\nimport { CgImport } from 'react-icons/cg';\nimport { addMenu } from 'redux/slices/menu';\nimport { useNavigate } from 'react-router-dom';\nimport { export_url } from 'configs/app-global';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\n\nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const { t } = useTranslation();\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values, dataIndex });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            validator(_, value) {\n              if (!value) {\n                return Promise.reject(new Error(t('required')));\n              } else if (value && value?.trim() === '') {\n                return Promise.reject(new Error(t('no.empty.space')));\n              } else if (value && value?.trim().length < 2) {\n                return Promise.reject(new Error(t('must.be.at.least.2')));\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className='editable-cell-value-wrap cursor-pointer d-flex justify-content-between align-items-center'\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        <div className='w-100'>{children}</div>\n        <EditOutlined />\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nexport default function Translations() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [list, setList] = useState([]);\n  const [pageSize, setPageSize] = useState(10);\n  const [page, setPage] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [group, setGroup] = useState(null);\n  const [sort, setSort] = useState(null);\n  const [column, setColumn] = useState(null);\n  const [visible, setVisible] = useState(false);\n  const [skipPage, setSkipPage] = useState(0);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const [locale, setLocale] = useState('');\n  const [search, setSearch] = useState('');\n  const [downloading, setDownloading] = useState(false);\n  const [deleteKey, setDeleteKey] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const defaultColumns = useMemo(\n    () => [\n      {\n        title: t('name'),\n        dataIndex: 'key',\n        sorter: (a, b, sortOrder) => sortTable(sortOrder, 'key'),\n        width: 250,\n        fixed: 'left',\n      },\n      {\n        title: t('group'),\n        dataIndex: 'group',\n        sorter: (a, b, sortOrder) => sortTable(sortOrder, 'group'),\n        width: 150,\n        fixed: 'left',\n      },\n      {\n        title: t('options'),\n        dataIndex: 'key',\n        width: 100,\n        fixed: 'center',\n        render: (key) => {\n          return (\n            <Button\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setDeleteKey([key]);\n                setIsModalVisible(true);\n              }}\n            />\n          );\n        },\n      },\n      ...languages\n        .filter((item) => (locale ? item.locale === locale : true))\n        .map((item) => ({\n          title: item.title,\n          dataIndex: `value[${item.locale}]`,\n          editable: true,\n          width: 300,\n        })),\n    ],\n    [languages, locale],\n  );\n\n  function sortTable(type, column) {\n    let sortType;\n    switch (type) {\n      case 'ascend':\n        sortType = 'asc';\n        break;\n      case 'descend':\n        sortType = 'desc';\n        break;\n\n      default:\n        break;\n    }\n    setSort(sortType);\n    setColumn(column);\n  }\n\n  function fetchTranslations() {\n    setLoading(true);\n    const params = {\n      perPage: pageSize,\n      skip: skipPage,\n      group,\n      sort,\n      column,\n      search,\n    };\n    translationService\n      .getAll(params)\n      .then(({ data }) => {\n        const translations = Object.entries(data.translations).map((item) => ({\n          key: item[0],\n          group: item[1][0].group,\n          ...Object.assign(\n            {},\n            ...languages.map((lang) => ({\n              [`value[${lang.locale}]`]: item[1].find(\n                (el) => el.locale === lang.locale,\n              )?.value,\n            })),\n          ),\n        }));\n        setList(translations);\n        setTotal(data.total);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchTranslations();\n  }, [pageSize, group, sort, column, skipPage, search]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    const skip = (current - 1) * pageSize;\n    setPageSize(pageSize);\n    setPage(current);\n    setSkipPage(skip);\n  };\n\n  const handleSave = (row) => {\n    const { dataIndex, key } = row;\n    const newData = [...list];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    if (item[dataIndex] === row[dataIndex]) {\n      return;\n    }\n    newData.splice(index, 1, { ...item, ...row });\n    setList(newData);\n    const savedItem = {\n      ...row,\n      value: undefined,\n      dataIndex: undefined,\n      key: undefined,\n    };\n    updateTranslation(key, savedItem);\n  };\n\n  function updateTranslation(key, data) {\n    translationService\n      .update(key, data)\n      .then((res) => toast.success(res.message));\n  }\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  const columns = defaultColumns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        fixed: col.fixed,\n        handleSave,\n      }),\n    };\n  });\n\n  const excelExport = () => {\n    setDownloading(true);\n    translationService\n      .export()\n      .then((res) => {\n        window.location.href = export_url + res.data.file_name;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        id: 'translation-import',\n        url: `settings/translations/import`,\n        name: t('translation.import'),\n      }),\n    );\n    navigate(`import`);\n  };\n\n  const handleDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...deleteKey.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    translationService\n      .delete(params)\n      .then(() => {\n        fetchTranslations();\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        setDeleteKey(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card\n      extra={\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => setSearch(search)}\n          />\n          <Select\n            style={{ minWidth: 150 }}\n            value={locale}\n            onChange={(value) => setLocale(value)}\n            placeholder={t('select.language')}\n          >\n            <Select.Option value=''>{t('all')}</Select.Option>\n            {languages.map((item) => (\n              <Select.Option key={item.locale} value={item.locale}>\n                {item.title}\n              </Select.Option>\n            ))}\n          </Select>\n          <Select\n            style={{ minWidth: 150 }}\n            value={group}\n            onChange={(value) => setGroup(value)}\n            placeholder={t('select.group')}\n          >\n            <Select.Option value=''>{t('all')}</Select.Option>\n            <Select.Option value='web'>{t('web')}</Select.Option>\n            <Select.Option value='mobile'>{t('mobile')}</Select.Option>\n            <Select.Option value='errors'>{t('errors')}</Select.Option>\n          </Select>\n          <Button onClick={excelExport} loading={downloading}>\n            <CgImport className='mr-2' />\n            {t('export')}\n          </Button>\n          <Button onClick={goToImport}>\n            <CgImport className='mr-2' />\n            {t('import')}\n          </Button>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={() => setVisible(true)}\n          >\n            {t('add.translation')}\n          </Button>\n        </Space>\n      }\n    >\n      <Table\n        components={components}\n        columns={columns}\n        dataSource={list}\n        pagination={{\n          pageSize,\n          page,\n          total,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n        scroll={{\n          x: 1500,\n        }}\n      />\n      {visible && (\n        <TranslationCreateModal\n          visible={visible}\n          setVisible={setVisible}\n          languages={languages}\n          refetch={fetchTranslations}\n        />\n      )}\n      <CustomModal\n        click={handleDelete}\n        text={t('are.you.sure.you.want.to.delete.the.selected.translation')}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/subscriptions/subscriptions-edit.js",["6010"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Row,\n  Switch,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport subscriptionService from '../../services/subscriptions';\nimport Loading from '../../components/loading';\n\nexport default function SubscriptionEditModal({\n  modal,\n  handleCancel,\n  refetch,\n}) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = (values) => {\n    const payload = {\n      ...values,\n      active: Number(values.active),\n      with_report: Number(values.with_report),\n      type: 'shop',\n    };\n    setLoadingBtn(true);\n    subscriptionService\n      .update(modal.id, payload)\n      .then(() => {\n        handleCancel();\n        refetch();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const fetchSubscriptionList = () => {\n    setLoading(true);\n    subscriptionService\n      .getById(modal.id)\n      .then((res) => {\n        console.log('data', res.data);\n        form.setFieldsValue({\n          ...res.data,\n        });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchSubscriptionList();\n  }, [modal]);\n\n  return (\n    <React.Fragment>\n      <Modal\n        visible={!!modal}\n        title={t('edit.subscription')}\n        onCancel={handleCancel}\n        style={{ minWidth: 800 }}\n        footer={[\n          <Button\n            type='primary'\n            onClick={() => form.submit()}\n            loading={loadingBtn}\n            key='save-btn'\n          >\n            {t('save')}\n          </Button>,\n          <Button type='default' onClick={handleCancel} key='cancel-btn'>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {loading ? (\n          <Loading />\n        ) : (\n          <Form\n            form={form}\n            layout='vertical'\n            onFinish={onFinish}\n            initialValues={{\n              active: Boolean(modal?.active),\n              with_report: Boolean(modal?.with_report),\n              ...modal,\n            }}\n          >\n            <Row gutter={12}>\n              <Col span={12}>\n                <Form.Item\n                  label={t('title')}\n                  name='title'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('period')}\n                  name='month'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <InputNumber min={0} max={12} className='w-100' />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('product_limit')}\n                  name='product_limit'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <InputNumber min={0} className='w-100' />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('order_limit')}\n                  name='order_limit'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <InputNumber min={0} className='w-100' />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('price')}\n                  name='price'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <InputNumber min={0} className='w-100' />\n                </Form.Item>\n              </Col>\n              <Col span={12} />\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('with_report')}\n                  name='with_report'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        )}\n      </Modal>\n    </React.Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-clone.js",[],["6011"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/role-list.js",[],["6012"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/user-detail.js",["6013","6014"],["6015"],"import {\n  Badge,\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Image,\n  PageHeader,\n  Row,\n  Space,\n  Spin,\n  Table,\n  Tag,\n  Typography,\n} from 'antd';\nimport moment from 'moment';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport userService from '../../services/user';\nimport getImage from '../../helpers/getImage';\nimport { fetchUserOrders } from '../../redux/slices/orders';\nimport formatSortType from '../../helpers/formatSortType';\nimport useDemo from '../../helpers/useDemo';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport UserTopProducts from './user-top-products';\nimport UserRefunds from './user-refunds';\nimport hideEmail from 'components/hideEmail';\nimport hideNumber from 'components/hideNumber';\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst UserDetail = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [data, setData] = useState({});\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n\n  const {\n    orders,\n    meta,\n    loading: orderListLoading,\n    params,\n  } = useSelector((state) => state.orders, shallowEqual);\n\n  const {\n    isDemo,\n    demoDeliveryman,\n    demoSeller,\n    demoAdmin,\n    demoModerator,\n    demoMeneger,\n  } = useDemo();\n\n  function fetchUser(uuid) {\n    setLoading(true);\n    userService\n      .getById(uuid)\n      .then((res) => setData(res.data))\n      .finally(() => setLoading(false));\n  }\n\n  const expandedRowRender = (row) => {\n    const columns = [\n      {\n        title: t('product'),\n        dataIndex: 'product',\n        render: (_, data) => (\n          <div\n            className='text-hover'\n            onClick={() => goToProduct(data.stock?.product?.uuid)}\n          >\n            <Space wrap>\n              {data.stock?.product?.translation?.title}\n              {data.addons?.map((addon) => (\n                <Tag key={addon.id}>\n                  {addon?.stock?.product?.translation?.title} x {addon.quantity}\n                </Tag>\n              ))}\n            </Space>\n          </div>\n        ),\n        key: 'product',\n      },\n      {\n        title: t('quantity'),\n        dataIndex: 'quantity',\n        key: 'quantity',\n      },\n      {\n        title: t('total.price'),\n        dataIndex: 'total_price',\n        render: (price) => numberToPrice(price, defaultCurrency?.symbol),\n        key: 'total_price',\n      },\n      {\n        title: t('discount'),\n        dataIndex: 'discount',\n        key: 'discount',\n      },\n    ];\n    return (\n      <Space direction='vertical' className='w-100'>\n        <Typography.Text>{t('ordered.products')}</Typography.Text>\n        <Table\n          scroll={{ x: true }}\n          columns={columns}\n          dataSource={row.details}\n          pagination={false}\n        />\n      </Space>\n    );\n  };\n\n  const goToOrder = (id) => {\n    dispatch(\n      addMenu({\n        url: `/order/details/${id}`,\n        id: 'order.details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/order/details/${id}`);\n  };\n\n  const goToShop = (uuid) => {\n    dispatch(\n      addMenu({\n        url: `/shop/${uuid}`,\n        id: 'edit.shop',\n        name: t('edit.shop'),\n      }),\n    );\n    navigate(`/shop/${uuid}`);\n  };\n\n  const goToProduct = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `product-edit`,\n        url: `product/${uuid}`,\n        name: t('edit.product'),\n      }),\n    );\n    navigate(`/product/${uuid}`);\n  };\n\n  const goToEdit = () => {\n    dispatch(\n      addMenu({\n        url: `user/${id}`,\n        id: 'user_edit',\n        name: t('edit.user'),\n      }),\n    );\n    navigate(`/user/${id}`, { state: 'user' });\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useEffect(() => {\n    fetchUser(id);\n  }, [id]);\n\n  useEffect(() => {\n    const params = {\n      user_id: id,\n      page: 1,\n      perPage: 10,\n    };\n    dispatch(fetchUserOrders(params));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useDidUpdate(() => {\n    const params = {\n      user_id: id,\n      page: activeMenu?.data?.page || 1,\n      perPage: activeMenu?.data?.perPage || 10,\n    };\n    dispatch(fetchUserOrders(params));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      const params = {\n        user_id: id,\n        page: activeMenu?.data?.page || 1,\n        perPage: activeMenu?.data?.perPage || 10,\n      };\n      fetchUser(id);\n      dispatch(fetchUserOrders(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  if (loading)\n    return (\n      <div className='d-flex justify-content-center align-items-center h-100'>\n        <Spin />\n      </div>\n    );\n\n  return (\n    <>\n      <PageHeader\n        title={t('user.info')}\n        extra={\n          <Button\n            type='primary'\n            disabled={\n              /*eslint eqeqeq: \"off\"*/\n              (isDemo && data?.id == demoDeliveryman) ||\n              (isDemo && data?.id == demoModerator) ||\n              (isDemo && data?.id == demoMeneger) ||\n              (isDemo && data?.id == demoSeller) ||\n              (isDemo && data?.id === demoAdmin)\n            }\n            onClick={goToEdit}\n          >\n            {t('edit')}\n          </Button>\n        }\n      />\n      <Row gutter={24}>\n        <Col span={16}>\n          <Card\n            title={`${data?.firstname} ${data?.lastname || ''} #${data?.id}`}\n          >\n            <Image\n              src={getImage(data?.img)}\n              alt={data?.firstname}\n              width={100}\n              height={100}\n              style={{ borderRadius: '10px', objectFit: 'cover' }}\n            />\n            <Descriptions column={2}>\n              <Descriptions.Item label={t('registration.date')}>\n                {moment(data?.registered_at).format('YYYY-MM-DD HH:mm')}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('status')}>\n                <Tag color={data?.active ? 'cyan' : 'red'}>\n                  {data?.active ? t('active') : t('inactive')}\n                </Tag>\n              </Descriptions.Item>\n              <Descriptions.Item label={t('birthday')}>\n                {moment(data?.birthday).format('YYYY-MM-DD')}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('email')}>\n                {ReactAppIsDemo ? hideEmail(data?.email) : data?.email}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('gender')}>\n                {data?.gender}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('role')}>\n                {data?.role}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('wallet')}>\n                {numberToPrice(data?.wallet?.price, defaultCurrency?.symbol)}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('phone')}>\n                {data?.phone\n                  ? ReactAppIsDemo\n                    ? hideNumber(data?.phone)\n                    : data?.phone\n                  : t('no.phone.number')}\n              </Descriptions.Item>\n            </Descriptions>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card title={t('successfull.orders')}>\n            <Descriptions column={1}>\n              <Descriptions.Item label={t('delivered.orders.count')}>\n                <Badge\n                  showZero\n                  style={{ backgroundColor: '#3d7de3' }}\n                  count={data?.o_count || 0}\n                />\n              </Descriptions.Item>\n              <Descriptions.Item label={t('spent.since.registration')}>\n                <Badge\n                  showZero\n                  style={{ backgroundColor: '#48e33d' }}\n                  count={\n                    numberToPrice(data?.o_sum, defaultCurrency?.symbol) || 0\n                  }\n                />\n              </Descriptions.Item>\n            </Descriptions>\n          </Card>\n          {data?.shop && (\n            <Card title={`${t('shop.info')} #${data?.shop.id}`}>\n              <Descriptions column={1}>\n                <Descriptions.Item label={t('name')}>\n                  {data?.shop.translation.title}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('phone')}>\n                  {data?.shop.phone}\n                </Descriptions.Item>\n              </Descriptions>\n            </Card>\n          )}\n        </Col>\n        <Col span={24}>\n          <Card title={t('orders')}>\n            <Table\n              expandable={{\n                expandedRowRender,\n                defaultExpandedRowKeys: ['0'],\n              }}\n              dataSource={orders}\n              columns={[\n                {\n                  title: 'ID',\n                  dataIndex: 'id',\n                  key: 'id',\n                  render: (id) => (\n                    <div onClick={() => goToOrder(id)} className='text-hover'>\n                      #{id}\n                    </div>\n                  ),\n                },\n\n                {\n                  title: t('number.of.products'),\n                  dataIndex: 'order_details_count',\n                  key: 'order_details_count',\n                  render: (count) =>\n                    `${count || 0} ${\n                      count && count < 2 ? t('products') : t('product')\n                    }`,\n                },\n                {\n                  title: t('total.price'),\n                  dataIndex: 'total_price',\n                  key: 'total_price',\n                  render: (total_price) =>\n                    numberToPrice(total_price, defaultCurrency?.symbol),\n                },\n                {\n                  title: t('delivery.date.&.time'),\n                  dataIndex: 'delivery_date',\n                  key: 'delivery_date',\n                  render: (_, row) =>\n                    `${row?.delivery_date} ${row?.delivery_time || ''}`,\n                },\n                {\n                  title: t('status'),\n                  dataIndex: 'status',\n                  key: 'status',\n                  render: (status) => <Tag>{status}</Tag>,\n                },\n                {\n                  title: t('delivery.address'),\n                  dataIndex: 'address',\n                  key: 'address',\n                  render: (_, row) => {\n                    let address;\n\n                    switch (row?.delivery_type) {\n                      case 'delivery':\n                        address =\n                          row?.my_address?.street_house_number ??\n                          t('no.address');\n                        break;\n                      case 'point':\n                        address =\n                          row?.delivery_point?.address?.[defaultLang] ??\n                          t('no.address');\n                        break;\n                      case 'digital':\n                        address = t('digital.delivery');\n                        break;\n                      default:\n                        address = t('no.address');\n                    }\n\n                    return address;\n                  },\n                },\n              ]}\n              loading={orderListLoading}\n              pagination={{\n                pageSize: params.perPage,\n                page: params.page,\n                total: meta.total,\n                defaultCurrent: params.page,\n              }}\n              rowKey={(record) => record.id}\n              onChange={onChangePagination}\n            />\n          </Card>\n          <UserRefunds id={id} />\n          <UserTopProducts id={id} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default UserDetail;\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/user-add.js",[],["6016"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/admin.js",[],["6017","6018","6019","6020","6021","6022"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/user.js",["6023"],["6024"],"import React, { useEffect, useState, useContext } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  ExpandOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Space, Table, Tooltip } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { FaUserCog } from 'react-icons/fa';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport formatSortType from '../../helpers/formatSortType';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport UserShowModal from './userShowModal';\nimport UserRoleModal from './userRoleModal';\nimport { fetchClients } from '../../redux/slices/client';\nimport SearchInput from '../../components/search-input';\nimport FilterColumns from '../../components/filter-column';\nimport DeleteButton from '../../components/delete-button';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport deliveryService from '../../services/delivery';\nimport useDemo from '../../helpers/useDemo';\nimport hideEmail from 'components/hideEmail';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst User = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [id, setId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { clients, loading, meta, params } = useSelector(\n    (state) => state.client,\n    shallowEqual,\n  );\n  const { isDemo } = useDemo();\n  const [uuid, setUuid] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    search: data?.search,\n    status: 'published',\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `user/${row.uuid}`,\n        id: 'user_edit',\n        name: 'User edit',\n      }),\n    );\n    navigate(`/user/${row.uuid}`, { state: 'user' });\n  };\n\n  const goToDetail = (row) => {\n    dispatch(\n      addMenu({\n        url: `users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('firstname'),\n      dataIndex: 'firstname',\n      key: 'firstname',\n      is_show: true,\n    },\n    {\n      title: t('lastname'),\n      dataIndex: 'lastname',\n      key: 'lastname',\n      is_show: true,\n    },\n    {\n      title: t('email'),\n      dataIndex: 'email',\n      key: 'email',\n      is_show: true,\n      render: (email) => <div>{ReactAppIsDemo ? hideEmail(email) : email}</div>,\n    },\n    {\n      title: t('role'),\n      dataIndex: 'role',\n      key: 'role',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      key: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToDetail(row)} />\n            <Button\n              icon={<ExpandOutlined />}\n              onClick={() => setUuid(row.uuid)}\n            />\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Tooltip title={t('change.user.role')}>\n              <Button onClick={() => setUserRole(row)} icon={<FaUserCog />} />\n            </Tooltip>\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const userDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    deliveryService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchClients(paramsData));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchClients(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchClients(paramsData));\n  }, [activeMenu.data]);\n\n  const goToAddClient = () => {\n    dispatch(\n      addMenu({\n        id: 'user-add',\n        url: 'user/add',\n        name: t('add.client'),\n      }),\n    );\n    navigate('/user/add');\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  return (\n    <Card\n      title={t('clients')}\n      extra={\n        <Space wrap>\n          <Space>\n            <Button\n              type='primary'\n              icon={<PlusCircleOutlined />}\n              onClick={goToAddClient}\n            >\n              {t('add.client')}\n            </Button>\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n          </Space>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          className='w-25'\n          handleChange={(e) => handleFilter({ search: e })}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n        />\n      </div>\n\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={clients}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={userDelete}\n        text={t('delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n      {uuid && <UserShowModal uuid={uuid} handleCancel={() => setUuid(null)} />}\n      {userRole && (\n        <UserRoleModal data={userRole} handleCancel={() => setUserRole(null)} />\n      )}\n    </Card>\n  );\n};\n\nexport default User;\n","/home/mostafa/Magde/new/frontadminreact/src/views/cache/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/backup/index.js",["6025"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Button, Table, Tooltip, Result } from 'antd';\nimport { BASE_URL, api_url } from '../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { CloudDownloadOutlined } from '@ant-design/icons';\nimport formatSortType from '../../helpers/formatSortType';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { fetchBackups } from '../../redux/slices/backup';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function Backup() {\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const access_token = localStorage.getItem('token');\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      dataIndex: 'user',\n      key: 'user',\n      render: (user) => (\n        <div>\n          {user.firstname} {user.lastname}\n        </div>\n      ),\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n    },\n    {\n      title: t('options'),\n      dataIndex: 'title',\n      key: 'title',\n      render: (title) => (\n        <Tooltip title={t('download.backup')}>\n          <Button\n            type='primary'\n            icon={<CloudDownloadOutlined />}\n            onClick={() => downloadBackup('/storage/laravel-backup/' + title)}\n          />\n        </Tooltip>\n      ),\n    },\n  ];\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { history, meta, loading, params } = useSelector(\n    (state) => state.backup,\n    shallowEqual\n  );\n  const data = activeMenu.data;\n  const { isDemo } = useDemo();\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    if (isDemo) {\n      return;\n    }\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchBackups(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      if (isDemo) {\n        return;\n      }\n      dispatch(fetchBackups());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const getBackup = () => {\n    toast.warning(!isDemo ? t('backup.loading') : null);\n    if (isDemo) {\n      toast.warning(t('cannot.work.demo'));\n      return;\n    }\n    setLoadingBtn(true);\n    axios\n      .post(\n        `${api_url}dashboard/admin/backup/history`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n            'content-type': 'text/json',\n          },\n        }\n      )\n      .then((res) => downloadBackup(res.data.data.path))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function downloadBackup(path) {\n    const link = document.createElement('a');\n    link.href = BASE_URL + path;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  return (\n    <Card title={t('backup')}>\n      <Result\n        status='warning'\n        title={t('do.you.care.about.your.data')}\n        subTitle={t('here.you.can.take.backup.from.database')}\n        extra={\n          <Button type='primary' loading={loadingBtn} onClick={getBackup}>\n            {t('download.backup')}\n          </Button>\n        }\n      />\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={history}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-tag/index.js",["6026","6027"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Table, Tag } from 'antd';\nimport { IMG_URL } from '../../configs/app-global';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from '../../components/modal';\nimport { Context } from '../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport shopTagService from '../../services/shopTag';\nimport { fetchShopTag } from '../../redux/slices/shopTag';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport FilterColumns from '../../components/filter-column';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport moment from 'moment';\nimport formatSortType from '../../helpers/formatSortType';\n\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst ShopTag = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [role, setRole] = useState('published');\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { shopTag, meta, loading, params } = useSelector(\n    (state) => state.shopTag,\n    shallowEqual\n  );\n  const [id, setId] = useState(null);\n  const data = activeMenu.data;\n  const immutable = data?.role || role;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    status: immutable,\n  };\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n      render: (_, row) => row.translation?.title,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          {row.locales?.map((item, index) => (\n            <Tag color={[colors[index]]} className='text-uppercase'>\n              {item}\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={IMG_URL + img}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAddBanners = () => {\n    dispatch(\n      addMenu({\n        id: 'shop-tag/add',\n        url: 'shop-tag/add',\n        name: t('add.shop.tag'),\n      })\n    );\n    navigate('/shop-tag/add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `shop-tag/${row.id}`,\n        id: 'shop_tag_edit',\n        name: t('edit.shop.tag'),\n      })\n    );\n    navigate(`/shop-tag/${row.id}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        url: `shop-tag/clone/${row.id}`,\n        id: 'shop_tag_clone',\n        name: t('clone.shop.tag'),\n      })\n    );\n    navigate(`/shop-tag/clone/${row.id}`);\n  };\n\n  const tagDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    shopTagService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchShopTag());\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchShopTag(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchShopTag(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  return (\n    <Card\n      title={t('shop.tags')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBanners}\n          >\n            {t('add.tag')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={shopTag}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={tagDelete}\n        text={t('delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default ShopTag;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shops/index.js",["6028"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tabs, Tag, Switch } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport shopService from '../../services/shop';\nimport { fetchShops } from '../../redux/slices/shop';\nimport { useTranslation } from 'react-i18next';\nimport ShopStatusModal from './shop-status-modal';\nimport DeleteButton from '../../components/delete-button';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport CustomDrower from '../../components/CustomDrower';\nimport i18n from '../../configs/i18next';\nimport { BiFilterAlt } from 'react-icons/bi';\nimport FilterColumns from '../../components/filter-column';\nimport formatSortType from '../../helpers/formatSortType';\n\nconst { TabPane } = Tabs;\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\nconst roles = ['all', 'new', 'approved', 'rejected'];\n\nconst Shops = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [shopStatus, setShopStatus] = useState(null);\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const [openDrower, setOpenDrower] = useState(false);\n  const [text, setText] = useState(null);\n  const [role, setRole] = useState('all');\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const immutable = activeMenu.data?.role || role;\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [verify, setVerify] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { shops, meta, loading, params } = useSelector(\n    (state) => state.shop,\n    shallowEqual,\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-shop',\n        url: `shop/${row.uuid}`,\n        name: t('edit.shop'),\n      }),\n    );\n    navigate(`/shop/${row.uuid}`, { state: 'edit' });\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        id: 'shop-clone',\n        url: `shop-clone/${row.uuid}`,\n        name: t('shop.clone'),\n      }),\n    );\n    navigate(`/shop-clone/${row.uuid}`, { state: 'clone' });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: true,\n      key: 'id',\n    },\n    {\n      title: t('title'),\n      dataIndex: 'name',\n      is_show: true,\n      key: 'title',\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      key: 'locales',\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('logo'),\n      dataIndex: 'logo_img',\n      is_show: true,\n      key: 'logo',\n      render: (img, row) => {\n        return (\n          <Image\n            alt={'images background'}\n            className='img rounded'\n            src={img || 'https://via.placeholder.com/150'}\n            effect='blur'\n            width={50}\n            height={50}\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('background'),\n      dataIndex: 'back',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            alt={'images background'}\n            className='img rounded'\n            src={img || 'https://via.placeholder.com/150'}\n            effect='blur'\n            width={50}\n            height={50}\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('seller'),\n      dataIndex: 'seller',\n      is_show: true,\n      key: 'seller',\n    },\n    {\n      title: t('open.time'),\n      dataIndex: 'open',\n      is_show: true,\n      key: 'open.time',\n      render: (_, row) => {\n        return row.open ? (\n          <Tag color='blue'> {t('open')} </Tag>\n        ) : (\n          <Tag color='red'> {t('closed')} </Tag>\n        );\n      },\n    },\n    {\n      title: t('tax'),\n      is_show: true,\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (tax) => (!!tax ? `${tax} %` : `0 %`),\n    },\n    {\n      title: t('verify'),\n      dataIndex: 'verify',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setVerify(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'rejected' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setShopStatus(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      key: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n            {user?.role !== 'manager' ? (\n              <DeleteButton\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  setId([row.id]);\n                  setIsModalVisible(true);\n                  setText(true);\n                  setVerify(false);\n                }}\n              />\n            ) : (\n              ''\n            )}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const data = activeMenu?.data;\n  const paramsData = {\n    search: data?.search,\n    lang: data?.filter?.equal === 'equal' ? data?.filter?.lang : i18n.language,\n    not_lang: data?.filter?.equal === 'not_equal' ? data?.filter?.lang : null,\n    status: immutable === 'all' ? undefined : immutable,\n    page: data?.page,\n    perPage: data?.perPage,\n    sort: data?.sort,\n    column: data?.column,\n  };\n\n  const shopDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    shopService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchShops(paramsData));\n        setText(null);\n        setVerify(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleVerify = () => {\n    setLoadingBtn(true);\n    shopService\n      .setVerify(id)\n      .then((res) => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.updated'));\n        dispatch(fetchShops(paramsData));\n        setVerify(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n        setId(null);\n      });\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchShops(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchShops(paramsData));\n  }, [data]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add-shop',\n        url: `shop/add`,\n        name: t('add.shop'),\n      }),\n    );\n    navigate(`/shop/add`);\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('shops')}\n      extra={\n        <Space wrap>\n          <Space wrap>\n            <Button\n              icon={<PlusCircleOutlined />}\n              type='primary'\n              onClick={goToAdd}\n            >\n              {t('add.shop')}\n            </Button>\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n          </Space>\n          <Button\n            className='settings-button'\n            onClick={() => setOpenDrower(true)}\n          >\n            <BiFilterAlt className='icon' />\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          handleChange={(e) => handleFilter({ search: e })}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n          className={'w-25'}\n        />\n      </div>\n      <Tabs\n        className='mt-3'\n        activeKey={immutable}\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n      >\n        {roles.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={shops}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n      {shopStatus && (\n        <ShopStatusModal\n          data={shopStatus}\n          handleCancel={() => setShopStatus(null)}\n          paramsData={paramsData}\n        />\n      )}\n      <CustomModal\n        click={verify ? handleVerify : shopDelete}\n        text={\n          verify\n            ? t('set.verify.product')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n        setVerify={setVerify}\n      />\n      {openDrower && (\n        <CustomDrower\n          handleClose={() => setOpenDrower(false)}\n          openDrower={openDrower}\n          setMenuData={setMenuData}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport default Shops;\n","/home/mostafa/Magde/new/frontadminreact/src/views/units/unit-edit.js",["6029","6030"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport unitService from '../../services/unit';\nimport { fetchUnits } from '../../redux/slices/unit';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\n\nexport default function UnitEdit() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchUnit = (id) => {\n    setLoading(true);\n    unitService\n      .getById(id)\n      .then(({ data }) => {\n        const translations = getLanguageFields(data);\n        form.setFieldsValue({ ...data, ...translations });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/units';\n    unitService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchUnits());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchUnit(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.unit')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ ...activeMenu.data }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, idx) => (\n                <Form.Item\n                  key={'title' + idx}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('position')}\n                  name='position'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Select>\n                    <Select.Option value='after'>{t('after')}</Select.Option>\n                    <Select.Option value='before'>{t('before')}</Select.Option>\n                  </Select>\n                </Form.Item>\n              </div>\n            </Col>\n\n            <Col span={6}>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </div>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/units/unit-add.js",["6031"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { fetchUnits } from '../../redux/slices/unit';\nimport unitService from '../../services/unit';\nimport LanguageList from '../../components/language-list';\nimport { useTranslation } from 'react-i18next';\n\nexport default function UnitAdd() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/units';\n    unitService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchUnits({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.unit')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, idx) => (\n              <Form.Item\n                key={'title' + idx}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <div className='col-md-12 col-sm-6'>\n              <Form.Item\n                label={t('position')}\n                name='position'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select>\n                  <Select.Option value='after'>{t('after')}</Select.Option>\n                  <Select.Option value='before'>{t('before')}</Select.Option>\n                </Select>\n              </Form.Item>\n            </div>\n          </Col>\n\n          <Col span={6}>\n            <div className='col-md-12 col-sm-6'>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </div>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/sms-payload/index.js",[],["6032"],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-order-edit.js",["6033","6034"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Form, Steps } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport LanguageList from 'components/language-list';\nimport { useTranslation } from 'react-i18next';\nimport { steps } from './steps';\nimport ParcelSender from './parcel-sender';\nimport ParcelReceiver from './parcel-receiver';\nimport ParcelDetails from './parcel-details';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport { useDispatch } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport moment from 'moment';\nimport parcelOrderService from 'services/parcelOrder';\nimport { fetchParcelOrders } from 'redux/slices/parcelOrders';\nimport { toast } from 'react-toastify';\nimport createImage from 'helpers/createImage';\nimport Loading from 'components/loading';\n\nconst { Step } = Steps;\n\nexport default function ParcelOrderEdit() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { id } = useParams();\n  const queryParams = useQueryParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [image, setImage] = useState(activeMenu?.data?.images || []);\n  const [locationFrom, setLocationFrom] = useState(\n    activeMenu?.data?.location_from\n      ? {\n          lat: parseFloat(activeMenu?.data?.location_from?.latitude),\n          lng: parseFloat(activeMenu?.data?.location_from?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n  const [locationTo, setLocationTo] = useState(\n    activeMenu?.data?.location_to\n      ? {\n          lat: parseFloat(activeMenu?.data?.location_to?.latitude),\n          lng: parseFloat(activeMenu?.data?.location_to?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n\n  useEffect(() => {\n    return () => {\n      const values = form.getFieldsValue(true);\n      const date = JSON.stringify(values.delivery_date);\n      const time = JSON.stringify(values.delivery_time);\n      const data = { ...values, date, time };\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    queryParams.set('step', step);\n  };\n\n  const fetchParcel = (id) => {\n    setLoading(true);\n    parcelOrderService\n      .getById(id)\n      .then((res) => {\n        let data = res.data;\n        setImage([createImage(data.img)]);\n        setLocationFrom({\n          lat: data?.address_from?.latitude,\n          lng: data?.address_from?.longitude,\n        });\n        setLocationTo({\n          lat: data?.address_to?.latitude,\n          lng: data?.address_to?.longitude,\n        });\n        const body = {\n          ...data,\n          image: [createImage(data.img)],\n          delivery_time: !!data?.delivery_date\n            ? moment(data?.delivery_date, 'YYYY-MM-DD HH:mm:ss')\n            : null,\n          delivery_date: !!data?.delivery_date\n            ? moment(data.delivery_date, 'YYYY-MM-DD')\n            : null,\n          address_from: data?.address_from?.address,\n          address_to: data?.address_to?.address,\n          house_from: data?.address_from?.house,\n          house_to: data?.address_to?.house,\n          stage_from: data?.address_from?.stage,\n          stage_to: data?.address_to?.stage,\n          room_from: data?.address_from?.room,\n          room_to: data?.address_to?.room,\n          user_from: {\n            label: [data.user?.firstname, data.user?.lastname].join(' '),\n            value: data.user?.id,\n            key: data.user?.id,\n          },\n          type: {\n            label: data.type?.type,\n            value: data.type?.id,\n            key: data.type?.id,\n          },\n          payment_type: {\n            label: t(data?.transaction?.payment_system.tag),\n            value: data?.transaction?.payment_system?.id,\n            key: data?.transaction?.payment_system?.id,\n          },\n        };\n        form.setFieldsValue(body);\n        dispatch(setMenuData({ activeMenu, data: body }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      fetchParcel(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const deliveryTime = moment(values.delivery_time, 'HH:mm')\n      .format('HH:mm')\n      ?.split(':');\n\n    const deliveryDate = new Date(values.delivery_date);\n    deliveryDate.setHours(Number(deliveryTime[0]));\n    deliveryDate.setMinutes(Number(deliveryTime[1]));\n\n    const payload = {\n      user_id: values.user_from?.value,\n      currency_id: defaultCurrency?.id,\n      type_id: values.type?.value,\n      rate: defaultCurrency?.rate,\n      phone_from: values.phone_from.toString(),\n      username_from: values.username_from,\n      address_from: {\n        longitude: locationFrom?.lng,\n        latitude: locationFrom?.lat,\n        address: values.address_from,\n        house: values.house_from,\n        stage: values.stage_from,\n        room: values.room_from,\n      },\n      phone_to: values.phone_to.toString(),\n      username_to: values.username_to,\n      address_to: {\n        longitude: locationTo?.lng,\n        latitude: locationTo?.lat,\n        address: values.address_to,\n        house: values.house_to,\n        stage: values.stage_to,\n        room: values.room_to,\n      },\n      delivery_date: moment(deliveryDate).format('YYYY-MM-DD HH:mm'),\n      // delivery_time: moment(values.delivery_time, 'HH:mm').format('HH:mm'),\n      note: values.note,\n      images: image.map((item) => item.name),\n    };\n    const nextUrl = 'parcel-orders';\n    parcelOrderService\n      .update(id, payload)\n      .then(() => {\n        dispatch(fetchParcelOrders());\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onFinishFailed = (event) => {\n    const steps = ['', '', ''];\n    const fields = event.errorFields.map((item) => item.name[0]);\n    fields.forEach((el) => {\n      if (el.includes('_from')) {\n        steps[0] = 'sender.details.invalid';\n        return;\n      }\n      if (el.includes('_to')) {\n        steps[1] = 'receiver.details.invalid';\n        return;\n      }\n      steps[2] = 'parcel.details.invalid';\n    });\n    steps.forEach((item) => {\n      if (item) toast.error(t(item));\n    });\n  };\n\n  return (\n    <Card\n      title={!!id ? t('edit.parcel.order') : t('add.parcel.order')}\n      extra={<LanguageList />}\n    >\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n\n      <div className='steps-content'>\n        {!loading ? (\n          <Form\n            form={form}\n            name='parcel-create'\n            layout='vertical'\n            onFinish={onFinish}\n            initialValues={{\n              ...activeMenu.data,\n            }}\n            onFinishFailed={onFinishFailed}\n          >\n            <div\n              className={\n                steps[current].content === 'First-content' ? '' : 'd-none'\n              }\n            >\n              <ParcelSender\n                form={form}\n                next={next}\n                location={locationFrom}\n                setLocation={setLocationFrom}\n              />\n            </div>\n            <div\n              className={\n                steps[current].content === 'Second-content' ? '' : 'd-none'\n              }\n            >\n              <ParcelReceiver\n                form={form}\n                next={next}\n                prev={prev}\n                location={locationTo}\n                setLocation={setLocationTo}\n              />\n            </div>\n            <div\n              className={\n                steps[current].content === 'Third-content' ? '' : 'd-none'\n              }\n            >\n              <ParcelDetails\n                form={form}\n                loading={loadingBtn}\n                prev={prev}\n                locationFrom={locationFrom}\n                locationTo={locationTo}\n                image={image}\n                setImage={setImage}\n              />\n            </div>\n          </Form>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-order-add.js",["6035"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Form, Steps } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { batch, shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { steps } from './steps';\nimport ParcelSender from './parcel-sender';\nimport ParcelReceiver from './parcel-receiver';\nimport ParcelDetails from './parcel-details';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport { useDispatch } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport moment from 'moment';\nimport parcelOrderService from 'services/parcelOrder';\nimport { fetchParcelOrders } from 'redux/slices/parcelOrders';\nimport { toast } from 'react-toastify';\n\nconst { Step } = Steps;\n\nexport default function ParcelOrderAdd() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const queryParams = useQueryParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const current = Number(queryParams.values?.step || 0);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [image, setImage] = useState(activeMenu?.data?.images || []);\n  const [locationFrom, setLocationFrom] = useState(\n    activeMenu?.data?.location_from\n      ? {\n          lat: parseFloat(activeMenu?.data?.location_from?.latitude),\n          lng: parseFloat(activeMenu?.data?.location_from?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n  const [locationTo, setLocationTo] = useState(\n    activeMenu?.data?.location_to\n      ? {\n          lat: parseFloat(activeMenu?.data?.location_to?.latitude),\n          lng: parseFloat(activeMenu?.data?.location_to?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n\n  useEffect(() => {\n    return () => {\n      const values = form.getFieldsValue(true);\n      const date = JSON.stringify(values.delivery_date);\n      const time = JSON.stringify(values.delivery_time);\n      const data = { ...values, date, time };\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    queryParams.set('step', step);\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const payload = {\n      user_id: values.user_from?.value,\n      currency_id: defaultCurrency?.id,\n      type_id: values.type?.value,\n      rate: defaultCurrency?.rate,\n      phone_from: values.phone_from.toString(),\n      username_from: values.username_from,\n      address_from: {\n        longitude: locationFrom?.lng,\n        latitude: locationFrom?.lat,\n        address: values.address_from,\n        house: values.house_from,\n        stage: values.stage_from,\n        room: values.room_from,\n      },\n      phone_to: values.phone_to.toString(),\n      username_to: values.username_to,\n      address_to: {\n        longitude: locationTo?.lng,\n        latitude: locationTo?.lat,\n        address: values.address_to,\n        house: values.house_to,\n        stage: values.stage_to,\n        room: values.room_to,\n      },\n      delivery_date: moment(values.delivery_date).format('YYYY-MM-DD HH:mm'),\n      note: values.note,\n      images: image.map((item) => item.name),\n      payment_id: values.payment_type.value,\n    };\n\n    const nextUrl = 'parcel-orders';\n    parcelOrderService\n      .create(payload)\n      .then((res) => {\n        batch(() => {\n          dispatch(fetchParcelOrders({}));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        });\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onFinishFailed = (event) => {\n    const steps = ['', '', ''];\n    const fields = event.errorFields.map((item) => item.name[0]);\n    fields.forEach((el) => {\n      if (el.includes('_from')) {\n        steps[0] = 'sender.details.invalid';\n        return;\n      }\n      if (el.includes('_to')) {\n        steps[1] = 'receiver.details.invalid';\n        return;\n      }\n      steps[2] = 'parcel.details.invalid';\n    });\n    steps.forEach((item) => {\n      if (item) toast.error(t(item));\n    });\n  };\n\n  return (\n    <Card title={t('add.parcel.order')}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n\n      <div className='steps-content'>\n        <Form\n          form={form}\n          name='parcel-create'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            ...activeMenu.data,\n          }}\n          onFinishFailed={onFinishFailed}\n        >\n          <div\n            className={\n              steps[current].content === 'First-content' ? '' : 'd-none'\n            }\n          >\n            <ParcelSender\n              form={form}\n              next={next}\n              location={locationFrom}\n              setLocation={setLocationFrom}\n            />\n          </div>\n          <div\n            className={\n              steps[current].content === 'Second-content' ? '' : 'd-none'\n            }\n          >\n            <ParcelReceiver\n              form={form}\n              next={next}\n              prev={prev}\n              location={locationTo}\n              setLocation={setLocationTo}\n            />\n          </div>\n          <div\n            className={\n              steps[current].content === 'Third-content' ? '' : 'd-none'\n            }\n          >\n            <ParcelDetails\n              form={form}\n              loading={loadingBtn}\n              prev={prev}\n              locationFrom={locationFrom}\n              locationTo={locationTo}\n              image={image}\n              setImage={setImage}\n            />\n          </div>\n        </Form>\n      </div>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/landing-page/landing-page-edit.js",["6036","6037"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { fetchLandingPages } from 'redux/slices/landing-page';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport landingPageService from 'services/landingPage';\nimport ImageUploadSingle from 'components/image-upload-single';\nimport createImage from 'helpers/createImage';\nconst TextArea = Input.TextArea;\n\nconst LandingPageEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const { id } = useParams();\n  const [image, setImage] = useState(activeMenu?.data?.img);\n  const [media, setMedia] = useState(\n    activeMenu?.data\n      ? [\n          activeMenu?.data['features[0].img'],\n          activeMenu?.data['features[1].img'],\n          activeMenu?.data['features[2].img'],\n        ]\n      : ['', '', '']\n  );\n\n  const updateMedia = (obj, idx) => {\n    const list = [...media];\n    list[idx] = obj;\n    setMedia(list);\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const title = {};\n    const description = {};\n    languages.forEach((element) => {\n      title[`title[${element.locale}]`] = data.title.hasOwnProperty(\n        element.locale\n      )\n        ? data.title[element.locale]\n        : undefined;\n      description[`description[${element.locale}]`] =\n        data.description.hasOwnProperty(element.locale)\n          ? data.description[element.locale]\n          : undefined;\n    });\n    return { ...title, ...description };\n  }\n\n  const getLandingPage = (alias) => {\n    setLoading(true);\n    landingPageService\n      .getById(alias)\n      .then(({ data }) => {\n        const payload = {\n          ...getLanguageFields(data?.data),\n          features: data?.data?.features?.map((item) => ({\n            ...getLanguageFields(item),\n          })),\n        };\n        form.setFieldsValue(payload);\n        setImage(createImage(data?.data?.img));\n        setMedia(data?.data?.features?.map((item) => createImage(item.img)));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      img: image?.name,\n      features: values.features.map((item, idx) => ({\n        img: media[idx]?.name,\n        title: getTranslationFields(languages, item, 'title'),\n        description: getTranslationFields(languages, item, 'description'),\n      })),\n    };\n    landingPageService\n      .update(id, { data: body, type: 'welcome' })\n      .then(() => {\n        const nextUrl = 'settings/landing-page';\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchLandingPages());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getLandingPage(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('edit.landing.page')}\n      className='h-100'\n      extra={<LanguageList />}\n    >\n      {!loading ? (\n        <Form\n          name='landing-page-edit'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ features: ['', '', ''], ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.locale}\n                  label={`${t('title')} (${item.locale})`}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n              {languages.map((item) => (\n                <Form.Item\n                  key={'description' + item.locale}\n                  label={`${t('description')} (${item.locale})`}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={3} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item label={t('background.image')}>\n                <ImageUploadSingle\n                  type='languages'\n                  image={image}\n                  setImage={setImage}\n                  form={form}\n                  name='img'\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Card title={t('features')}>\n            <Form.List name='features'>\n              {(fields) => {\n                return (\n                  <div>\n                    {fields.map((field, index) => (\n                      <Row\n                        key={field.key}\n                        gutter={12}\n                        align='middle'\n                        style={{\n                          borderBottom: '1px solid var(--grey)',\n                          marginBottom: 24,\n                          borderWidth: index === 2 ? 0 : 1,\n                        }}\n                      >\n                        <Col span={20}>\n                          {languages.map((item) => (\n                            <Form.Item\n                              key={'title' + item.locale}\n                              label={`${t('title')} (${item.locale})`}\n                              name={[index, `title[${item.locale}]`]}\n                              rules={[\n                                {\n                                  required: item.locale === defaultLang,\n                                  message: t('required'),\n                                },\n                              ]}\n                              hidden={item.locale !== defaultLang}\n                            >\n                              <Input />\n                            </Form.Item>\n                          ))}\n                          {languages.map((item) => (\n                            <Form.Item\n                              key={'description' + item.locale}\n                              label={`${t('description')} (${item.locale})`}\n                              name={[index, `description[${item.locale}]`]}\n                              rules={[\n                                {\n                                  required: item.locale === defaultLang,\n                                  message: t('required'),\n                                },\n                              ]}\n                              hidden={item.locale !== defaultLang}\n                            >\n                              <TextArea rows={3} />\n                            </Form.Item>\n                          ))}\n                        </Col>\n                        <Col span={4}>\n                          <Form.Item label={t('media')}>\n                            <ImageUploadSingle\n                              type='languages'\n                              isVideo\n                              image={media[index]}\n                              setImage={(obj) => updateMedia(obj, index)}\n                              form={form}\n                              name={`features[${index}].img`}\n                            />\n                          </Form.Item>\n                        </Col>\n                      </Row>\n                    ))}\n                  </div>\n                );\n              }}\n            </Form.List>\n          </Card>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default LandingPageEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-reviews/index.js",["6038"],[],"import React, { useEffect, useState } from 'react';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport { fetchShopReviews } from 'redux/slices/shop-reviews';\nimport ShopReviewShowModal from './shopReviewShow';\nimport moment from 'moment';\nimport FilterColumns from 'components/filter-column';\nimport shopService from 'services/restaurant';\nimport { InfiniteSelect } from 'components/infinite-select';\n\nexport default function SellerOrderReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [links, setLinks] = useState(null);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'order',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => <div>{user?.lastname + user?.firstname}</div>,\n    },\n    {\n      title: t('comment'),\n      dataIndex: 'comment',\n      key: 'comment',\n      is_show: true,\n      render: (_, row) => {\n        const comment = row?.comment?.split(',');\n        const name = comment?.at(0);\n\n        return <div>{name}</div>;\n      },\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.shopReviews,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchShopReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n      type: 'shop',\n      type_id: data?.selectedShop?.value,\n    };\n    dispatch(fetchShopReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  async function fetchUserShop({ search, page }) {\n    const params = {\n      search: search?.length === 0 ? undefined : search,\n      status: 'approved',\n      page: page,\n    };\n    return shopService.search(params).then((res) => {\n      setLinks(res.links);\n      return res.data.map((item) => ({\n        label: item.translation !== null ? item.translation.title : 'no name',\n        value: item.id,\n      }));\n    });\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('shop.reviews')}\n      extra={\n        <Space wrap>\n          <InfiniteSelect\n            placeholder={t('select.shop')}\n            hasMore={links?.next}\n            loading={loading}\n            fetchOptions={fetchUserShop}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ selectedShop: e })}\n            value={activeMenu.data?.selectedShop}\n          />\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {show && (\n        <ShopReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/landing-page/landing-page-add.js",["6039"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { fetchLandingPages } from 'redux/slices/landing-page';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport landingPageService from 'services/landingPage';\nimport ImageUploadSingle from 'components/image-upload-single';\nconst TextArea = Input.TextArea;\n\nconst LandingPageAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [image, setImage] = useState(activeMenu?.data?.img);\n  const [media, setMedia] = useState(\n    activeMenu?.data\n      ? [\n          activeMenu?.data['features[0].img'],\n          activeMenu?.data['features[1].img'],\n          activeMenu?.data['features[2].img'],\n        ]\n      : ['', '', '']\n  );\n\n  const updateMedia = (obj, idx) => {\n    const list = [...media];\n    list[idx] = obj;\n    setMedia(list);\n  };\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      img: image?.name,\n      features: values.features.map((item, idx) => ({\n        img: media[idx]?.name,\n        title: getTranslationFields(languages, item, 'title'),\n        description: getTranslationFields(languages, item, 'description'),\n      })),\n    };\n    landingPageService\n      .create({ data: body, type: 'welcome' })\n      .then(() => {\n        const nextUrl = 'settings/landing-page';\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchLandingPages());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card\n      title={t('add.landing.page')}\n      className='h-100'\n      extra={<LanguageList />}\n    >\n      <Form\n        name='landing-page-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ features: ['', '', ''], ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                label={`${t('title')} (${item.locale})`}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n            {languages.map((item) => (\n              <Form.Item\n                key={'description' + item.locale}\n                label={`${t('description')} (${item.locale})`}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={3} />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item label={t('background.image')}>\n              <ImageUploadSingle\n                type='languages'\n                image={image}\n                setImage={setImage}\n                form={form}\n                name='img'\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Card title={t('features')}>\n          <Form.List name='features'>\n            {(fields) => {\n              return (\n                <div>\n                  {fields.map((field, index) => (\n                    <Row\n                      key={field.key}\n                      gutter={12}\n                      align='middle'\n                      style={{\n                        borderBottom: '1px solid var(--grey)',\n                        marginBottom: 24,\n                        borderWidth: index === 2 ? 0 : 1,\n                      }}\n                    >\n                      <Col span={20}>\n                        {languages.map((item) => (\n                          <Form.Item\n                            key={'title' + item.locale}\n                            label={`${t('title')} (${item.locale})`}\n                            name={[index, `title[${item.locale}]`]}\n                            rules={[\n                              {\n                                required: item.locale === defaultLang,\n                                message: t('required'),\n                              },\n                            ]}\n                            hidden={item.locale !== defaultLang}\n                          >\n                            <Input />\n                          </Form.Item>\n                        ))}\n                        {languages.map((item) => (\n                          <Form.Item\n                            key={'description' + item.locale}\n                            label={`${t('description')} (${item.locale})`}\n                            name={[index, `description[${item.locale}]`]}\n                            rules={[\n                              {\n                                required: item.locale === defaultLang,\n                                message: t('required'),\n                              },\n                            ]}\n                            hidden={item.locale !== defaultLang}\n                          >\n                            <TextArea rows={3} />\n                          </Form.Item>\n                        ))}\n                      </Col>\n                      <Col span={4}>\n                        <Form.Item label={t('media')}>\n                          <ImageUploadSingle\n                            type='languages'\n                            image={media[index]}\n                            isVideo\n                            setImage={(obj) => updateMedia(obj, index)}\n                            form={form}\n                            name={`features[${index}].img`}\n                          />\n                        </Form.Item>\n                      </Col>\n                    </Row>\n                  ))}\n                </div>\n              );\n            }}\n          </Form.List>\n        </Card>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default LandingPageAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/units/index.js",["6040"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { EditOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { Button, Table, Space, Card, Switch } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport unitService from '../../services/unit';\nimport { fetchUnits } from '../../redux/slices/unit';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from '../../components/filter-column';\nimport DeleteButton from '../../components/delete-button';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\n\nexport default function Units() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [uuid, setUUID] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const [text, setText] = useState(null);\n  const [active, setActive] = useState(null);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'unit-edit',\n        url: `unit/${row.id}`,\n        name: t('edit.unit'),\n      })\n    );\n    navigate(`/unit/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    {\n      title: t('position'),\n      dataIndex: 'position',\n      is_show: true,\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setUUID([row.id]);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              onClick={() => {\n                setUUID([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { units, meta, loading, params } = useSelector(\n    (state) => state.unit,\n    shallowEqual\n  );\n\n  const unitDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...uuid.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    unitService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        setText(null);\n        setActive(false);\n        dispatch(fetchUnits());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function formatSortType(type) {\n    switch (type) {\n      case 'ascend':\n        return 'asc';\n\n      case 'descend':\n        return 'desc';\n\n      default:\n        break;\n    }\n  }\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    const data = uuid.find((item) => item);\n\n    unitService\n      .setActive(data)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchUnits());\n        setUUID([]);\n        setActive(false);\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChange(pagination, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(fetchUnits({ ...params, perPage, page, column, sort }));\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchUnits());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const goToAddUnit = () => {\n    dispatch(\n      addMenu({\n        id: 'unit-add',\n        url: 'unit/add',\n        name: t('add.unit'),\n      })\n    );\n    navigate('/unit/add');\n  };\n\n  const rowSelection = {\n    selectedRowKeys: uuid,\n    onChange: (key) => {\n      setUUID(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (uuid === null || uuid.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      })\n    );\n  };\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      search: data?.search,\n    };\n    dispatch(fetchUnits(paramsData));\n  }, [activeMenu.data]);\n\n  return (\n    <Card\n      title={t('units')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            onClick={goToAddUnit}\n            icon={<PlusCircleOutlined />}\n          >\n            {t('add.unit')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          className='w-25'\n          handleChange={(search) => handleFilter(search, 'search')}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n        />\n      </div>\n\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={units}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        onChange={onChange}\n        rowKey={(record) => record.id}\n      />\n      <CustomModal\n        click={active ? handleActive : unitDelete}\n        text={\n          active ? t('set.active.food') : text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setUUID}\n        setActive={setActive}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/option-edit.js",["6041"],[],"import React, { useEffect, useState } from 'react';\nimport ParcelOptionForm from './option-form';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport parcelOptionService from 'services/parcel-option';\nimport Loading from 'components/loading';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport { useDispatch } from 'react-redux';\nimport { removeFromMenu } from 'redux/slices/menu';\n\nexport default function OptionEdit() {\n  const { id } = useParams();\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const { t } = useTranslation();\n  const [isFetching, setIsFetching] = useState(false);\n  const [isUpdating, setUpdating] = useState(false);\n  const [data, setData] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const getOption = async () => {\n    setIsFetching(true);\n    parcelOptionService\n      .getById(id)\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => {\n        setIsFetching(false);\n      });\n  };\n\n  const handleUpdate = (values) => {\n    setUpdating(true);\n    parcelOptionService\n      .update(id, { title: getTranslationFields(languages, values, 'title') })\n      .then(() => {\n        navigate('/options');\n        toast.success(t('succesfully.updated'));\n        const nextUrl = 'options'\n        dispatch(removeFromMenu({...activeMenu, nextUrl}));\n      })\n      .finally(() => {\n        setUpdating(false);\n      });\n  };\n\n  useEffect(() => {\n    getOption();\n  }, []);\n\n  if (isFetching) {\n    return <Loading />;\n  }\n\n  return (\n    <ParcelOptionForm\n      data={data}\n      onFinish={handleUpdate}\n      isSubmitting={isUpdating}\n    />\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-types/parcel-type.js",["6042","6043"],[],"import React, { useEffect, useState } from 'react';\nimport { Input, Form, Row, Col, Button, Card, InputNumber, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport parcelTypeService from 'services/parcelType';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport createImage from 'helpers/createImage';\nimport Loading from 'components/loading';\nimport MediaUpload from 'components/upload';\nimport { fetchParcelTypes } from 'redux/slices/parcelTypes';\nimport parcelOptionService from 'services/parcel-option';\nimport { RefetchSearch } from 'components/refetch-search';\n\nexport default function ParcelType() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [image, setImage] = useState(activeMenu?.data?.image || []);\n  const [special, setSpecial] = useState(activeMenu?.data?.special);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } }),\n      );\n    };\n  }, []);\n\n  const fetchParcel = (id) => {\n    setLoading(true);\n    parcelTypeService\n      .getById(id)\n      .then((res) => {\n        let data = res.data;\n        setImage([createImage(data.img)]);\n        setSpecial(data.special);\n        form.setFieldsValue({\n          ...data,\n          options: data?.options.map((option) => ({\n            label: option.translation?.title,\n            value: option.id,\n          })),\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      special: Boolean(values.special),\n      special_price: values.special_price || 0,\n      special_price_per_km: values.special_price_per_km || 0,\n      images: image?.map((item) => item.name),\n      image: undefined,\n      options: values.options?.map((option) => option.value),\n    };\n\n    const nextUrl = 'parcel-types';\n    if (!id) {\n      parcelTypeService\n        .create(body)\n        .then(() => {\n          dispatch(fetchParcelTypes());\n          toast.success(t('successfully.created'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    } else {\n      parcelTypeService\n        .update(id, body)\n        .then(() => {\n          dispatch(fetchParcelTypes());\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  const getOptions = async (search) => {\n    return parcelOptionService.getAll({ search }).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n      })),\n    );\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      fetchParcel(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={id ? t('edit.parcel.type') : t('add.parcel.type')}>\n      {!loading ? (\n        <Form\n          form={form}\n          name='parcel-type'\n          layout='vertical'\n          initialValues={{ ...activeMenu.data }}\n          onFinish={onFinish}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name='type'\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2')),\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image?.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='languages'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('start.price')}\n                name='price'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('price.per.km')}\n                name='price_per_km'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_width')}\n                name='min_width'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_width')}\n                name='max_width'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_height')}\n                name='min_height'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_height')}\n                name='max_height'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_length')}\n                name='min_length'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_length')}\n                name='max_length'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_weight')}\n                name='min_g'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='gramm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_weight')}\n                name='max_g'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={2147000000}\n                  className='w-100'\n                  addonAfter='gramm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item label={t('options')} name='options'>\n                <RefetchSearch fetchOptions={getOptions} mode='multiple' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item label={t('max.range')} name='max_range'>\n                <InputNumber min={0} className='w-100' addonAfter='km' />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('special')}\n                name='special'\n                valuePropName='checked'\n              >\n                <Switch onChange={(value) => setSpecial(value)} />\n              </Form.Item>\n            </Col>\n            {!!special && (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('start.price')}\n                    name='special_price'\n                    rules={[{ required: true, message: t('required') }]}\n                  >\n                    <InputNumber min={0} className='w-100' />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('price.per.km')}\n                    name='special_price_per_km'\n                    rules={[{ required: true, message: t('required') }]}\n                  >\n                    <InputNumber min={0} className='w-100' />\n                  </Form.Item>\n                </Col>\n              </>\n            )}\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/option-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/subscriptions/index.js",["6044"],[],"import React, { useEffect, useState } from 'react';\nimport { Badge, Button, Card, Col, Row, Space, Spin } from 'antd';\nimport subscriptionService from '../../services/subscriptions';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport SubscriptionEditModal from './subscriptions-edit';\nimport SubscriptionAddModal from './subscriptions-add';\nimport { EditOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport { disableRefetch } from '../../redux/slices/menu';\n\nconst features = [];\n\nconst Subscriptions = () => {\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [add, setAdd] = useState(null);\n  const [edit, setEdit] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const colCount = data.length;\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const fetchSubscriptionList = () => {\n    setLoading(true);\n    subscriptionService\n      .getAll()\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSubscriptionList();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <>\n      <Card\n        className='h-100'\n        extra={\n          <Space>\n            <Button\n              type='primary'\n              icon={<PlusCircleOutlined />}\n              onClick={() => setAdd(true)}\n            >\n              {t('add.subscription')}\n            </Button>\n          </Space>\n        }\n      >\n        {!loading ? (\n          <div>\n            <div className='text-center mb-4'>\n              <h2 className='font-weight-semibold'>Pick a base plan</h2>\n              <Row type='flex' justify='center'>\n                <Col sm={24} md={12} lg={8}>\n                  <p>\n                    Space, the final frontier. These are the voyages of the\n                    Starship Enterprise. Its five-year mission.\n                  </p>\n                </Col>\n              </Row>\n            </div>\n            <Row>\n              {data.map((elm, i) => (\n                <Col\n                  key={`price-column-${i}`}\n                  span={6}\n                  className={colCount === i + 1 ? '' : 'border-right'}\n                >\n                  <div className='p-3'>\n                    <div className='text-center'>\n                      <h1 className='display-4 mt-4'>\n                        <span\n                          className='font-size-md d-inline-block mr-1'\n                          style={{ transform: 'translate(0px, -17px)' }}\n                        >\n                          {defaultCurrency?.symbol}\n                        </span>\n                        <span>{elm.price}</span>\n                      </h1>\n                      <p className='mb-0 text-lowercase'>\n                        {elm.month} {t('month')}\n                      </p>\n                    </div>\n                    <div className='mt-4'>\n                      <h2\n                        className='text-center font-weight-semibold cursor-pointer'\n                        onClick={() => setEdit(elm)}\n                      >\n                        {elm.title}{' '}\n                        <span className='ant-btn-link'>\n                          <EditOutlined />\n                        </span>\n                      </h2>\n                    </div>\n                    <div className='d-flex justify-content-center mt-3'>\n                      <div>\n                        {features?.map((elm, i) => {\n                          return (\n                            <p key={`pricing-feature-${i}`}>\n                              <Badge color={'blue'} />\n                              <span>{elm}</span>\n                            </p>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        ) : (\n          <Col className='ant-col-spin d-flex justify-content-center'>\n            <Spin size='large' />\n          </Col>\n        )}\n      </Card>\n      {edit && (\n        <SubscriptionEditModal\n          modal={edit}\n          handleCancel={() => setEdit(null)}\n          refetch={fetchSubscriptionList}\n        />\n      )}\n      {add && (\n        <SubscriptionAddModal\n          modal={add}\n          handleCancel={() => setAdd(null)}\n          refetch={fetchSubscriptionList}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Subscriptions;\n","/home/mostafa/Magde/new/frontadminreact/src/views/advert/advert-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/advert/advert-edit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/shop-ads-edit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/copleted-list.js",["6045","6046","6047"],[],"import React, { useEffect, useState } from 'react';\nimport { Space, Table, Card, DatePicker } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { DebounceSelect } from '../../components/search';\nimport userService from '../../services/user';\n\nimport moment from 'moment';\nimport shopService from '../../services/restaurant';\nimport { fetchPaymentToPartnersCompletedList } from 'redux/slices/paymentToPartners';\nconst { RangePicker } = DatePicker;\n\nexport default function PaymentToPartnersCompleteList() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const goToShow = (id) => {\n    dispatch(\n      addMenu({\n        url: `order/details/${id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/order/details/${id}`);\n  };\n\n  const columns = [\n    {\n      title: t('order.id'),\n      is_show: true,\n      dataIndex: 'order_id',\n      key: 'order_id',\n      sorter: true,\n      render: (id) => (\n        <span className='text-hover' onClick={() => goToShow(id)}>\n          #{id}\n        </span>\n      ),\n    },\n    {\n      title: t(type),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, row) => {\n        const user = row?.user;\n        return (\n          <div>\n            {user?.firstname} {user?.lastname || ''}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('order.total_price'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction, row) => {\n        const status = transaction?.status;\n        return (\n          <span>\n            {numberToPrice(row?.order?.total_price, defaultCurrency.symbol)}\n          </span>\n        );\n      },\n    },\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('coupon.price'),\n            is_show: true,\n            dataIndex: 'coupon_price',\n            key: 'coupon_price',\n            render: (coupon_price) => numberToPrice(coupon_price),\n          },\n        ]\n      : []),\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('total.cashback'),\n            is_show: true,\n            dataIndex: 'point_histories',\n            key: 'point_histories',\n            render: (cashback) => numberToPrice(cashback?.[0]?.price),\n          },\n        ]\n      : []),\n    {\n      title: t('delivery.fee'),\n      is_show: true,\n      dataIndex: 'delivery_fee',\n      key: 'delivery_fee',\n      render: (_, row) => numberToPrice(row?.order?.delivery_fee),\n    },\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('service.fee'),\n            is_show: true,\n            dataIndex: 'service_fee',\n            key: 'service_fee',\n            render: (_, row) =>\n              numberToPrice(\n                (row?.order?.service_fee || 0) +\n                  (row?.order.commission_fee || 0),\n              ),\n          },\n        ]\n      : []),\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('seller.fee'),\n            is_show: true,\n            dataIndex: 'seller_fee',\n            key: 'seller_fee',\n            render: (_, row) => numberToPrice(row?.order?.seller_fee),\n          },\n        ]\n      : []),\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n  ];\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'month'),\n    moment(),\n  );\n  const { completedList, loading, params, meta } = useSelector(\n    (state) => state.paymentToPartners,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    date_from: Array.isArray(dateRange)\n      ? dateRange[0]?.format('YYYY-MM-DD')\n      : moment().subtract(1, 'month').format('YYYY-MM-DD'),\n    date_to: Array.isArray(dateRange)\n      ? dateRange[1]?.format('YYYY-MM-DD')\n      : moment().format('YYYY-MM-DD'),\n    type,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchPaymentToPartnersCompletedList(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n      role: type,\n    };\n    return userService.search(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname}`,\n        value: item.id,\n      }));\n    });\n  }\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchPaymentToPartnersCompletedList(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(setMenuData({ activeMenu, data: {} }));\n    };\n  }, []);\n\n  return (\n    <>\n      <Card>\n        <div className='flex justify-content-space-between'>\n          <Space\n            wrap\n            className='order-filter'\n            style={{ flex: 1, width: '100%' }}\n          >\n            <DebounceSelect\n              placeholder={t('select.shop')}\n              fetchOptions={fetchShops}\n              style={{ width: '100%' }}\n              onSelect={(shop) => handleFilter(shop.value, 'shop_id')}\n              onDeselect={() => handleFilter(null, 'shop_id')}\n              allowClear={true}\n              value={data?.shop_id}\n            />\n            <DebounceSelect\n              placeholder={t('select.user')}\n              fetchOptions={getUsers}\n              onSelect={(user) => handleFilter(user.value, 'user_id')}\n              onDeselect={() => handleFilter(null, 'user_id')}\n              style={{ width: '100%' }}\n              value={data?.user_id}\n            />\n            <RangePicker\n              value={dateRange}\n              onChange={(values) => {\n                handleFilter((prev) => ({\n                  ...prev,\n                  ...{\n                    date_from: values?.[0]?.format('YYYY-MM-DD'),\n                    date_to: values?.[1]?.format('YYYY-MM-DD'),\n                  },\n                }));\n                setDateRange(values);\n              }}\n              disabledDate={(current) => {\n                return current && current > moment().endOf('day');\n              }}\n              style={{ width: '100%' }}\n            />\n          </Space>\n        </div>\n      </Card>\n\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={completedList}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record?.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/list.js",["6048","6049","6050"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Space, Table, Card, DatePicker, Row, Col } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport formatSortType from '../../helpers/formatSortType';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { DebounceSelect } from '../../components/search';\nimport userService from '../../services/user';\n\nimport { toast } from 'react-toastify';\nimport moment from 'moment';\nimport shopService from '../../services/restaurant';\nimport { fetchPaymentToPartnersList } from 'redux/slices/paymentToPartners';\nimport paymentToPartnerService from 'services/payment-to-partner';\nimport PaymentPartnersConfirmation from './payment-type';\nimport StatisticNumberWidget from 'views/dashboard/statisticNumberWidget';\nimport { nFormatter } from 'helpers/nFormatter';\nconst { RangePicker } = DatePicker;\n\nexport default function PaymentToPartnersList() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const [confirmationModalOpen, setConfirmationModalOpen] = useState(false);\n\n  const goToShow = (id) => {\n    dispatch(\n      addMenu({\n        url: `order/details/${id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/order/details/${id}`);\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      render: (id) => (\n        <span className='text-hover' onClick={() => goToShow(id)}>\n          #{id}\n        </span>\n      ),\n    },\n    {\n      title: t(type),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, row) => {\n        const user = type === 'seller' ? row?.shop?.seller : row.deliveryman;\n        return (\n          <div>\n            {user?.firstname} {user?.lastname || ''}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('order.total_price'),\n      is_show: true,\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price, row) => {\n        const status = row.transaction?.status;\n        return (\n          <>\n            <span>{numberToPrice(total_price, defaultCurrency.symbol)}</span>\n            <br />\n            <span\n              className={\n                status === 'progress'\n                  ? 'text-primary'\n                  : status === 'paid'\n                  ? 'text-success'\n                  : status === 'rejected'\n                  ? 'text-danger'\n                  : 'text-info'\n              }\n            >\n              {row.transaction?.status}\n            </span>\n          </>\n        );\n      },\n    },\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('coupon.price'),\n            is_show: true,\n            dataIndex: 'coupon_price',\n            key: 'coupon_price',\n            render: (couponPrice) => numberToPrice(couponPrice),\n          },\n        ]\n      : []),\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('total.cashback'),\n            is_show: true,\n            dataIndex: 'point_histories',\n            key: 'point_histories',\n            render: (cashback) => numberToPrice(cashback?.[0]?.price),\n          },\n        ]\n      : []),\n    {\n      title: t('delivery.fee'),\n      is_show: true,\n      dataIndex: 'delivery_fee',\n      key: 'delivery_fee',\n      render: (deliveryFee) => numberToPrice(deliveryFee),\n    },\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('service.fee'),\n            is_show: true,\n            dataIndex: 'service_fee',\n            key: 'service_fee',\n            render: (_, row) =>\n              numberToPrice((row.service_fee || 0) + (row.commission_fee || 0)),\n          },\n        ]\n      : []),\n    ...(type === 'seller'\n      ? [\n          {\n            title: t('seller.fee'),\n            is_show: true,\n            dataIndex: 'seller_fee',\n            key: 'seller_fee',\n            render: (sellerFee) => numberToPrice(sellerFee),\n          },\n        ]\n      : []),\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n  ];\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'month'),\n    moment(),\n  );\n  const { list, loading, params, meta } = useSelector(\n    (state) => state.paymentToPartners,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    date_from: Array.isArray(dateRange)\n      ? dateRange[0]?.format('YYYY-MM-DD')\n      : moment().subtract(1, 'month').format('YYYY-MM-DD'),\n    date_to: Array.isArray(dateRange)\n      ? dateRange[1]?.format('YYYY-MM-DD')\n      : moment().format('YYYY-MM-DD'),\n    type,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n      role: type,\n    };\n    return userService.search(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname}`,\n        value: item.id,\n      }));\n    });\n  }\n\n  const payToUser = (paymentId) => {\n    setLoadingBtn(true);\n    const params = {\n      data: id,\n      type,\n      payment_id: paymentId,\n    };\n\n    paymentToPartnerService\n      .pay(params)\n      .then(() => {\n        toast.success(t('successfully.payed'));\n        dispatch(fetchPaymentToPartnersList(paramsData));\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n        setConfirmationModalOpen(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchPaymentToPartnersList(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchPaymentToPartnersList(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(setMenuData({ activeMenu, data: {} }));\n    };\n  }, []);\n\n  return (\n    <>\n      <Card>\n        <div className='flex justify-content-space-between'>\n          <Space\n            wrap\n            className='order-filter'\n            style={{ flex: 1, width: '100%' }}\n          >\n            <DebounceSelect\n              placeholder={t('select.shop')}\n              fetchOptions={fetchShops}\n              style={{ width: '100%' }}\n              onSelect={(shop) => handleFilter(shop.value, 'shop_id')}\n              onDeselect={() => handleFilter(null, 'shop_id')}\n              allowClear={true}\n              value={data?.shop_id}\n            />\n            <DebounceSelect\n              placeholder={t('select.user')}\n              fetchOptions={getUsers}\n              onSelect={(user) => handleFilter(user.value, 'user_id')}\n              onDeselect={() => handleFilter(null, 'user_id')}\n              style={{ width: '100%' }}\n              value={data?.user_id}\n            />\n            <RangePicker\n              value={dateRange}\n              onChange={(values) => {\n                handleFilter((prev) => ({\n                  ...prev,\n                  ...{\n                    date_from: values?.[0]?.format('YYYY-MM-DD'),\n                    date_to: values?.[1]?.format('YYYY-MM-DD'),\n                  },\n                }));\n                setDateRange(values);\n              }}\n              disabledDate={(current) => {\n                return current && current > moment().endOf('day');\n              }}\n              style={{ width: '100%' }}\n            />\n          </Space>\n          <Button\n            type='primary'\n            disabled={!id || id.length === 0}\n            onClick={() => setConfirmationModalOpen(true)}\n          >\n            {t('pay')}\n          </Button>\n        </div>\n      </Card>\n\n      <Card>\n        <Row gutter={16} className='mt-3'>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('commission.fee')}\n              value={numberToPrice(\n                list?.total_commission_fee,\n                defaultCurrency?.symbol,\n              )}\n              color='purple'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('coupon')}\n              value={numberToPrice(list?.total_coupon, defaultCurrency?.symbol)}\n              color='red'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('delivery.fee')}\n              value={numberToPrice(\n                !!list?.total_delivery_fee\n                  ? Math.trunc(list?.total_delivery_fee)\n                  : 0,\n                defaultCurrency?.symbol,\n              )}\n              color='green'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('point.history')}\n              value={numberToPrice(\n                !!list?.total_point_history\n                  ? Math.trunc(list?.total_point_history)\n                  : 0,\n                defaultCurrency?.symbol,\n              )}\n              color='purple'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('price')}\n              value={numberToPrice(\n                !!list?.total_price ? Math.trunc(list?.total_price) : 0,\n                defaultCurrency?.symbol,\n              )}\n              color='red'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('seller.fee')}\n              value={numberToPrice(\n                !!list?.total_seller_fee\n                  ? Math.trunc(list?.total_seller_fee)\n                  : 0,\n                defaultCurrency?.symbol,\n              )}\n              color='purple'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('service.fee')}\n              value={numberToPrice(\n                !!list?.total_service_fee\n                  ? Math.trunc(list?.total_service_fee)\n                  : 0,\n                defaultCurrency?.symbol,\n              )}\n              color='red'\n            />\n          </Col>\n          <Col flex='0 0 25%'>\n            <StatisticNumberWidget\n              title={t('tax')}\n              value={numberToPrice(\n                !!list?.total_tax ? Math.trunc(list?.total_tax) : 0,\n                defaultCurrency?.symbol,\n              )}\n              color='green'\n            />\n          </Col>\n        </Row>\n      </Card>\n\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={list?.data}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record?.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n\n      {confirmationModalOpen && (\n        <PaymentPartnersConfirmation\n          open={confirmationModalOpen}\n          onCancel={() => {\n            setConfirmationModalOpen(false);\n            setId(null);\n          }}\n          onConfirm={(paymentId) => payToUser(paymentId)}\n          isPaying={loadingBtn}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/main.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/price-edit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/wallet/index.js",["6051"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Space, Table } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport formatSortType from '../../helpers/formatSortType';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { fetchWallets } from '../../redux/slices/wallet';\nimport SearchInput from '../../components/search-input';\nimport FilterColumns from '../../components/filter-column';\n\nexport default function Wallets() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { wallets, loading, meta, params } = useSelector(\n    (state) => state.wallet,\n    shallowEqual\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('firstname'),\n      dataIndex: 'firstname',\n      key: 'firstname',\n      is_show: true,\n    },\n    {\n      title: t('lastname'),\n      dataIndex: 'lastname',\n      key: 'lastname',\n      is_show: true,\n    },\n    {\n      title: t('wallet'),\n      dataIndex: 'wallet',\n      key: 'wallet',\n      is_show: true,\n      render: (wallet) => numberToPrice(wallet?.price, defaultCurrency.symbol),\n    },\n    {\n      title: t('phone'),\n      dataIndex: 'phone',\n      key: 'phone',\n      is_show: true,\n    },\n    {\n      title: t('role'),\n      dataIndex: 'role',\n      key: 'role',\n      is_show: true,\n    },\n  ]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } })\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchWallets());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n      search: data?.search,\n    };\n    dispatch(fetchWallets(paramsData));\n  }, [activeMenu.data]);\n\n  const handleFilter = (item, name) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  return (\n    <Card\n      title={t('wallets')}\n      extra={\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n          />\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={wallets}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/price-add.js",["6052"],[],"import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Form } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport deliveryPriceService from 'services/delivery-price';\nimport { fetchDeliveryPrice } from 'redux/slices/delivery-price';\nimport PriceForm from './price-form';\n\nconst AddDeliveryPrice = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const {\n      area,\n      city,\n      country,\n      region,\n      price,\n      fitting_rooms,\n      active,\n      shop_id,\n    } = values;\n\n    const body = {\n      price,\n      fitting_rooms,\n      active: Number(active),\n      area_id: area?.value,\n      city_id: city?.value,\n      country_id: country?.value,\n      region_id: region?.value,\n      address: getTranslationFields(languages, values, 'address'),\n      shop_id: shop_id?.value,\n    };\n    const nextUrl = 'delivery-price';\n\n    return deliveryPriceService.create(body).then(() => {\n      toast.success(t('successfully.created'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchDeliveryPrice({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return <PriceForm form={form} handleSubmit={onFinish} />;\n};\n\nexport default AddDeliveryPrice;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-extras/index.js",["6053","6054","6055"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Tag,\n  Button,\n  DatePicker,\n  Spin,\n} from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { CloudDownloadOutlined } from '@ant-design/icons';\nimport ReportService from '../../services/reports';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { ReportContext } from '../../context/report';\nimport FilterColumns from '../../components/filter-column';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { useLocation } from 'react-router-dom';\nimport QueryString from 'qs';\nimport { t } from 'i18next';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport {\n  fetchExtrasChart,\n  fetchExtrasList,\n} from '../../redux/slices/report/extras';\nimport ReportChart from '../../components/report/chart';\nimport { useMemo } from 'react';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst ReportExtras = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const category_id = QueryString.parse(location.search, [])['?category_id'];\n  const product_id = QueryString.parse(location.search, [])['?product_id'];\n  const { date_from, date_to, by_time, chart, handleChart, handleDateRange } =\n    useContext(ReportContext);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const {\n    loading,\n    chartData: reportData,\n    extrasList,\n  } = useSelector((state) => state.extrasReport, shallowEqual);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [downloading, setDownloading] = useState(false);\n  const [search, setSearch] = useState('');\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  )\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('title'),\n      dataIndex: 'translation_title',\n      key: 'translation_title',\n      render: (_, data) => {\n        return data?.title;\n      },\n      is_show: true,\n      sorter: (a, b) =>\n        a?.translation?.title.localeCompare(b?.translation?.title),\n    },\n    {\n      title: t('order.count'),\n      key: 'count',\n      dataIndex: 'count',\n      is_show: true,\n      sorter: (a, b) => a.quantity - b.quantity,\n    },\n\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (_, data) => numberToPrice(data?.total_price, defaultCurrency?.symbol),\n      sorter: (a, b) => a.price - b.price,\n    },\n\n    {\n      title: t('quantity'),\n      key: 'quantity',\n      dataIndex: 'quantity',\n      is_show: true,\n      sorter: (a, b) => a.quantity - b.quantity,\n    },\n    {\n      title: t('status'),\n      key: 'active',\n      dataIndex: 'active',\n      render: (_, data) => {\n        const status = Boolean(data?.active);\n        return (\n          <Tag color={status ? 'green' : 'red'} key={data.id}>\n            {status ? 'Active' : 'Inactive'}\n          </Tag>\n        );\n      },\n      is_show: true,\n    },\n    // {\n    //   title: t('stock'),\n    //   key: 'stocks_total',\n    //   dataIndex: 'stocks_total',\n    //   is_show: true,\n    //   render: (_, data) => {\n    //     return data.stocks?.map((stock) => stock.quantity);\n    //   },\n    // },\n  ]);\n\n  const chart_type = useMemo(\n    () => [\n      {\n        label: 'item.sold',\n        value: 'avg_quantity',\n        qty: 'quantity',\n        price: false,\n      },\n      { label: 'net.sales', value: 'price', qty: 'price', price: true },\n      {\n        label: 'Orders',\n        value: 'count',\n        qty: 'count',\n        price: false,\n      },\n    ],\n    []\n  );\n\n  const fetchReport = () => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      chart,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    dispatch(fetchExtrasChart(params));\n  };\n\n  const fetchExtras = (page, perPage) => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      page,\n      perPage,\n      search: search || null,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    dispatch(fetchExtrasList(params));\n  };\n\n  useEffect(() => {\n    handleChart(chart_type[0].value);\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchExtras();\n      fetchReport();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchExtras();\n  }, [date_to, search, category_id, product_id, date_from]);\n\n  useDidUpdate(() => {\n    fetchReport();\n  }, [date_to, by_time, chart, category_id, product_id, date_from]);\n\n  const onChangePagination = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchExtras(page, perPage);\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    ReportService.getReportProductList({\n      date_from,\n      date_to,\n      type: by_time,\n      export: 'excel',\n      products: rowSelection?.selectedRowKeys,\n    })\n      .then((res) => {\n        const body = res.data.link;\n        if (body) {\n          window.location.href = body;\n        }\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-3'>\n        <Col span={12}>\n          <Space size='large'>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        {chart_type?.map((item) => (\n          <Col\n            span={8}\n            key={item.label}\n            onClick={() => handleChart(item.value)}\n          >\n            <Card className={chart === item.value && 'active'}>\n              <Row className='mb-5'>\n                <Col>\n                  <Text>{t(item.label)}</Text>\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={12}>\n                  <Title level={2}>\n                    {!item.price\n                      ? reportData[item.qty]\n                      : numberToPrice(\n                          reportData[item.qty],\n                          defaultCurrency?.symbol\n                        )}\n                  </Title>\n                </Col>\n                <Col span={12} className='d-flex justify-content-end'>\n                  <Tag color='geekblue' className='d-flex align-items-center'>\n                    5%\n                  </Tag>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <ReportChart reportData={reportData} chart_data='quantities_sum' />\n      <Card>\n        <Space className='d-flex justify-content-between align-center'>\n          <Typography.Text strong level={3}>\n            Extras\n          </Typography.Text>\n          <Space className='d-flex justify-content-between'>\n            <Button\n              icon={<CloudDownloadOutlined />}\n              loading={downloading}\n              onClick={excelExport}\n            >\n              {t('download')}\n            </Button>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        </Space>\n\n        <Table\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={extrasList?.data}\n          rowKey={(row) => row.id}\n          loading={loading}\n          pagination={{\n            pageSize: 10,\n            page: extrasList?.page || 1,\n            total: extrasList?.total,\n            defaultCurrent: 1,\n          }}\n          onChange={onChangePagination}\n          scroll={{\n            x: 1500,\n          }}\n        />\n      </Card>\n    </Spin>\n  );\n};\n\nexport default ReportExtras;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-stock/index.js",["6056","6057"],[],"import { Card, Col, Row, Space, Table, Tag, Button, Select } from 'antd';\nimport React from 'react';\nimport { CloudDownloadOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport ReportService from 'services/reports';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport FilterColumns from 'components/filter-column';\nimport { fetchStockProduct } from 'redux/slices/report/stock';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\n\nconst ReportStock = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const options = [\n    { value: null, label: 'All products', key: 'all_products' },\n    { value: 'in_stock', label: 'In stock', key: 'in_stock' },\n    { value: 'low_stock', label: 'Low stock', key: 'low_stock' },\n    { value: 'out_of_stock', label: 'Out of stock', key: 'out_of_stock' },\n  ];\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const { loading, productList: reportProducts } = useSelector(\n    (state) => state.stockReport,\n    shallowEqual,\n  );\n\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [downloading, setDownloading] = useState(false);\n  const [status, setStatus] = useState(activeMenu?.data?.value || null);\n  const goToProductReport = (row) => {\n    dispatch(\n      addMenu({\n        url: `report/products`,\n        id: 'report.products',\n        name: t('report.products'),\n      }),\n    );\n    navigate(`/report/products?product_id=${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: 'Product title',\n      dataIndex: 'product_translation_title',\n      key: 'product_translation_title',\n      render: (_, data) => {\n        return (\n          <a onClick={() => goToProductReport(data)}>\n            {data?.translation?.title}\n          </a>\n        );\n      },\n      is_show: true,\n      sorter: (a, b) =>\n        a?.translation?.title.localeCompare(b?.translation?.title),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      dataIndex: 'status',\n      render: (_, data) => <Tag key={data.id}>{data.status}</Tag>,\n      is_show: true,\n    },\n    {\n      title: 'Stock',\n      key: 'stock',\n      dataIndex: 'quantity',\n      render: (_, data) => data?.stocks_sum_quantity,\n      is_show: true,\n      sorter: (a, b) => a?.stocks_sum_quantity - b?.stocks_sum_quantity,\n    },\n  ]);\n\n  const params = {\n    page: activeMenu.page,\n    perPage: activeMenu.perPage,\n    actual: status,\n  };\n\n  const fetchProduct = (params) => {\n    dispatch(fetchStockProduct(params));\n  };\n\n  useDidUpdate(() => {\n    fetchProduct(params);\n  }, [status]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(params);\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onSelectChange = (newSelectedRowKeys) =>\n    setSelectedRowKeys(newSelectedRowKeys);\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n\n  const onChangePagination = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchProduct({ page, perPage, actual: status });\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    ReportService.getStocks({ export: 'excel', actual: status })\n      .then((res) => {\n        const body = res.data.link;\n        if (body) {\n          window.location.href = body;\n        }\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const handleSelector = (e) => setStatus(e);\n\n  return (\n    <>\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card title={t('stock')}>\n            <Space className='d-flex justify-content-end'>\n              <Select\n                style={{ width: '200px' }}\n                onChange={handleSelector}\n                options={options}\n                defaultValue={activeMenu?.data || null}\n              />\n              <Button\n                icon={<CloudDownloadOutlined />}\n                loading={downloading}\n                onClick={excelExport}\n              >\n                {t('download')}\n              </Button>\n              <FilterColumns columns={columns} setColumns={setColumns} />\n            </Space>\n            <Table\n              scroll={{ x: true }}\n              rowSelection={rowSelection}\n              columns={columns?.filter((item) => item.is_show)}\n              dataSource={reportProducts.data || []}\n              rowKey={(row) => row.id}\n              loading={loading}\n              pagination={{\n                pageSize: reportProducts?.per_page,\n                page: reportProducts?.current_page || 1,\n                total: reportProducts?.total,\n                defaultCurrent: 1,\n              }}\n              onChange={onChangePagination}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ReportStock;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-categories/index.js",["6058","6059"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Button,\n  DatePicker,\n  Spin,\n} from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport SearchInput from '../../components/search-input';\nimport { CloudDownloadOutlined } from '@ant-design/icons';\nimport ReportService from '../../services/reports';\nimport { addMenu, disableRefetch } from '../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport ReportChart from '../../components/report/chart';\nimport moment from 'moment';\nimport { ReportContext } from '../../context/report';\nimport FilterColumns from '../../components/filter-column';\nimport { fetchReportProductChart } from '../../redux/slices/report/categories';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { useMemo } from 'react';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst ReportProducts = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { date_from, date_to, by_time, chart, handleChart, handleDateRange } =\n    useContext(ReportContext);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    loading,\n    chartData: reportData,\n    productList,\n  } = useSelector((state) => state.categoryReport, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [search, setSearch] = useState();\n  const [downloading, setDownloading] = useState(false);\n\n  const goToProductReport = (row) => {\n    dispatch(\n      addMenu({\n        url: `report/products`,\n        id: 'report.products',\n        name: t('report.products'),\n      })\n    );\n    navigate(`/report/products?category_id=${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('category'),\n      key: 'category',\n      dataIndex: 'category',\n      render: (_, data) => {\n        const categoryList = data?.title?.split('-');\n        return categoryList?.map((item, i) =>\n          i === categoryList?.length - 1 ? (\n            <Link to={`/report/products?category_id=${data?.id}`}>{item}</Link>\n          ) : (\n            item\n          )\n        );\n      },\n      sorter: (a, b) => a?.title?.localeCompare(b?.title),\n      is_show: true,\n    },\n    {\n      title: t('item.sold'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      is_show: true,\n      sorter: (a, b) => a?.quantity - b?.quantity,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      sorter: (a, b) => a?.price - b?.price,\n      render: (_, data) => {\n        return numberToPrice(data?.price, defaultCurrency?.symbol);\n      },\n    },\n    {\n      title: t('products'),\n      key: 'products_count',\n      dataIndex: 'products_count',\n      sorter: (a, b) => a?.products_count - b?.products_count,\n      render: (_, data) => {\n        return (\n          <span onClick={() => goToProductReport(data)}>\n            {data?.products_count}\n          </span>\n        );\n      },\n      is_show: true,\n    },\n    {\n      title: t('orders'),\n      key: 'count',\n      dataIndex: 'count',\n      is_show: true,\n      sorter: (a, b) => a?.count - b?.count,\n    },\n  ]);\n\n  const chart_type = useMemo(\n    () => [\n      { value: 'quantity', label: 'Item sold', qty: 'total_quantity' },\n      { value: 'price', label: 'Net Sales', qty: 'total_price' },\n      { value: 'count', label: 'Orders', qty: 'total_count' },\n      {\n        value: 'total_products_count',\n        label: 'Order products',\n        qty: 'total_products_count',\n      },\n    ],\n    []\n  );\n\n  const fetchReport = () => {\n    if (chart_type.find((item) => item.value === chart)) {\n      const params = {\n        date_from,\n        date_to,\n        type: by_time,\n        chart,\n        search: search?.trim() === '' ? undefined : search?.trim(),\n      };\n      dispatch(fetchReportProductChart(params));\n    }\n  };\n\n  useEffect(() => {\n    if (chart_type.every((item) => item.value !== chart)) {\n      handleChart(chart_type[0].value);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchReport();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchReport();\n  }, [date_to, by_time, chart, search, date_from]);\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    ReportService.getCategoriesChart({\n      date_from,\n      date_to,\n      type: by_time,\n      export: 'excel',\n    })\n      .then((res) => {\n        const body = res.data.link;\n        if (body) {\n          window.location.href = body;\n        }\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-3'>\n        <Col span={12}>\n          <Space size='large'>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        {chart_type?.map((item) => (\n          <Col\n            span={6}\n            key={item.label}\n            onClick={() => handleChart(item.value)}\n          >\n            <Card className={chart === item.value && 'active'}>\n              <Row className='mb-5'>\n                <Col>\n                  <Text>{item.label}</Text>\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={12}>\n                  <Title level={2}>\n                    {item.qty === 'total_price'\n                      ? numberToPrice(reportData[item.qty])\n                      : reportData[item.qty]}\n                  </Title>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <ReportChart reportData={reportData} chart_data='quantities_sum' />\n      <Card>\n        <Space className='align-items-center justify-content-between mb-4 w-100'>\n          <Title level={2} className='mb-0'>\n            {t('categories')}\n          </Title>\n\n          <Space>\n            <SearchInput\n              style={{ width: '100%' }}\n              handleChange={(e) => setSearch(e)}\n              defaultValue={activeMenu.data?.search}\n              resetSearch={!activeMenu.data?.search}\n            />\n            <Button\n              icon={<CloudDownloadOutlined />}\n              loading={downloading}\n              disabled={productList?.data?.length === 0}\n              onClick={excelExport}\n            >\n              {t('download')}\n            </Button>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        </Space>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={Object.values(productList) || []}\n          rowKey={(row) => row.id}\n          loading={loading}\n          pagination={{\n            pageSize: productList?.per_page,\n            page: productList?.current_page || 1,\n            total: productList?.total,\n            defaultCurrent: 1,\n          }}\n        />\n      </Card>\n    </Spin>\n  );\n};\n\nexport default ReportProducts;\n","/home/mostafa/Magde/new/frontadminreact/src/views/landing-page/index.js",["6060"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { EditOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport { fetchLandingPages } from 'redux/slices/landing-page';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from 'components/filter-column';\nimport RiveResult from 'components/rive-result';\n\nconst LandingPage = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { data, loading } = useSelector(\n    (state) => state.landingPage,\n    shallowEqual\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n      render: (type) => t(type),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'settings/landing-page/add',\n        url: 'settings/landing-page/add',\n        name: t('add.landing.page'),\n      })\n    );\n    navigate('/settings/landing-page/add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'settings/landing-page/edit',\n        url: `settings/landing-page/${row.type}`,\n        name: t('edit.landing.page'),\n      })\n    );\n    navigate(`/settings/landing-page/${row.type}`);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchLandingPages());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('landing.page')}\n      extra={\n        <Space>\n          {!data?.length && (\n            <Button\n              type='primary'\n              icon={<PlusCircleOutlined />}\n              onClick={goToAdd}\n            >\n              {t('add.landing.page')}\n            </Button>\n          )}\n\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={data}\n        pagination={false}\n        rowKey={(record) => record.id}\n        locale={{\n          emptyText: <RiveResult />,\n        }}\n        loading={loading}\n      />\n    </Card>\n  );\n};\n\nexport default LandingPage;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-variation/index.js",["6061","6062","6063"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Tag,\n  Button,\n  Checkbox,\n  Dropdown,\n  Menu,\n  Divider,\n  DatePicker,\n} from 'antd';\nimport React from 'react';\nimport {\n  MoreOutlined,\n  DownOutlined,\n  LineChartOutlined,\n  BarChartOutlined,\n  FilterOutlined,\n} from '@ant-design/icons';\nimport ChartWidget from '../../components/chart-widget';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\nconst ReportVariation = () => {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text) => <a>{text}</a>,\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n    },\n    {\n      title: 'Tags',\n      key: 'tags',\n      dataIndex: 'tags',\n      render: (_, { tags }) => (\n        <>\n          {tags.map((tag) => {\n            let color = tag.length > 5 ? 'geekblue' : 'green';\n            if (tag === 'loser') {\n              color = 'volcano';\n            }\n            return (\n              <Tag color={color} key={tag}>\n                {tag.toUpperCase()}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (_, record) => (\n        <Space size='middle'>\n          <a>Invite {record.name}</a>\n          <a>Delete</a>\n        </Space>\n      ),\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'John Brown',\n      age: 32,\n      address: 'New York No. 1 Lake Park',\n      tags: ['nice', 'developer'],\n    },\n    {\n      key: '2',\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 1 Lake Park',\n      tags: ['loser'],\n    },\n    {\n      key: '3',\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park',\n      tags: ['cool', 'teacher'],\n    },\n  ];\n  const menu = (\n    <Menu>\n      <Menu.Item>\n        <a\n          target='_blank'\n          rel='noopener noreferrer'\n          href='http://www.alipay.com/'\n        >\n          1st menu item\n        </a>\n      </Menu.Item>\n    </Menu>\n  );\n  return (\n    <>\n      <Row gutter={24} className='mb-4'>\n        <Col span={12}>\n          <Space size='large'>\n            <Dropdown overlay={menu}>\n              <Button icon={<FilterOutlined />}>Filter by date range</Button>\n            </Dropdown>\n            <RangePicker />\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        <Col span={8}>\n          <Card>\n            <Row className='mb-5'>\n              <Col>\n                <Text>Item Sold</Text>\n              </Col>\n            </Row>\n            <Row gutter={24}>\n              <Col span={12}>\n                <Title level={2}>50</Title>\n              </Col>\n              <Col span={12} className='d-flex justify-content-end'>\n                <Tag color='geekblue' className='d-flex align-items-center'>\n                  5%\n                </Tag>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Row className='mb-5'>\n              <Col>\n                <Text>Not Sales</Text>\n              </Col>\n            </Row>\n            <Row gutter={24}>\n              <Col span={12}>\n                <Title level={2}>1950 UZS</Title>\n              </Col>\n              <Col span={12} className='d-flex justify-content-end'>\n                <Tag color='gold' className='d-flex align-items-center'>\n                  2%\n                </Tag>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card className='active'>\n            <Row className='mb-5'>\n              <Col>\n                <Text>Orders</Text>\n              </Col>\n            </Row>\n            <Row gutter={24}>\n              <Col span={12}>\n                <Title level={2}>10</Title>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Row gutter={24}>\n              <Col span={22}>\n                <Row gutter={24}>\n                  <Col span={9}>\n                    <Space size='large' className='d-flex'>\n                      <Title level={3} className='mb-0'>\n                        Items Sold\n                      </Title>\n                      <Checkbox className='d-flex'>\n                        Last month (Nov 1-30, 2022)\n                      </Checkbox>\n                      <Text>39</Text>\n                    </Space>\n                  </Col>\n                  <Col span={8} className='d-flex justify-content-between'>\n                    <Checkbox>Previous period (Nov 1-30, 2022)</Checkbox>\n                    <Text className='flex-grow-0'>39</Text>\n                  </Col>\n                  <Col span={7} className='d-flex justify-content-end'>\n                    <Dropdown overlay={menu}>\n                      <Space>\n                        Hover me <DownOutlined />\n                      </Space>\n                    </Dropdown>\n                  </Col>\n                </Row>\n              </Col>\n              <Col span={2}>\n                <Divider type='vertical' style={{ height: '100%' }} />\n                <Space>\n                  <LineChartOutlined style={{ fontSize: '22px' }} />\n                  <BarChartOutlined style={{ fontSize: '22px' }} />\n                </Space>\n              </Col>\n            </Row>\n            <Divider />\n            <ChartWidget />\n          </Card>\n        </Col>\n      </Row>\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Row gutter={24} className='align-items-center mb-2'>\n              <Col span={22}>\n                <Space>\n                  <Title level={2} className='mb-0'>\n                    Variations\n                  </Title>\n                </Space>\n              </Col>\n              <Col span={2}>\n                <Space>\n                  <Tag color='geekblue'>Compare</Tag>\n                  <MoreOutlined style={{ fontSize: '26px' }} />\n                </Space>\n              </Col>\n            </Row>\n            <Table scroll={{ x: true }} columns={columns} dataSource={data} />\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ReportVariation;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-revenue/index.js",["6064","6065","6066"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Button,\n  DatePicker,\n  Spin,\n  Tag,\n} from 'antd';\nimport React, { useContext, useEffect } from 'react';\nimport { CloudDownloadOutlined } from '@ant-design/icons';\nimport { ReportContext } from '../../context/report';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchReportRevenue,\n  fetchReportRevenueChart,\n} from '../../redux/slices/report/revenue';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport QueryString from 'qs';\nimport { useLocation } from 'react-router-dom';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport moment from 'moment';\nimport { useState } from 'react';\nimport ReportService from '../../services/reports';\nimport FilterColumns from '../../components/filter-column';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport ReportChart from '../../components/report/chart';\nimport { useMemo } from 'react';\nconst { Title, Text } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst ReportRevenue = () => {\n  const location = useLocation();\n  const category_id = QueryString.parse(location.search, [])['?category_id'];\n  const product_id = QueryString.parse(location.search, [])['?product_id'];\n  const { date_from, date_to, by_time, chart, handleDateRange, handleChart } =\n    useContext(ReportContext);\n  const dispatch = useDispatch();\n  const [downloadLoading, setDownloadLoading] = useState(false);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const { loading, revenueList, chartData } = useSelector(\n    (state) => state.revenueReport,\n    shallowEqual\n  );\n  const [columns, setColumns] = useState([\n    {\n      title: 'Date',\n      dataIndex: 'time',\n      key: 'time',\n      is_show: true,\n      sorter: (a, b) => moment(a.time).unix() - moment(b.time).unix(),\n    },\n    {\n      title: 'Item sold',\n      dataIndex: 'count',\n      key: 'count',\n      is_show: true,\n      sorter: (a, b) => a.count - b.count,\n    },\n    {\n      title: 'Orders',\n      dataIndex: 'total_quantity',\n      key: 'total_quantity',\n      is_show: true,\n      sorter: (a, b) => a.total_quantity - b.total_quantity,\n    },\n    {\n      title: 'Shipping',\n      key: 'delivery_fee',\n      dataIndex: 'delivery_fee',\n      render: (_, row) =>\n        numberToPrice(row.delivery_fee, defaultCurrency?.symbol),\n      is_show: true,\n      sorter: (a, b) => a.delivery_fee - b.delivery_fee,\n    },\n    {\n      title: 'Returns',\n      key: 'canceled_sum',\n      dataIndex: 'canceled_sum',\n      render: (_, row) =>\n        numberToPrice(row.canceled_sum, defaultCurrency?.symbol),\n      is_show: true,\n      sorter: (a, b) => a.canceled_sum - b.canceled_sum,\n    },\n    {\n      title: 'Net sales',\n      key: 'total_price',\n      dataIndex: 'total_price',\n      render: (_, row) =>\n        numberToPrice(row.total_price, defaultCurrency?.symbol),\n      is_show: true,\n      sorter: (a, b) => a.total_price - b.total_price,\n    },\n    {\n      title: 'Tax',\n      key: 'tax',\n      dataIndex: 'tax',\n      render: (_, row) => numberToPrice(row.tax, defaultCurrency?.symbol),\n      is_show: true,\n      sorter: (a, b) => a.tax - b.tax,\n    },\n  ]);\n  const fetchReport = () => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      chart,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    if (performance.find((item) => item.value === chart)) {\n      dispatch(fetchReportRevenueChart(params));\n    }\n  };\n  const fetchRevenue = () => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    dispatch(fetchReportRevenue(params));\n  };\n\n  const excelExport = () => {\n    setDownloadLoading(true);\n    ReportService.getRevenueReport({\n      date_from,\n      date_to,\n      type: by_time,\n      export: 'excel',\n    })\n      .then((res) => {\n        const body = res.data.link;\n        if (body) {\n          window.location.href = body;\n        }\n      })\n      .finally(() => setDownloadLoading(false));\n  };\n\n  const performance = useMemo(\n    () => [\n      {\n        label: 'Total sales',\n        value: 'avg_quantity',\n        qty: 'quantity',\n        price: false,\n      },\n      {\n        label: 'Net sales',\n        value: 'price',\n        qty: 'price',\n        price: true,\n      },\n      {\n        label: 'Average order price',\n        value: 'avg_price',\n        qty: 'avg_price',\n        price: true,\n      },\n      {\n        label: 'Orders',\n        value: 'count',\n        qty: 'count',\n        price: false,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    if (performance.every((item) => item.value !== chart)) {\n      handleChart(performance[0].value);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchRevenue();\n      fetchReport();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchRevenue();\n  }, [date_to, by_time, chart, category_id, product_id, date_from]);\n\n  useDidUpdate(() => {\n    fetchReport();\n  }, [date_to, by_time, chart, date_from]);\n\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-4'>\n        <Col span={12}>\n          <Space size='large'>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        {performance?.map((item, key) => (\n          <Col\n            span={6}\n            key={item.label}\n            onClick={() => handleChart(item.value)}\n          >\n            <Card className={chart === item.value && 'active'}>\n              <Row className='mb-5'>\n                <Col>\n                  <Text>{item.label}</Text>\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={18}>\n                  <Title level={2}>\n                    {!item.price\n                      ? chartData[item.qty]\n                      : numberToPrice(\n                          chartData[item.qty],\n                          defaultCurrency?.symbol\n                        )}\n                  </Title>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <ReportChart reportData={chartData} chart_data='quantities_sum' />\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Row gutter={24} className='align-items-center mb-2'>\n              <Space className='w-100 mr-16 ml-16 justify-content-between'>\n                <Title level={2} className='mb-0'>\n                  Revenue\n                </Title>\n                <Space align='end'>\n                  <Button\n                    onClick={excelExport}\n                    loading={downloadLoading}\n                    icon={<CloudDownloadOutlined />}\n                  >\n                    Download\n                  </Button>\n                  <FilterColumns columns={columns} setColumns={setColumns} />\n                </Space>\n              </Space>\n            </Row>\n            <Table\n              columns={columns?.filter((item) => item.is_show)}\n              loading={loading}\n              dataSource={revenueList?.paginate}\n              pagination={false}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </Spin>\n  );\n};\n\nexport default ReportRevenue;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-orders/index.js",["6067","6068","6069"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Tag,\n  DatePicker,\n  Spin,\n  Menu,\n  Dropdown,\n} from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { addMenu, disableRefetch } from '../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport ReportChart from '../../components/report/chart';\nimport moment from 'moment';\nimport { ReportContext } from '../../context/report';\nimport FilterColumns from '../../components/filter-column';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  fetchOrderProduct,\n  fetchOrderProductChart,\n} from '../../redux/slices/report/order';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { DebounceSelect } from 'components/search';\nimport shopService from 'services/restaurant';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst ReportOrder = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { date_from, date_to, by_time, chart, handleChart, handleDateRange } =\n    useContext(ReportContext);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    loading,\n    chartData: reportData,\n    productList: reportProducts,\n  } = useSelector((state) => state.orderReport, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [selectedShop, setSelectedShop] = useState();\n\n  const [columns, setColumns] = useState([\n    {\n      title: 'Order #',\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      render: (_, data) => <a onClick={() => goToShow(data)}>#{data.id}</a>,\n    },\n    {\n      title: 'Status',\n      dataIndex: 'items_sold',\n      key: 'items_sold',\n      is_show: true,\n      render: (_, row) => <Tag>{row.status}</Tag>,\n    },\n    {\n      title: 'Customer',\n      dataIndex: 'user_firstname',\n      key: 'user_firstname',\n      is_show: true,\n      render: (_, data) => <>{`${data.firstname} ${data.lastname}`}</>,\n    },\n    {\n      title: 'Customer type',\n      key: 'user_active',\n      dataIndex: 'user_active',\n      is_show: true,\n      render: (_, data) => {\n        const status = Boolean(data.active);\n        return (\n          <Tag color={status ? 'green' : 'red'} key={data.id}>\n            {status ? 'Active' : 'Inactive'}\n          </Tag>\n        );\n      },\n    },\n    {\n      title: 'Product(s)',\n      key: 'category',\n      dataIndex: 'category',\n      is_show: true,\n      render: (_, data) => {\n        if (data.products?.length > 1) {\n          return (\n            <>\n              <p>{data.products[0]}</p>\n\n              <Dropdown\n                overlay={\n                  <Menu>\n                    {data.products\n                      ?.slice(1, data.products.length)\n                      .map((item, key) => (\n                        <Menu.Item key={key}>{item}</Menu.Item>\n                      ))}\n                  </Menu>\n                }\n              >\n                <Tag style={{ cursor: 'pointer' }}>{`+ ${\n                  data.products?.length - 1\n                } more`}</Tag>\n              </Dropdown>\n            </>\n          );\n        } else {\n          return <>{data.products[0]}</>;\n        }\n      },\n    },\n    {\n      title: 'Item sold',\n      key: 'item_sold',\n      dataIndex: 'item_sold',\n      sorter: (a, b) => Number(a.quantity) - Number(b.quantity),\n\n      is_show: true,\n      render: (_, data) => {\n        return Number(data.quantity);\n      },\n    },\n    {\n      title: 'Net sales',\n      key: 'price',\n      dataIndex: 'price',\n      is_show: true,\n      sorter: (a, b) => a.price - b.price,\n      render: (_, data) => {\n        return <>{numberToPrice(data.price, defaultCurrency?.symbol)}</>;\n      },\n    },\n  ]);\n\n  const performance = [\n    {\n      label: 'Item sold',\n      value: 'quantity',\n      price: false,\n      qty: 'quantity',\n    },\n    {\n      label: 'Net sales',\n      value: 'price',\n      price: true,\n      qty: 'price',\n    },\n    {\n      label: 'Avg Order price',\n      value: 'avg_price',\n      price: true,\n      qty: 'avg_price',\n    },\n    {\n      label: 'Orders',\n      value: 'count',\n      price: false,\n      qty: 'count',\n    },\n  ];\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      })\n    );\n    navigate(`/order/details/${row.id}`);\n  };\n\n  const fetchReport = () => {\n    if (performance.find((item) => item.value === chart)) {\n      const data = {\n        date_from,\n        date_to,\n        type: by_time,\n        chart,\n        shop_id: selectedShop?.value,\n      };\n      dispatch(fetchOrderProductChart(data));\n    }\n  };\n\n  const fetchProduct = (page, perPage) => {\n    dispatch(\n      fetchOrderProduct({\n        date_from,\n        date_to,\n        by_time,\n        chart,\n        page,\n        perPage,\n        shop_id: selectedShop?.value,\n      })\n    );\n  };\n\n  useEffect(() => {\n    handleChart(performance[0].value);\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct();\n      fetchReport();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchProduct();\n  }, [date_to, by_time, chart, date_from, selectedShop?.value]);\n\n  useDidUpdate(() => {\n    fetchReport();\n  }, [date_to, by_time, chart, date_from, selectedShop?.value]);\n\n  const onChangePagination = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchProduct(page, perPage);\n  };\n\n  async function fetchUserShopList(search) {\n    const params = { search, active: 1 };\n    return shopService.get(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n      }))\n    );\n  }\n\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-3'>\n        <Col span={12}>\n          <Space size='large'>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n            <DebounceSelect\n              style={{width: \"200px\"}}\n              value={selectedShop}\n              onClear={() => setSelectedShop(undefined)}\n              onSelect={(value) => setSelectedShop(value)}\n              fetchOptions={fetchUserShopList}\n              placeholder={t('select.shop')}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        {performance?.map((item, key) => (\n          <Col\n            span={6}\n            key={item.label}\n            onClick={() => handleChart(item.value)}\n          >\n            <Card className={chart === item.value && 'active'}>\n              <Row className='mb-5'>\n                <Col>\n                  <Text>{item.label}</Text>\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={18}>\n                  <Title level={2}>\n                    {!item.price\n                      ? reportData[item.qty]\n                      : numberToPrice(\n                          reportData[item.qty],\n                          defaultCurrency?.symbol\n                        )}\n                  </Title>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <ReportChart reportData={reportData} chart_data='price_avg' />\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='d-flex justify-content-between'>\n              <Text level={3}>Orders</Text>\n              <Space className='d-flex justify-content-end'>\n                <Tag color='geekblue'>{t('compare')}</Tag>\n                <FilterColumns columns={columns} setColumns={setColumns} />\n              </Space>\n            </Space>\n\n            <Table\n              columns={columns?.filter((item) => item.is_show)}\n              dataSource={reportProducts?.data}\n              rowKey={(row) => row.id}\n              loading={loading}\n              pagination={{\n                pageSize: reportProducts?.per_page,\n                page: reportProducts?.current_page || 1,\n                total: reportProducts?.total,\n                defaultCurrent: 1,\n              }}\n              onChange={onChangePagination}\n              scroll={{ x: 1200 }}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </Spin>\n  );\n};\n\nexport default ReportOrder;\n","/home/mostafa/Magde/new/frontadminreact/src/views/looks/edit.js",["6070"],[],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Form } from 'antd';\nimport LooksForm from './form';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport looksService from 'services/banner';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport banner from 'services/banner';\nimport Loading from 'components/loading';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nexport default function EditLook() {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const { id } = useParams();\n\n  const [loading, setLoading] = useState(false);\n\n  const fetchLook = (id) => {\n    setLoading(true);\n\n    const params = {\n      type: 'look',\n    };\n\n    banner\n      .getById(id, params)\n      .then((res) => {\n        const data = res?.data;\n        const body = {\n          [`title[${data?.translation?.locale}]`]: data?.translation?.title,\n          [`description[${data?.translation?.locale}]`]:\n            data?.translation?.description,\n          shop: {\n            label: data?.shop?.translation?.title,\n            value: data?.shop?.id,\n            key: data?.shop?.id,\n          },\n          products: data?.products?.map((product) => ({\n            label: product?.translation?.title,\n            value: product?.id,\n            key: product?.id,\n          })),\n          image: data?.galleries?.map((img) => ({\n            uid: img.id,\n            name: img.path,\n            url: img.path,\n          })),\n          active: Boolean(data?.active),\n        };\n\n        form.setFieldsValue(body);\n        dispatch(setMenuData({ activeMenu, data: body }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchLook(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const handleSubmit = (values, image) => {\n    const body = {\n      type: 'look',\n      active: Number(values.active),\n      shop_id: values.shop.value,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      products: values.products.map((i) => i.value),\n      images: image.map((image) => image.name),\n    };\n\n    return looksService.update(id, body);\n  };\n\n  return (\n    <Fragment>\n      {!loading ? (\n        <LooksForm form={form} handleSubmit={handleSubmit} />\n      ) : (\n        <Loading />\n      )}\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/main.js",["6071","6072"],[],"import React, { useState } from 'react';\nimport { Card, Col, Row, Steps } from 'antd';\nimport AddWarehouse from './warehouse-add';\nimport { t } from 'i18next';\nimport WorkingDate from './working-date';\nimport { useParams } from 'react-router-dom';\nimport EditWarehouse from './warehouse-edit-new';\nconst { Step } = Steps;\n\nexport const steps = [\n  {\n    title: 'warehouse',\n    content: 'Warehouse',\n  },\n  {\n    title: 'working days',\n    content: 'Working days',\n  },\n];\n\nconst Main = () => {\n  const [current, setCurrent] = useState(0);\n  const { id } = useParams();\n\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card className='mb-0'>\n          <Steps current={current}>\n            {steps.map((item) => (\n              <Step title={t(item.title)} key={item.title} />\n            ))}\n          </Steps>\n        </Card>\n      </Col>\n      <Col span={24}>\n        {/* {steps[current]?.content === 'Warehouse' && !id && (\n          <AddWarehouse next={next} />\n        )} */}\n        {/* {steps[current]?.content === 'Warehouse' && id && (\n          <EditWarehouse next={next} />\n        )} */}\n        {steps[current]?.content === 'Warehouse' && (\n          <EditWarehouse next={next} />\n        )}\n        {steps[current]?.content === 'Working days' && (\n          <WorkingDate next={next} prev={prev} />\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default Main;\n","/home/mostafa/Magde/new/frontadminreact/src/views/looks/add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/index.js",["6073","6074","6075"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { EditOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { Button, Table, Space, Card, Switch } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport parcelOptionService from '../../services/parcel-option';\nimport { fetchParcelOptions } from '../../redux/slices/parcel-option';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from '../../components/filter-column';\nimport DeleteButton from '../../components/delete-button';\nimport SearchInput from '../../components/search-input';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport moment from 'moment';\n\nexport default function Units() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [uuid, setUUID] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const [text, setText] = useState(null);\n  const [active, setActive] = useState(null);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'option.edit',\n        url: `options/${row.id}`,\n        name: t('edit.option'),\n      })\n    );\n    navigate(`/options/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    {\n      title: t('created_at'),\n      dataIndex: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format(\"YYYY-MM-DD hh:mm\")\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              onClick={() => {\n                setUUID([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { options, meta, loading, params } = useSelector(\n    (state) => state.parcelOptions,\n    shallowEqual\n  );\n\n  const unitDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...uuid.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    parcelOptionService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        setText(null);\n        setActive(false);\n        dispatch(fetchParcelOptions());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function formatSortType(type) {\n    switch (type) {\n      case 'ascend':\n        return 'asc';\n\n      case 'descend':\n        return 'desc';\n\n      default:\n        break;\n    }\n  }\n\n  function onChange(pagination, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(fetchParcelOptions({ ...params, perPage, page, column, sort }));\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchParcelOptions());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const goToAddUnit = () => {\n    dispatch(\n      addMenu({\n        id: 'options_ad',\n        url: 'options/add',\n        name: t('add.option'),\n      })\n    );\n    navigate('/options/add');\n  };\n\n  const rowSelection = {\n    selectedRowKeys: uuid,\n    onChange: (key) => {\n      setUUID(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (uuid === null || uuid.length === 0) {\n      toast.warning(t('select.the.option'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      })\n    );\n  };\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      search: data?.search,\n    };\n    dispatch(fetchParcelOptions(paramsData));\n  }, [activeMenu.data]);\n\n  return (\n    <Card\n      title={t('options')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            onClick={goToAddUnit}\n            icon={<PlusCircleOutlined />}\n          >\n            {t('add.option')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          className='w-25'\n          handleChange={(search) => handleFilter(search, 'search')}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n        />\n      </div>\n\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={options}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta?.total,\n          defaultCurrent: params.page,\n        }}\n        onChange={onChange}\n        rowKey={(record) => record.id}\n      />\n      <CustomModal\n        click={unitDelete}\n        text={\n          text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setUUID}\n        setActive={setActive}\n      />\n    </Card>\n  );\n}","/home/mostafa/Magde/new/frontadminreact/src/views/advert/index.js",["6076","6077"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Table, Card, Space, Switch } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport advertService from 'services/advert';\nimport { fetchAdverts } from 'redux/slices/advert';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport SearchInput from 'components/search-input';\nimport DeleteButton from '../../components/delete-button';\nimport { useNavigate } from 'react-router-dom';\nimport CustomModal from 'components/modal';\nimport { Context } from '../../context/context';\nimport { toast } from 'react-toastify';\nimport FilterColumns from 'components/filter-column';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\n\nexport default function Advert() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    advertList,\n    loading: listLoading,\n    meta,\n  } = useSelector((state) => state.advert, shallowEqual);\n\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [search, setSearch] = useState('');\n  const [active, setActive] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [loading, setLoading] = useState(false);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      is_show: true,\n      render: (_, row) => {\n        return <span>{row?.translation?.title}</span>;\n      },\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      is_show: true,\n    },\n\n    {\n      title: t('time'),\n      dataIndex: 'time',\n      is_show: true,\n    },\n    {\n      title: t('time.type'),\n      dataIndex: 'time_type',\n      is_show: true,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      is_show: true,\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.id);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([row.id]);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const paramsData = {\n    perPage: 10,\n    page: 1,\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `advert/${row.id}`,\n        id: 'ad_edit',\n        name: t('edit.ad'),\n      }),\n    );\n    navigate(`/advert/${row.id}`);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchAdverts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      search,\n    };\n    dispatch(fetchAdverts(paramsData));\n  }, [activeMenu.data, search]);\n\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      }),\n    );\n  };\n\n  const advertDelete = () => {\n    setLoading(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    advertService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchAdverts(paramsData));\n        setText(null);\n        setActive(false);\n      })\n      .finally(() => {\n        setLoading(false);\n        setId(null);\n      });\n  };\n\n  const goToAddAdvert = () => {\n    dispatch(\n      addMenu({\n        id: 'advert-add',\n        url: 'advert/add',\n        name: t('add.advert'),\n      }),\n    );\n    clearData();\n    navigate('/advert/add');\n  };\n\n  const handleActive = () => {\n    setLoading(true);\n    advertService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchAdverts(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchAdverts({ perPage: pageSize, page: current }));\n  };\n\n  return (\n    <>\n      <Card className='p-o'>\n        <div className='flex justify-content-between'>\n          <SearchInput\n            style={{ maxWidth: '200px' }}\n            handleChange={(value) => setSearch(value)}\n            placeholder={t('search')}\n          />\n          <div className='flex gap-3'>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n            <Button\n              icon={<PlusCircleOutlined />}\n              type='primary'\n              className='ml-3'\n              onClick={goToAddAdvert}\n            >\n              {t('add.advert')}\n            </Button>\n          </div>\n        </div>\n      </Card>\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          dataSource={advertList}\n          columns={columns?.filter((item) => item.is_show)}\n          rowKey={(record) => record.id}\n          loading={loading || listLoading}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      <CustomModal\n        click={active ? handleActive : advertDelete}\n        text={\n          active ? t('set.active.advert') : text ? t('delete') : t('all.delete')\n        }\n        setText={setId}\n        setActive={setActive}\n      />\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-types/index.js",["6078"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { fetchParcelTypes } from 'redux/slices/parcelTypes';\nimport DeleteButton from 'components/delete-button';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport FilterColumns from 'components/filter-column';\nimport CustomModal from 'components/modal';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { Context } from 'context/context';\nimport parcelTypeService from 'services/parcelType';\nimport { toast } from 'react-toastify';\nimport formatSortType from 'helpers/formatSortType';\n\nexport default function ParcelTypes() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    pageSize: data?.per_page,\n    page: data?.page || 1,\n  };\n\n  const {\n    data: types,\n    loading,\n    meta,\n  } = useSelector((state) => state.parcelTypes, shallowEqual);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `parcel-types/${row.id}`,\n        id: 'edit-parcel-type',\n        name: t('edit.parcel.type'),\n      })\n    );\n    navigate(`/parcel-types/${row.id}`);\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add-parcel-type',\n        url: `parcel-types/add`,\n        name: t(`add.parcel.type`),\n      })\n    );\n    navigate(`/parcel-types/add`);\n  };\n\n  const deliveryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n\n    parcelTypeService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchParcelTypes(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchParcelTypes(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchParcelTypes(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('parcel.types')}\n      extra={\n        <Space>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.parcel.type')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={types}\n        pagination={{\n          pageSize: meta.per_page,\n          page: data?.page || 1,\n          total: meta.total,\n          defaultCurrent: data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(res) => res.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={deliveryDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/index.js",["6079","6080"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Button,\n  Space,\n  Table,\n  Card,\n  Tabs,\n  Tag,\n  DatePicker,\n  Tooltip,\n} from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  ClearOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { clearItems } from 'redux/slices/orders';\nimport { fetchParcelOrders } from 'redux/slices/parcelOrders';\nimport formatSortType from 'helpers/formatSortType';\nimport SearchInput from 'components/search-input';\nimport { clearOrder } from 'redux/slices/order';\nimport { DebounceSelect } from 'components/search';\nimport userService from 'services/user';\nimport FilterColumns from 'components/filter-column';\nimport { toast } from 'react-toastify';\nimport DeleteButton from 'components/delete-button';\nimport parcelOrderService from '../../services/parcelOrder';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\nimport moment from 'moment';\nimport { export_url } from 'configs/app-global';\nimport { BiMap } from 'react-icons/bi';\nimport { CgExport } from 'react-icons/cg';\nimport { batch } from 'react-redux';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport ParcelStatus from './parcel-status';\nimport ShowLocationsMap from './show-locations-map';\nimport ShowParcelDetails from './show-parcel-details';\nimport ParcelDeliveryman from './parcel-deliveryman';\nimport { fetchOrderStatus } from 'redux/slices/orderStatus';\n\nconst { TabPane } = Tabs;\nconst { RangePicker } = DatePicker;\n\nexport default function ParserOrders() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { statusList, loading: roleLoading } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n\n  const [orderDetails, setOrderDetails] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [parcelDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [parcelId, setParcelId] = useState(null);\n  const statuses = [\n    { name: 'all', id: '0', active: true, sort: 0 },\n    ...statusList,\n  ];\n\n  const goToEdit = (row) => {\n    dispatch(clearOrder());\n    dispatch(\n      addMenu({\n        url: `parcel-orders/${row.id}`,\n        id: 'edit_parcel_order',\n        name: t('edit.parcel.order'),\n      }),\n    );\n    navigate(`/parcel-orders/${row.id}`);\n  };\n\n  const goToShow = (row) => {\n    setParcelId(row.id);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (user) => (\n        <div>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div className='cursor-pointer'>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {status !== 'delivered' && status !== 'canceled' ? (\n            <EditOutlined\n              onClick={(e) => {\n                e.stopPropagation();\n                setOrderDetails(row);\n              }}\n            />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      is_show: true,\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      render: (deliveryman, row) => (\n        <div>\n          {row?.status === 'ready' && row?.delivery_type !== 'pickup' ? (\n            <Button type='link' onClick={() => setOrderDeliveryDetails(row)}>\n              <Space>\n                {deliveryman\n                  ? `${deliveryman?.firstname} ${deliveryman?.lastname}`\n                  : t('add.deliveryman')}\n                <EditOutlined />\n              </Space>\n            </Button>\n          ) : (\n            <div>\n              {deliveryman?.firstname} {deliveryman?.lastname}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date) => moment(date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('delivery.date'),\n      is_show: true,\n      dataIndex: 'delivery_date',\n      key: 'delivery_date',\n      render: (date) => moment(date).format('YYYY-MM-DD'),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              icon={<BiMap />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setLocationsMap(row.id);\n              }}\n            />\n            <Button\n              icon={<EyeOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                goToShow(row);\n              }}\n            />\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                goToEdit(row);\n              }}\n              disabled={row.status === 'delivered' || row.status === 'canceled'}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [downloading, setDownloading] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const queryParams = useQueryParams();\n  const [role, setRole] = useState(queryParams.values.status || 'all');\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'months'),\n    moment(),\n  );\n  const {\n    data: orders,\n    loading,\n    params,\n    meta,\n  } = useSelector((state) => state.parcelOrders, shallowEqual);\n\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    status: immutable === 'all' ? undefined : immutable,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    delivery_type: type !== 'scheduled' ? type : undefined,\n    delivery_date_from:\n      type === 'scheduled'\n        ? moment().add(1, 'day').format('YYYY-MM-DD')\n        : undefined,\n    date_from: dateRange ? dateRange[0]?.format('YYYY-MM-DD') : null,\n    date_to: dateRange ? dateRange[1]?.format('YYYY-MM-DD') : null,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    parcelOrderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchParcelOrders(paramsData));\n        setText(null);\n        setId(null);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchParcelOrders(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.search(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item?.firstname} ${item?.lastname}`,\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  const goToOrderCreate = () => {\n    batch(() => {\n      dispatch(clearOrder());\n      dispatch(\n        addMenu({\n          id: 'parcel-orders/add',\n          url: 'parcel-orders/add',\n          name: 'add.parcel.order',\n        }),\n      );\n    });\n    navigate('/parcel-orders/add');\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    const params =\n      role !== 'all'\n        ? {\n            status: role,\n          }\n        : null;\n\n    parcelOrderService\n      .export(params)\n      .then((res) => {\n        window.location.href = export_url + res?.data?.file_name;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const onChangeTab = (status) => {\n    const orderStatus = status;\n    dispatch(setMenuData({ activeMenu, data: { role: orderStatus, page: 1 } }));\n    setRole(status);\n    navigate(`?status=${orderStatus}`);\n  };\n\n  const handleCloseModal = () => {\n    setOrderDetails(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n    setParcelId(null);\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      batch(() => {\n        dispatch(fetchParcelOrders(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu?.refetch]);\n\n  useEffect(() => {\n    dispatch(fetchOrderStatus({}));\n  }, []);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        }),\n      );\n      dispatch(\n        fetchParcelOrders({\n          status: undefined,\n          page: data?.page,\n          perPage: 20,\n        }),\n      );\n    });\n    setDateRange(undefined);\n  };\n\n  return (\n    <>\n      <Space className='justify-content-end w-100 mb-3'>\n        <Button\n          type='primary'\n          icon={<PlusCircleOutlined />}\n          onClick={goToOrderCreate}\n          style={{ width: '100%' }}\n        >\n          {t('add.parcel.order')}\n        </Button>\n      </Space>\n      <Card>\n        <Space wrap className='order-filter'>\n          <SearchInput\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n          />\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter(user.value, 'user_id')}\n            onDeselect={() => handleFilter(null, 'user_id')}\n            style={{ width: '100%' }}\n            value={data?.user_id}\n          />\n          <RangePicker\n            value={dateRange}\n            onChange={(values) => setDateRange(values)}\n            disabledDate={(current) => {\n              return current && current > moment().endOf('day');\n            }}\n            style={{ width: '100%' }}\n          />\n          <Button\n            onClick={excelExport}\n            loading={downloading}\n            style={{ width: '100%' }}\n          >\n            <CgExport className='mr-2' />\n            {t('export')}\n          </Button>\n          <Button\n            onClick={handleClear}\n            style={{ width: '100%' }}\n            icon={<ClearOutlined />}\n          >\n            {t('clear')}\n          </Button>\n        </Space>\n      </Card>\n\n      <Card loading={roleLoading}>\n        <Space className='justify-content-between align-items-start w-100'>\n          <Tabs onChange={onChangeTab} type='card' activeKey={immutable}>\n            {statuses\n              .filter((ex) => ex.active === true)\n              .map((item) => {\n                return <TabPane tab={t(item.name)} key={item.name} />;\n              })}\n          </Tabs>\n          <Space>\n            {id !== null && id.length !== 0 && (\n              <Tooltip title={t('delete.selected')}>\n                <DeleteButton type='primary' onClick={allDelete} danger />\n              </Tooltip>\n            )}\n            <FilterColumns setColumns={setColumns} columns={columns} iconOnly />\n          </Space>\n        </Space>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={orders}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n\n      {orderDetails && (\n        <ParcelStatus\n          orderDetails={orderDetails}\n          handleCancel={handleCloseModal}\n          status={statusList}\n        />\n      )}\n      {parcelDeliveryDetails && (\n        <ParcelDeliveryman\n          orderDetails={parcelDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {!!parcelId && (\n        <ShowParcelDetails id={parcelId} handleCancel={handleCloseModal} />\n      )}\n      <CustomModal\n        click={orderDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/index.js",["6081","6082","6083"],[],"import React, { useState, useEffect } from 'react';\nimport { Card, Tabs } from 'antd';\nimport { useTranslation } from 'react-i18next';\n\nimport Setting from './setting';\nimport Locations from './locations';\nimport Footer from './footer';\nimport Reservation from './reservation';\nimport Permission from './permission';\nimport Auth from './auth';\nimport settingService from '../../../services/settings';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport createImage from '../../../helpers/createImage';\nimport Loading from '../../../components/loading';\nimport UiType from './ui-type';\nimport QrCode from './qr-code';\n\nconst { TabPane } = Tabs;\nconst defaultLocation = {\n  lat: 47.4143302506288,\n  lng: 8.532059477976883,\n};\n\nexport default function GeneralSettings() {\n  const { t } = useTranslation();\n  const [tab, setTab] = useState('settings');\n  const [loading, setLoading] = useState(false);\n  const onChange = (key) => setTab(key);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [logo, setLogo] = useState(activeMenu.data?.logo || null);\n  const [favicon, setFavicon] = useState(activeMenu.data?.favicon || null);\n  const [location, setLocation] = useState(\n    activeMenu.data?.location || defaultLocation,\n  );\n\n  const createSettings = (list) => {\n    const result = list.map((item) => ({\n      [item.key]: item.value,\n    }));\n    return Object.assign({}, ...result);\n  };\n\n  function fetchSettings() {\n    setLoading(true);\n    settingService\n      .get()\n      .then((res) => {\n        const data = createSettings(res?.data);\n        const locationArray = data?.location?.split(',');\n        data.order_auto_delivery_man = data.order_auto_delivery_man === '1';\n        data.order_auto_approved = data.order_auto_approved === '1';\n        data.parcel_order_auto_approved =\n          data.parcel_order_auto_approved === '1';\n        data.system_refund = data.system_refund === '1';\n        data.refund_delete = data.refund_delete === '1';\n        data.prompt_email_modal = data.prompt_email_modal === '1';\n        data.blog_active = data.blog_active === '1';\n        data.referral_active = data.referral_active === '1';\n        data.aws = data.aws === '1';\n        data.group_order = data.group_order === '1';\n        data.by_subscription = data.by_subscription === '1';\n        data.reservation_enable_for_user =\n          data.reservation_enable_for_user === '1';\n        data.is_demo = data.is_demo === '1';\n        data.product_auto_approve = data?.product_auto_approve === '1';\n        data.category_auto_approve = data?.category_auto_approve === '1';\n        data.before_order_phone_required =\n          data?.before_order_phone_required === '1';\n        data.location = {\n          lat: Number(locationArray?.[0]),\n          lng: Number(locationArray?.[1]),\n        };\n        setLocation(data.location);\n        data.logo = createImage(data.logo);\n        data.favicon = createImage(data.favicon);\n        setLogo(data.logo);\n        setFavicon(data.favicon);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSettings();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('project.settings')}>\n      {loading ? (\n        <Loading />\n      ) : (\n        <Tabs\n          activeKey={tab}\n          onChange={onChange}\n          tabPosition='left'\n          size='small'\n        >\n          <TabPane key='settings' tab={t('settings')}>\n            <Setting\n              logo={logo}\n              setLogo={setLogo}\n              favicon={favicon}\n              setFavicon={setFavicon}\n            />\n          </TabPane>\n          <TabPane key='location' tab={t('location')}>\n            <Locations location={location} setLocation={setLocation} />\n          </TabPane>\n          <TabPane key='permission' tab={t('permission')}>\n            <Permission />\n          </TabPane>\n          <TabPane key='ui_type' tab={t('ui.type')}>\n            <UiType />\n          </TabPane>\n          <TabPane key='auth' tab={t('auth.settings')}>\n            <Auth />\n          </TabPane>\n          {/*<TabPane key='reservation' tab={t('reservation')}>\n                <Reservation/>\n            </TabPane>\n                <TabPane key='qr_code' tab={t('qrcode')}>\n            <QrCode/>\n        </TabPane>*/}\n          <TabPane key='footer' tab={t('footer')}>\n            <Footer />\n          </TabPane>\n        </Tabs>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-value.js",["6084","6085"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Space, Table, Image, Card } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchPropertyValues } from 'redux/slices/propertyValue';\nimport propertyService from 'services/property';\nimport PropertyValueModal from './property-value-modal';\nimport PropertyDeleteModal from './property-delete-modal';\nimport DeleteButton from 'components/delete-button';\nimport { IMG_URL } from 'configs/app-global';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport FilterColumns from 'components/filter-column';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport useDidUpdate from 'helpers/useDidUpdate';\n\nexport default function PropertyValue() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { propertyGroups } = useSelector(\n    (state) => state.propertyGroup,\n    shallowEqual\n  );\n  const { propertyValues, loading } = useSelector(\n    (state) => state.propertyValue,\n    shallowEqual\n  );\n\n  const [id, setId] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'group',\n      key: 'group',\n      is_show: true,\n      render: (group) => group?.translation?.title,\n    },\n    {\n      title: t('value'),\n      dataIndex: 'value',\n      key: 'value',\n      is_show: true,\n      render: (value, row) => (\n        <Space className='extras'>\n          {row.group.type === 'color' ? (\n            <div\n              className='extra-color-wrapper-contain'\n              style={{ backgroundColor: row.value }}\n            />\n          ) : null}\n          {row.group.type === 'image' ? (\n            <Image\n              width={100}\n              src={IMG_URL + row.value}\n              className='borderRadius'\n            />\n          ) : null}\n          {row.group.type === 'image' ? null : <span>{row.value}</span>}\n        </Space>\n      ),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => setId([record.id])}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => setModal(null);\n\n  const deleteProperty = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    propertyService\n      .deleteValue(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchPropertyValues());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n  useDidUpdate(() => {\n    dispatch(fetchPropertyValues({ group_id: activeMenu?.data?.group_id }));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPropertyValues());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  async function fetchPropertyGroups({ search, page }) {\n    const params = {\n      search: search?.length === 0 ? undefined : search,\n      page: page,\n    };\n    return propertyService.getAllGroups(params).then((res) => {\n      return res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }));\n    });\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n  return (\n    <Card\n      title={t('property.value')}\n      extra={\n        <Space wrap>\n          <InfiniteSelect\n            placeholder={t('select.group')}\n            fetchOptions={fetchPropertyGroups}\n            loading={loading}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ group_id: e?.value })}\n            value={activeMenu.data?.group_id}\n          />\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.property')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={propertyValues}\n        rowKey={(record) => record.id}\n        pagination={false}\n      />\n      {modal && (\n        <PropertyValueModal modal={modal} handleCancel={handleCancel} />\n      )}\n      {id && (\n        <PropertyDeleteModal\n          id={id}\n          click={deleteProperty}\n          text={t('delete.property')}\n          loading={loadingBtn}\n          handleClose={() => setId(null)}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-group.js",["6086"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport propertyService from 'services/property';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchPropertyGroups } from 'redux/slices/propertyGroup';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport PropertyGroupModal from './property-group-modal';\nimport DeleteButton from 'components/delete-button';\nimport PropertyGroupShowModal from './property-group-show-modal';\nimport FilterColumns from 'components/filter-column';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\n\nexport default function PropertyGroup() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { propertyGroups, meta, loading } = useSelector(\n    (state) => state.propertyGroup,\n    shallowEqual\n  );\n\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    column: data?.column,\n    perPage: data?.perPage,\n    sort: data?.sort,\n    page: data?.page,\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    // {\n    //   title: t('type'),\n    //   dataIndex: 'type',\n    //   key: 'type',\n    //   is_show: true,\n    // },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EyeOutlined />}\n            onClick={() => setShow(record.id)}\n          />\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([record.id]);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => {\n    setShow(null);\n    setModal(null);\n  };\n\n  const onDeleteExtra = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    propertyService\n      .deleteGroup(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchPropertyGroups());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchPropertyGroups(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchPropertyGroups(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      })\n    );\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column } = sorter;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column },\n      })\n    );\n  }\n\n  return (\n    <Card\n      title={t('property.group')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.property')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-between'>\n        <SearchInput\n          placeholder={t('search')}\n          handleChange={(search) => handleFilter(search, 'search')}\n          defaultValue={activeMenu.data?.search}\n          resetSearch={!activeMenu.data?.search}\n          className={'w-25'}\n        />\n      </div>\n\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={propertyGroups}\n        rowKey={(record) => record.id}\n        pagination={{\n          pageSize: paramsData.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        onChange={onChangePagination}\n      />\n      {modal && (\n        <PropertyGroupModal modal={modal} handleCancel={handleCancel} />\n      )}\n      <CustomModal\n        click={onDeleteExtra}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n      {show && (\n        <PropertyGroupShowModal open={show} handleClose={handleCancel} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-products/index.js",["6087","6088","6089","6090","6091","6092"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Tag,\n  Button,\n  DatePicker,\n  Spin,\n  Badge,\n} from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport SearchInput from '../../components/search-input';\nimport { CloudDownloadOutlined } from '@ant-design/icons';\nimport ReportService from '../../services/reports';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport ReportChart from '../../components/report/chart';\nimport moment from 'moment';\nimport { ReportContext } from '../../context/report';\nimport FilterColumns from '../../components/filter-column';\nimport { export_url } from '../../configs/app-global';\nimport {\n  clearCompare,\n  fetchReportProduct,\n  fetchReportProductChart,\n  ReportProductCompare,\n} from '../../redux/slices/report/products';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport QueryString from 'qs';\nimport { t } from 'i18next';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { useMemo } from 'react';\nimport shopService from '../../services/shop';\nimport { DebounceSelect } from 'components/search';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst ReportProducts = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const category_id = QueryString.parse(location.search, [])['?category_id'];\n  const product_id = QueryString.parse(location.search, [])['?product_id'];\n  const [shopId, setShopId] = useState();\n   const { date_from, date_to, by_time, chart, handleChart, handleDateRange } =\n    useContext(ReportContext);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const {\n    loading,\n    chartData: reportData,\n    productList,\n  } = useSelector((state) => state.productReport, shallowEqual);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [downloading, setDownloading] = useState(false);\n  const [search, setSearch] = useState('');\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('product.title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n      render: (title ) => {\n        return (\n            title\n        );\n      },\n      sorter: (a, b) =>\n        a?.translation?.title.localeCompare(b?.translation?.title),\n    },\n    {\n      title: t('orders'),\n      dataIndex: 'count',\n      key: 'count',\n      is_show: true,\n    },\n    {\n      title: t('item.sold'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      sorter: (a, b) => a.quantity - b.quantity,\n      is_show: true,\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      is_show: true,\n      render: (total_price) =>\n        numberToPrice(total_price, defaultCurrency?.symbol),\n      sorter: (a, b) => a.total_price - b.total_price,\n    },\n  ]);\n\n  const chart_type = useMemo(\n    () => [\n      {\n        label: 'item.sold',\n        value: 'quantity',\n        qty: 'quantity',\n        price: false,\n      },\n      { label: 'net.sales', value: 'price', qty: 'price', price: true },\n      { label: 'orders', value: 'count', qty: 'count', price: false },\n    ],\n    []\n  );\n\n  const fetchReport = () => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      chart,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    if (chart_type.find((item) => item.value === chart)) {\n      dispatch(fetchReportProductChart(params));\n    }\n  };\n\n  const fetchShops = (search) => {\n    const params = {\n      perPage: 10,\n      search,\n    };\n    return shopService\n      .selectPaginate(params)\n      .then((res) =>\n        res?.map((shop) => ({\n          label: shop?.translation?.title,\n          value: shop?.id,\n        }))\n      )\n      .catch((err) => console.log('report product ERROR => ', err));\n  };\n\n  const fetchProduct = (page, perPage) => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      page,\n      perPage,\n      search: search || null,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    if (shopId) params.shop_id = shopId;\n    dispatch(fetchReportProduct(params));\n  };\n\n  useEffect(() => {\n    handleChart(chart_type[0].value);\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct();\n      fetchReport();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchProduct();\n  }, [date_to, search, category_id, product_id, by_time, date_from, shopId]);\n\n  useDidUpdate(() => {\n    fetchReport();\n  }, [date_to, by_time, chart, category_id, product_id, date_from]);\n\n  const onChangePagination = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchProduct(page, perPage);\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    ReportService.getReportProductList({\n      date_from,\n      date_to,\n      type: by_time,\n      export: 'excel',\n      shop_id: shopId,\n      products: rowSelection?.selectedRowKeys[0]\n        ? rowSelection?.selectedRowKeys\n        : product_id\n        ? [product_id]\n        : undefined,\n    })\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n\n  const Compare = () => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      chart,\n      ids: selectedRowKeys,\n      shop_id: shopId,\n    };\n\n    dispatch(ReportProductCompare(params));\n  };\n\n  const clear = () => {\n    dispatch(clearCompare());\n    setShopId(undefined);\n    setSelectedRowKeys([]);\n    fetchProduct();\n    fetchReport();\n    navigate(`/report/products`);\n  };\n\n  const onShopSelectClear = () => {\n    setShopId(undefined);\n    fetchReportProduct();\n    fetchReportProductChart({});\n  };\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-3'>\n        <Col span={12}>\n          <Space>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        {chart_type?.map((item) => (\n          <Col\n            span={8}\n            key={item.label}\n            onClick={() => handleChart(item.value)}\n          >\n            <Card className={chart === item.value && 'active'}>\n              <Row className='mb-5'>\n                <Col>\n                  <Text>{t(item.label)}</Text>\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={12}>\n                  <Title level={2}>\n                    {!item?.price\n                      ? reportData[item.qty]\n                      : numberToPrice(\n                          reportData[item.qty],\n                          defaultCurrency?.symbol\n                        )}\n                  </Title>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <ReportChart reportData={reportData} chart_data='quantities_sum' />\n      <Card>\n        <Space className='d-flex justify-content-between align-center'>\n          <Typography.Text strong level={3}>\n            {t('products')}\n          </Typography.Text>\n          <Space className='d-flex justify-content-between'>\n            <SearchInput\n              style={{ minWidth: '300px' }}\n              handleChange={(e) => setSearch(e)}\n            />\n            <DebounceSelect\n              fetchOptions={fetchShops}\n              placeholder={t('select.shop')}\n              onSelect={(value) => setShopId(value.value)}\n              onClear={() => onShopSelectClear()}\n            />\n            {/* <Button\n              color='geekblue'\n              onClick={Compare}\n              disabled={Boolean(!selectedRowKeys.length)}\n            >\n              {t('compare')}\n            </Button> */}\n            <Button\n              type={\n                Boolean(selectedRowKeys.length) ||\n                !!category_id ||\n                !!product_id ||\n                !!shopId\n                  ? 'primary'\n                  : 'default'\n              }\n              danger={\n                Boolean(selectedRowKeys.length) ||\n                !!category_id ||\n                !!product_id ||\n                !!shopId\n              }\n              onClick={clear}\n            >\n              {t('clear')}\n            </Button>\n            <Button\n              icon={<CloudDownloadOutlined />}\n              loading={downloading}\n              onClick={excelExport}\n            >\n              {t('download')}\n            </Button>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        </Space>\n\n        <Table\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={Array.isArray(productList?.data) ? productList?.data : []}\n          rowKey={(row) => row.id}\n          loading={loading}\n          pagination={{\n            pageSize: 10,\n            page: productList?.page || 1,\n            total: productList?.total,\n            defaultCurrent: 1,\n          }}\n          onChange={onChangePagination}\n          scroll={{\n            x: 1500,\n          }}\n        />\n      </Card>\n    </Spin>\n  );\n};\n\nexport default ReportProducts;\n","/home/mostafa/Magde/new/frontadminreact/src/views/report-overview/index.js",["6093","6094"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Tag,\n  Divider,\n  DatePicker,\n  Select,\n  Spin,\n} from 'antd';\nimport React, { useContext } from 'react';\nimport ChartWidget from 'components/chart-widget';\nimport { BarChartOutlined, LineChartOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Link, useLocation } from 'react-router-dom';\nimport QueryString from 'qs';\nimport { ReportContext } from 'context/report';\nimport { useEffect } from 'react';\nimport {\n  fetchReportOverviewCart,\n  fetchReportOverviewCategories,\n  fetchReportOverviewProducts,\n} from 'redux/slices/report/overview';\nimport { disableRefetch } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport moment from 'moment';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { useTranslation } from 'react-i18next';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\nconst ReportOverview = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const category_id = QueryString.parse(location.search, [])['?category_id'];\n  const product_id = QueryString.parse(location.search, [])['?product_id'];\n  const {\n    date_from,\n    date_to,\n    by_time,\n    chart,\n    handleDateRange,\n    options,\n    handleByTime,\n    chart_type,\n    setChartType,\n  } = useContext(ReportContext);\n  const { loading, carts, products, categories } = useSelector(\n    (state) => state.overviewReport,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const topProductsTitle = (data) => {\n    const titleArray = data?.split(', ');\n\n    return (\n      <div style={{ display: 'flex', rowGap: '10px', flexDirection: 'column' }}>\n        {titleArray?.map((item, index) =>\n          item?.[0] === '#' ? (\n            <span\n              style={{\n                display: 'block',\n                width: '15px',\n                height: '15px',\n                borderRadius: '50%',\n                backgroundColor: item?.trim(),\n              }}\n            />\n          ) : (\n            item\n          ),\n        )}\n      </div>\n    );\n  };\n\n  const columns = [\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      render: (title) => topProductsTitle(title),\n    },\n    {\n      title: t('item.sold'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n    },\n    {\n      title: t('net.sales'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (price) => numberToPrice(price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('orders'),\n      dataIndex: 'count',\n      key: 'count',\n    },\n  ];\n  const performance = [\n    {\n      title: 'Total sales',\n      qty: 'delivered_sum',\n      percent: '5',\n      price: true,\n    },\n    {\n      title: 'Orders',\n      qty: 'count',\n      percent: '5',\n      price: false,\n    },\n    {\n      title: 'Canceled orders price',\n      qty: 'canceled_sum',\n      percent: '5',\n      price: true,\n    },\n    {\n      title: 'Total tax',\n      qty: 'tax',\n      percent: '5',\n      price: true,\n    },\n    {\n      title: 'Delivered avg',\n      qty: 'delivered_avg',\n      percent: '5',\n      price: true,\n    },\n    {\n      title: 'Delivery fee',\n      qty: 'delivery_fee',\n      percent: '5',\n      price: true,\n    },\n  ];\n\n  const fetchProducts = (page, perPage) => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      page,\n      perPage,\n    };\n    dispatch(fetchReportOverviewProducts(params));\n  };\n\n  const fetchCategories = (page, perPage) => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      page,\n      perPage,\n    };\n    dispatch(fetchReportOverviewCategories(params));\n  };\n\n  const fetchOverview = (page, perPage) => {\n    const params = {\n      date_from,\n      date_to,\n      type: by_time,\n      page,\n      perPage,\n    };\n    if (category_id) params.categories = [category_id];\n    if (product_id) params.products = [product_id];\n    dispatch(fetchReportOverviewCart(params));\n  };\n\n  const onProductPaginationChange = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchProducts(page, perPage);\n  };\n\n  const onCategoryPaginationChange = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchProducts(page, perPage);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOverview();\n      fetchProducts();\n      fetchCategories();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchOverview();\n  }, [date_to, by_time, chart, category_id, product_id, date_from]);\n\n  useDidUpdate(() => {\n    fetchProducts();\n  }, [date_to, by_time, date_from]);\n\n  useDidUpdate(() => {\n    fetchCategories();\n  }, [date_to, by_time, date_from]);\n\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-4'>\n        <Col span={12}>\n          <Space size='large'>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Divider orientation='left'>Performance</Divider>\n      <Row gutter={24}>\n        {performance?.map((item, key) => {\n          return (\n            <Col span={6}>\n              <Link key={item.title} to='/report/revenue'>\n                <Card>\n                  <Row className='mb-5'>\n                    <Col>\n                      <Text>{item.title}</Text>\n                    </Col>\n                  </Row>\n                  <Row gutter={24}>\n                    <Col span={12}>\n                      <Title level={2}>\n                        {item.price\n                          ? numberToPrice(\n                              carts[item.qty],\n                              defaultCurrency?.symbol,\n                            )\n                          : carts[item.qty]}\n                      </Title>\n                    </Col>\n                  </Row>\n                </Card>\n              </Link>\n            </Col>\n          );\n        })}\n      </Row>\n      <Row gutter={24} className='mb-2'>\n        <Col span={20}>\n          <Divider orientation='left'>Charts</Divider>\n        </Col>\n        <Col span={4}>\n          <div className='d-flex'>\n            <Select\n              style={{ width: 100 }}\n              onChange={handleByTime}\n              options={options}\n              defaultValue={by_time}\n            />\n\n            <Divider type='vertical' style={{ height: '100%' }} />\n            <Space>\n              <LineChartOutlined\n                style={{\n                  fontSize: '22px',\n                  cursor: 'pointer',\n                  color: chart_type === 'line' ? 'green' : '',\n                }}\n                onClick={() => setChartType('line')}\n              />\n              <BarChartOutlined\n                style={{\n                  fontSize: '22px',\n                  cursor: 'pointer',\n                  color: chart_type === 'bar' ? 'green' : '',\n                }}\n                onClick={() => setChartType('bar')}\n              />\n            </Space>\n          </div>\n        </Col>\n      </Row>\n      <Row gutter={24}>\n        <Col span={12}>\n          <Card title='Net Sales'>\n            <ChartWidget\n              type={chart_type}\n              series={[\n                {\n                  name: 'Orders',\n                  data: carts?.chart_price?.map((item) => item.delivered_sum),\n                },\n              ]}\n              xAxis={carts?.chart_price?.map((item) => item.time)}\n            />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title='Orders'>\n            <ChartWidget\n              type={chart_type}\n              series={[\n                {\n                  name: 'Orders',\n                  data: carts?.chart_count?.map((item) => item.count),\n                },\n              ]}\n              xAxis={carts?.chart_price?.map((item) => item.time)}\n            />\n          </Card>\n        </Col>\n      </Row>\n      <Divider orientation='left'>Leaderboards</Divider>\n      <Row gutter={24}>\n        <Col span={12}>\n          <Card title='Top categories'>\n            <Table\n              scroll={{ x: true }}\n              onChange={onCategoryPaginationChange}\n              pagination={{\n                pageSize: categories?.meta?.per_page,\n                page: categories?.meta?.current_page || 1,\n                total: categories?.meta?.total,\n                defaultCurrent: 1,\n              }}\n              columns={columns}\n              dataSource={categories?.data}\n            />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title='Top products'>\n            <Table\n              scroll={{ x: true }}\n              onChange={onProductPaginationChange}\n              pagination={{\n                pageSize: products?.meta?.per_page,\n                page: products?.meta?.current_page || 1,\n                total: products?.meta?.total,\n                defaultCurrent: 1,\n              }}\n              columns={columns}\n              dataSource={products?.data}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </Spin>\n  );\n};\n\nexport default ReportOverview;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/index.js",["6095","6096"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Table, Card, Space, Tag, Image } from 'antd';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { fetchShopAds } from 'redux/slices/shop-ads';\nimport { Context } from '../../context/context';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport FilterColumns from 'components/filter-column';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport DeleteButton from '../../components/delete-button';\nimport { useNavigate } from 'react-router-dom';\nimport CustomModal from 'components/modal';\nimport ShopAdsStatusModal from './shop-ads-status-modal';\nimport shopAdsService from 'services/shop-ads';\nimport formatSortType from '../../helpers/formatSortType';\nimport moment from 'moment';\nimport { IMG_URL } from 'configs/app-global';\nimport TransactionStatusModal from './transactionStatusModal';\n\nexport default function ShopAds() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    shopAdsList,\n    loading: listLoading,\n    meta,\n  } = useSelector((state) => state.shopAds, shallowEqual);\n  const { setIsModalVisible } = useContext(Context);\n\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [active, setActive] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [shopAdsDetails, setShopAdsDetails] = useState(null);\n  const [singleAds, setSingleAds] = useState([]);\n  const [loadingSingleAds, setLoadingSingleAds] = useState(false);\n  const [expandId, setExpandId] = useState(null);\n  const [transactionDetail, setTransactionDetail] = useState(null);\n\n  const data = activeMenu.data;\n\n  const paramsData = {\n    search: data?.serach,\n    perPage: data?.perPage,\n    page: data?.page,\n    sort: data?.sort,\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchShopAds(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchShopAds(paramsData));\n  }, [activeMenu.data]);\n\n  const onChangePagination = (pagination, filter, sorter) => {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  };\n\n  const shopAdsDelete = () => {\n    setLoading(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    shopAdsService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchShopAds(paramsData));\n        setText(null);\n        setActive(false);\n      })\n      .finally(() => {\n        setLoading(false);\n        setId(null);\n      });\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'shop-ads',\n        url: `shop-ads/${row.id}`,\n        name: t('edit.shop.ads'),\n      }),\n    );\n    navigate(`/shop-ads/${row.id}`);\n  };\n\n  const goToTransactions = () => {\n    dispatch(\n      addMenu({\n        id: 'transactions',\n        url: `transactions`,\n        name: t('transactions'),\n      }),\n    );\n    navigate(`/transactions`);\n  };\n\n  const handleActive = () => {\n    setLoading(true);\n    shopAdsService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchShopAds(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const showAds = ({ expanded, record }) => {\n    setSingleAds([]);\n    if (expanded) {\n      setLoadingSingleAds(true);\n      setExpandId(record?.id);\n      shopAdsService\n        .getById(record?.id)\n        .then((res) => {\n          setSingleAds(res.data?.shop_ads_products);\n        })\n        .finally(() => setLoadingSingleAds(false));\n    } else {\n      setExpandId(null);\n    }\n  };\n\n  const expandedRowRender = () => {\n    const columns = [\n      {\n        title: t('id'),\n        dataIndex: 'id',\n        is_show: true,\n        sorter: (a, b) => a.id - b.id,\n      },\n      {\n        title: t('image'),\n        dataIndex: 'img',\n        is_show: true,\n        render: (img, row) => {\n          return (\n            <Image\n              width={100}\n              height={100}\n              src={IMG_URL + row.product?.img}\n              placeholder\n              style={{ borderRadius: 4, objectFit: 'cover' }}\n            />\n          );\n        },\n      },\n      {\n        title: t('name'),\n        dataIndex: 'name',\n        is_show: true,\n        render: (img, row) => row.product?.translation?.title,\n      },\n      {\n        title: t('active'),\n        dataIndex: 'active',\n        is_show: true,\n        render: (img, row) =>\n          row.product?.active ? t('active') : t('inactive'),\n      },\n      {\n        title: t('status'),\n        is_show: true,\n        dataIndex: 'status',\n        key: 'status',\n        render: (status, row) => {\n          return (\n            <div>\n              {row.product?.status === 'pending' ? (\n                <Tag color='blue'>{t(row.product?.status)}</Tag>\n              ) : row.product?.status === 'unpublished' ? (\n                <Tag color='error'>{t(row.product?.status)}</Tag>\n              ) : (\n                <Tag color='cyan'>{t(row.product?.status)}</Tag>\n              )}\n            </div>\n          );\n        },\n      },\n    ];\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={singleAds}\n        pagination={false}\n        loading={loadingSingleAds}\n      />\n    );\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'title',\n      is_show: true,\n      render: (_, row) => {\n        return <span>{row?.shop?.translation?.title}</span>;\n      },\n    },\n    {\n      title: t('expire.at'),\n      dataIndex: 'expire_at',\n      is_show: true,\n      render: (_, row) => (\n        <>\n          {row?.expired_at ? (\n            moment(row?.expired_at).format('YYYY-MM-DD hh:mm')\n          ) : (\n            <span>{t('not.expired')}</span>\n          )}\n        </>\n      ),\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setShopAdsDetails(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('transaction'),\n      dataIndex: 'transaction',\n      is_show: true,\n      render: (transaction, row) => {\n        return (\n          <>\n            {!!transaction ? (\n              <>\n                <Button onClick={goToTransactions} color='cyan'>\n                  {row?.transaction?.status}\n                </Button>\n                &nbsp; &nbsp; &nbsp;\n                <EditOutlined\n                  onClick={() => setTransactionDetail(row?.transaction)}\n                />\n              </>\n            ) : (\n              <Button color='error'>{t('not.paid')}</Button>\n            )}\n          </>\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {/*<Button*/}\n            {/*  type='primary'*/}\n            {/*  icon={<EditOutlined />}*/}\n            {/*  onClick={() => goToEdit(row)}*/}\n            {/*/>*/}\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([row.id]);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n      <Card>\n        <Table\n          onExpand={(expanded, record) => showAds({ expanded, record })}\n          expandable={{\n            expandedRowRender,\n            defaultExpandedRowKeys: ['0'],\n            expandedRowKeys: [expandId],\n          }}\n          scroll={{ x: true }}\n          dataSource={shopAdsList}\n          columns={columns?.filter((item) => item?.is_show)}\n          rowSelection={rowSelection}\n          rowKey={(record) => record.id}\n          loading={loading || listLoading}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      {shopAdsDetails && (\n        <ShopAdsStatusModal\n          data={shopAdsDetails}\n          handleCancel={() => setShopAdsDetails(null)}\n          paramsData={paramsData}\n        />\n      )}\n      <CustomModal\n        click={active ? handleActive : shopAdsDelete}\n        text={\n          active ? t('set.active.advert') : text ? t('delete') : t('all.delete')\n        }\n        setText={setId}\n        setActive={setActive}\n      />\n      {transactionDetail && (\n        <TransactionStatusModal\n          data={transactionDetail}\n          handleCancel={() => setTransactionDetail(false)}\n          paramsData={paramsData}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/report/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/index.js",["6097"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Table } from 'antd';\nimport { IMG_URL } from 'configs/app-global';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport deliveryPointService from 'services/delivery-point';\nimport { fetchDeliveryPoint } from 'redux/slices/delivery-point';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport numberToPrice from 'helpers/numberToPrice';\n\nconst DeliveryPoints = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const { deliveryPoints, meta, loading, params } = useSelector(\n    (state) => state.deliveryPoint,\n    shallowEqual\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [id, setId] = useState(null);\n  const data = activeMenu.data;\n  const paramsData = {\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={IMG_URL + img}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'title',\n      is_show: true,\n      render: (translation, row) => translation?.title,\n    },\n    {\n      title: t('address'),\n      dataIndex: 'address',\n      key: 'address',\n      is_show: true,\n      render: (address, row) => address?.[defaultLang || 'en'],\n    },\n    {\n      title: t('country'),\n      dataIndex: 'country',\n      key: 'country',\n      is_show: true,\n      render: (country, row) => country?.translation?.title,\n    },\n    {\n      title: t('region'),\n      dataIndex: 'region',\n      key: 'region',\n      is_show: true,\n      render: (region, row) => region?.translation?.title,\n    },\n    {\n      title: t('city'),\n      dataIndex: 'city',\n      key: 'city',\n      is_show: true,\n      render: (city, row) => city?.translation?.title,\n    },\n    {\n      title: t('area'),\n      dataIndex: 'area',\n      key: 'area',\n      is_show: true,\n      render: (area, row) => area?.translation?.title,\n    },\n    {\n      title: t('fitting_rooms'),\n      dataIndex: 'fitting_rooms',\n      key: 'fitting_rooms',\n      is_show: true,\n      render: (fitting_rooms, row) => fitting_rooms,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price, row) => numberToPrice(price, defaultCurrency?.symbol),\n    },\n\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'delivery-point/add',\n        url: 'delivery-point/add',\n        name: t('add.delivery.point'),\n      })\n    );\n    navigate('/delivery-point/add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `delivery-point/${row.id}`,\n        id: 'point.edit',\n        name: t('edit.delivery.point'),\n      })\n    );\n    navigate(`/delivery-point/${row.id}`);\n  };\n\n  const deleteDeliveryPoint = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    deliveryPointService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchDeliveryPoint());\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchDeliveryPoint(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchDeliveryPoint(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  return (\n    <Card\n      title={t('delivery.points')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.point')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={deliveryPoints}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={deleteDeliveryPoint}\n        text={t('delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default DeliveryPoints;\n","/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/index.js",["6098"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport deliveryPriceService from 'services/delivery-price';\nimport { fetchDeliveryPrice } from 'redux/slices/delivery-price';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport numberToPrice from 'helpers/numberToPrice';\nimport shopService from '../../services/restaurant';\nimport { DebounceSelect } from '../../components/search';\nimport regionService from '../../services/deliveryzone/region';\nimport areaService from '../../services/deliveryzone/area';\nimport cityService from '../../services/deliveryzone/city';\nimport SearchInput from '../../components/search-input';\n\nconst DeliveryPrice = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { deliveryPrice, meta, loading, params } = useSelector(\n    (state) => state.deliveryPrice,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const [id, setId] = useState(null);\n  const data = activeMenu.data;\n  const paramsData = {\n    perPage: data?.perPage,\n    page: data?.page,\n    shop_id: data?.shop?.value,\n    area_id: data?.area?.value,\n    region_id: data?.region?.value,\n    city_id: data?.city?.value,\n    search: data?.search,\n  };\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (shop) => shop?.translation?.title ?? '--',\n    },\n    {\n      title: t('country'),\n      dataIndex: 'country',\n      key: 'country',\n      is_show: true,\n      render: (country) => country?.translation?.title ?? '--',\n    },\n    {\n      title: t('region'),\n      dataIndex: 'region',\n      key: 'region',\n      is_show: true,\n      render: (region) => region?.translation?.title ?? '--',\n    },\n    {\n      title: t('city'),\n      dataIndex: 'city',\n      key: 'city',\n      is_show: true,\n      render: (city) => city?.translation?.title ?? '--',\n    },\n    {\n      title: t('area'),\n      dataIndex: 'area',\n      key: 'area',\n      is_show: true,\n      render: (area) => area?.translation?.title ?? '--',\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price) =>\n        numberToPrice(\n          price,\n          defaultCurrency?.symbol,\n          defaultCurrency?.position,\n        ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'delivery-price/add',\n        url: 'delivery-price/add',\n        name: t('add.delivery.price'),\n      }),\n    );\n    navigate('/delivery-price/add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `delivery-price/${row.id}`,\n        id: 'price.edit',\n        name: t('edit.delivery.price'),\n      }),\n    );\n    navigate(`/delivery-price/${row.id}`);\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  async function fetchShops(search) {\n    const params = {\n      search: search.length === 0 ? null : search,\n    };\n    return shopService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  async function fetchAreas(search) {\n    const params = {\n      search: search.length === 0 ? null : search,\n    };\n    return areaService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  async function fetchRegions(search) {\n    const params = {\n      search: search.length === 0 ? null : search,\n    };\n    return regionService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  async function fetchCities(search) {\n    const params = {\n      search: search.length === 0 ? null : search,\n    };\n    return cityService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  const deleteDeliveryPrice = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    deliveryPriceService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchDeliveryPrice({}));\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchDeliveryPrice(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchDeliveryPrice(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  return (\n    <Card\n      title={t('delivery.price')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.delivery.price')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <div className='my-2'>\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <DebounceSelect\n            placeholder={t('select.shop')}\n            fetchOptions={fetchShops}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ shop: e })}\n            value={activeMenu.data?.shop}\n          />\n          <DebounceSelect\n            placeholder={t('select.area')}\n            fetchOptions={fetchAreas}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ area: e })}\n            value={activeMenu.data?.area}\n          />\n          <DebounceSelect\n            placeholder={t('select.region')}\n            fetchOptions={fetchRegions}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ region: e })}\n            value={activeMenu.data?.region}\n          />\n          <DebounceSelect\n            placeholder={t('select.city')}\n            fetchOptions={fetchCities}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ city: e })}\n            value={activeMenu.data?.city}\n          />\n        </Space>\n      </div>\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={deliveryPrice}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={deleteDeliveryPrice}\n        text={t('delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default DeliveryPrice;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/properties/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/looks/index.js",["6099"],[],"import React, { Fragment, useContext, useState, useEffect } from 'react';\nimport { Button, Space, Switch, Table, Image, Card } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { IMG_URL } from 'configs/app-global';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport DeleteButton from 'components/delete-button';\nimport SearchInput from 'components/search-input';\nimport { Context } from 'context/context';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchLooks } from 'redux/slices/looks';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport looksService from 'services/banner';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function Looks() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { looks, loading, params, meta } = useSelector(\n    (state) => state.looks,\n    shallowEqual,\n  );\n\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [active, setActive] = useState(false);\n\n  const paramsData = {\n    search: activeMenu?.data?.search ?? null,\n    ...params,\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n      render: (_, record) => record?.translation?.title,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (_, record) => (\n        <Image\n          width={100}\n          height={100}\n          src={\n            !!record?.img\n              ? IMG_URL + record?.img\n              : 'https://via.placeholder.com/150'\n          }\n          preview={!!record?.img}\n          placeholder\n          style={{ borderRadius: 4, objectFit: 'cover' }}\n        />\n      ),\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (_, record) =>\n        moment(record?.created_at).format('DD-MM-YYYY HH:mm'),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (_, record) => {\n        return (\n          <Switch\n            onChange={() => {\n              setId([record?.id]);\n              setActive(true);\n              setIsModalVisible(true);\n            }}\n            checked={record?.active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, record) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(record?.id)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([record.id]);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    looksService\n      .setActive(id)\n      .then(() => {\n        dispatch(fetchLooks({ paramsData }));\n        toast.success(t('successfully.updated'));\n        setIsModalVisible(false);\n        setActive(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleDeleteLook = () => {\n    setLoadingBtn(true);\n\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    looksService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchLooks({ paramsData }));\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        setActive(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const deleteSelected = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      }),\n    );\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'look_add',\n        url: 'catalog/looks/add',\n        name: 'add.look',\n      }),\n    );\n    clearData();\n    navigate('add');\n  };\n\n  const goToEdit = (id) => {\n    dispatch(\n      addMenu({\n        id: 'look_edit',\n        url: `catalog/looks/${id}`,\n        name: 'edit.look',\n      }),\n    );\n    clearData();\n    navigate(`${id}`);\n  };\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n\n    const params = {\n      ...paramsData,\n      perPage: pageSize,\n      page: current,\n    };\n\n    dispatch(fetchLooks(params));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchLooks(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchLooks(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Fragment>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            style={{ minWidth: 300 }}\n            handleChange={(e) => handleFilter({ search: e })}\n          />\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.looks')}\n          </Button>\n          <DeleteButton icon={<DeleteOutlined />} onClick={deleteSelected}>\n            {t('delete.selected')}\n          </DeleteButton>\n        </Space>\n      </Card>\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          rowKey={(record) => record.id}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={looks}\n          loading={loading}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      <CustomModal\n        click={active ? handleActive : handleDeleteLook}\n        text={\n          active\n            ? t('set.active')\n            : t('are.you.sure.you.want.to.delete.the.selected.products')\n        }\n        loading={loadingBtn}\n        setActive={setActive}\n      />\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-clone.js",["6100"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport AddonStock from './addons-stock';\nimport AddonFinish from './addons-finish';\nimport AddonIndex from './addons-index';\nimport LanguageList from '../../../components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from '../../../services/seller/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from '../../../helpers/useQueryParams';\n\nconst { Step } = Steps;\n\nconst SellerAddonClone = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  return (\n    <Card title={t('clone.addon')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <AddonIndex next={next} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <AddonStock next={next} prev={prev} current={current} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <AddonFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default SellerAddonClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-edit.js",["6101"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport AddonFinish from './addons-finish';\nimport AddonStock from './addons-stock';\nimport AddonIndex from './addons-index';\nimport LanguageList from '../../../components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from '../../../services/seller/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from '../../../helpers/useQueryParams';\n\nconst { Step } = Steps;\n\nconst SellerddonEdit = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          unit: createSelectObject(res.data.unit),\n          extras: res.data.stocks[0]?.extras.map((el) => el.extra_group_id),\n          stocks: res.data.stocks.map((stock) => ({\n            ...stock,\n            ...Object.assign(\n              {},\n              ...stock.extras.map((extra, idx) => ({\n                [`extras[${idx}]`]: extra.id,\n              }))\n            ),\n            quantity: stock.quantity || 0,\n            extras: undefined,\n          })),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  return (\n    <Card title={t('addon.edit')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <AddonIndex next={next} action_type={'edit'} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <AddonStock next={next} prev={prev} current={current} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <AddonFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default SellerddonEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/refund/refund-details.js",["6102"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  Table,\n  Image,\n  Tag,\n  Button,\n  Space,\n  Row,\n  Col,\n  Avatar,\n  Typography,\n  Skeleton,\n  Spin,\n  Badge,\n  Steps,\n} from 'antd';\nimport { CalendarOutlined, EditOutlined } from '@ant-design/icons';\nimport { Link, useParams } from 'react-router-dom';\nimport getImage from '../../../helpers/getImage';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport OrderStatusModal from './status-modal';\n\nimport { fetchSellerDeliverymans } from '../../../redux/slices/deliveryman';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { fetchRestOrderStatus } from '../../../redux/slices/orderStatus';\nimport { MdEmail } from 'react-icons/md';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport { IMG_URL } from '../../../configs/app-global';\nimport { BsCalendarDay, BsFillTelephoneFill } from 'react-icons/bs';\nimport { BiMessageDots, BiMoney } from 'react-icons/bi';\nimport moment from 'moment';\nimport { useRef } from 'react';\nimport refundService from '../../../services/seller/refund';\nimport hideNumber from 'components/hideNumber';\nimport hideEmail from 'components/hideEmail';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\nconst status = ['pending', 'accepted', 'canceled'];\n\nexport default function OrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n\n  const data = activeMenu?.data?.order;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const productListRef = useRef();\n  const totalPriceRef = useRef();\n\n  const [loading, setLoading] = useState(false);\n  const [orderDetails, setOrderDetails] = useState(null);\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => row.stock?.id,\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => (\n        <Space direction='vertical' className='relative'>\n          {row.stock?.product?.translation?.title}\n          {row.stock?.extras?.map((extra) => (\n            <Tag key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row.stock?.product?.img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'origin_price',\n      key: 'origin_price',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (text) => <span>{text}</span>,\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'rate_discount',\n      key: 'rate_discount',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (_, row) => {\n        return numberToPrice(row?.stock?.total_price, defaultCurrency?.symbol);\n      },\n    },\n  ];\n\n  const documentColumns = [\n    {\n      title: t('date'),\n      dataIndex: 'date',\n      key: 'date',\n    },\n    {\n      title: t('document'),\n      dataIndex: 'document',\n      key: 'document',\n    },\n    {\n      title: t('number'),\n      dataIndex: 'number',\n      key: 'number',\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'price',\n      key: 'price',\n    },\n  ];\n\n  const documents = [\n    {\n      price: numberToPrice(data?.total_price, defaultCurrency?.symbol),\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('invoice'),\n      date: data?.delivery_date,\n    },\n    {\n      price: '-',\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('delivery.reciept'),\n      date: data?.delivery_date,\n    },\n  ];\n\n  const handleCloseModal = () => setOrderDetails(null);\n\n  function fetchOrder() {\n    setLoading(true);\n    refundService\n      .getById(id)\n      .then(({ data }) => {\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n      dispatch(fetchRestOrderStatus({}));\n      dispatch(fetchSellerDeliverymans({}));\n    }\n  }, [activeMenu.refetch]);\n  console.log('data', data);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.user?.firstname}{' '}\n            {data?.user?.lastname || ''}\n          </>\n        }\n        extra={\n          data?.status !== 'delivered' && data?.status !== 'canceled' ? (\n            <Space>\n              {data?.status !== 'delivered' && data?.status !== 'canceled' ? (\n                <Button type='primary' onClick={() => setOrderDetails(data)}>\n                  {t('change.status')}\n                </Button>\n              ) : null}\n            </Space>\n          ) : (\n            ''\n          )\n        }\n      />\n\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='justify-content-between w-100'>\n              <Space className='align-items-start'>\n                <CalendarOutlined className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('delivery.date')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.delivery_date} {data?.delivery_time}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  totalPriceRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <BiMoney className='order-card-icon' />\n\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('total.price')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} loading={loading} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {numberToPrice(\n                        data?.total_price,\n                        defaultCurrency?.symbol,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMessageDots className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('messages')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.review ? 1 : 0}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  productListRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <FiShoppingCart className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('products')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.details?.reduce(\n                        (total, item) => (total += item.quantity),\n                        0,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n            </Space>\n          </Card>\n        </Col>\n        {data?.status !== 'canceled' && (\n          <Col span={24}>\n            <Card>\n              <Steps\n                current={statusList?.findIndex(\n                  (item) => item.name === data?.status,\n                )}\n              >\n                {statusList?.slice(0, -1).map((item) => (\n                  <Steps.Step key={item.id} title={t(item.name)} />\n                ))}\n              </Steps>\n            </Card>\n          </Col>\n        )}\n        <Col span={16}>\n          <Spin spinning={loading}>\n            <Card style={{ minHeight: '200px' }}>\n              <h3>{t('details')}:</h3>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <div>\n                    {t('created.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' />{' '}\n                      {moment(data?.created_at).format('YYYY-MM-DD hh:mm')}{' '}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' /> {data?.delivery_date}{' '}\n                      {data?.delivery_time}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.status')}:\n                    <span className='ml-2'>{t(data?.transaction?.status)}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('cause')}:\n                    <span className='ml-2' style={{ color: 'red' }}>\n                      {activeMenu.data?.cause}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('answer')}:\n                    <span className='ml-2'>\n                      {activeMenu.data?.answer ?? t('no.answer')}\n                    </span>\n                  </div>\n                </Col>\n                <Col span={12}>\n                  <div>\n                    {t('status')}:\n                    <span className='ml-2'>\n                      {activeMenu.data?.status === 'pending' ? (\n                        <Tag color='blue'>{t(activeMenu.data?.status)}</Tag>\n                      ) : activeMenu.data?.status === 'canceled' ? (\n                        <Tag color='error'>{t(activeMenu.data?.status)}</Tag>\n                      ) : (\n                        <Tag color='cyan'>{t(activeMenu.data?.status)}</Tag>\n                      )}\n                      {activeMenu.data?.status !== 'canceled' && (\n                        <EditOutlined\n                          onClick={() => setOrderDetails(activeMenu?.data)}\n                        />\n                      )}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.type')}:\n                    <span className='ml-2'>{data?.delivery_type}</span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('payment.type')}:\n                    <span className='ml-2'>\n                      {t(data?.transaction?.payment_system?.tag)}\n                    </span>\n                  </div>\n                </Col>\n              </Row>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <h3>{t('delivery.address')}:</h3>\n                  <div>\n                    {data?.delivery_type === 'delivery' ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.my_address?.street_house_number ??\n                            t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.my_address?.zipcode ?? t('not.given')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'point' ? (\n                      <>\n                        <div>\n                          {t('address')}:{' '}\n                          {data?.delivery_point?.address?.[defaultLang] ??\n                            t('no.address')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'digital' ? (\n                      <div>{t('digital.delivery')}</div>\n                    ) : (\n                      <div>{t('no.address')}</div>\n                    )}\n                  </div>\n                </Col>\n              </Row>\n            </Card>\n          </Spin>\n          <Card title={t('documents')}>\n            <Table\n              columns={documentColumns}\n              dataSource={documents || []}\n              pagination={false}\n              loading={loading}\n            />\n          </Card>\n          <Card className='w-100 order-table'>\n            <Table\n              ref={productListRef}\n              scroll={{ x: true }}\n              columns={columns}\n              dataSource={activeMenu.data?.order?.details || []}\n              loading={loading}\n              rowKey={(record) => record.id}\n              pagination={false}\n            />\n            <Space\n              size={100}\n              className='d-flex justify-content-end w-100 order-table__summary'\n            >\n              <div>\n                <span>{t('delivery.fee')}:</span>\n                <br />\n                <span>{t('order.tax')}:</span>\n                <br />\n                <span>{t('product')}:</span>\n                <br />\n\n                <span>{t('service.fee')}:</span>\n                <br />\n                <span>{t('discount')}:</span>\n                <br />\n                <span>{t('coupon.price')}:</span>\n                <br />\n                <h3>{t('total.price')}:</h3>\n              </div>\n              <div>\n                <span>\n                  {numberToPrice(\n                    data?.delivery_fee ?? 0,\n                    defaultCurrency?.symbol,\n                  )}\n                </span>\n                <br />\n                <span>{numberToPrice(data?.tax, defaultCurrency?.symbol)}</span>\n                <br />\n                <span>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.service_fee, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  -{' '}\n                  {numberToPrice(data?.total_discount, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  - {numberToPrice(data?.coupon_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <h3 ref={totalPriceRef}>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </div>\n            </Space>\n          </Card>\n        </Col>\n        <Col span={8} className='order_info'>\n          {data?.status === 'ready' && data?.delivery_type !== 'pickup' && (\n            <Card\n              title={t('deliveryman')}\n              extra={\n                data?.status === 'ready' &&\n                data?.delivery_type !== 'pickup' && (\n                  <Button>\n                    {t('change')}\n                    <EditOutlined />\n                  </Button>\n                )\n              }\n            >\n              {data?.deliveryman && (\n                <Space>\n                  <Avatar\n                    shape='square'\n                    size={64}\n                    src={IMG_URL + data?.deliveryman?.img}\n                  />\n                  <div>\n                    <h5>\n                      {data?.deliveryman?.firstname}{' '}\n                      {data?.deliveryman?.lastname || ''}\n                    </h5>\n                    <span className='delivery-info'>\n                      <BsFillTelephoneFill />\n                      {data?.deliveryman?.phone}\n                    </span>\n\n                    <div className='delivery-info'>\n                      <b>\n                        <MdEmail size={16} />\n                      </b>\n                      <span>{data?.deliveryman?.email}</span>\n                    </div>\n                  </div>\n                </Space>\n              )}\n            </Card>\n          )}\n\n          <Card title={<Space>{t('customer.info')}</Space>}>\n            <div className='d-flex w-100 customer-info-container'>\n              {loading ? (\n                <Skeleton.Avatar size={64} shape='square' />\n              ) : (\n                <Avatar\n                  shape='square'\n                  size={64}\n                  src={IMG_URL + data?.user?.img}\n                />\n              )}\n\n              <h5 className='customer-name'>\n                {loading ? (\n                  <Skeleton.Button size={20} style={{ width: 70 }} />\n                ) : (\n                  data?.user?.firstname + ' ' + (data?.user?.lastname || '')\n                )}\n              </h5>\n\n              <div className='customer-info-detail'>\n                <div className='customer-info'>\n                  <span className='title'>{t('phone')}</span>\n                  <span className='description'>\n                    <BsFillTelephoneFill />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : data?.user?.phone ? (\n                      ReactAppIsDemo ? (\n                        hideNumber(data?.user?.phone)\n                      ) : (\n                        data?.user?.phone\n                      )\n                    ) : (\n                      t('no.phone')\n                    )}\n                  </span>\n                </div>\n\n                <div className='customer-info'>\n                  <span className='title'>{t('email')}</span>\n                  <span className='description'>\n                    <MdEmail />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : data?.user?.email ? (\n                      ReactAppIsDemo ? (\n                        hideEmail(data?.user?.email)\n                      ) : (\n                        data?.user?.email\n                      )\n                    ) : (\n                      t('no.email')\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('registration.date')}</span>\n                  <span className='description'>\n                    <BsCalendarDay />\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      moment(data?.user?.created_at).format('DD-MM-YYYY, HH:mm')\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('orders.count')}</span>\n                  <span className='description'>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#3d7de3' }}\n                        count={data?.user?.o_count || 0}\n                      />\n                    )}\n                  </span>\n                </div>\n                <div className='customer-info'>\n                  <span className='title'>{t('spent.since.registration')}</span>\n                  <span className='description'>\n                    {loading ? (\n                      <Skeleton.Button size={16} />\n                    ) : (\n                      <Badge\n                        showZero\n                        style={{ backgroundColor: '#48e33d' }}\n                        count={numberToPrice(\n                          data?.user?.o_sum,\n                          defaultCurrency?.symbol,\n                        )}\n                      />\n                    )}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </Card>\n          {data?.review && !loading && (\n            <Card title={t('messages')}>\n              <div className='order-message'>\n                <span className='message'>{data?.review.comment}</span>\n                <Space className='w-100 justify-content-end'>\n                  <span className='date'>\n                    {moment(data?.review.created_at).format('YYYY-MM-DD hh:mm')}\n                  </span>\n                </Space>\n              </div>\n            </Card>\n          )}\n        </Col>\n      </Row>\n      {orderDetails && (\n        <OrderStatusModal\n          orderDetails={orderDetails}\n          handleCancel={handleCloseModal}\n          status={status}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/user/shop-users.js",["6103"],[],"import React, { useEffect, useState } from 'react';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Space, Table, Tabs } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerUsers } from '../../../redux/slices/user';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport UserShowModal from './userShowModal';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from '../../../components/filter-column';\nimport hideEmail from 'components/hideEmail';\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\nconst { TabPane } = Tabs;\n\nconst roles = ['moderator', 'cook', 'waiter', 'deliveryman', 'user'];\n\nexport default function ShopUsers() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { users, loading, meta, params } = useSelector(\n    (state) => state.user,\n    shallowEqual,\n  );\n\n  const [uuid, setUuid] = useState(null);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('firstname'),\n      dataIndex: 'firstname',\n      is_show: true,\n    },\n    {\n      title: t('lastname'),\n      dataIndex: 'lastname',\n      is_show: true,\n    },\n    {\n      title: t('email'),\n      dataIndex: 'email',\n      is_show: true,\n      render: (email) =>\n        email ? (ReactAppIsDemo ? hideEmail(email) : email) : t('no.email'),\n    },\n    {\n      title: t('role'),\n      dataIndex: 'role',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => setUuid(row.uuid)} />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      const data = activeMenu.data;\n      const params = {\n        sort: data?.sort,\n        column: data?.column,\n        role: data?.role || 'moderator',\n        perPage: data?.perPage,\n        page: data?.page,\n      };\n      dispatch(fetchSellerUsers(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      role: data?.role,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchSellerUsers(paramsData));\n  }, [activeMenu.data]);\n\n  const onChange = (key) => {\n    dispatch(\n      setMenuData({ activeMenu, data: { ...activeMenu.data, role: key } }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('shop.users')}\n      extra={<FilterColumns columns={columns} setColumns={setColumns} />}\n    >\n      <Tabs\n        activeKey={activeMenu.data?.role || 'moderator'}\n        onChange={onChange}\n        type='card'\n      >\n        {roles.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={users}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n\n      {uuid && <UserShowModal uuid={uuid} handleCancel={() => setUuid(null)} />}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/edit.js",["6104"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Steps } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport LanguageList from 'components/language-list';\nimport shopService from 'services/seller/shop';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport ShopMain from './main';\nimport Delivery from './shopDelivery';\nimport Loading from 'components/loading';\nimport ShopLocations from 'components/shop/seller-shop-locations';\nimport ShopSocial from './social';\n\nconst { Step } = Steps;\n\nexport const steps = [\n  {\n    title: 'shop',\n    content: 'First-content',\n  },\n  {\n    title: 'shop.locations',\n    content: 'Second-content',\n  },\n  {\n    title: 'social',\n    content: 'Third-content',\n  },\n  {\n    title: 'delivery',\n    content: 'Fourth-content',\n  },\n];\n\nexport default function MyShopEdit() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const queryParams = useQueryParams();\n  const current = Number(queryParams.values?.step || 0);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n\n  const fetchShop = () => {\n    setLoading(true);\n    shopService\n      .get()\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          logo_img: createImages(res.data?.logo_img),\n          background_img: createImages(res.data?.background_img),\n          user: {\n            label: `${res.data.seller.firstname || ''} ${\n              res.data?.seller?.lastname || ''\n            }`,\n            value: res.data?.seller?.id,\n          },\n          delivery_time_from: res.data?.delivery_time.from || 0,\n          delivery_time_to: res.data?.delivery_time.to || 0,\n          delivery_time_type: res.data?.delivery_time.type,\n\n          categories: res.data?.categories?.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          tags: res.data?.tags?.map((item) => ({\n            label: item?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          price: res.data?.price || 0,\n          price_per_km: res.data?.price_per_km || 0,\n          min_amount: res.data?.min_amount || 0,\n          tax: res.data?.tax || 0,\n          percentage: res.data?.percentage || 0,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const createImages = (items) => {\n    return {\n      items,\n      uid: items,\n      url: items,\n      name: items,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch || queryParams.values?.step) {\n      fetchShop();\n    }\n  }, [activeMenu.refetch, queryParams.values?.step]);\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  return (\n    <Card title={t('shop.edit')} extra={<LanguageList />}>\n      <Steps current={current} onChange={onChange}>\n        {steps.map((item) => (\n          <Step title={t(item.title)} key={item.title} />\n        ))}\n      </Steps>\n      {!loading ? (\n        <div className='steps-content'>\n          {steps[current].content === 'First-content' && (\n            <ShopMain next={next} loading={loading} />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <ShopLocations prev={prev} next={next} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <ShopSocial prev={prev} next={next} />\n          )}\n\n          {steps[current].content === 'Fourth-content' && (\n            <Delivery prev={prev} />\n          )}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-bonus/shop-bonus-edit.js",["6105","6106"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  InputNumber,\n  Row,\n  Switch,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport productService from '../../../services/seller/product';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { fetchShopBonus } from '../../../redux/slices/shop-bonus';\nimport bonusService from '../../../services/seller/bonus';\nimport { AsyncSelect } from '../../../components/async-select';\nimport Loading from '../../../components/loading';\n\nconst ShopBonusEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const { id } = useParams();\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.expired_at = JSON.stringify(data?.expired_at);\n      dispatch(setMenuData({ activeMenu, data: data }));\n    };\n  }, []);\n\n  function getProducts(bonus) {\n    form.setFieldsValue({\n      ...bonus,\n      expired_at: moment(bonus.expired_at, 'YYYY-MM-DD'),\n      bonus_stock_id: {\n        label:\n          bonus?.bonusStock?.product?.translation?.title +\n          ' ' +\n          bonus.bonusStock?.extras.map((ext) => ext.value).join(', '),\n        value: bonus?.bonusStock?.id,\n      },\n    });\n    setLoading(false);\n  }\n\n  const getBonus = (id) => {\n    setLoading(true);\n    bonusService\n      .getById(id)\n      .then((res) => {\n        let bonus = res.data;\n        getProducts(bonus);\n      })\n      .finally(() => dispatch(disableRefetch(activeMenu)));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBonus(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    const body = {\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      status: values.status,\n      type: 'sum',\n      value: values.value,\n      bonus_stock_id: values.bonus_stock_id.value,\n      bonus_quantity: values.bonus_quantity,\n      bonusable_id: myShop.id,\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'seller/bonus/shop';\n    bonusService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchShopBonus());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchProductsStock() {\n    const params = {\n      active: 1,\n      status: 'published',\n    };\n    return productService.getStock(params).then((res) =>\n      res.data.map((stock) => ({\n        label:\n          stock.product.translation.title +\n          `${\n            stock.extras.length > 0\n              ? `: ${stock.extras.map((ext) => ext.value).join(', ')}`\n              : ''\n          }`,\n        value: stock.id,\n      }))\n    );\n  }\n\n  const getInitialTimes = () => {\n    if (!activeMenu.data?.expired_at) {\n      return {};\n    }\n    const data = JSON.parse(activeMenu.data?.expired_at);\n    return {\n      expired_at: moment(data, 'HH:mm:ss'),\n    };\n  };\n\n  return (\n    <Card title={t('edit.bonus')} className='h-100'>\n      {!loading ? (\n        <Form\n          name='bonus-add'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{\n            status: true,\n            ...activeMenu.data,\n            ...getInitialTimes(),\n          }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('order.amount')}\n                name={'value'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'number',\n                    min: 1,\n                    message: t('min.1'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('bonus.product.stock')}\n                name={'bonus_stock_id'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <AsyncSelect\n                  fetchOptions={fetchProductsStock}\n                  debounceTimeout={200}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('bonus.product.quantity')}\n                name={'bonus_quantity'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'number',\n                    min: 1,\n                    message: t('min.1'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                name='expired_at'\n                label={t('expired.at')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <DatePicker\n                  className='w-100'\n                  placeholder=''\n                  disabledDate={(current) =>\n                    moment().add(-1, 'days') >= current\n                  }\n                />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('active')}\n                name='status'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\n\nexport default ShopBonusEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-bonus/shop-bonus-add.js",["6107"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  InputNumber,\n  Row,\n  Switch,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\nimport productService from '../../../services/seller/product';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { fetchShopBonus } from '../../../redux/slices/shop-bonus';\nimport { AsyncSelect } from '../../../components/async-select';\nimport bonusService from '../../../services/seller/bonus';\n\nconst ShopBonusAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.expired_at = JSON.stringify(data?.expired_at);\n      dispatch(setMenuData({ activeMenu, data: data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      status: values.status,\n      type: 'sum',\n      value: values.value,\n      bonus_stock_id: values.bonus_stock_id.value,\n      bonus_quantity: values.bonus_quantity,\n      bonusable_id: myShop.id,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/bonus/shop';\n    bonusService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchShopBonus());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchProductsStock() {\n    const params = {\n      active: 1,\n      status: 'published',\n    };\n    return productService.getStock(params).then((res) =>\n      res.data.map((stock) => ({\n        label:\n          stock.product.translation.title +\n          `${\n            stock.extras.length > 0\n              ? `: ${stock.extras.map((ext) => ext.value).join(', ')}`\n              : ''\n          }`,\n        value: stock.id,\n      }))\n    );\n  }\n\n  const getInitialTimes = () => {\n    if (!activeMenu.data?.expired_at) {\n      return {};\n    }\n    const data = JSON.parse(activeMenu.data?.expired_at);\n    return {\n      expired_at: moment(data, 'HH:mm:ss'),\n    };\n  };\n\n  return (\n    <Card title={t('add.bonus')} className='h-100'>\n      <Form\n        name='bonus-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{\n          status: true,\n          ...activeMenu.data,\n          ...getInitialTimes(),\n        }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('order_amount')}\n              name={'value'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'number',\n                  min: 1,\n                  message: t('min.1'),\n                },\n              ]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('bonus.product.stock')}\n              name={'bonus_stock_id'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <AsyncSelect\n                fetchOptions={fetchProductsStock}\n                debounceTimeout={200}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('bonus.product.quantity')}\n              name={'bonus_quantity'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'number',\n                  min: 1,\n                  message: t('min.1'),\n                },\n              ]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='expired_at'\n              label={t('expired.at')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DatePicker\n                className='w-100'\n                placeholder=''\n                disabledDate={(current) => moment().add(-1, 'days') >= current}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('active')}\n              name='status'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default ShopBonusAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/index.js",["6108"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Table, Card, Space, Tag, Tabs, Switch } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { export_url } from '../../../configs/app-global';\nimport { Context } from '../../../context/context';\nimport CustomModal from '../../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport productService from '../../../services/seller/product';\nimport { fetchSellerfetchAddons } from '../../../redux/slices/addons';\nimport { useTranslation } from 'react-i18next';\nimport formatSortType from '../../../helpers/formatSortType';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport SearchInput from '../../../components/search-input';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport RiveResult from '../../../components/rive-result';\nconst { TabPane } = Tabs;\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\nconst roles = ['all', 'published', 'pending', 'unpublished'];\n\nconst SellerAddons = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const [role, setRole] = useState('all');\n  const [active, setActive] = useState(null);\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      })\n    );\n  };\n\n  const goToEdit = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `addon-edit`,\n        url: `seller/addon/${uuid}`,\n        name: t('edit.addon'),\n      })\n    );\n    clearData();\n    navigate(`/seller/addon/${uuid}`);\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `addon-clone`,\n        url: `seller/addon-clone/${uuid}`,\n        name: t('clone.addon'),\n      })\n    );\n    clearData();\n    navigate(`/seller/addon-clone/${uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      is_show: true,\n      render: (_, data) => data.translation?.title,\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status) => (\n        <div>\n          {status === 'published' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop_id',\n      is_show: true,\n      render: (_, row) => {\n        return row.shop?.translation?.title;\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row.uuid)}\n            />\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([row.id]);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const [id, setId] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { addonsList, meta, loading, params } = useSelector(\n    (state) => state.addons,\n    shallowEqual\n  );\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n\n  const paramsData = {\n    search: data?.search,\n    brand_id: data?.brand?.value,\n    category_id: data?.category?.value,\n    shop_id: data?.shop?.value,\n    sort: data?.sort,\n    status: immutable === 'all' ? undefined : immutable,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    addon: 1,\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        data: activeMenu.data.shop,\n        id: 'addon-import',\n        url: `seller/addon/import`,\n        name: t('addon.import'),\n      })\n    );\n    navigate(`/seller/addon/import`);\n  };\n\n  const productDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n\n    productService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchSellerfetchAddons(paramsData));\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    productService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchSellerfetchAddons(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(true);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerfetchAddons(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerfetchAddons(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const excelExport = () => {\n    setDownloading(true);\n    const params = {\n      shop_id: shop.id,\n      addon: 1,\n    };\n    productService\n      .export(params)\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const goToAddProduct = () => {\n    dispatch(\n      addMenu({\n        id: 'addon-add',\n        url: 'seller/addon/add',\n        name: t('add.addon'),\n      })\n    );\n    clearData();\n    navigate('/seller/addon/add');\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Card\n        title={t('addons')}\n        extra={\n          <Space wrap>\n            <Button disabled={!activeMenu?.data?.shop} onClick={goToImport}>\n              <CgImport className='mr-2' />\n              {t('import')}\n            </Button>\n            <Button\n              loading={downloading}\n              disabled={!activeMenu?.data?.shop}\n              onClick={excelExport}\n            >\n              <CgExport className='mr-2' />\n              {t('export')}\n            </Button>\n\n            <Button\n              icon={<PlusCircleOutlined />}\n              type='primary'\n              onClick={goToAddProduct}\n            >\n              {t('addon.add')}\n            </Button>\n          </Space>\n        }\n      >\n        <div className='d-flex justify-content-between'>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            className={'w-25'}\n          />\n          <Space wrap>\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        </div>\n      </Card>\n      <Card>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n        <Table\n          locale={{\n            emptyText: <RiveResult id='nosell' />,\n          }}\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          loading={loading}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={addonsList}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          onChange={onChangePagination}\n          rowKey={(record) => record.id}\n        />\n      </Card>\n      <CustomModal\n        click={active ? handleActive : productDelete}\n        text={\n          active ? t('set.active.addon') : text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setActive}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default SellerAddons;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/city/index.js",["6109","6110"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCity } from 'redux/slices/deliveryzone/city';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport cityService from 'services/deliveryzone/city';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport CityForm from './city-form';\n\nconst City = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  let [searchParams, setSearchParams] = useSearchParams();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const country_id = searchParams.get('country_id');\n\n  const { list, meta, loading } = useSelector(\n    (state) => state.deliveryCity,\n    shallowEqual\n  );\n  const [selectedId, setSeletedId] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [id, setId] = useState(null);\n\n  const showCity = (row) => {\n    dispatch(\n      addMenu({\n        url: `deliveryzone/area?city_id=${row.id}`,\n        id: 'area',\n        name: t('area'),\n      })\n    );\n    navigate(`/deliveryzone/area?city_id=${row.id}`);\n  };\n\n  const handleActive = (id) => {\n    setSeletedId(id);\n    cityService\n      .status(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchCity({ country_id }));\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => {\n        setSeletedId(null);\n      });\n  };\n\n  const handleDelete = (id) => {\n    setDeleting(id);\n    cityService\n      .delete(id)\n      .then(() => {\n        dispatch(fetchCity());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setDeleting(false);\n      });\n  };\n  const handleEdit = (id) => {\n    setVisible(true);\n    setId(id);\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'translation',\n      key: 'translation',\n      render: (translation, row) => (\n        <div\n          style={{\n            cursor: 'pointer',\n            textDecoration: 'underline',\n          }}\n          onClick={() => showCity(row)}\n        >\n          {translation?.title || '-'}\n        </div>\n      ),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => {\n        return (\n          <Switch\n            key={row.id}\n            onChange={() => handleActive(row.id)}\n            checked={active}\n            loading={Boolean(selectedId === row.id)}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => handleEdit(row.id)}\n            />\n            <Button\n              loading={Boolean(deleting === row.id)}\n              icon={<DeleteOutlined onClick={() => handleDelete(row.id)} />}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchCity({ country_id }));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search: data?.search,\n      country_id,\n    };\n    dispatch(fetchCity(paramsData));\n  }, [activeMenu?.data]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchCity({ perPage: pageSize, page: current, country_id }));\n  };\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  return (\n    <Card\n      title={t('cities')}\n      extra={\n        <Space>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n          />\n          <Button type='primary' onClick={() => setVisible(true)}>\n            {t('add.city')}\n          </Button>\n        </Space>\n      }\n    >\n      <Table\n        columns={columns}\n        dataSource={list}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CityForm\n        visible={visible}\n        setVisible={setVisible}\n        id={id}\n        setId={setId}\n      />\n    </Card>\n  );\n};\n\nexport default City;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/refund/index.js",["6111"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { EyeOutlined } from '@ant-design/icons';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumn from '../../../components/filter-column';\nimport { sellerfetchRefund } from '../../../redux/slices/refund';\nimport refundService from '../../../services/seller/refund';\nimport moment from 'moment/moment';\n\nexport default function SellerRefunds() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToShow = (id) => {\n    dispatch(\n      addMenu({\n        url: `seller/refund/details/${id}`,\n        id: 'refund_details',\n        name: t('refund.details'),\n      }),\n    );\n    navigate(`/seller/refund/details/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n    },\n    {\n      title: t('client'),\n      is_show: true,\n      dataIndex: 'user',\n      key: 'user',\n      render: (user, row) => (\n        <div>\n          {row.order.user?.firstname} {row.order.user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row.id)} />\n            <DeleteButton\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { refund, meta, loading } = useSelector(\n    (state) => state.refund,\n    shallowEqual,\n  );\n\n  const refundDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    refundService\n      .delete(params)\n      .then(() => {\n        dispatch(sellerfetchRefund());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(sellerfetchRefund({}));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(sellerfetchRefund({ perPage: pageSize, page: current }));\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('refunds')}\n      extra={\n        <Space wrap>\n          <DeleteButton className='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumn columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={refund}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={refundDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/region/index.js",["6112"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { fetchRegion } from 'redux/slices/deliveryzone/region';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport regionService from 'services/deliveryzone/region';\nimport { useNavigate } from 'react-router-dom';\nimport RegionForm from './region-form';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\n\nconst Region = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const { list, meta, loading } = useSelector(\n    (state) => state.deliveryRegion,\n    shallowEqual\n  );\n  const [selectedId, setSeletedId] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [id, setId] = useState(null);\n  const showRegion = (row) => {\n    dispatch(\n      addMenu({\n        url: `deliveryzone/country?region_id=${row.id}`,\n        id: 'country',\n        name: t('country'),\n      })\n    );\n    navigate(`/deliveryzone/country?region_id=${row.id}`);\n  };\n  const handleActive = (id) => {\n    setSeletedId(id);\n    regionService\n      .status(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchRegion());\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => {\n        setSeletedId(null);\n      });\n  };\n  const handleDelete = (id) => {\n    setDeleting(id);\n    regionService\n      .delete(id)\n      .then(() => {\n        dispatch(fetchRegion());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setDeleting(false);\n      });\n  };\n  const handleEdit = (id) => {\n    setVisible(true);\n    setId(id);\n  };\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'translation',\n      key: 'translation',\n      render: (translation, row) => (\n        <div\n          style={{\n            cursor: 'pointer',\n            textDecoration: 'underline',\n          }}\n          onClick={() => showRegion(row)}\n        >\n          {translation?.title || '-'}\n        </div>\n      ),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => {\n        return (\n          <Switch\n            key={row.id}\n            onChange={() => handleActive(row.id)}\n            checked={active}\n            loading={Boolean(selectedId === row.id)}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => handleEdit(row.id)}\n            />\n            <Button\n              loading={Boolean(deleting === row.id)}\n              icon={<DeleteOutlined onClick={() => handleDelete(row.id)} />}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchRegion());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search: data?.search,\n    };\n    dispatch(fetchRegion(paramsData));\n  }, [activeMenu?.data]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchRegion({ perPage: pageSize, page: current }));\n  };\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  return (\n    <Card\n      title={t('regions')}\n      extra={\n        <Space>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n          />\n          <Button type='primary' onClick={() => setVisible(true)}>\n            {t('add.region')}\n          </Button>\n        </Space>\n      }\n    >\n      <Table\n        columns={columns}\n        dataSource={list}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n\n      <RegionForm\n        visible={visible}\n        setVisible={setVisible}\n        id={id}\n        setId={setId}\n      />\n    </Card>\n  );\n};\n\nexport default Region;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/country/index.js",["6113","6114"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCountry } from 'redux/slices/deliveryzone/country';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport countryService from 'services/deliveryzone/country';\nimport CountryForm from './country-form';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\n\nconst Country = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  let [searchParams, setSearchParams] = useSearchParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const region_id = searchParams.get('region_id');\n\n  const { list, meta, loading } = useSelector(\n    (state) => state.deliveryCountries,\n    shallowEqual\n  );\n  const [selectedId, setSeletedId] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [id, setId] = useState(null);\n\n  const showCountry = (row) => {\n    dispatch(\n      addMenu({\n        url: `deliveryzone/city?country_id=${row.id}`,\n        id: 'city',\n        name: t('city'),\n      })\n    );\n    navigate(`/deliveryzone/city?country_id=${row.id}`);\n  };\n\n  const handleActive = (id) => {\n    setSeletedId(id);\n    countryService\n      .status(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchCountry({ region_id }));\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => {\n        setSeletedId(null);\n      });\n  };\n\n  const handleDelete = (id) => {\n    setDeleting(id);\n    countryService\n      .delete(id)\n      .then(() => {\n        dispatch(fetchCountry());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setDeleting(false);\n      });\n  };\n  const handleEdit = (id) => {\n    setVisible(true);\n    setId(id);\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'translation',\n      key: 'translation',\n      render: (translation, row) => (\n        <div\n          style={{\n            cursor: 'pointer',\n            textDecoration: 'underline',\n          }}\n          onClick={() => showCountry(row)}\n        >\n          {translation?.title || '-'}\n        </div>\n      ),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => {\n        return (\n          <Switch\n            key={row.id}\n            onChange={() => handleActive(row.id)}\n            checked={active}\n            loading={Boolean(selectedId === row.id)}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => handleEdit(row.id)}\n            />\n            <Button\n              loading={Boolean(deleting === row.id)}\n              icon={<DeleteOutlined onClick={() => handleDelete(row.id)} />}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchCountry({ region_id }));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search: data?.search,\n      region_id,\n    };\n    dispatch(fetchCountry(paramsData));\n  }, [activeMenu?.data]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchCountry({ perPage: pageSize, page: current, region_id }));\n  };\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  return (\n    <Card\n      title={t('countries')}\n      extra={\n        <Space>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n          />\n          <Button type='primary' onClick={() => setVisible(true)}>\n            {t('add.country')}\n          </Button>\n        </Space>\n      }\n    >\n      <Table\n        columns={columns}\n        dataSource={list}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n\n      <CountryForm\n        visible={visible}\n        setVisible={setVisible}\n        id={id}\n        setId={setId}\n      />\n    </Card>\n  );\n};\n\nexport default Country;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/product-bonus-edit.js",["6115"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { fetchBonus } from 'redux/slices/product-bonus';\nimport bonusService from 'services/seller/bonus';\nimport Loading from 'components/loading';\nimport ProductBonusForm from './product-bonus-form';\n\nconst ProductBonusAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n\n  function getProducts(bonus) {\n    const data = {\n      status: bonus?.status,\n      expired_at: moment(bonus?.expired_at, 'YYYY-MM-DD'),\n      stock: {\n        label:\n          bonus?.stock?.product?.translation?.title +\n          `${\n            bonus?.stock?.extras?.length > 0\n              ? `: ${bonus?.stock?.extras\n                  ?.map((ext) => ext?.value?.value)\n                  .join(', ')}`\n              : ''\n          }`,\n        value: bonus?.stock?.id,\n        key: bonus?.stock?.id,\n      },\n      stock_quantity: bonus?.value,\n      bonus_stock: {\n        label:\n          bonus?.bonusStock?.product?.translation?.title +\n          `${\n            bonus?.bonusStock?.extras?.length > 0\n              ? `: ${bonus?.bonusStock?.extras\n                  ?.map((ext) => ext?.value?.value)\n                  .join(', ')}`\n              : ''\n          }`,\n        value: bonus?.bonusStock?.id,\n        key: bonus?.bonusStock?.id,\n      },\n      bonus_stock_quantity: bonus?.bonus_quantity,\n    };\n    console.log('data', data);\n    form.setFieldsValue(data);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, expired_at: bonus?.expired_at },\n      }),\n    );\n    setLoading(false);\n  }\n\n  const getBonus = (id) => {\n    setLoading(true);\n    bonusService\n      .getById(id)\n      .then((res) => getProducts(res.data))\n      .finally(() => dispatch(disableRefetch(activeMenu)));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBonus(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    const nextUrl = 'seller/bonus/product';\n\n    return bonusService.update(id, values).then(() => {\n      toast.success(t('successfully.created'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchBonus({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return (\n    <Card title={t('edit.bonus')} className='h-100'>\n      {!loading ? (\n        <ProductBonusForm form={form} handleSubmit={onFinish} />\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\n\nexport default ProductBonusAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/area/index.js",["6116","6117"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Switch, Table } from 'antd';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { fetchArea } from 'redux/slices/deliveryzone/area';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport areaService from 'services/deliveryzone/area';\nimport { useSearchParams } from 'react-router-dom';\nimport AreaForm from './area-form';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\n\nconst Area = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  let [searchParams, setSearchParams] = useSearchParams();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const city_id = searchParams.get('city_id');\n\n  const { list, meta, loading } = useSelector(\n    (state) => state.deliveryArea,\n    shallowEqual\n  );\n  const [selectedId, setSeletedId] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [id, setId] = useState(null);\n\n  const handleActive = (id) => {\n    setSeletedId(id);\n    areaService\n      .status(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchArea({ city_id }));\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => {\n        setSeletedId(null);\n      });\n  };\n  const handleDelete = (id) => {\n    setDeleting(id);\n    areaService\n      .delete(id)\n      .then(() => {\n        dispatch(fetchArea());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setDeleting(false);\n      });\n  };\n  const handleEdit = (id) => {\n    setVisible(true);\n    setId(id);\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('name'),\n      dataIndex: 'translation',\n      key: 'translation',\n      render: (translation, row) => translation?.title || '-',\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      render: (active, row) => {\n        return (\n          <Switch\n            key={row.id}\n            onChange={() => handleActive(row.id)}\n            checked={active}\n            loading={Boolean(selectedId === row.id)}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => handleEdit(row.id)}\n            />\n            <Button\n              loading={Boolean(deleting === row.id)}\n              icon={<DeleteOutlined onClick={() => handleDelete(row.id)} />}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchArea({ city_id }));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search: data?.search,\n      city_id,\n    };\n    dispatch(fetchArea(paramsData));\n  }, [activeMenu?.data]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchArea({ perPage: pageSize, page: current, city_id }));\n  };\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  return (\n    <Card\n      title={t('areas')}\n      extra={\n        <Space>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={data?.search}\n            resetSearch={!data?.search}\n          />\n          <Button type='primary' onClick={() => setVisible(true)}>\n            {t('add.area')}\n          </Button>\n        </Space>\n      }\n    >\n      <Table\n        columns={columns}\n        dataSource={list}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <AreaForm\n        visible={visible}\n        setVisible={setVisible}\n        id={id}\n        setId={setId}\n      />\n    </Card>\n  );\n};\n\nexport default Area;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/product-bonus-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-add.js",["6118","6119"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport sellerBookingTable from '../../../services/seller/booking-table';\nimport sellerBookingZone from '../../../services/seller/booking-zone';\nimport { AsyncSelect } from 'components/async-select';\nimport { DebounceSelect } from 'components/search';\n\nconst BookingTableAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    console.log('value', values);\n    const body = {\n      ...values,\n      chair_count: String(values.chair_count),\n      shop_section_id: values.shop_section_id.value,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/booking/tables';\n    sellerBookingTable\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchZone(search) {\n    return sellerBookingZone.getAll({ search }).then((res) =>\n      res.data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n      }))\n    );\n  }\n\n  return (\n    <Card title={t('add.booking.table')}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('zona')}\n              name={'shop_section_id'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect fetchOptions={fetchZone} debounceTimeout={300} />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label='name'\n              name={`name`}\n              rules={[{ required: true, message: '' }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('chair.count')}\n              name='chair_count'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('tax')}\n              name='tax'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\n\nexport default BookingTableAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-clone.js",["6120","6121","6122"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport sellerBookingTable from '../../../services/seller/booking-table';\nimport { AsyncSelect } from 'components/async-select';\nimport sellerBookingZone from 'services/seller/booking-zone';\nimport { DebounceSelect } from 'components/search';\n\nconst BookingTableClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    sellerBookingTable\n      .getById(id)\n      .then((res) => {\n        let data = res.data;\n        form.setFieldsValue({\n          ...data,\n          shop_section_id: {\n            label: data.shop_section?.translation?.title,\n            value: data.shop_section?.id,\n          },\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      chair_count: String(values.chair_count),\n      shop_section_id: values.shop_section_id.value,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/booking/tables';\n    sellerBookingTable\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchZone(search) {\n    return sellerBookingZone.getAll({ search }).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }))\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) fetchBox(id);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('clone.booking.table')}\n      extra={<LanguageList />}\n      loading={loading}\n    >\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('zona')}\n              name={'shop_section_id'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect fetchOptions={fetchZone} debounceTimeout={300} />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label='name'\n              name={`name`}\n              rules={[{ required: true, message: '' }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('chair.count')}\n              name='chair_count'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('tax')}\n              name='tax'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\n\nexport default BookingTableClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-edit.js",["6123","6124","6125","6126"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport sellerBookingTable from '../../../services/seller/booking-table';\nimport { AsyncSelect } from 'components/async-select';\nimport sellerBookingZone from 'services/seller/booking-zone';\nimport { DebounceSelect } from 'components/search';\n\nconst BookingTableEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    sellerBookingTable\n      .getById(id)\n      .then((res) => {\n        let data = res.data;\n        form.setFieldsValue({\n          ...data,\n          shop_section_id: {\n            label: data.shop_section?.translation?.title,\n            value: data.shop_section?.id,\n          },\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      chair_count: String(values.chair_count),\n      shop_section_id: values.shop_section_id.value,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/booking/tables';\n    sellerBookingTable\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchZone(search) {\n    return sellerBookingZone.getAll({ search }).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }))\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) fetchBox(id);\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('edit.booking.table')}\n      extra={<LanguageList />}\n      loading={loading}\n    >\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('zona')}\n              name={'shop_section_id'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect fetchOptions={fetchZone} debounceTimeout={300} />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label='name'\n              name={`name`}\n              rules={[{ required: true, message: '' }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('chair.count')}\n              name='chair_count'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('tax')}\n              name='tax'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\n\nexport default BookingTableEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-reviews/index.js",["6127"],[],"import React, { useEffect, useState } from 'react';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport { sellerfetchShopReviews } from 'redux/slices/shop-reviews';\nimport ShopReviewShowModal from './shopReviewShow';\nimport moment from 'moment';\nimport FilterColumns from '../../../components/filter-column';\n\nexport default function SellerOrderReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'order',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => `${user?.firstname} ${user?.lastname}`,\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.shopReviews,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(sellerfetchShopReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n      type: 'shop',\n    };\n    dispatch(sellerfetchShopReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  return (\n    <Card\n      title={t('shop.reviews')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {show && (\n        <ShopReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/discounts/index.js",["6128"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Switch, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport discountService from 'services/seller/discount';\nimport { fetchDiscounts } from 'redux/slices/discount';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\n\nexport default function SellerDiscounts() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [active, setActive] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { discounts, meta, loading, params } = useSelector(\n    (state) => state.discount,\n    shallowEqual,\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `discount/${row.id}`,\n        id: 'discount_edit',\n        name: t('edit.discount'),\n      }),\n    );\n    navigate(`/discount/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => (\n        <Image\n          src={getImage(img)}\n          alt={row.type}\n          width={100}\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n    },\n    {\n      title: t('start.date'),\n      dataIndex: 'start',\n      key: 'start',\n      is_show: true,\n    },\n    {\n      title: t('end.date'),\n      dataIndex: 'end',\n      key: 'end',\n      is_show: true,\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (_, row) => (\n        <Switch\n          onChange={() => {\n            setIsModalVisible(true);\n            setId([row.id]);\n            setActive(true);\n          }}\n          checked={row.active}\n        />\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setActive(false);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const discountDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    discountService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchDiscounts({}));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  const discountSetActive = () => {\n    setLoadingBtn(true);\n    discountService\n      .setActive(id[0])\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchDiscounts({}));\n        setIsModalVisible(false);\n        setActive(true);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchDiscounts({}));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchDiscounts(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add-restaurant',\n        url: `discount/add`,\n        name: t('add.discount'),\n      }),\n    );\n    navigate(`/discount/add`);\n  };\n\n  return (\n    <Card\n      title={t('discounts')}\n      extra={\n        <Space wrap>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.discount')}\n          </Button>\n          <DeleteButton onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={discounts}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={active ? discountSetActive : discountDelete}\n        text={\n          active\n            ? t('set.active.discount')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        setText={setId}\n        loading={loadingBtn}\n        setActive={setActive}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/index.js",["6129","6130"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Image,\n  Row,\n  Spin,\n  Switch,\n} from 'antd';\nimport shopService from 'services/seller/shop';\nimport getImage from 'helpers/getImage';\nimport { EditOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu, disableRefetch, setRefetch } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchMyShop } from 'redux/slices/myShop';\nimport numberToPrice from 'helpers/numberToPrice';\nimport useDemo from 'helpers/useDemo';\n\nexport default function MyShop() {\n  const { t } = useTranslation();\n  const [statusLoading, setStatusLoading] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop: data, loading } = useSelector(\n    (state) => state.myShop,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const { isDemo, demoShop } = useDemo();\n\n  const goToEdit = () => {\n    dispatch(\n      addMenu({\n        data: data.uuid,\n        id: 'edit-shop',\n        url: `my-shop/edit`,\n        name: t('edit.shop'),\n      }),\n    );\n    navigate(`/my-shop/edit`);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchMyShop());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  function workingStatusChange() {\n    setStatusLoading(true);\n    shopService\n      .setWorkingStatus()\n      .then(() => dispatch(setRefetch(activeMenu)))\n      .finally(() => setStatusLoading(false));\n  }\n\n  return (\n    <Card\n      title={t('my.shop')}\n      extra={\n        user?.role !== 'seller' ? null : (\n          <Button type='primary' icon={<EditOutlined />} onClick={goToEdit}>\n            {t('shop.edit')}\n          </Button>\n        )\n      }\n    >\n      {!loading ? (\n        <Row gutter={12}>\n          <Col span={20}>\n            <div className='position-relative'>\n              <Descriptions bordered>\n                <Descriptions.Item label={t('shop.name')} span={2}>\n                  {data.translation?.title}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('shop.address')} span={2}>\n                  {data.translation?.address}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('phone')} span={2}>\n                  {data.phone}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('tax')} span={2}>\n                  {data.tax}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('background.image')} span={2}>\n                  {data.background_img ? (\n                    <Image\n                      width={200}\n                      src={getImage(data.background_img)}\n                      alt={'shop'}\n                    />\n                  ) : (\n                    ''\n                  )}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('logo.image')} span={2}>\n                  {data.logo_img ? (\n                    <Image\n                      width={200}\n                      src={getImage(data.logo_img)}\n                      alt={'shop'}\n                    />\n                  ) : (\n                    ''\n                  )}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('open')} span={2}>\n                  <Switch\n                    name='open'\n                    defaultChecked={data.open}\n                    onChange={workingStatusChange}\n                    disabled={isDemo && data.id == demoShop}\n                  />\n                </Descriptions.Item>\n                <Descriptions.Item label={t('wallet')} span={2}>\n                  {numberToPrice(\n                    data.seller?.wallet?.price,\n                    defaultCurrency?.symbol,\n                  )}\n                </Descriptions.Item>\n              </Descriptions>\n              {data.subscription ? (\n                <Descriptions\n                  title={t('subscription')}\n                  bordered\n                  className='mt-5'\n                >\n                  <Descriptions.Item label={t('type')} span={3}>\n                    {data.subscription?.type}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('price')} span={3}>\n                    {numberToPrice(\n                      data.subscription?.price,\n                      defaultCurrency?.symbol,\n                    )}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('expired.at')} span={3}>\n                    {data.subscription?.expired_at}\n                  </Descriptions.Item>\n                </Descriptions>\n              ) : (\n                ''\n              )}\n              {statusLoading && (\n                <div className='loader'>\n                  <Spin />\n                </div>\n              )}\n            </div>\n          </Col>\n        </Row>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/invites/index.js",["6131"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport inviteService from '../../../services/seller/invites';\nimport InviteModal from './invite-modal';\nimport { Context } from '../../../context/context';\nimport CustomModal from '../../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchInvites } from '../../../redux/slices/invite';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport formatSortType from '../../../helpers/formatSortType';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport { useTranslation } from 'react-i18next';\nimport FilterColumns from '../../../components/filter-column';\n\nexport default function Invites() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { loading, invites, params, meta } = useSelector(\n    (state) => state.invite,\n    shallowEqual\n  );\n  const [inviteId, setInviteId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('fullname'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <>\n          {user?.firstname} {user?.lastname || ''}\n        </>\n      ),\n    },\n    {\n      title: t('role'),\n      dataIndex: 'role',\n      key: 'role',\n      is_show: true,\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status) => (\n        <Tag\n          color={\n            status === 'rejected' ? 'red' : status === 'new' ? 'blue' : 'cyan'\n          }\n        >\n          {t(status)}\n        </Tag>\n      ),\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              onClick={() => setInviteId(row)}\n              disabled={row.status === 'excepted'}\n            >\n              {t('accept')}\n            </Button>\n            <Button\n              type='primary'\n              danger\n              onClick={() => {\n                setIsModalVisible(true);\n                setId(row.id);\n              }}\n              disabled={row.status === 'rejected'}\n            >\n              {t('reject')}\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchInvites());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } })\n    );\n  }\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchInvites(paramsData));\n  }, [activeMenu.data]);\n\n  function rejectInvite() {\n    setLoadingBtn(true);\n    inviteService\n      .statusUpdate(id)\n      .then(() => {\n        setIsModalVisible(false);\n        setId(null);\n        dispatch(fetchInvites());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  return (\n    <Card\n      title={t('invites')}\n      extra={\n        <Space>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={invites}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n\n      {!!inviteId && (\n        <InviteModal\n          inviteId={inviteId}\n          handleCancel={() => setInviteId(null)}\n        />\n      )}\n\n      <CustomModal\n        click={rejectInvite}\n        text={t('reject.invite')}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/seller-check.js",["6132"],[],"import { Button, Card, Space, Table, Tag, Divider } from 'antd';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport orderService from '../services/seller/order';\nimport Loading from './loading';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport numberToPrice from '../helpers/numberToPrice';\nimport { PrinterOutlined } from '@ant-design/icons';\nimport { useReactToPrint } from 'react-to-print';\nimport hideEmail from 'components/hideEmail';\nimport hideNumber from 'components/hideNumber';\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst SellerCheck = () => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n  const { id } = useParams();\n  const componentRef = useRef();\n  const navigate = useNavigate();\n  const { settings } = useSelector((state) => state.globalSettings);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => row?.stock?.id,\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => row.stock?.product?.translation?.title,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'origin_price',\n      key: 'origin_price',\n      render: (origin_price, row) =>\n        numberToPrice(\n          origin_price / (row?.quantity ?? 1),\n          defaultCurrency?.symbol,\n        ),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (tax) => numberToPrice(tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'discount',\n      key: 'discount',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price) =>\n        numberToPrice(total_price, defaultCurrency?.symbol),\n    },\n  ];\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        setData(data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    fetchOrder();\n  }, []);\n\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n\n  return (\n    <Card\n      title={t('invoice')}\n      extra={\n        <Space wrap>\n          <Button type='primary' onClick={() => navigate(-1)}>\n            <span className='ml-1'>{t('back')}</span>\n          </Button>\n          <Button\n            type='primary'\n            onClick={() => handlePrint()}\n            ref={componentRef}\n          >\n            <PrinterOutlined type='printer' />\n            <span className='ml-1'>{t('print')}</span>\n          </Button>\n        </Space>\n      }\n    >\n      {loading ? (\n        <Loading />\n      ) : (\n        <div className='container_check' ref={componentRef}>\n          <header className='check_header'>\n            <span>\n              <img\n                src={settings?.favicon}\n                alt='img'\n                className='check_icon overflow-hidden w-25 h-25 rounded'\n                width={'100%'}\n                height={'100%'}\n              />\n              <h1>Invoice</h1>\n            </span>\n            <span className='check_companyInfo'>\n              <h1>{settings?.title}</h1>\n              <h5>{settings?.address}</h5>\n            </span>\n          </header>\n          <main>\n            <span>\n              <h4>\n                {t('order.id')}: {data?.id}\n              </h4>\n              <h4>\n                {t('date')}: {moment(data?.created_at).format('DD-MM-YYYY')}\n              </h4>\n              <address>\n                <p>\n                  <span>\n                    {t('delivery.type')}: {data?.delivery_type}\n                  </span>\n                  <br />\n                  <span>\n                    {t('delivery.address')}: {data?.address?.city}\n                  </span>\n                  <br />\n                  <span>\n                    {t('delivery.date')}: {data?.delivery_date}{' '}\n                    {data?.delivery_time}\n                  </span>\n                  <br />\n                  <span>\n                    {t('status')}: <Tag color='green'>{data?.status}</Tag>\n                  </span>\n                </p>\n              </address>\n            </span>\n            <span>\n              <address>\n                <p>\n                  <h3 className='shop_data'>{t('user')}</h3>\n                  <span>\n                    {t('user.id')}: {data?.user?.id}\n                  </span>\n                  <br />\n                  <span>\n                    {t('full.name')}:{' '}\n                    {`${data?.user?.firstname} ${data?.user?.lastname}`}\n                  </span>\n                  <br />\n                  <span>\n                    {t('email')}:{' '}\n                    {data?.user?.email\n                      ? ReactAppIsDemo\n                        ? hideEmail(data?.user?.email)\n                        : data?.user?.email\n                      : t('no.email')}\n                  </span>\n                  <br />\n                  <span>\n                    {t('phone')}:{' '}\n                    {data?.user?.phone\n                      ? ReactAppIsDemo\n                        ? hideNumber(data?.user?.phone)\n                        : data?.user?.phone\n                      : t('no.phone')}\n                  </span>\n                </p>\n              </address>\n            </span>\n          </main>\n          <Table\n            scroll={{ x: true }}\n            columns={columns}\n            dataSource={\n              data?.details?.flatMap((detail) => detail?.products) || []\n            }\n            loading={loading}\n            rowKey={(record) => record.id}\n            pagination={false}\n            className={'check_table'}\n          />\n          <footer>\n            <span>\n              <h3>\n                {t('note')}: {data?.note ?? t('no.note')}\n              </h3>\n            </span>\n            <span>\n              <span>\n                <h5>{t('origin.price')}:</h5>\n                <h4>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('total.tax')}:</h5>\n                <h4>\n                  {numberToPrice(data?.total_tax, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('service.fee')}:</h5>\n                <h4>\n                  {numberToPrice(data?.service_fee, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('delivery.fee')}:</h5>\n                <h4>\n                  {numberToPrice(data?.delivery_fee, defaultCurrency?.symbol)}\n                </h4>\n              </span>\n              <span>\n                <h5>{t('total.discount')}:</h5>\n                <h4>- {numberToPrice(data?.total_discount)}</h4>\n              </span>\n              <span>\n                <h5>{t('coupon')}:</h5>\n                <h4>- {numberToPrice(data?.coupon_price)}</h4>\n              </span>\n              <Divider />\n              <span>\n                <h4>{t('total.price')}:</h4>\n                <h3>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </span>\n            </span>\n          </footer>\n          <section className='text-center'>\n            © {moment(new Date()).format('YYYY')} {settings?.title}.{' '}\n            {t('all.rights.reserved')}\n          </section>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default SellerCheck;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-bonus/index.js",["6133"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Switch, Table, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { fetchShopBonus } from '../../../redux/slices/shop-bonus';\nimport moment from 'moment';\nimport shopBonusService from '../../../services/seller/shopBonus';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\n\nconst ShopBonus = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [activeId, setActiveId] = useState(null);\n  const [type, setType] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { shopBonus, meta, loading } = useSelector(\n    (state) => state.shopBonus,\n    shallowEqual\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('order.amount'),\n      dataIndex: 'value',\n      key: 'value',\n      is_show: true,\n    },\n    {\n      title: t('bonus.product'),\n      dataIndex: 'bonusStock',\n      key: 'bonusStock',\n      is_show: true,\n      render: (bonusStock, row) => {\n        return row.bonusStock?.product?.translation.title;\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => {\n        return (\n          <Switch\n            key={row.id + status}\n            onChange={() => {\n              setIsModalVisible(true);\n              setActiveId(row.id);\n              setType(true);\n            }}\n            checked={status}\n          />\n        );\n      },\n    },\n    {\n      title: t('expired.at'),\n      dataIndex: 'expired_at',\n      key: 'expired_at',\n      is_show: true,\n      render: (expired_at) => (\n        <div>\n          {moment(new Date()).isBefore(expired_at) ? (\n            <Tag color='blue'>{expired_at}</Tag>\n          ) : (\n            <Tag color='error'>{expired_at}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setType(false);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/shop-bonus/${row.id}`,\n        id: 'bonus_edit',\n        name: t('edit.bonus'),\n      })\n    );\n    navigate(`/seller/shop-bonus/${row.id}`);\n  };\n\n  const bannerDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    shopBonusService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchShopBonus());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    shopBonusService\n      .setActive(activeId)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchShopBonus());\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchShopBonus());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchShopBonus({ perPage: pageSize, page: current }));\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.bonus',\n        url: `seller/shop-bonus/add`,\n        name: t('add.bonus'),\n      })\n    );\n    navigate(`/seller/shop-bonus/add`);\n  };\n\n  return (\n    <Card\n      title={t('bonus')}\n      extra={\n        <Space wrap>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.bonus')}\n          </Button>\n          <DeleteButton className='' type='danger' onClick={allDelete}>\n            {t('delete.all')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={shopBonus}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={type ? handleActive : bannerDelete}\n        text={\n          type ? t('set.active.bonus') : text ? t('delete') : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default ShopBonus;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/transactions/index.js",["6134"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Table, Card, Tabs, Tag, Space } from 'antd';\nimport { EditOutlined, EyeOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { DebounceSelect } from '../../../components/search';\nimport userService from '../../../services/seller/user';\nimport { fetchSellerTransactions } from '../../../redux/slices/transaction';\nimport TransactionShowModal from './transactionShowModal';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport FilterColumns from '../../../components/filter-column';\nimport moment from 'moment';\nimport StatusModal from './status-modal';\n\nconst { TabPane } = Tabs;\n\nconst statuses = ['all', 'progress', 'paid', 'canceled', 'rejected'];\nconst allowed_payable_types_for_seller = ['Order'];\n\nexport default function SellerTransactions() {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const [showId, setShowId] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const [transactionDetails, setTransactionDetails] = useState(null);\n  const immutable = activeMenu.data?.role || role;\n  const goToShow = (row) => {\n    setShowId(row.id);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('client'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) =>\n        user === null ? (\n          <Tag color='red'>{t('deleted.user')}</Tag>\n        ) : (\n          <div>\n            {user?.firstname} {user?.lastname || ''}\n          </div>\n        ),\n    },\n    {\n      title: t('amount'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price, row) =>\n        numberToPrice(price, row.payable?.order?.currency?.symbol),\n    },\n    {\n      title: t('payment.type'),\n      dataIndex: 'payment_system',\n      key: 'payment_system',\n      is_show: true,\n      render: (paymentSystem) => paymentSystem?.tag,\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => (\n        <div>\n          {status === 'progress' ? (\n            <Tag color='gold'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : status === 'rejected' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {allowed_payable_types_for_seller.includes(row?.payable_type) && (\n            <EditOutlined\n              onClick={() => {\n                setTransactionDetails(row);\n              }}\n            />\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('status.note'),\n      dataIndex: 'status_description',\n      key: 'status_description',\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />;\n      },\n    },\n  ]);\n\n  const { transactions, meta, loading, params } = useSelector(\n    (state) => state.transaction,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.userId,\n    status: immutable === 'all' ? undefined : immutable,\n    model: 'orders',\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerTransactions(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerTransactions(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.getAll(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname}`,\n        value: item.id,\n      }));\n    });\n  }\n\n  return (\n    <Card\n      title={t('transactions')}\n      extra={\n        <Space>\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter({ userId: user.value })}\n            onDeselect={() => handleFilter({ userId: null })}\n            style={{ minWidth: 200 }}\n          />\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Tabs\n        onChange={(key) => {\n          handleFilter({ role: key, page: 1 });\n          setRole(key);\n        }}\n        type='card'\n        activeKey={immutable}\n      >\n        {statuses.map((item) => (\n          <TabPane tab={t(item)} key={item} />\n        ))}\n      </Tabs>\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={transactions}\n        loading={loading}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n      />\n      {showId && (\n        <TransactionShowModal\n          id={showId}\n          handleCancel={() => setShowId(null)}\n        />\n      )}\n      {transactionDetails && (\n        <StatusModal\n          transactionDetails={transactionDetails}\n          handleCancel={() => setTransactionDetails(null)}\n          paramsData={paramsData}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/index.js",["6135"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Switch, Table, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport bonusService from 'services/seller/bonus';\nimport { fetchBonus } from 'redux/slices/product-bonus';\nimport moment from 'moment';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\n\nconst ProductBonus = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [activeId, setActiveId] = useState(null);\n  const [type, setType] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { bonus, meta, loading } = useSelector(\n    (state) => state.bonus,\n    shallowEqual,\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('bonus.product'),\n      dataIndex: 'bonusStock',\n      key: 'bonusStock',\n      is_show: true,\n      render: (bonusStock, row) => {\n        return row?.bonusStock?.product?.translation.title;\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => {\n        return (\n          <Switch\n            key={row.id + status}\n            onChange={() => {\n              setIsModalVisible(true);\n              setActiveId(row.id);\n              setType(true);\n            }}\n            checked={status}\n          />\n        );\n      },\n    },\n    {\n      title: t('expired.at'),\n      dataIndex: 'expired_at',\n      key: 'expired_at',\n      is_show: true,\n      render: (expired_at) => (\n        <div>\n          {moment(new Date()).isBefore(expired_at) ? (\n            <Tag color='blue'>{expired_at}</Tag>\n          ) : (\n            <Tag color='error'>{expired_at}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setType(false);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/product-bonus/${row.id}`,\n        id: 'bonus_edit',\n        name: t('edit.bonus'),\n      }),\n    );\n    navigate(`/seller/product-bonus/${row.id}`);\n  };\n\n  const bannerDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    bonusService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchBonus());\n        toast.success(t('successfully.deleted'));\n        setText(null);\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    bonusService\n      .setActive(activeId)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchBonus());\n        toast.success(t('successfully.updated'));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBonus());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchBonus({ perPage: pageSize, page: current }));\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.bonus',\n        url: `seller/product-bonus/add`,\n        name: t('add.bonus'),\n      }),\n    );\n    navigate(`/seller/product-bonus/add`);\n  };\n\n  return (\n    <Card\n      title={t('bonus')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.bonus')}\n          </Button>\n          <DeleteButton className='' type='danger' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={bonus}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={type ? handleActive : bannerDelete}\n        text={\n          type\n            ? t('set.active.bonus')\n            : text\n            ? t('delete')\n            : t('delete.selected')\n        }\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n};\n\nexport default ProductBonus;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/subscriptions/index.js",["6136"],[],"import React, { useEffect, useState } from 'react';\nimport { Badge, Button, Card, Col, Row, Spin } from 'antd';\nimport subscriptionService from 'services/seller/subscriptions';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport SellerSubscriptionModal from './subscriptionModal';\nimport { useDispatch } from 'react-redux';\nimport { disableRefetch } from 'redux/slices/menu';\n\nconst features = [];\n\nexport default function SellerSubscriptions() {\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const [modal, setModal] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const colCount = data.length;\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const fetchSubscriptionList = () => {\n    setLoading(true);\n    subscriptionService\n      .getAll()\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSubscriptionList();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <>\n      <Card className='h-100'>\n        {!loading ? (\n          <div>\n            <div className='text-center mb-4'>\n              <h2 className='font-weight-semibold'>Pick a base plan</h2>\n              <Row type='flex' justify='center'>\n                <Col sm={24} md={12} lg={8}>\n                  <p>\n                    Space, the final frontier. These are the voyages of the\n                    Starship Enterprise. Its five-year mission.\n                  </p>\n                </Col>\n              </Row>\n            </div>\n            <Row>\n              {data.map((elm, i) => (\n                <Col\n                  key={`price-column-${i}`}\n                  span={6}\n                  className={colCount === i + 1 ? '' : 'border-right'}\n                >\n                  <Badge.Ribbon\n                    text={t('active')}\n                    color='red'\n                    className={\n                      myShop?.subscription?.subscription?.id === elm.id\n                        ? ''\n                        : 'd-none'\n                    }\n                  >\n                    <div className='p-3'>\n                      <div className='text-center'>\n                        <h1 className='display-4 mt-4'>\n                          <span\n                            className='font-size-md d-inline-block mr-1'\n                            style={{ transform: 'translate(0px, -17px)' }}\n                          >\n                            {defaultCurrency?.symbol}\n                          </span>\n                          <span>{elm.price}</span>\n                        </h1>\n                        <p className='mb-0 text-lowercase'>\n                          {elm.month} {t('month')}\n                        </p>\n                      </div>\n                      <div className='mt-4'>\n                        <h2 className='text-center font-weight-semibold'>\n                          {elm.type}\n                        </h2>\n                      </div>\n                      <div className='d-flex justify-content-center mt-3'>\n                        <div>\n                          {features?.map((elm, i) => {\n                            return (\n                              <p key={`pricing-feature-${i}`}>\n                                <Badge color={'blue'} />\n                                <span>{elm}</span>\n                              </p>\n                            );\n                          })}\n                        </div>\n                      </div>\n                      <div className='mt-3 text-center'>\n                        <Button type='default' onClick={() => setModal(elm)}>\n                          {t('purchase')}\n                        </Button>\n                      </div>\n                    </div>\n                  </Badge.Ribbon>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        ) : (\n          <Col className='ant-col-spin d-flex justify-content-center'>\n            <Spin size='large' />\n          </Col>\n        )}\n      </Card>\n      {modal && (\n        <SellerSubscriptionModal\n          modal={modal}\n          handleCancel={() => setModal(null)}\n          refetch={fetchSubscriptionList}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/index.js",["6137"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n  QrcodeOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { fetchBookingTable } from '../../../redux/slices/booking-tables';\nimport sellerBookingTable from '../../../services/seller/booking-table';\nimport { Button, Card, Modal, Space, Table, Tooltip } from 'antd';\nimport TableQrCode from './table-qrcode';\n\nconst BookingTables = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    search: data?.search ? data.search : undefined,\n    perPage: data?.perPage || 10,\n    page: data?.page || 1,\n  };\n\n  const { tables, meta, loading } = useSelector(\n    (state) => state.bookingTable,\n    shallowEqual\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'booking-table-edit',\n        url: `seller/booking/table/${row.id}`,\n        name: t('booking.table.edit'),\n      })\n    );\n    navigate(`/seller/booking/table/${row.id}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        id: 'booking-table-clone',\n        url: `seller/booking/table/clone/${row.id}`,\n        name: t('booking.table.clone'),\n      })\n    );\n    navigate(`/seller/booking/table/clone/${row.id}`);\n  };\n\n  const goToAddBox = () => {\n    dispatch(\n      addMenu({\n        id: 'booking-table-add',\n        url: 'seller/booking/table/add',\n        name: t('booking.table.add'),\n      })\n    );\n    navigate('/seller/booking/table/add');\n  };\n\n  const openQrCode = (row) => {\n    setSelectedTable(row);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => row?.name,\n    },\n    {\n      title: t('sected.zone'),\n      key: 'name',\n      is_show: true,\n      render: (_, row) => row.shop_section?.translation?.title,\n    },\n    {\n      title: t('chair.count'),\n      dataIndex: 'chair_count',\n      key: 'chair_count',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n            <Tooltip title={t('show.qrcode')}>\n              <Button\n                icon={<QrcodeOutlined />}\n                onClick={() => openQrCode(row)}\n              />\n            </Tooltip>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const brandDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    sellerBookingTable\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchBookingTable(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchBookingTable(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBookingTable(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap className='justify-content-end w-100'>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBox}\n          >\n            {t('add.booking.table')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('booking.tables')}>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={tables}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n      <CustomModal\n        click={brandDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      <Modal\n        width={400}\n        visible={!!selectedTable}\n        footer={null}\n        onCancel={() => setSelectedTable(null)}\n      >\n        <TableQrCode table={selectedTable} />\n      </Modal>\n    </>\n  );\n};\n\nexport default BookingTables;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/discounts/discount-edit.js",["6138","6139"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  InputNumber,\n  Row,\n  Select,\n} from 'antd';\nimport moment from 'moment';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport discountService from 'services/seller/discount';\nimport { fetchDiscounts } from 'redux/slices/discount';\nimport { DebounceSelect } from 'components/search';\nimport { useTranslation } from 'react-i18next';\nimport createImage from 'helpers/createImage';\nimport MediaUpload from 'components/upload';\nimport Loading from 'components/loading';\nimport stockService from 'services/seller/stock';\n\nexport default function DiscountEdit() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const [image, setImage] = useState(\n    activeMenu.data?.images ? [activeMenu.data?.images[0]] : [],\n  );\n\n  useEffect(() => {\n    return () => {\n      const values = form.getFieldsValue(true);\n      const start = JSON.stringify(values.start);\n      const end = JSON.stringify(values.end);\n      const data = { ...values, start, end };\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function fetchDiscount() {\n    setLoading(true);\n    discountService\n      .getById(id)\n      .then(({ data }) => {\n        const values = {\n          price: data.price,\n          type: data.type,\n          products: data.stocks.map((item) => ({\n            label: item?.product?.translation?.title,\n            value: item.id,\n            key: item.id,\n          })),\n          start: moment(data.start, 'YYYY-MM-DD'),\n          end: moment(data.end, 'YYYY-MM-DD'),\n          image: [createImage(data.img)],\n        };\n        form.setFieldsValue(values);\n        setImage([createImage(data.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchDiscount();\n    }\n  }, [activeMenu.refetch]);\n\n  const onFinish = (values) => {\n    const startDate = moment(values.start).format('YYYY-MM-DD');\n    const endDate = moment(values.end).format('YYYY-MM-DD');\n    if (startDate > endDate)\n      return toast.error(t('start.date.must.be.before.end.date'));\n\n    const body = {\n      price: values.price,\n      type: values.type,\n      stocks: values.products.map((item) => item.value),\n      start: values.start\n        ? moment(values.start).format('YYYY-MM-DD')\n        : undefined,\n      end: values.end ? moment(values.end).format('YYYY-MM-DD') : undefined,\n      images: [image[0]?.name],\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/discounts';\n    discountService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchDiscounts({}));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchProducts(search) {\n    const params = {\n      search,\n      shop_id: shop.id,\n      status: 'published',\n      active: 1,\n      rest: 1,\n    };\n    return stockService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item?.product?.translation?.title,\n        value: item.id,\n        key: item.id,\n      })),\n    );\n  }\n\n  const getInitialValues = () => {\n    const data = activeMenu.data;\n    if (!activeMenu.data?.start) {\n      return data;\n    }\n    const start = activeMenu.data.start;\n    const end = activeMenu.data.end;\n    return {\n      ...data,\n      start: moment(start, 'YYYY-MM-DD'),\n      end: moment(end, 'YYYY-MM-DD'),\n    };\n  };\n\n  return (\n    <Card title={t('edit.discount')} className='h-100'>\n      {!loading ? (\n        <Form\n          name='discount-add'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ ...getInitialValues(), ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('type')}\n                name={'type'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select>\n                  <Select.Option value='fix'>{t('fix')}</Select.Option>\n                  <Select.Option value='percent'>{t('percent')}</Select.Option>\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('price')}\n                name='price'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('start.date')}\n                name='start'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n                valuePropName={'date'}\n              >\n                <DatePicker\n                  className='w-100'\n                  placeholder=''\n                  disabledDate={(current) =>\n                    moment().add(-1, 'days') >= current\n                  }\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('end.date')}\n                name='end'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n                valuePropName={'date'}\n              >\n                <DatePicker\n                  className='w-100'\n                  placeholder=''\n                  disabledDate={(current) =>\n                    moment().add(-1, 'days') >= current\n                  }\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('products')}\n                name='products'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DebounceSelect fetchOptions={fetchProducts} mode='multiple' />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    required: !image.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='discounts'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                  name='image'\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payouts/index.js",["6140"],[],"import React, { useEffect, useState } from 'react';\nimport { EditOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport { fetchSellerWallets } from '../../../redux/slices/wallet';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport PayoutStatusModal from './payoutStatusModal';\nimport PayoutRequest from './payoutRequest';\nimport FilterColumns from '../../../components/filter-column';\nimport moment from 'moment';\n\nexport default function SellerPayouts() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [modal, setModal] = useState(null);\n  const [withdrawModal, setWithdrawModal] = useState(false);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price) => numberToPrice(price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (status, row) => (\n        <div>\n          {status === 'processed' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'rejected' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {status === 'processed' ? (\n            <EditOutlined onClick={() => setModal(row)} />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('note'),\n      dataIndex: 'note',\n      key: 'note',\n      is_show: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { wallets, meta, loading, params } = useSelector(\n    (state) => state.wallet,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchSellerWallets({}));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(fetchSellerWallets(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  return (\n    <Card\n      title={t('payouts')}\n      extra={\n        <Space>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setWithdrawModal(true)}\n          >\n            {t('withdraw')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={wallets}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {modal && (\n        <PayoutStatusModal data={modal} handleCancel={() => setModal(null)} />\n      )}\n      {withdrawModal && (\n        <PayoutRequest\n          data={withdrawModal}\n          handleCancel={() => setWithdrawModal(false)}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/discounts/discount-add.js",["6141"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  InputNumber,\n  Row,\n  Select,\n} from 'antd';\nimport moment from 'moment';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport discountService from 'services/seller/discount';\nimport { fetchDiscounts } from 'redux/slices/discount';\nimport { DebounceSelect } from 'components/search';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport stockService from 'services/seller/stock';\n\nexport default function DiscountAdd() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const [image, setImage] = useState(\n    activeMenu.data?.images ? [activeMenu.data?.images[0]] : [],\n  );\n\n  useEffect(() => {\n    return () => {\n      const values = form.getFieldsValue(true);\n      const start = JSON.stringify(values.start);\n      const end = JSON.stringify(values.end);\n      const data = { ...values, start, end };\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const startDate = moment(values.start).format('YYYY-MM-DD');\n    const endDate = moment(values.end).format('YYYY-MM-DD');\n    if (startDate > endDate)\n      return toast.error(t('start.date.must.be.before.end.date'));\n\n    const body = {\n      price: values.price,\n      type: values.type,\n      stocks: values.products.map((item) => item.value),\n      start: values.start\n        ? moment(values.start).format('YYYY-MM-DD')\n        : undefined,\n      end: values.end ? moment(values.end).format('YYYY-MM-DD') : undefined,\n      images: [image[0]?.name],\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/discounts';\n    discountService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchDiscounts({}));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchProducts(search) {\n    const params = {\n      search,\n      shop_id: shop.id,\n    };\n    return stockService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.product?.translation?.title,\n        value: item.id,\n        key: item.id,\n      })),\n    );\n  }\n\n  const getInitialValues = () => {\n    const data = activeMenu.data;\n    if (!activeMenu.data?.start || !activeMenu.data?.end) {\n      return data;\n    }\n    const start = activeMenu.data?.start;\n    const end = activeMenu.data?.end;\n    return {\n      ...data,\n      start: moment(start, 'YYYY-MM-DD'),\n      end: moment(end, 'YYYY-MM-DD'),\n    };\n  };\n\n  return (\n    <Card title={t('add.discount')} className='h-100'>\n      <Form\n        name='discount-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ ...getInitialValues(), ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('type')}\n              name={'type'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select>\n                <Select.Option value='fix'>{t('fix')}</Select.Option>\n                <Select.Option value='percent'>{t('percent')}</Select.Option>\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('price')}\n              name='price'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <InputNumber min={0} className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('start.date')}\n              name='start'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n              valuePropName={'date'}\n            >\n              <DatePicker\n                className='w-100'\n                placeholder=''\n                disabledDate={(current) => moment().add(-1, 'days') >= current}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('end.date')}\n              name='end'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n              valuePropName={'date'}\n            >\n              <DatePicker\n                className='w-100'\n                placeholder=''\n                disabledDate={(current) => moment().add(-1, 'days') >= current}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              label={t('products')}\n              name='products'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect fetchOptions={fetchProducts} mode='multiple' />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  required: !image.length,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='discounts'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n                name='image'\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/bonus/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-time/time-edit.js",["6142","6143"],[],"import React, { useState, useEffect } from 'react';\nimport Loading from 'components/loading';\nimport moment from 'moment';\nimport { weeks } from 'components/shop/weeks';\nimport BookingTimeForm from 'components/forms/booking-time-form';\nimport { Form } from 'antd';\nimport sellerBookingTime from 'services/seller/booking-time';\nimport bookingClosedDays from 'services/seller/bookingClosedDays';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport bookingWorkingDays from 'services/seller/bookingWorkingDays';\nimport { useDispatch } from 'react-redux';\nimport { disableRefetch, removeFromMenu } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { fetchBookingTime } from 'redux/slices/booking-time';\n\nconst BookingTimeEdit = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [days, setDays] = useState([]);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH-mm'),\n        to: moment(item.to ? item.to : '00').format('HH-mm'),\n        disabled: item.disabled,\n      })),\n    };\n\n    const workingMaxTime = {\n      max_time: values.max_time,\n    };\n    const nextUrl = 'seller/booking/time';\n\n    Promise.all([\n      sellerBookingTime.create(workingMaxTime),\n      bookingClosedDays.update(myShop.uuid, closeDatesBody),\n      values.working_days.length !== 0\n        ? bookingWorkingDays.update(myShop.uuid, workingDaysBody)\n        : undefined,\n    ]).then(() => {\n      toast.success(t('successfully.updated'));\n      dispatch(fetchBookingTime());\n      dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  const getDays = () => {\n    setLoading(true);\n    sellerBookingTime\n      .getAll()\n      .then((res) => {\n        form.setFieldsValue({\n          max_time: res.data.max_time,\n        });\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n\n    bookingClosedDays\n      .getById(myShop.uuid)\n      .then((res) => {\n        setDays(\n          res.data.closed_dates\n            .filter(\n              (date) => date.day > moment(new Date()).format('YYYY-MM-DD')\n            )\n            .map((itm) => new Date(itm.day))\n        );\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n\n    bookingWorkingDays\n      .getById(myShop.uuid)\n      .then((res) => {\n        setLines(\n          res.data.dates.length !== 0\n            ? res.data.dates.map((item) => item.disabled)\n            : []\n        );\n\n        res.data.dates.length !== 0 &&\n          form.setFieldsValue({\n            working_days: res.data.dates.map((item) => ({\n              title: item.day,\n              from: moment(item.from, 'HH:mm:ss'),\n              to: moment(item.to, 'HH:mm:ss'),\n              disabled: Boolean(item.disabled),\n            })),\n          });\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getDays();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <>\n      {!loading ? (\n        <BookingTimeForm\n          onFinish={onFinish}\n          form={form}\n          lines={lines}\n          loadingBtn={loadingBtn}\n          days={days}\n          setDays={setDays}\n          setLines={setLines}\n          weeks={weeks}\n        />\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default BookingTimeEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-time/time-add.js",["6144"],[],"import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport bookingWorkingDays from 'services/seller/bookingWorkingDays';\nimport bookingClosedDays from 'services/seller/bookingClosedDays';\nimport { weeks } from 'components/shop/weeks';\nimport BookingTimeForm from 'components/forms/booking-time-form';\nimport { Form } from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport sellerBookingTime from 'services/seller/booking-time';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { removeFromMenu } from 'redux/slices/menu';\nimport { fetchBookingTime } from 'redux/slices/booking-time';\n\nconst BookingTimeAdd = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [days, setDays] = useState([]);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH-mm'),\n        to: moment(item.to ? item.to : '00').format('HH-mm'),\n        disabled: item.disabled,\n      })),\n    };\n\n    const workingMaxTime = {\n      max_time: values.max_time,\n    };\n    const nextUrl = 'seller/booking/time';\n    Promise.all([\n      sellerBookingTime.create(workingMaxTime),\n      bookingClosedDays.update(myShop.uuid, closeDatesBody),\n      values.working_days.length !== 0\n        ? bookingWorkingDays.update(myShop.uuid, workingDaysBody)\n        : undefined,\n    ]).then(() => {\n      toast.success(t('successfully.updated'));\n      dispatch(fetchBookingTime());\n      dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n  }, []);\n\n  return (\n    <BookingTimeForm\n      onFinish={onFinish}\n      form={form}\n      lines={lines}\n      loadingBtn={loadingBtn}\n      days={days}\n      setDays={setDays}\n      setLines={setLines}\n      weeks={weeks}\n    />\n  );\n};\n\nexport default BookingTimeAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-zone/zone-edit.js",["6145","6146"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport bookingZoneService from '../../../services/seller/booking-zone';\nimport MediaUpload from 'components/upload';\n\nconst BookingZoneEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    bookingZoneService\n      .getById(id)\n      .then((res) => {\n        let data = res.data;\n        form.setFieldsValue({\n          ...data,\n          title: {\n            [defaultLang]: data.translation.title,\n          },\n          area: Number(data.area),\n        });\n        setImage(createImages(data.galleries));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      area: String(values.area),\n      images: image?.map((img) => img.name),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/booking/zone';\n    bookingZoneService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBox(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('add.booking.zone')}\n      extra={<LanguageList />}\n      loading={loading}\n    >\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.id}\n                label={t('title')}\n                name={['title', item.locale]}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('area')}\n              name='area'\n              rules={[\n                { required: true, message: t('required') },\n                { type: 'number', min: 1, message: t('must.be.at.least.1') },\n              ]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  required: image?.length === 0,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='shop-galleries'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={true}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\n\nexport default BookingZoneEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/branch/branch-edit.js",["6147","6148"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport getTranslationFields from '../../../helpers/getTranslationFields';\nimport Map from '../../../components/map';\nimport branchService from '../../../services/seller/branch';\nimport { fetchBranch } from '../../../redux/slices/branch';\nimport getDefaultLocation from '../../../helpers/getDefaultLocation';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport { MAP_API_KEY } from '../../../configs/app-global';\n\nconst SellerBranchEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual\n  );\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual\n  );\n  const [location, setLocation] = useState(getDefaultLocation(settings));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.open_time = JSON.stringify(data?.open_time);\n      data.close_time = JSON.stringify(data?.close_time);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBranch = (id) => {\n    setLoading(true);\n    branchService\n      .getById(id)\n      .then((res) => {\n        let branch = res.data;\n        setLocation({\n          lat: Number(branch?.location.latitude),\n          lng: Number(branch?.location.longitude),\n        });\n        form.setFieldsValue({\n          ...branch,\n          ...getLanguageFields(branch),\n          address: branch.address?.address,\n        });\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values, 'title'),\n      address: {\n        address: values.address,\n        office: null,\n        house: null,\n        floor: null,\n      },\n      location: {\n        longitude: location.lng,\n        latitude: location.lat,\n      },\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/branch';\n    branchService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBranch());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBranch(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const { ref } = usePlacesWidget({\n    apiKey: google_map_key || MAP_API_KEY,\n    onPlaceSelected: (place) => {\n      const location = {\n        lat: place?.geometry.location.lat(),\n        lng: place?.geometry.location.lng(),\n      };\n      setLocation(location);\n      form.setFieldsValue({\n        [`address[${defaultLang}]`]: place?.formatted_address,\n      });\n    },\n  });\n\n  return (\n    <Card\n      loading={loading}\n      title={t('edit.branch')}\n      className='h-100'\n      extra={<LanguageList />}\n    >\n      <Form\n        name='branch-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, idx) => (\n              <Form.Item\n                key={'title' + idx}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('address')}\n              name={`address`}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <input className='address-input' ref={ref} placeholder={''} />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Map\n              location={location}\n              setLocation={setLocation}\n              setAddress={(value) => form.setFieldsValue({ address: value })}\n            />\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default SellerBranchEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-zone/zone-add.js",["6149","6150"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, InputNumber, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport sellerbookingService from '../../../services/seller/booking-zone';\nimport MediaUpload from 'components/upload';\n\nconst BookingZoneAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      area: String(values.area),\n      images: image?.map((img) => img.name),\n      images: image?.map((img) => img.name),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/booking/zone';\n    sellerbookingService\n\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.booking.zone')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.id}\n                label={t('title')}\n                name={['title', item.locale]}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('area')}\n              name='area'\n              rules={[\n                { required: true, message: t('required') },\n                { type: 'number', min: 1, message: t('must.be.at.least.1') },\n              ]}\n            >\n              <InputNumber className='w-100' />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  required: image?.length === 0,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='shop-galleries'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={true}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\n\nexport default BookingZoneAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/branch/branch-add.js",["6151"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from '../../../helpers/getTranslationFields';\nimport LanguageList from '../../../components/language-list';\nimport Map from '../../../components/map';\nimport getDefaultLocation from '../../../helpers/getDefaultLocation';\nimport { fetchBranch } from '../../../redux/slices/branch';\nimport branchService from '../../../services/seller/branch';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport { MAP_API_KEY } from '../../../configs/app-global';\n\nconst SellerBranchAdd = () => {\n  const { t } = useTranslation();\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual\n  );\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual\n  );\n  const [location, setLocation] = useState(getDefaultLocation(settings));\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.open_time = JSON.stringify(data?.open_time);\n      data.close_time = JSON.stringify(data?.close_time);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values, 'title'),\n      address: {\n        address: values.address,\n        office: null,\n        house: null,\n        floor: null,\n      },\n      location: {\n        longitude: location.lng,\n        latitude: location.lat,\n      },\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/branch';\n    branchService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchBranch());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const { ref } = usePlacesWidget({\n    apiKey: google_map_key || MAP_API_KEY,\n    onPlaceSelected: (place) => {\n      const location = {\n        lat: place?.geometry.location.lat(),\n        lng: place?.geometry.location.lng(),\n      };\n      setLocation(location);\n      form.setFieldsValue({\n        [`address[${defaultLang}]`]: place?.formatted_address,\n      });\n    },\n  });\n\n  return (\n    <Card title={t('add.branch')} className='h-100' extra={<LanguageList />}>\n      <Form\n        name='branch-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, idx) => (\n              <Form.Item\n                key={'title' + idx}\n                label={t('title')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('address')}\n              name={`address`}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <input className='address-input' ref={ref} placeholder={''} />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Map\n              location={location}\n              setLocation={setLocation}\n              setAddress={(value) => form.setFieldsValue({ address: value })}\n            />\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default SellerBranchAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/brand-edit.js",["6152","6153"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Spin, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { IMG_URL } from '../../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport brandService from '../../../services/seller/brands';\nimport { sellerfetchBrands } from '../../../redux/slices/brand';\nimport MediaUpload from '../../../components/upload';\n\nconst SellerBrandEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { params } = useSelector((state) => state.brand, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const fetchBrand = (id) => {\n    setLoading(true);\n    brandService\n      .getById(id)\n      .then((res) => {\n        let brand = res.data;\n        form.setFieldsValue({\n          ...brand,\n          image: [createImage(brand.img)],\n        });\n        setImage([createImage(brand.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n      'images[0]': image[0]?.name,\n    };\n    setLoadingBtn(true);\n    const paramsData = {\n      ...params,\n    };\n    const nextUrl = 'seller/brands';\n    brandService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(sellerfetchBrands(paramsData));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBrand(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.brand')}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ ...activeMenu.data }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name={'title'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n\n            <Col span={6}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='brands'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n\n            <Col span={6}>\n              <div className='col-md-12 col-sm-6'>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </div>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default SellerBrandEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/brand-add.js",["6154"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport brandService from '../../../services/seller/brands';\nimport { sellerfetchBrands } from '../../../redux/slices/brand';\nimport MediaUpload from '../../../components/upload';\n\nconst SellerBrandAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      active: values.active ? 1 : 0,\n      'images[0]': image[0]?.name,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/brands';\n    brandService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(sellerfetchBrands());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.brand')}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('title')}\n              name={'title'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={6}>\n            <Form.Item\n              label={t('image')}\n              name='images'\n              rules={[\n                {\n                  validator(_, value) {\n                    if (image.length === 0) {\n                      return Promise.reject(new Error(t('required')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <MediaUpload\n                type='brands'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={6}>\n            <div className='col-md-12 col-sm-6'>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </div>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default SellerBrandAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-request-edit.js",["6155","6156"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from 'components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport sellerCategory from 'services/seller/category';\nimport { IMG_URL } from 'configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport requestModelsService from 'services/seller/request-models';\nimport { fetchSellerRequestModels } from 'redux/slices/request-models';\nimport { AsyncTreeSelect } from 'components/async-tree-select';\n\nconst SellerCategoryRequestEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { params } = useSelector((state) => state.requestModels, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const [type, setType] = useState('main');\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n\n  const { id } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    requestModelsService\n      .getById(alias)\n      .then((res) => {\n        let request = res.data;\n        const body = {\n          ...request?.data,\n          keywords: request.data?.keywords.split(','),\n          parent_id: {\n            label: request.parent?.translation?.title,\n            value: request.data.parent_id,\n            key: request.data.parent_id,\n          },\n          input: request?.data?.input || 0,\n        };\n        form.setFieldsValue(body);\n        setImage([createImage(request.data.images?.at(0))]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      id: values.id,\n      type: 'category',\n      data: {\n        ...values,\n        type: values.parent_id?.value ? type : 'main',\n        active: values.active ? 1 : 0,\n        keywords: values.keywords.join(','),\n        parent_id: values.parent_id?.value,\n        images: image?.map((img) => img.name),\n      },\n    };\n    const paramsData = { ...params, shop_id: user?.shop_id };\n    const nextUrl = 'seller/categories';\n    requestModelsService\n      .requestChangeUpdate(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchSellerRequestModels(paramsData));\n        navigate(`/${nextUrl}`, { state: { tab: 'request' } });\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(id);\n    }\n  }, [activeMenu.refetch]);\n\n  async function fetchUserCategoryList() {\n    const { id } = form.getFieldValue();\n    const params = { perPage: 100, type: 'main' };\n    return sellerCategory.getAll(params).then((res) =>\n      res.data\n        .filter((item) => item.id !== id)\n        .map((item) => ({\n          label: item.translation?.title,\n          value: item.id,\n          key: item.id,\n          type: 'main',\n          children: item.children?.map((el) => ({\n            label: el.translation?.title,\n            value: el.id,\n            key: el.id,\n            type: 'sub_main',\n            children: el.children?.map((three) => ({\n              label: three.translation?.title,\n              value: three.id,\n              key: three.id,\n              disabled: true,\n              type: 'child',\n            })),\n          })),\n        })),\n    );\n  }\n  const handleCatrgory = (value, node, extra) => {\n    const { type } = node || {};\n    const nextType =\n      type === 'main' ? 'sub_main' : type === 'sub_main' ? 'child' : 'main';\n    setType(nextType);\n  };\n\n  return (\n    <Card title={t('edit.request')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Form.Item name='id' hidden>\n              <InputNumber />\n            </Form.Item>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={['title', item.locale]}\n                  help={\n                    error\n                      ? error['title'][defaultLang]\n                        ? error['title'][defaultLang][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={['description', item.locale]}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('parent.category')}\n                name='parent_id'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <AsyncTreeSelect\n                  fetchOptions={fetchUserCategoryList}\n                  onSelect={handleCatrgory}\n                  allowClear\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                name='input'\n                label={t('input')}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <InputNumber\n                  min={0}\n                  parser={(value) => parseInt(value, 10)}\n                  max={32767}\n                  className='w-100'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item label={t('image')}>\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default SellerCategoryRequestEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-show.js",["6157"],[],"import React, { useState, useEffect } from 'react';\nimport { Card, Col, Image, Modal, Row, Space, Tag } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from 'redux/slices/menu';\nimport categoryService from 'services/seller/category';\nimport { IMG_URL } from 'configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport CategoryList from './category-list';\nimport SubcategoryAdd from './subcategory-add';\n\nconst CategoryShow = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const [categoryId, setCategoryId] = useState(null);\n  const [data, setData] = useState({});\n  const [id, setId] = useState(null);\n  const [isRefetch, setIsRefetch] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category?.keywords?.split(','),\n          parent_id: {\n            label: category.parent?.translation?.title,\n            value: category.parent_id,\n            key: category.parent_id,\n          },\n        };\n        setData(body);\n        setCategoryId(category.id);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const handleAddAction = (id) => {\n    setId(id);\n  };\n\n  const handleCancel = () => {\n    setId(null);\n  };\n\n  useEffect(() => {\n    if (uuid) getCategory(uuid);\n  }, [activeMenu.refetch, uuid]);\n\n  return (\n    <>\n      <Row gutter={24} className='mb-4'>\n        <Col span={8}>\n          <Card\n            title={t('basic.info')}\n            style={{ height: '100%' }}\n            loading={loading}\n          >\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('category.name')}:</strong>\n                  <span>{data?.translation?.title}</span>\n                </Space>\n              </Col>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('category.description')}:</strong>\n                  <span>{data[`description[${defaultLang || 'en'}]`]}</span>\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title={t('organization')}\n            style={{ height: '100%' }}\n            loading={loading}\n          >\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('keyword')}:</strong>\n                  {data?.keywords?.map((item, key) => (\n                    <Tag key={key}>{item}</Tag>\n                  ))}\n                </Space>\n              </Col>\n              <Col span={24}>\n                <Space>\n                  <strong>{t('parent.category')}:</strong>\n                  <span>{data?.parent?.translation?.title}</span>\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card title={t('media')} style={{ height: '100%' }} loading={loading}>\n            <Space wrap>\n              {data?.image?.map((item) => (\n                <Image src={item.url} width={100} height={100} />\n              ))}\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n      {!!categoryId && (\n        <CategoryList\n          type={data?.type === 'main' ? 'sub_main' : 'child'}\n          parent_type={data?.type}\n          parentId={categoryId}\n          handleAddAction={handleAddAction}\n          isRefetch={isRefetch}\n        />\n      )}\n      <Modal\n        title={t('add.subcategory')}\n        visible={id}\n        onCancel={handleCancel}\n        centered\n        footer={null}\n        destroyOnClose\n      >\n        <SubcategoryAdd\n          setId={setId}\n          id={id}\n          setIsRefetch={setIsRefetch}\n          parent={{\n            parent_id: {\n              label: data[`title[${defaultLang}]`],\n              value: data?.id,\n            },\n            id: data?.id,\n            type: data?.type,\n          }}\n        />\n      </Modal>\n    </>\n  );\n};\nexport default CategoryShow;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-edit.js",["6158","6159"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from 'components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n  setRefetch,\n} from 'redux/slices/menu';\nimport sellerCategory from 'services/seller/category';\nimport { IMG_URL } from 'configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport requestModelsService from 'services/seller/request-models';\nimport { fetchSellerCategory } from 'redux/slices/category';\nimport { AsyncTreeSelect } from 'components/async-tree-select';\n\nconst SellerCategoryEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [type, setType] = useState('main');\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { params } = useSelector((state) => state.requestModels, shallowEqual);\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const { state } = useLocation();\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { uuid } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n      dispatch(\n        fetchSellerCategory({\n          ...params,\n          type,\n          parent_id: state?.parentId,\n          shop_id: user?.shop_id,\n        }),\n      );\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const getLanguageField = (list) => Object.assign({}, ...list);\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    sellerCategory\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n        const body = {\n          ...category,\n          title: getLanguageField(\n            category.translations.map((translation) => ({\n              [translation.locale]: translation.title,\n            })),\n          ),\n          description: getLanguageField(\n            category.translations.map((translation) => ({\n              [translation.locale]: translation.description,\n            })),\n          ),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n          id: category.id,\n          parent_id: {\n            label: category.parent?.translation?.title,\n            value: category.parent_id,\n            key: category.parent_id,\n          },\n          input: category?.input || 0,\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      id: values.id,\n      type: 'category',\n      data: {\n        ...values,\n        type: values.parent_id?.value ? type : 'main',\n        active: values.active ? 1 : 0,\n        keywords: values.keywords.join(','),\n        parent_id: values.parent_id?.value,\n        images: image?.map((img) => img.name),\n      },\n    };\n    const nextUrl = 'seller/categories';\n    requestModelsService\n      .requestChange(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(setRefetch(activeMenu));\n        navigate(`/${nextUrl}`, { state: { tab: 'request' } });\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    getCategory(uuid);\n  }, [activeMenu.refetch, uuid, state?.parentId]);\n\n  async function fetchUserCategoryList() {\n    const { id } = form.getFieldValue({});\n    const params = { perPage: 100, type: 'main' };\n    return sellerCategory.selectPaginate(params).then((res) =>\n      res.data\n        .filter((item) => item.id !== id)\n        .map((item) => ({\n          label: item.translation?.title,\n          value: item.id,\n          key: item.id,\n          type: 'main',\n          children: item.children?.map((el) => ({\n            label: el.translation?.title,\n            value: el.id,\n            key: el.id,\n            type: 'sub_main',\n            children: el.children?.map((three) => ({\n              label: three.translation?.title,\n              value: three.id,\n              key: three.id,\n              disabled: true,\n              type: 'child',\n            })),\n          })),\n        })),\n    );\n  }\n  const handleCatrgory = (value, node) => {\n    const { type } = node || {};\n    const nextType =\n      type === 'main' ? 'sub_main' : type === 'sub_main' ? 'child' : 'main';\n    setType(nextType);\n  };\n\n  return (\n    <>\n      <Card\n        title={state?.parentId ? t('edit.sub.category') : t('edit.category')}\n        extra={<LanguageList />}\n      >\n        {!loading ? (\n          <Form\n            name='basic'\n            layout='vertical'\n            onFinish={onFinish}\n            initialValues={{\n              active: true,\n              ...activeMenu.data,\n            }}\n            form={form}\n          >\n            <Row gutter={12}>\n              <Form.Item name='id' hidden>\n                <InputNumber />\n              </Form.Item>\n              <Col span={12}>\n                {languages.map((item, index) => (\n                  <Form.Item\n                    key={item.title + index}\n                    label={t('name')}\n                    name={['title', item.locale]}\n                    help={\n                      error\n                        ? error['title'][defaultLang]\n                          ? error['title'][defaultLang][0]\n                          : null\n                        : null\n                    }\n                    validateStatus={error ? 'error' : 'success'}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('required'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n\n              <Col span={12}>\n                {languages.map((item, index) => (\n                  <Form.Item\n                    key={item.locale + index}\n                    label={t('description')}\n                    name={['description', item.locale]}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('required'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <TextArea rows={4} />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('keywords')}\n                  name='keywords'\n                  rules={[{ required: true, message: t('required') }]}\n                >\n                  <Select mode='tags' style={{ width: '100%' }}></Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('parent.category')}\n                  name='parent_id'\n                  rules={[{ required: false, message: t('required') }]}\n                >\n                  <AsyncTreeSelect\n                    fetchOptions={fetchUserCategoryList}\n                    onSelect={handleCatrgory}\n                    allowClear\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name='input'\n                  label={t('input')}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    min={0}\n                    parser={(value) => parseInt(value, 10)}\n                    max={32767}\n                    className='w-100'\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={4}>\n                <Form.Item label={t('image')}>\n                  <MediaUpload\n                    type='categories'\n                    imageList={image}\n                    setImageList={setImage}\n                    form={form}\n                    multiple={false}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={2}>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n            </Row>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </Form>\n        ) : (\n          <div className='d-flex justify-content-center align-items-center py-5'>\n            <Spin size='large' className='mt-5 pt-5' />\n          </div>\n        )}\n      </Card>\n    </>\n  );\n};\nexport default SellerCategoryEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-add.js",["6160"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  InputNumber,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport LanguageList from 'components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData, setRefetch } from 'redux/slices/menu';\nimport categoryService from 'services/seller/category';\nimport MediaUpload from 'components/upload';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncTreeSelect } from 'components/async-tree-select';\n\nconst SellerCategoryAdd = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { state } = useLocation();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : [],\n  );\n  const [type, setType] = useState('main');\n\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: values.parent_id?.value ? type : 'main',\n      active: Number(values.active),\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'seller/categories';\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(setRefetch(activeMenu));\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchUserCategoryList() {\n    const params = { perPage: 100, type: 'main' };\n    return categoryService.selectPaginate(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n        key: item.id,\n        type: 'main',\n        children: item.children?.map((el) => ({\n          label: el.translation?.title,\n          value: el.id,\n          key: el.id,\n          type: 'sub_main',\n          children: el.children?.map((three) => ({\n            label: three.translation?.title,\n            value: three.id,\n            key: three.id,\n            disabled: true,\n            type: 'child',\n          })),\n        })),\n      })),\n    );\n  }\n\n  const handleCatrgory = (value, node) => {\n    const { type } = node || {};\n    const nextType =\n      type === 'main' ? 'sub_main' : type === 'sub_main' ? 'child' : 'main';\n    setType(nextType);\n  };\n\n  return (\n    <Card\n      title={state?.parentId ? t('add.sub.category') : t('add.category')}\n      extra={<LanguageList />}\n    >\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          active: true,\n          ...activeMenu.data,\n        }}\n        form={form}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.title + index}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                help={\n                  error\n                    ? error[`title.${defaultLang}`]\n                      ? error[`title.${defaultLang}`][0]\n                      : null\n                    : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('name')} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.locale + index}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={4} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('keywords')}\n              name='keywords'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select mode='tags' style={{ width: '100%' }}></Select>\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('parent.category')}\n              name='parent_id'\n              rules={[{ required: false, message: t('required') }]}\n            >\n              <AsyncTreeSelect\n                fetchOptions={fetchUserCategoryList}\n                onSelect={handleCatrgory}\n                allowClear\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='input'\n              label={t('input')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <InputNumber\n                min={0}\n                parser={(value) => parseInt(value, 10)}\n                max={32767}\n                className='w-100'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={4}>\n            <Form.Item label={t('image')}>\n              <MediaUpload\n                type='categories'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={2}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default SellerCategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-request-edit.js",["6161","6162"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport ProductProperty from './product-property';\nimport ProductFinish from './product-finish';\nimport ProductStock from './product-stock';\nimport ProductExtras from './product-extras';\nimport ProductsIndex from './products-index';\nimport LanguageList from '../../../components/language-list';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  removeFromMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from '../../../helpers/useQueryParams';\nimport requestModelsService from 'services/seller/request-models';\n\nconst { Step } = Steps;\n\nconst SellerProductRequestEdit = () => {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  function fetchProductRequest(alias) {\n    setLoading(true);\n    requestModelsService\n      .getById(alias)\n      .then((res) => {\n        let request = res.data.data;\n\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: {\n              ...request,\n              request_id: res.data.id,\n              actualStocks: res.data.model?.stocks,\n              model_id: res.data.model?.id,\n              model: res.data.model\n            },\n          })\n        );\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProductRequest(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  useEffect(() => {\n    return () => {\n      const nextUrl = 'seller/products';\n      dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    };\n  }, []);\n\n  return (\n    <>\n      <Card title={t('edit.food')} extra={<LanguageList />}>\n        <Steps current={current} onChange={onChange}>\n          {steps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n      </Card>\n      {!loading ? (\n        <div className=''>\n          {steps[current].content === 'First-content' && (\n            <ProductsIndex isRequest next={next} action_type={'edit'} />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <ProductExtras isRequest next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <ProductStock isRequest next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Fourth-content' && (\n            <ProductProperty isRequest next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <ProductFinish isRequest prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </>\n  );\n};\nexport default SellerProductRequestEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-clone.js",["6163","6164"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport ProductProperty from './product-property';\nimport ProductFinish from './product-finish';\nimport ProductStock from './product-stock';\nimport ProductExtras from './product-extras';\nimport ProductsIndex from './products-index';\nimport LanguageList from '../../../components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from '../../../services/seller/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  setMenuData,\n  removeFromMenu,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from '../../../helpers/useQueryParams';\n\nconst { Step } = Steps;\n\nconst SellerProductsClone = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          extras: res.data.stocks[0]?.extras.map((el) => el.extra_group_id),\n          stocks: res.data.stocks.map((stock) => ({\n            ...stock,\n            ...Object.assign(\n              {},\n              ...stock.extras.map((extra, idx) => ({\n                [`extras[${idx}]`]: {\n                  label: extra.value,\n                  value: extra.id,\n                },\n              })),\n            ),\n            quantity: stock.quantity || 0,\n            extras: undefined,\n          })),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n\n  useEffect(() => {\n    return () => {\n      const nextUrl = 'seller/products';\n      dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    };\n  }, []);\n\n  return (\n    <>\n      <Card title={t('edit.product')} extra={<LanguageList />}>\n        <Steps current={current} onChange={onChange}>\n          {steps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n      </Card>\n      {!loading ? (\n        <div className=''>\n          {steps[current].content === 'First-content' && (\n            <ProductsIndex next={next} action_type={'edit'} />\n          )}\n\n          {steps[current].content === 'Second-content' && (\n            <ProductExtras next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Third-content' && (\n            <ProductStock next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Fourth-content' && (\n            <ProductProperty next={next} prev={prev} />\n          )}\n\n          {steps[current].content === 'Finish-content' && (\n            <ProductFinish prev={prev} />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </>\n  );\n};\nexport default SellerProductsClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-edit.js",["6165","6166"],[],"import React, { useEffect, useState } from 'react';\nimport { steps } from './steps';\nimport { Card, Spin, Steps } from 'antd';\nimport ProductProperty from './product-property';\nimport ProductFinish from './product-finish';\nimport ProductStock from './product-stock';\nimport ProductExtras from './product-extras';\nimport ProductsIndex from './products-index';\nimport LanguageList from 'components/language-list';\nimport { useParams } from 'react-router-dom';\nimport productService from 'services/seller/product';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport ProductGallery from './product-gallery';\nimport { useMemo } from 'react';\nimport Wholesale from './wholesale';\n\nconst { Step } = Steps;\n\nconst SellerProductEdit = () => {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n  const queryParams = useQueryParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n  const current = Number(queryParams.values?.step || 0);\n  const [loading, setLoading] = useState(activeMenu.refetch);\n  const { extras } = activeMenu?.data || {};\n\n  const filteredExtras = useMemo(\n    () => extras?.find((item) => item?.group?.type === 'color'),\n    [extras],\n  );\n  const uniqueData = Array.from(\n    new Set(filteredExtras?.values?.map((item) => item.value)),\n  ).map((value) => {\n    return filteredExtras?.values?.find((item) => item.value === value);\n  });\n  const colorItems = uniqueData.filter((item) => item.group_type === 'color');\n\n  const isTypeColorExists = extras?.some(\n    (extra) => extra?.group?.type === 'color',\n  );\n\n  const newSteps = isTypeColorExists\n    ? steps\n    : steps.filter((item) => item.title !== 'gallery');\n\n  const next = () => {\n    const step = current + 1;\n    queryParams.set('step', step);\n  };\n  const prev = () => {\n    const step = current - 1;\n    queryParams.set('step', step);\n  };\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n      isVideo: Boolean(item.preview),\n    }));\n  const createMediaFile = (items) => {\n    const mediaObject = { images: [], previews: [] };\n    const previews = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.preview,\n        url: item.preview,\n      }));\n    const videos = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.path,\n        url: item.path,\n        isVideo: true,\n      }));\n    mediaObject.previews = previews;\n    mediaObject.images = videos;\n\n    return mediaObject;\n  };\n\n  const createSelectObject = (item) => {\n    if (!item) return null;\n    return {\n      label: item.translation ? item.translation.title : item.title,\n      value: item.id,\n    };\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const extras = {};\n        res.data.stocks.forEach((stock) => {\n          stock.extras.forEach((extra) => {\n            if (extra.extra_group_id in extras) {\n              if (\n                !extras[extra.extra_group_id].values?.some(\n                  (item) => item.value === extra.value?.id,\n                )\n              ) {\n                extras[extra.extra_group_id].values?.push({\n                  value: extra.value.id,\n                  label: extra.value?.value,\n                  stock_id: stock.id,\n                });\n              }\n            } else {\n              extras[extra.extra_group_id] = {\n                group: extra.group,\n                label: extra.group.translation?.title,\n                value: extra.extra_group_id,\n                id: extra.extra_group_id,\n                stock_id: stock.id,\n                values: [\n                  {\n                    value: extra.value.id,\n                    label: extra.value?.value,\n                    stock_id: stock.id,\n                  },\n                ],\n              };\n            }\n          });\n        });\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          shop: createSelectObject(res.data.shop),\n          category: createSelectObject(res.data.category),\n          brand: createSelectObject(res.data.brand),\n          unit: createSelectObject(res.data.unit),\n          images: createImages(res.data.galleries),\n          initialMediaFile: createMediaFile(res.data.galleries),\n          extras: Object.values(extras),\n          stocks: res.data.stocks.map((stock) => ({\n            ...stock,\n            ...Object.assign(\n              {},\n              ...stock.extras.map((extra, idx) => ({\n                [`extras[${idx}]`]: extra.id,\n              })),\n            ),\n            quantity: stock.quantity || 0,\n            price: stock.price || 0,\n            extras: undefined,\n          })),\n          stocksData: res?.data?.stocks,\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchProduct(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  const onChange = (step) => {\n    dispatch(setMenuData({ activeMenu, data: { ...activeMenu.data, step } }));\n    queryParams.set('step', step);\n  };\n  return (\n    <>\n      <Card title={t('edit.product')} extra={<LanguageList />}>\n        <Steps current={current} onChange={onChange}>\n          {newSteps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n      </Card>\n      {!loading ? (\n        <div className=''>\n          {newSteps[current].content === 'First-content' && (\n            <ProductsIndex next={next} action_type={'edit'} />\n          )}\n\n          {newSteps[current].content === 'Second-content' && (\n            <ProductExtras next={next} prev={prev} mode='edit' />\n          )}\n\n          {newSteps[current].content === 'Third-content' && (\n            <ProductStock next={next} prev={prev} mode='edit' />\n          )}\n\n          {newSteps[current].content === 'wholesale-content' && (\n            <Wholesale next={next} prev={prev} />\n          )}\n\n          {isTypeColorExists > 0 &&\n            newSteps[current].content === 'gallery-content' && (\n              <ProductGallery next={next} prev={prev} />\n            )}\n\n          {newSteps[current].content === 'Fourth-content' && (\n            <ProductProperty next={next} prev={prev} mode='edit' />\n          )}\n\n          {newSteps[current].content === 'Finish-content' && (\n            <ProductFinish prev={prev} mode='edit' />\n          )}\n        </div>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </>\n  );\n};\nexport default SellerProductEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/products-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/products.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/replace-product.js",["6167","6168","6169"],[],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, Space, Row, Col, Image, Tag, Divider, Button } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport orderService from 'services/seller/order';\nimport { disableRefetch, removeFromMenu, setRefetch } from 'redux/slices/menu';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Loading from 'components/loading';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport numberToPrice from 'helpers/numberToPrice';\nimport ProductCards from './product-cards';\nimport NewProduct from './new-product';\nimport NoteModal from './note-modal';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function SellerReplaceProduct() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { order_id, stock_id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const [noteModal, setNoteModal] = useState(false);\n\n  const fetchOrder = () => {\n    setLoading(true);\n    orderService\n      .getById(order_id)\n      .then(({ data }) => {\n        const products = data?.details\n          ?.filter((product) => product?.stock_id === Number(stock_id));\n        setData({\n          ...products[0],\n          user: data?.user,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    fetchOrder();\n  }, [order_id]);\n\n  useDidUpdate(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  const handleSubmit = (values) => {\n    const nextUrl = `seller/order/details/${order_id}`;\n\n    const body = {\n      products: [\n        {\n          //old product\n          replace_note: values?.note,\n          replace_stock_id: data?.stock?.id,\n          replace_quantity: data?.quantity,\n          //new product\n          stock_id: activeMenu.data?.newProduct?.stock?.id,\n          quantity: activeMenu.data?.newProduct?.quantity,\n        },\n      ],\n\n      currency_id: defaultCurrency?.id,\n      phone: `${values?.phone}`,\n    };\n\n    if (!values?.phone) {\n      delete body.phone;\n    }\n\n    return orderService.replaceProduct(order_id, body).then(() => {\n      setNoteModal(false);\n      toast.success(t('successfully.replaced'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(setRefetch(activeMenu));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <Card key={`${order_id} ${stock_id}`}>\n          <ProductCards />\n          <Divider />\n          <Card title={t('old.product')} bordered>\n            <Row gutter={12}>\n              <Col span={4} style={{ width: '100px', height: '250px' }}>\n                <div\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'contain',\n                    overflow: 'hidden',\n                    borderRadius: '15px',\n                  }}\n                >\n                  <img\n                    src={data?.stock?.product?.img}\n                    placeholder\n                    style={{ width: '100%', height: '100%', objectFit: 'contain' }}\n                  />\n                </div>\n              </Col>\n              <Col span={20}>\n                <h4>{data?.stock?.product?.translation?.title}</h4>\n                <Space>\n                  <p>{t('quantity')}: </p>\n                  <p>{data?.quantity}</p>\n                </Space>\n                <br />\n                <Space>\n                  <p>{t('price')}: </p>\n                  <p>\n                    {numberToPrice(data?.stock?.price, defaultCurrency?.symbol)}\n                  </p>\n                </Space>\n                <br />\n                <Space wrap>\n                  {data?.stock?.extras?.map((extra) => {\n                    if (extra?.group?.type === 'color') {\n                      return (\n                        <span\n                          key={extra?.id}\n                          style={{\n                            display: 'block',\n                            width: '30px',\n                            height: '30px',\n                            backgroundColor: extra?.value?.value,\n                            border: '2px solid #909091',\n                            borderRadius: '50%',\n                          }}\n                        />\n                      );\n                    } else {\n                      return <Tag key={extra?.id}>{extra?.value?.value}</Tag>;\n                    }\n                  })}\n                </Space>\n              </Col>\n            </Row>\n          </Card>\n          <Divider />\n          {activeMenu.data?.newProduct && <NewProduct />}\n          <Space wrap>\n            <Button\n              type={'primary'}\n              disabled={!activeMenu.data?.newProduct}\n              onClick={() => setNoteModal(true)}\n            >\n              {t('next')}\n            </Button>\n          </Space>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n      {noteModal && (\n        <NoteModal\n          showModal={noteModal}\n          setShowModal={setNoteModal}\n          handleSubmit={handleSubmit}\n          userData={data?.user}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order-edit.js",["6170","6171"],[],"import React, { useEffect, useState } from 'react';\nimport { Form, PageHeader, Row, Col, Button, Spin } from 'antd';\n\nimport UserInfo from './user-info';\nimport ProductInfo from './product-info';\nimport PreviewInfo from './preview-info';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport orderService from 'services/order';\nimport moment from 'moment';\nimport {\n  clearOrder,\n  setOrderCurrency,\n  setOrderData,\n  setOrderItems,\n} from 'redux/slices/order';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport getImageFromStock from 'helpers/getImageFromStock';\nimport { disableRefetch, removeFromMenu } from 'redux/slices/menu';\nimport { fetchOrders } from 'redux/slices/orders';\nimport { useTranslation } from 'react-i18next';\nimport transactionService from 'services/transaction';\n\nexport default function SellerOrderEdit() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { orderItems, data, total, coupon } = useSelector(\n    (state) => state.order,\n    shallowEqual,\n  );\n  const { currencies } = useSelector((state) => state.currency, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const formData = form.getFieldsValue(true);\n      const data = {\n        ...formData,\n        deliveries: formData.deliveries.map((item) => ({\n          ...item,\n          delivery_date: item.delivery_date\n            ? moment(item.delivery_date).format('YYYY-MM-DD')\n            : undefined,\n        })),\n      };\n      dispatch(setOrderData(data));\n    };\n  }, []);\n\n  function formatUser(user) {\n    return {\n      label: user.firstname + ' ' + (user.lastname || ''),\n      value: user.id,\n    };\n  }\n  function formatAddress(item) {\n    if (!item) return null;\n    return {\n      label: item.address,\n      value: item.id,\n    };\n  }\n  function formatPayment(item) {\n    if (!item) return null;\n    return {\n      label: item?.tag,\n      value: item.id,\n    };\n  }\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then((res) => {\n        const order = res.data;\n        dispatch(setOrderCurrency(order.currency));\n        const items = order.details?.map((el) => ({\n          ...el.stock.product,\n          ...el.stock,\n          quantity: el.quantity,\n          stock: el.stock,\n          img: getImageFromStock(el.stock) || el.stock.product.img,\n          product: undefined,\n        }));\n        dispatch(setOrderItems(items));\n        form.setFieldsValue({\n          user: formatUser(order.user),\n          currency_id: order.currency.id,\n          address: formatAddress(order.details[0].delivery_address),\n          payment_type: formatPayment(order?.transaction?.payment_system),\n          note: order.note,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  function createTransaction(id, data) {\n    transactionService\n      .create(id, data)\n      .then((res) => {\n        setOrderId(res.data.id);\n        dispatch(clearOrder());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const orderUpdate = (data, paymentId) => {\n    const payment = {\n      payment_sys_id: paymentId,\n    };\n    setLoadingBtn(true);\n    orderService\n      .update(id, data)\n      .then((res) => createTransaction(res.data.id, payment))\n      .catch(() => setLoadingBtn(false));\n  };\n\n  function formatProducts(list) {\n    const addons = list?.map((item) => ({\n      quantity: item.quantity,\n      stock_id: item.stockID ? item.stockID?.id : item.stock?.id,\n    }));\n\n    const products = list?.flatMap((item) =>\n      item.addons?.map((addon) => ({\n        quantity: addon.quantity,\n        stock_id: addon.stock_id,\n        parent_id: item.stockID ? item.stockID?.id : item.stock?.id,\n      })),\n    );\n\n    return addons.concat(products);\n  }\n\n  const onFinish = (values) => {\n    const products = formatProducts(orderItems);\n    const body = {\n      currency_id: values.currency_id,\n      rate: currencies.find((item) => item.id === values.currency_id)?.rate,\n      // shop_id: data.shop.value,\n      delivery_fee: data.delivery_fee,\n      coupon: coupon.coupon,\n      tax: total.order_tax,\n      payment_type: values.payment_type?.label,\n      note: values.note,\n      delivery_date:\n        moment(values.delivery_date).format('YYYY-MM-DD') +\n        ' ' +\n        moment(values.delivery_time).format('HH:mm'),\n      user_id: values.user.value,\n      products: products?.filter((item) => !!item),\n      status: data?.status,\n    };\n    orderUpdate(body, values?.payment_type?.value);\n  };\n\n  const handleCloseInvoice = () => {\n    setOrderId(null);\n    const nextUrl = 'orders';\n    dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    navigate(`/${nextUrl}`);\n    dispatch(fetchOrders());\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={t('edit.order')}\n        extra={\n          <Button\n            type='primary'\n            loading={loadingBtn}\n            onClick={() => form.submit()}\n          >\n            {t('save')}\n          </Button>\n        }\n      />\n      <Form\n        name='order-form'\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        className='order-add'\n        initialValues={{\n          user: data.user || null,\n          address: data.address || null,\n          currency_id: data.currency.id,\n          payment_type: data.payment_type || null,\n          note: data.note,\n        }}\n      >\n        <Row gutter={24} hidden={loading}>\n          <Col span={16}>\n            <ProductInfo form={form} />\n          </Col>\n          <Col span={8}>\n            <UserInfo form={form} />\n          </Col>\n        </Row>\n        {loading && (\n          <div className='loader'>\n            <Spin />\n          </div>\n        )}\n      </Form>\n      {orderId ? (\n        <PreviewInfo orderId={orderId} handleClose={handleCloseInvoice} />\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order-details.js",["6172","6173"],[],"import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport {\n  Card,\n  Table,\n  Image,\n  Tag,\n  Button,\n  Space,\n  Row,\n  Avatar,\n  Col,\n  Typography,\n  Skeleton,\n  Steps,\n  Spin,\n  Badge,\n  Divider,\n} from 'antd';\nimport {\n  CalendarOutlined,\n  EditOutlined,\n  SwapOutlined,\n} from '@ant-design/icons';\nimport { Link, useParams } from 'react-router-dom';\nimport orderService from 'services/seller/order';\nimport getImage from 'helpers/getImage';\nimport { shallowEqual, useDispatch, useSelector, batch } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport OrderStatusModal from './orderStatusModal';\nimport OrderDeliveryman from './orderDeliveryman';\nimport { fetchSellerDeliverymans } from 'redux/slices/deliveryman';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { fetchRestOrderStatus } from 'redux/slices/orderStatus';\nimport ShowLocationsMap from './show-locations.map';\nimport {\n  BsCalendarDay,\n  BsFillPersonFill,\n  BsFillTelephoneFill,\n} from 'react-icons/bs';\nimport { MdEmail, MdLocationOn } from 'react-icons/md';\nimport { IMG_URL } from 'configs/app-global';\nimport { BiMessageDots, BiMoney } from 'react-icons/bi';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport moment from 'moment';\nimport useDemo from 'helpers/useDemo';\nimport hideEmail from 'components/hideEmail';\nimport { useNavigate } from 'react-router-dom';\nimport QrCode from 'components/qr-code';\nimport { TrackingInfo } from 'components/tracking-info';\nimport { toast } from 'react-toastify';\nimport hideNumber from 'components/hideNumber';\nimport TransactionStatusModal from './transaction-status-modal';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nexport default function SellerOrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const navigate = useNavigate();\n  const data = activeMenu?.data?.data;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const totalPriceRef = useRef();\n  const productListRef = useRef();\n\n  const { isDemo } = useDemo();\n  const [loading, setLoading] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [transactionStatusModal, setTransactionStatusModal] = useState(false);\n\n  const expandedRowRender = (record) => {\n    if (!record?.replace_stock) return;\n    const columns = [\n      {\n        title: t('id'),\n        dataIndex: 'id',\n        key: 'id',\n        render: (_, row) => row?.replace_stock?.id,\n      },\n      {\n        title: t('product.name'),\n        dataIndex: 'product',\n        key: 'product',\n        render: (_, row) => (\n          <Space direction='vertical' className='relative'>\n            {row?.replace_stock?.product?.translation?.title}\n            {row?.replace_stock?.extras?.map((extra) => (\n              <Tag key={extra?.id}>\n                {extra.group?.translation?.title}: {extra.value?.value}\n              </Tag>\n            ))}\n          </Space>\n        ),\n      },\n      {\n        title: t('image'),\n        dataIndex: 'img',\n        key: 'img',\n        render: (_, row) => (\n          <Image\n            src={getImage(row?.replace_stock?.product?.img)}\n            alt='product'\n            width={100}\n            height='auto'\n            className='rounded'\n            preview\n            placeholder\n          />\n        ),\n      },\n      {\n        title: t('price'),\n        dataIndex: 'price',\n        key: 'price',\n        render: (_, row) =>\n          numberToPrice(row?.replace_stock?.price, defaultCurrency?.symbol),\n      },\n      {\n        title: t('quantity'),\n        dataIndex: 'replace_quantity',\n        key: 'replace_quantity',\n        render: (quantity, row) => (\n          <span>{quantity * (row?.replace_stock?.product?.interval || 1)}</span>\n        ),\n      },\n      {\n        title: t('discount'),\n        dataIndex: 'discount',\n        key: 'discount',\n        render: (_, row) =>\n          numberToPrice(\n            row?.replace_stock?.discount ?? 0,\n            defaultCurrency?.symbol,\n          ),\n      },\n      {\n        title: t('tax'),\n        dataIndex: 'tax',\n        key: 'tax',\n        render: (_, row) =>\n          numberToPrice(row?.replace_stock?.tax, defaultCurrency?.symbol),\n      },\n      {\n        title: t('total.price'),\n        dataIndex: 'total_price',\n        key: 'total_price',\n        render: (_, row) => {\n          return numberToPrice(\n            row?.replace_stock?.total_price,\n            defaultCurrency?.symbol,\n          );\n        },\n      },\n      {\n        title: t('note'),\n        dataIndex: 'note',\n        key: 'note',\n        render: (note) => note || '--',\n      },\n    ];\n\n    return (\n      <>\n        <span\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <SwapOutlined\n            style={{\n              padding: '10px',\n              margin: '10px 0 50px 0',\n              border: '2px solid #cad2de',\n              borderRadius: '30%',\n            }}\n            rotate={90}\n          />\n        </span>\n        <Table columns={columns} dataSource={[record]} pagination={false} />\n      </>\n    );\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => {\n        return row.stock?.id;\n      },\n    },\n    {\n      title: t('product.name'),\n      dataIndex: 'product',\n      key: 'product',\n      render: (_, row) => (\n        <Space direction='vertical' className='relative'>\n          {row.stock?.product?.translation?.title}\n          {row.stock?.extras?.map((extra) => (\n            <Tag key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row.stock?.product?.img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('price'),\n      dataIndex: 'origin_price',\n      key: 'origin_price',\n      render: (_, row) =>\n        row?.bonus ? (\n          <Tag color='green'>{t('bonus')}</Tag>\n        ) : (\n          numberToPrice(row?.stock?.price, defaultCurrency?.symbol)\n        ),\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (quantity, row) => (\n        <span>{quantity * (row?.stock?.product?.interval || 1)}</span>\n      ),\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'rate_discount',\n      key: 'rate_discount',\n      render: (_, row) =>\n        numberToPrice(row?.stock?.discount, defaultCurrency?.symbol),\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (_, row) => numberToPrice(row?.tax, defaultCurrency?.symbol),\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (_, row) => {\n        return numberToPrice(row?.total_price, defaultCurrency?.symbol);\n      },\n    },\n    {\n      title: t('actions'),\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, row) => (\n        <Space>\n          <Button\n            type={'primary'}\n            icon={<SwapOutlined />}\n            onClick={() => goToReplaceProduct(row)}\n            disabled={\n              (data?.status !== 'new' && data?.status !== 'accepted') ||\n              row?.bonus\n            }\n          />\n        </Space>\n      ),\n    },\n  ];\n\n  const documentColumns = [\n    {\n      title: t('date'),\n      dataIndex: 'date',\n      key: 'date',\n      render: (date) => moment(date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('document'),\n      dataIndex: 'document',\n      key: 'document',\n    },\n    {\n      title: t('number'),\n      dataIndex: 'number',\n      key: 'number',\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'price',\n      key: 'price',\n    },\n  ];\n\n  const documents = [\n    {\n      price: numberToPrice(data?.total_price, defaultCurrency.symbol),\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('invoice'),\n      date: moment(data?.created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      price: '-',\n      number: (\n        <Link to={`/orders/generate-invoice/${data?.id}`}>#{data?.id}</Link>\n      ),\n      document: t('delivery.receipt'),\n      date: moment(data?.created_at).format('YYYY-MM-DD HH:mm'),\n    },\n  ];\n\n  const handleCloseModal = () => {\n    setOrderId(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n  };\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        const currency = data.currency;\n        const user = data.user;\n        const id = data.id;\n        const price = data.price;\n        const createdAt = data.created_at;\n        const details = data.details.map((item) => ({\n          ...item,\n          title: item.shop?.translation?.title,\n        }));\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { details, currency, user, id, createdAt, price, data },\n          }),\n        );\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  const goToReplaceProduct = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/order/details/${data?.id}/replace/${row?.stock?.id}`,\n        id: 'seller_replace_product',\n        name: t('replace.product'),\n      }),\n    );\n    navigate(`replace/${row?.stock?.id}`, {\n      state: { data },\n    });\n  };\n\n  const goToEdit = () => {\n    dispatch(\n      addMenu({\n        url: `seller/order/${id}`,\n        id: 'order_edit',\n        name: t('edit.order'),\n      }),\n    );\n    navigate(`/seller/order/${id}`);\n  };\n\n  const handleUpdateTracking = useCallback(\n    (body) => {\n      setIsUpdating(true);\n      orderService\n        .updateTracking(data?.id, body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          fetchOrder();\n        })\n        .finally(() => {\n          setIsUpdating(false);\n        });\n    },\n    [data?.id],\n  );\n\n  useEffect(() => {\n    const data = {\n      shop_id: myShop.id,\n    };\n    if (activeMenu.refetch) {\n      fetchOrder();\n      batch(() => {\n        dispatch(fetchRestOrderStatus({}));\n        dispatch(fetchSellerDeliverymans(data));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  const handleShowModal = () => setLocationsMap(id);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.user?.firstname}{' '}\n            {data?.user?.lastname || ''}\n          </>\n        }\n        extra={\n          data?.status !== 'delivered' &&\n          data?.status !== 'canceled' &&\n          data?.type === 2 ? (\n            <Space>\n              {data?.status !== 'delivered' &&\n              data?.status !== 'canceled' &&\n              data?.type !== 1 ? (\n                <Button type='primary' onClick={() => setOrderId(data?.id)}>\n                  {t('change.status')}\n                </Button>\n              ) : null}\n              <Button type='primary' icon={<EditOutlined />} onClick={goToEdit}>\n                {t('edit')}\n              </Button>\n            </Space>\n          ) : (\n            ''\n          )\n        }\n      />\n\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='justify-content-between w-100'>\n              <Space className='align-items-start'>\n                <CalendarOutlined className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('delivery.date')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.delivery_date} {data?.delivery_time}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  totalPriceRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <BiMoney className='order-card-icon' />\n\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('total.price')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} loading={loading} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {numberToPrice(\n                        data?.total_price,\n                        defaultCurrency?.symbol,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space className='align-items-start'>\n                <BiMessageDots className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('messages')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.review ? 1 : 0}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n              <Space\n                className='align-items-start'\n                onClick={() =>\n                  productListRef.current.scrollIntoView({ behavior: 'smooth' })\n                }\n              >\n                <FiShoppingCart className='order-card-icon' />\n                <div className='d-flex flex-column'>\n                  <Typography.Text>{t('products')}</Typography.Text>\n                  {loading ? (\n                    <Skeleton.Button size={16} />\n                  ) : (\n                    <Typography.Text className='order-card-title'>\n                      {data?.details?.reduce(\n                        (total, item) => (total += item.quantity),\n                        0,\n                      )}\n                    </Typography.Text>\n                  )}\n                </div>\n              </Space>\n            </Space>\n          </Card>\n        </Col>\n        {data?.status !== 'canceled' && (\n          <Col span={24}>\n            <Card>\n              <Steps\n                current={statusList?.findIndex(\n                  (item) => item.name === data?.status,\n                )}\n              >\n                {statusList\n                  ?.slice(0, -1)\n                  ?.filter((item) => item?.active)\n                  .map((item) => (\n                    <Steps.Step key={item.id} title={t(item.name)} />\n                  ))}\n              </Steps>\n            </Card>\n          </Col>\n        )}\n        <Col span={16}>\n          <Spin spinning={loading}>\n            <Card style={{ minHeight: '200px' }}>\n              <h3>{t('details')}:</h3>\n              <Row hidden={loading} className='mb-3 order_detail' gutter={10}>\n                <Col span={12}>\n                  <div>\n                    {t('created.date.&.time')}:\n                    <span className='ml-2'>\n                      <BsCalendarDay className='mr-1' />{' '}\n                      {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}{' '}\n                    </span>\n                  </div>\n                  <br />\n                  {data?.delivery_type === 'dine_in' && (\n                    <div>\n                      {t('table')}:\n                      <span className='ml-2'>{data?.table?.name}</span>\n                    </div>\n                  )}\n                  {data?.delivery_type !== 'dine_in' && (\n                    <>\n                      <div>\n                        {t('delivery.date.&.time')}:\n                        <span className='ml-2'>\n                          <BsCalendarDay className='mr-1' />{' '}\n                          {data?.delivery_date} {data?.delivery_time}\n                        </span>\n                      </div>\n                      <br />\n                      <div>\n                        {t('payment.status')}:\n                        <span\n                          style={{ cursor: 'pointer' }}\n                          className='ml-2'\n                          onClick={() => setTransactionStatusModal(true)}\n                        >\n                          {t(data?.transaction?.status)} <EditOutlined />\n                        </span>\n                      </div>\n                    </>\n                  )}\n                </Col>\n                <Col span={12}>\n                  <div>\n                    {t('status')}:\n                    <span className='ml-2'>\n                      {data?.status === 'new' ? (\n                        <Tag color='blue'>{t(data?.status)}</Tag>\n                      ) : data?.status === 'canceled' ? (\n                        <Tag color='error'>{t(data?.status)}</Tag>\n                      ) : (\n                        <Tag color='cyan'>{t(data?.status)}</Tag>\n                      )}\n                    </span>\n                  </div>\n                  <br />\n                  <div>\n                    {t('delivery.type')}:\n                    <span className='ml-2'>{data?.delivery_type}</span>\n                  </div>\n                  {data?.delivery_type !== 'dine_in' && (\n                    <>\n                      <br />\n                      <div>\n                        {t('payment.type')}:\n                        <span className='ml-2'>\n                          {t(data?.transaction?.payment_system?.tag)}\n                        </span>\n                      </div>\n                    </>\n                  )}\n                </Col>\n              </Row>\n              <Row hidden={loading} className='mb-3 order_detail'>\n                <Col span={12}>\n                  <h3>{t('delivery.address')}:</h3>\n                  <div>\n                    {!!data?.address ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.address?.street_house_number ?? t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.address?.zipcode ??\n                            data?.address?.zip_code ??\n                            t('not.given')}\n                        </div>\n                      </>\n                    ) : !!data?.my_address ? (\n                      <>\n                        <div>\n                          {t('street.house.number')}:{' '}\n                          {data?.my_address?.street_house_number ??\n                            t('not.given')}\n                        </div>\n                        <br />\n                        <div>\n                          {t('zipcode')}:{' '}\n                          {data?.my_address?.zipcode ?? t('not.given')}\n                        </div>\n                      </>\n                    ) : data?.delivery_point ? (\n                      <>\n                        <div>\n                          {t('address')}:{' '}\n                          {data?.delivery_point?.address?.[defaultLang] ??\n                            t('no.address')}\n                        </div>\n                      </>\n                    ) : data?.delivery_type === 'digital' ? (\n                      <div>{t('digital.delivery')}</div>\n                    ) : (\n                      <div>{t('no.address')}</div>\n                    )}\n                  </div>\n                  <Button className='map_show mt-3' onClick={handleShowModal}>\n                    <MdLocationOn style={{ marginRight: '8px' }} />{' '}\n                    {t('show.locations')}\n                  </Button>\n                </Col>\n                <Col span={12}>\n                  <QrCode orderId={id} />\n                </Col>\n              </Row>\n            </Card>\n          </Spin>\n          {data?.delivery_type !== 'dine_in' && (\n            <Card title={t('documents')}>\n              <Table\n                columns={documentColumns}\n                dataSource={documents}\n                pagination={false}\n                loading={loading}\n              />\n            </Card>\n          )}\n        </Col>\n        <Col span={8} className='order_info'>\n          {data?.delivery_type === 'delivery' && (\n            <>\n              {data?.delivery_type !== 'dine_in' && data?.type === 1 && (\n                <Card\n                  title={t('deliveryman')}\n                  extra={\n                    data?.status === 'ready' &&\n                    data?.delivery_type !== 'pickup' && (\n                      <Button onClick={() => setOrderDeliveryDetails(data)}>\n                        {t('change')}\n                        <EditOutlined />\n                      </Button>\n                    )\n                  }\n                >\n                  {data?.status === 'new' || data?.status === 'accepted' ? (\n                    <p>{t('order_status_ready')}</p>\n                  ) : (\n                    ''\n                  )}\n                  {data?.status !== 'new' &&\n                  data?.status !== 'accepted' &&\n                  !data?.deliveryman ? (\n                    <p>\n                      {t(\n                        'The supplier is not assigned or delivery type pickup',\n                      )}\n                    </p>\n                  ) : (\n                    ''\n                  )}\n\n                  {data?.deliveryman && (\n                    <Space>\n                      <Avatar\n                        shape='square'\n                        size={64}\n                        src={IMG_URL + data?.deliveryman?.img}\n                      />\n                      <div>\n                        <h5>\n                          {data?.deliveryman?.firstname +\n                            ' ' +\n                            data?.deliveryman?.lastname}\n                        </h5>\n                        <span className='delivery-info'>\n                          <BsFillTelephoneFill />\n                          {data?.deliveryman?.phone}\n                        </span>\n\n                        <div className='delivery-info'>\n                          <b>\n                            <MdEmail size={16} />\n                          </b>\n                          <span>\n                            {isDemo\n                              ? hideEmail(data?.deliveryman?.email)\n                              : data?.deliveryman?.email}\n                          </span>\n                        </div>\n                      </div>\n                    </Space>\n                  )}\n                </Card>\n              )}\n\n              {data?.type === 2 && data?.delivery_type === 'delivery' && (\n                <Card title={t('tracking.info')}>\n                  <TrackingInfo\n                    onSubmit={handleUpdateTracking}\n                    isSubmitting={isUpdating}\n                    initialData={{\n                      track_name: data?.track_name,\n                      track_id: data?.track_id,\n                      track_url: data?.track_url,\n                    }}\n                  />\n                </Card>\n              )}\n\n              {!!data?.username && (\n                <Card title={t('order.receiver')}>\n                  <div className='customer-info'>\n                    <span className='title'>{t('name')}</span>\n                    <span className='description'>\n                      <BsFillPersonFill />\n                      {data?.username}\n                    </span>\n                  </div>\n                  <div className='customer-info'>\n                    <span className='title'>{t('phone')}</span>\n                    <span className='description'>\n                      <BsFillTelephoneFill />\n                      {data?.phone}\n                    </span>\n                  </div>\n                </Card>\n              )}\n              {/*customer details*/}\n              {!!data?.user && (\n                <Card>\n                  <div className='d-flex w-100 customer-info-container'>\n                    {loading ? (\n                      <Skeleton.Avatar size={64} shape='square' />\n                    ) : (\n                      <Avatar shape='square' size={64} src={data?.user?.img} />\n                    )}\n\n                    <h5 className='customer-name'>\n                      {loading ? (\n                        <Skeleton.Button size={20} style={{ width: 70 }} />\n                      ) : (\n                        data?.user?.firstname +\n                        ' ' +\n                        (data?.user?.lastname || '')\n                      )}\n                    </h5>\n\n                    <div className='customer-info-detail'>\n                      <div className='customer-info'>\n                        <span className='title'>{t('phone')}</span>\n                        <span className='description'>\n                          <BsFillTelephoneFill />\n                          {loading ? (\n                            <Skeleton.Button size={16} />\n                          ) : data?.user?.phone ? (\n                            ReactAppIsDemo ? (\n                              hideNumber(data?.user?.phone)\n                            ) : (\n                              data?.user?.phone\n                            )\n                          ) : (\n                            'none'\n                          )}\n                        </span>\n                      </div>\n\n                      <div className='customer-info'>\n                        <span className='title'>{t('email')}</span>\n                        <span className='description'>\n                          <MdEmail />\n                          {loading ? (\n                            <Skeleton.Button size={16} />\n                          ) : ReactAppIsDemo ? (\n                            hideEmail(data?.user?.email)\n                          ) : (\n                            data?.user?.email\n                          )}\n                        </span>\n                      </div>\n                      <div className='customer-info'>\n                        <span className='title'>{t('registration.date')}</span>\n                        <span className='description'>\n                          <BsCalendarDay />\n                          {loading ? (\n                            <Skeleton.Button size={16} />\n                          ) : (\n                            moment(data?.user?.created_at).format(\n                              'DD-MM-YYYY, hh:mm',\n                            )\n                          )}\n                        </span>\n                      </div>\n                      <div className='customer-info'>\n                        <span className='title'>{t('orders.count')}</span>\n                        <span className='description'>\n                          {loading ? (\n                            <Skeleton.Button size={16} />\n                          ) : (\n                            <Badge\n                              showZero\n                              style={{ backgroundColor: '#3d7de3' }}\n                              count={data?.user?.orders_count || 0}\n                            />\n                          )}\n                        </span>\n                      </div>\n                      <div className='customer-info'>\n                        <span className='title'>\n                          {t('spent.since.registration')}\n                        </span>\n                        <span className='description'>\n                          {loading ? (\n                            <Skeleton.Button size={16} />\n                          ) : (\n                            <Badge\n                              showZero\n                              style={{ backgroundColor: '#48e33d' }}\n                              count={numberToPrice(\n                                data?.user?.orders_sum_price,\n                                defaultCurrency?.symbol,\n                              )}\n                            />\n                          )}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              )}\n              {data?.review && !loading && (\n                <Card title={t('messages')}>\n                  <div className='order-message'>\n                    <span className='message'>{data?.review?.comment}</span>\n                    <Space className='w-100 justify-content-end'>\n                      <span className='date'>\n                        {moment(data?.review?.created_at).format(\n                          'YYYY-MM-DD HH:mm',\n                        )}\n                      </span>\n                    </Space>\n                  </div>\n                </Card>\n              )}\n              {/*{data?.shop && (*/}\n              {/*  <Card*/}\n              {/*    title={`${t('shop.details')}: #${data?.shop?.id}`}*/}\n              {/*    loading={loading}*/}\n              {/*  >*/}\n              {/*    <Row gutter={12}>*/}\n              {/*      <Col*/}\n              {/*        span={24}*/}\n              {/*        style={{*/}\n              {/*          display: 'flex',*/}\n              {/*          columnGap: '20px',*/}\n              {/*          marginBottom: '20px',*/}\n              {/*        }}*/}\n              {/*      >*/}\n              {/*        <div*/}\n              {/*          style={{*/}\n              {/*            width: '100px',*/}\n              {/*            height: '100px',*/}\n              {/*            backgroundColor: '#f5f5f5',*/}\n              {/*            overflow: 'hidden',*/}\n              {/*            borderRadius: '10px',*/}\n              {/*            position: 'relative',*/}\n              {/*          }}*/}\n              {/*        >*/}\n              {/*          <Image*/}\n              {/*            alt={t('shop.logo')}*/}\n              {/*            style={{ objectFit: 'contain' }}*/}\n              {/*            src={*/}\n              {/*              data?.shop?.logo_img ||*/}\n              {/*              'https://via.placeholder.com/150'*/}\n              {/*            }*/}\n              {/*            width={100}*/}\n              {/*            height={100}*/}\n              {/*            preview={false}*/}\n              {/*          />*/}\n              {/*        </div>*/}\n              {/*        <div*/}\n              {/*          style={{*/}\n              {/*            width: `calc(100% - 100px - 20px)`,*/}\n              {/*          }}*/}\n              {/*        >*/}\n              {/*          <h5*/}\n              {/*            style={{*/}\n              {/*              maxWidth: '100%',*/}\n              {/*              whiteSpace: 'nowrap',*/}\n              {/*              overflow: 'hidden',*/}\n              {/*              textOverflow: 'ellipsis',*/}\n              {/*            }}*/}\n              {/*          >*/}\n              {/*            {data?.shop?.translation?.title || '--'}*/}\n              {/*          </h5>*/}\n              {/*          <p>*/}\n              {/*            {data?.shop?.open ? (*/}\n              {/*              <Tag color='green'>{t('open')}</Tag>*/}\n              {/*            ) : (*/}\n              {/*              <Tag color='red'>{t('closed')}</Tag>*/}\n              {/*            )}*/}\n              {/*          </p>*/}\n              {/*        </div>*/}\n              {/*      </Col>*/}\n              {/*      <Col span={24}>*/}\n              {/*        {data?.shop?.phone && (*/}\n              {/*          <p>*/}\n              {/*            <strong>{t('phone')}:</strong> {data?.shop?.phone}*/}\n              {/*          </p>*/}\n              {/*        )}*/}\n              {/*        {data?.shop?.translation?.address && (*/}\n              {/*          <p>*/}\n              {/*            <strong>{t('address')}:</strong>{' '}*/}\n              {/*            {data?.shop?.translation?.address}*/}\n              {/*          </p>*/}\n              {/*        )}*/}\n              {/*      </Col>*/}\n              {/*    </Row>*/}\n              {/*  </Card>*/}\n              {/*)}*/}\n            </>\n          )}\n        </Col>\n        <Col span={24}>\n          <Card className='w-100 order-table' title={t('order.products')}>\n            <Divider />\n            <Table\n              ref={productListRef}\n              scroll={{ x: true }}\n              columns={columns}\n              dataSource={activeMenu.data?.details || []}\n              loading={loading}\n              rowKey={(record) => record.id}\n              pagination={false}\n              expandable={{\n                expandedRowRender,\n                expandIcon: ({ expanded, onExpand, record }) =>\n                  expanded ? (\n                    <SwapOutlined\n                      onClick={(e) => onExpand(record, e)}\n                      rotate={90}\n                    />\n                  ) : (\n                    <SwapOutlined\n                      onClick={(e) => onExpand(record, e)}\n                      rotate={90}\n                    />\n                  ),\n                defaultExpandedRowKeys: ['0'],\n              }}\n            />\n            <Space\n              size={100}\n              className='d-flex justify-content-end w-100 order-table__summary'\n            >\n              <div>\n                <span>{t('delivery.fee')}:</span>\n                <br />\n                <span>{t('order.tax')}:</span>\n                <br />\n                <span>{t('product')}:</span>\n                <br />\n\n                <span>{t('service.fee')}:</span>\n                <br />\n                <span>{t('discount')}:</span>\n                <br />\n                <span>{t('coupon.price')}:</span>\n                <br />\n                <span>{t('tax')}:</span>\n                <br />\n                <h3>{t('total.price')}:</h3>\n              </div>\n              <div>\n                <span>\n                  {numberToPrice(\n                    data?.delivery_fee ?? 0,\n                    defaultCurrency?.symbol,\n                  )}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.total_tax, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  {numberToPrice(data?.service_fee, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  -{' '}\n                  {numberToPrice(data?.total_discount, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>\n                  - {numberToPrice(data?.coupon_price, defaultCurrency?.symbol)}\n                </span>\n                <br />\n                <span>{numberToPrice(data?.tax, defaultCurrency?.symbol)}</span>\n                <br />\n                <h3 ref={totalPriceRef}>\n                  {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n                </h3>\n              </div>\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n      {orderId && (\n        <OrderStatusModal\n          orderId={orderId}\n          handleCancel={handleCloseModal}\n          refetchPage={fetchOrder}\n        />\n      )}\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {transactionStatusModal && (\n        <TransactionStatusModal\n          orderId={id}\n          handleCancel={() => setTransactionStatusModal(false)}\n          transactionDetails={data?.transaction}\n          fetchOrder={fetchOrder}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order.js",["6174"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport {\n  Button,\n  Space,\n  Table,\n  Card,\n  Tabs,\n  Tag,\n  Select,\n  DatePicker,\n} from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  ClearOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchOrders as fetchSellerOrders } from 'redux/slices/sellerOrders';\nimport formatSortType from 'helpers/formatSortType';\nimport SearchInput from 'components/search-input';\nimport { clearOrder } from 'redux/slices/order';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { DebounceSelect } from 'components/search';\nimport userService from 'services/seller/user';\nimport FilterColumns from 'components/filter-column';\nimport { fetchRestOrderStatus } from 'redux/slices/orderStatus';\nimport DeleteButton from 'components/delete-button';\nimport { Context } from 'context/context';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport orderService from 'services/seller/order';\nimport { clearItems, fetchOrders } from 'redux/slices/sellerOrders';\nimport { batch } from 'react-redux';\nimport OrderDeliveryman from './orderDeliveryman';\nimport OrderStatusModal from './orderStatusModal';\nimport OrderTypeSwitcher from './order-type-switcher';\nimport { useQueryParams } from 'helpers/useQueryParams';\nimport moment from 'moment';\nconst { RangePicker } = DatePicker;\n\nconst { TabPane } = Tabs;\n\nexport default function SellerOrder() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const urlParams = useParams();\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const orderType = urlParams?.type;\n  const statuses = [\n    { name: 'all', id: 0, active: true, sort: 0 },\n    ...statusList,\n  ];\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [orderId, setOrderId] = useState(null);\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/seller/order/details/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('client'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => {\n        if (!user) {\n          return <Tag color='red'>{t('deleted.user')}</Tag>;\n        }\n        return (\n          <div>\n            {user?.firstname || ''} {user?.lastname || ''}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div className='cursor-pointer'>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          {status !== 'delivered' && status !== 'canceled' && row.type !== 1 ? (\n            <EditOutlined\n              onClick={(e) => {\n                e.stopPropagation();\n                setOrderId(row?.id);\n              }}\n            />\n          ) : (\n            ''\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      is_show: true,\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      render: (deliveryman) => (\n        <div>\n          {deliveryman?.firstname || '-'} {deliveryman?.lastname || '-'}\n        </div>\n      ),\n    },\n    {\n      title: t('number.of.products'),\n      dataIndex: 'order_details_count',\n      key: 'order_details_count',\n      is_show: true,\n      render: (order_details_count) => {\n        return (\n          <div className='text-lowercase'>\n            {order_details_count || 0} {t('products')}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('amount'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      is_show: true,\n      render: (total_price) =>\n        numberToPrice(total_price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('payment.type'),\n      dataIndex: 'transaction',\n      key: 'transaction',\n      is_show: true,\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('delivery.date'),\n      is_show: true,\n      dataIndex: 'delivery_date',\n      key: 'delivery_date',\n      render: (delivery_date) =>\n        moment(delivery_date).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n            <Button\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n              disabled={\n                row?.type !== 2 ||\n                row?.status === 'canceled' ||\n                row?.status === 'delivered'\n              }\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const querryParams = useQueryParams();\n  const [role, setRole] = useState(querryParams.values.status || 'all');\n  const immutable = activeMenu.data?.role || role;\n  const { orders, meta, loading, params } = useSelector(\n    (state) => state.sellerOrders,\n    shallowEqual,\n  );\n  const [dateRange, setDateRange] = useState(null);\n  const data = activeMenu?.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    status: immutable === 'all' ? undefined : immutable,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    delivery_type: orderType\n      ? orderType\n      : activeMenu.data?.delivery_type !== null\n      ? activeMenu.data?.delivery_type\n      : null,\n    date_from: dateRange?.[0]?.format('YYYY-MM-DD') || undefined,\n    date_to: dateRange?.[1]?.format('YYYY-MM-DD') || undefined,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    orderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchSellerOrders(paramsData));\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerOrders(paramsData));\n  }, [activeMenu?.data, dateRange]);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      batch(() => {\n        dispatch(fetchSellerOrders(paramsData));\n        dispatch(fetchRestOrderStatus({}));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu?.refetch]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      }),\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.getAll(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname}`,\n        value: item.id,\n        key: item.id,\n      }));\n    });\n  }\n\n  const goToAddOrder = () => {\n    dispatch(clearOrder());\n    dispatch(\n      addMenu({\n        id: 'pos.system',\n        url: 'seller/pos-system',\n        name: t('add.order'),\n      }),\n    );\n    navigate('/seller/pos-system', { state: { delivery_type: orderType } });\n  };\n\n  const goToEdit = (row) => {\n    batch(() => {\n      dispatch(clearOrder());\n      dispatch(\n        addMenu({\n          url: `seller/order/${row.id}`,\n          id: 'seller_order_edit',\n          name: t('edit.order'),\n        }),\n      );\n    });\n    navigate(`/seller/order/${row.id}`);\n  };\n\n  const onChangeTab = (status) => {\n    const orderStatus = status;\n    dispatch(setMenuData({ activeMenu, data: { role: orderStatus, page: 1 } }));\n    setRole(status);\n    navigate(`?status=${orderStatus}`);\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        }),\n      );\n    });\n    dispatch(fetchOrders({ status: 'all', page: data?.page, perPage: 10 }));\n  };\n\n  const handleCloseModal = () => {\n    setOrderDeliveryDetails(null);\n    setOrderId(null);\n  };\n\n  return (\n    <>\n      <Space className='justify-content-end w-100 mb-3'>\n        <OrderTypeSwitcher listType='seller/orders' />\n        <Button\n          type='primary'\n          icon={<PlusCircleOutlined />}\n          onClick={goToAddOrder}\n          style={{ width: '100%' }}\n        >\n          {t('add.order')}\n        </Button>\n      </Space>\n      <Card>\n        <Space wrap className='p-0 mb-0'>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={activeMenu.data?.search}\n          />\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter(user.value, 'search')}\n            onDeselect={() => handleFilter(null, 'search')}\n            style={{ minWidth: 200 }}\n          />\n          <RangePicker\n            value={dateRange}\n            onChange={(values) => {\n              handleFilter(JSON.stringify(values), 'data_time');\n              setDateRange(values);\n            }}\n            disabledDate={(current) => {\n              return current && current > moment().endOf('day');\n            }}\n            style={{ width: '100%' }}\n          />\n          {!orderType && (\n            <Select\n              value={data?.delivery_type}\n              placeholder={t('order.type')}\n              onSelect={(type) => handleFilter(type, 'delivery_type')}\n              options={[\n                { label: t('pickup'), value: 'pickup' },\n                { label: t('delivery'), value: 'delivery' },\n              ]}\n              allowClear\n              style={{ width: '100%' }}\n              onDeselect={() => handleFilter(null, 'delivery_type')}\n            />\n          )}\n          <Button icon={<ClearOutlined />} onClick={handleClear}>\n            {t('clear')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card>\n        <Tabs onChange={onChangeTab} type='card' activeKey={immutable}>\n          {statuses\n            .filter((ex) => ex.active === true)\n            .map((item) => {\n              return <TabPane tab={t(item.name)} key={item.name} />;\n            })}\n        </Tabs>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={orders}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n        <CustomModal\n          click={orderDelete}\n          text={text ? t('delete') : t('all.delete')}\n          loading={loadingBtn}\n          setText={setId}\n        />\n      </Card>\n      {orderId && (\n        <OrderStatusModal\n          orderId={orderId}\n          handleCancel={handleCloseModal}\n          refetchPage={() =>\n            batch(() => {\n              dispatch(fetchOrders(paramsData));\n              dispatch(disableRefetch(activeMenu));\n            })\n          }\n        />\n      )}\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-time/index.js",["6175"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { fetchBookingTime } from '../../../redux/slices/booking-time';\nimport { useTranslation } from 'react-i18next';\nimport CustomModal from '../../../components/modal';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport sellerBookingTime from '../../../services/seller/booking-time';\nimport { useNavigate } from 'react-router-dom';\nimport RiveResult from 'components/rive-result';\n\nconst BookingTables = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n  const navigate = useNavigate();\n\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    search: data?.search ? data.search : undefined,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const { data: time } = useSelector(\n    (state) => state.bookingTime,\n    shallowEqual\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/booking/time/${row.id}`,\n        id: 'booking_time_edit',\n        name: t('edit.booking.time'),\n      })\n    );\n    navigate(`/seller/booking/time/${row.id}`);\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        url: `seller/booking/time/add`,\n        id: 'booking_time_add',\n        name: t('add.booking.time'),\n      })\n    );\n    navigate(`/seller/booking/time/add`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const bookingtableDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    sellerBookingTime\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchBookingTime(paramsData));\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBookingTime(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap className='justify-content-end w-100'>\n          <Button\n            hidden={time?.length > 0}\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => goToAdd(true)}\n          >\n            {t('add.reservation.time')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('reservation.time')}>\n        <Table\n          scroll={{ x: true }}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={time}\n          rowKey={(record) => record?.id}\n          locale={{\n            emptyText: <RiveResult id='nosell' />,\n          }}\n        />\n      </Card>\n      <CustomModal\n        click={bookingtableDelete}\n        text={t('delete')}\n        setText={setId}\n        loading={loadingBtn}\n        setActive={setId}\n      />\n    </>\n  );\n};\n\nexport default BookingTables;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment/payment-edit.js",["6176","6177","6178","6179","6180"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport paymentService from '../../../services/seller/payment';\nimport { fetchSellerPayments } from '../../../redux/slices/payment';\nimport Paystack from '../../../assets/images/paystack.svg';\nimport { FaPaypal } from 'react-icons/fa';\nimport { SiStripe, SiRazorpay } from 'react-icons/si';\n\nconst SellerPaymentEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [paymentList, setPaymentList] = useState([]);\n  const [activePayment, setActivePayment] = useState(null);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const getPayment = (id) => {\n    setLoading(true);\n    paymentService\n      .getById(id)\n      .then(({ data }) => {\n        setActivePayment({\n          label: data.payment.tag,\n          value: data.payment.id,\n        });\n        form.setFieldsValue({\n          ...data,\n          payment_id: data.payment.tag,\n        });\n      })\n      .finally(() => dispatch(disableRefetch(activeMenu)));\n  };\n\n  async function fetchPayment() {\n    setLoading(true);\n    return paymentService\n      .allPayment()\n      .then(({ data }) => {\n        const body = data.map((item) => ({\n          label: item.tag[0].toUpperCase() + item.tag.substring(1),\n          value: item.id,\n          key: item.id,\n        }));\n        setPaymentList(body);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      payment_id: activePayment.value,\n    };\n    paymentService\n      .update(id, body)\n      .then(() => {\n        const nextUrl = 'seller/payments';\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchSellerPayments());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getPayment(id);\n      fetchPayment();\n    }\n  }, [activeMenu.refetch]);\n\n  const handleAddIcon = (data) => {\n    switch (data) {\n      case 'Paypal':\n        return <FaPaypal size={80} />;\n      case 'Stripe':\n        return <SiStripe size={80} />;\n      case 'Razorpay':\n        return <SiRazorpay size={80} />;\n      case 'Paystack':\n        return <img src={Paystack} alt='img' width='80' height='80' />;\n    }\n  };\n\n  return (\n    <Card title={t('edit.payment')} className='h-100'>\n      {!loading ? (\n        <Form\n          name='edit.payment'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ status: true, ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col\n              span={\n                activePayment?.label === 'cash' ||\n                activePayment?.label === 'wallet'\n                  ? 12\n                  : 24\n              }\n            >\n              <Form.Item\n                label={t('payment')}\n                name='payment_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  notFoundContent={\n                    loading ? <Spin size='small' /> : 'no results'\n                  }\n                  allowClear\n                  disabled\n                />\n              </Form.Item>\n            </Col>\n\n            {activePayment?.label === 'cash' ||\n            activePayment?.label === 'wallet' ? (\n              ''\n            ) : (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('client.id')}\n                    name={'client_id'}\n                    rules={[\n                      {\n                        required: true,\n                        message: t('required'),\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('secret.id')}\n                    name={'secret_id'}\n                    rules={[\n                      {\n                        required: true,\n                        message: t('required'),\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                </Col>\n                {activePayment?.label === 'Paystack' ? (\n                  <>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('payment.id')}\n                        name={'payment_key'}\n                        rules={[\n                          {\n                            required: true,\n                            message: t('required'),\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        label={t('merchant.email')}\n                        name={'merchant_email'}\n                        rules={[\n                          {\n                            required: true,\n                            message: t('required'),\n                          },\n                        ]}\n                      >\n                        <Input type='email' />\n                      </Form.Item>\n                    </Col>\n                  </>\n                ) : (\n                  ''\n                )}\n              </>\n            )}\n            <Col span={12}>\n              <Form.Item\n                label={t('status')}\n                name='status'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button\n                type='primary'\n                htmlType='submit'\n                loading={loadingBtn}\n                disabled={loadingBtn}\n              >\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default SellerPaymentEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment/payment-add.js",["6181","6182"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { removeFromMenu, setRefetch } from '../../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerPayments } from '../../../redux/slices/payment';\nimport paymentService from '../../../services/seller/payment';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport Paystack from '../../../assets/images/paystack.svg';\nimport { FaPaypal } from 'react-icons/fa';\nimport { SiStripe, SiRazorpay } from 'react-icons/si';\n\nexport default function SellerPaymentAdd() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [paymentList, setPaymentList] = useState([]);\n  const [activePayment, setActivePayment] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    paymentService\n      .create(values)\n      .then(() => {\n        const nextUrl = 'seller/payments';\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchSellerPayments());\n        dispatch(setRefetch(activeMenu));\n      })\n      .catch((err) => console.error(err))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchPayment() {\n    setLoading(true);\n    return paymentService\n      .allPayment()\n      .then(({ data }) => {\n        const body = data.map((item) => ({\n          label: item.tag[0].toUpperCase() + item.tag.substring(1),\n          value: item.id,\n          key: item.id,\n        }));\n        setPaymentList(body);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchPayment();\n  }, []);\n\n  const handleAddIcon = (data) => {\n    switch (data) {\n      case 'Paypal':\n        return <FaPaypal size={80} />;\n      case 'Stripe':\n        return <SiStripe size={80} />;\n      case 'Razorpay':\n        return <SiRazorpay size={80} />;\n      case 'Paystack':\n        return <img src={Paystack} alt='img' width='80' height='80' />;\n    }\n  };\n\n  return (\n    <Card title={t('add.payment')} className='h-100'>\n      <Form\n        layout='vertical'\n        name='user-address'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{ status: true }}\n      >\n        <Row gutter={12}>\n          <Col\n            span={\n              activePayment?.label === 'Cash' ||\n              activePayment?.label === 'Wallet'\n                ? 12\n                : 24\n            }\n          >\n            <Form.Item\n              label={t('payment')}\n              name='payment_id'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select\n                notFoundContent={loading ? <Spin size='small' /> : 'no results'}\n                allowClear\n                options={paymentList}\n                onSelect={(e) =>\n                  setActivePayment(\n                    paymentList.find((payment) => payment.value === e)\n                  )\n                }\n              />\n            </Form.Item>\n          </Col>\n\n          {activePayment?.label === 'Cash' ||\n          activePayment?.label === 'Wallet' ? (\n            ''\n          ) : (\n            <>\n              <Col span={12}>\n                <Form.Item\n                  label={t('client.id')}\n                  name={'client_id'}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('secret.id')}\n                  name={'secret_id'}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              {activePayment?.label === 'Paystack' ? (\n                <>\n                  <Col span={12}>\n                    <Form.Item\n                      label={t('payment.id')}\n                      name={'payment_key'}\n                      rules={[\n                        {\n                          required: true,\n                          message: t('required'),\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                    <Form.Item\n                      label={t('merchant.email')}\n                      name={'merchant_email'}\n                      rules={[\n                        {\n                          required: true,\n                          message: t('required'),\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                </>\n              ) : (\n                ''\n              )}\n            </>\n          )}\n          <Col span={12}>\n            <Form.Item\n              label={t('status')}\n              name='status'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button\n              type='primary'\n              htmlType='submit'\n              loading={loadingBtn}\n              disabled={loadingBtn}\n            >\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-import.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-clone.js",["6183","6184"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../../components/upload';\nimport { fetchSellerRecipeCategories } from '../../../redux/slices/recipe-category';\nimport sellerCategory from '../../../services/seller/category';\n\nconst RecipeCategoryClone = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const { uuid } = useParams();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    sellerCategory\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n          parent_id: {\n            label: category.parent ? category?.translation?.title : '---',\n            value: category.parent ? category?.id : 0,\n            key: category.parent ? category?.id : 0,\n          },\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'receipt',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value === 0 ? null : values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'seller/recipe-categories';\n\n    sellerCategory\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchSellerRecipeCategories());\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('recipe.category.clone')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('parent.category')}\n                name='parent_id'\n                rules={[{ required: true, message: t('required') }]}\n                help={\n                  error ? (error.parent_id ? error.parent_id[0] : null) : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n              >\n                <Select>\n                  <Select.Option value={0}>---</Select.Option>\n                </Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item label={t('image')}>\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default RecipeCategoryClone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-edit.js",["6185","6186","6187"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { toast } from 'react-toastify';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport LanguageList from '../../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { IMG_URL } from '../../../configs/app-global';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../../components/upload';\n\nimport { fetchSellerRecipeCategories } from '../../../redux/slices/recipe-category';\nimport sellerCategory from '../../../services/seller/category';\n\nconst RecipeCategoryEdit = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const locations = useLocation();\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.category, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    sellerCategory\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n\n        const body = {\n          ...category,\n          ...getLanguageFields(category),\n          image: [createImage(category.img)],\n          keywords: category.keywords.split(','),\n          parent_id: {\n            label: category.parent ? category?.translation?.title : '---',\n            value: category.parent ? category?.id : 0,\n            key: category.parent ? category?.id : 0,\n          },\n        };\n\n        form.setFieldsValue(body);\n        setImage([createImage(category.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'receipt',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value === 0 ? null : values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'seller/recipe-categories';\n    if (locations.state === 'edit') {\n      sellerCategory\n        .update(uuid, body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchSellerRecipeCategories());\n          navigate(`/${nextUrl}`);\n        })\n        .catch((err) => setError(err.response.data.params))\n        .finally(() => setLoadingBtn(false));\n    } else {\n      sellerCategory\n        .create(body)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchSellerRecipeCategories());\n          navigate(`/${nextUrl}`);\n        })\n        .catch((err) => setError(err.response.data.params))\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCategory(uuid);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.category')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            parent_id: { title: '---', value: 0, key: 0 },\n            active: true,\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.title + index}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  help={\n                    error\n                      ? error[`title.${defaultLang}`]\n                        ? error[`title.${defaultLang}`][0]\n                        : null\n                      : null\n                  }\n                  validateStatus={error ? 'error' : 'success'}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n\n            <Col span={12}>\n              {languages.map((item, index) => (\n                <Form.Item\n                  key={item.locale + index}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <TextArea rows={4} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('keywords')}\n                name='keywords'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select mode='tags' style={{ width: '100%' }}></Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('parent.category')}\n                name='parent_id'\n                rules={[{ required: true, message: t('required') }]}\n                help={\n                  error ? (error.parent_id ? error.parent_id[0] : null) : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n              >\n                <Select>\n                  <Select.Option value={0}>---</Select.Option>\n                </Select>\n              </Form.Item>\n            </Col>\n\n            <Col span={4}>\n              <Form.Item label={t('image')}>\n                <MediaUpload\n                  type='categories'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={2}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center py-5'>\n          <Spin size='large' className='mt-5 pt-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default RecipeCategoryEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/category-add.js",["6188"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport LanguageList from '../../../components/language-list';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../../components/upload';\nimport { fetchSellerRecipeCategories } from '../../../redux/slices/recipe-category';\nimport sellerCategory from '../../../services/seller/category';\n\nconst RecipeCategoryAdd = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'receipt',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value === 0 ? null : values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    const nextUrl = 'seller/recipe-categories';\n    sellerCategory\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(fetchSellerRecipeCategories());\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.category')} extra={<LanguageList />}>\n      <Form\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          parent_id: { title: '---', value: 0, key: 0 },\n          active: true,\n          ...activeMenu.data,\n        }}\n        form={form}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.title + index}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                help={\n                  error\n                    ? error[`title.${defaultLang}`]\n                      ? error[`title.${defaultLang}`][0]\n                      : null\n                    : null\n                }\n                validateStatus={error ? 'error' : 'success'}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('name')} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            {languages.map((item, index) => (\n              <Form.Item\n                key={item.locale + index}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={4} />\n              </Form.Item>\n            ))}\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('keywords')}\n              name='keywords'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select mode='tags' style={{ width: '100%' }}></Select>\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('parent.category')}\n              name='parent_id'\n              rules={[{ required: true, message: t('required') }]}\n              help={\n                error ? (error.parent_id ? error.parent_id[0] : null) : null\n              }\n              validateStatus={error ? 'error' : 'success'}\n            >\n              <Select>\n                <Select.Option value={0}>---</Select.Option>\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={4}>\n            <Form.Item label={t('image')}>\n              <MediaUpload\n                type='categories'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={2}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Card>\n  );\n};\nexport default RecipeCategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/branch/index.js",["6189"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { fetchBranch } from '../../../redux/slices/branch';\nimport branchService from '../../../services/seller/branch';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\n\nconst SellerBranch = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { branches, meta, loading } = useSelector(\n    (state) => state.branch,\n    shallowEqual\n  );\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('title'),\n      is_show: true,\n      dataIndex: 'title',\n      key: 'title',\n      render: (_, row) => {\n        return <>{row?.translation?.title}</>;\n      },\n    },\n    {\n      title: t('address'),\n      is_show: true,\n      dataIndex: 'address',\n      key: 'address',\n      render: (_, row) => {\n        return <>{row?.address?.address}</>;\n      },\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      dataIndex: 'options',\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/branch/${row.id}`,\n        id: 'branch_edit',\n        name: t('edit.branch'),\n      })\n    );\n    navigate(`/seller/branch/${row.id}`);\n  };\n\n  const branchDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n\n    branchService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchBranch());\n        toast.success(t('successfully.deleted'));\n        setId(null);\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBranch());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchBranch({ perPage: pageSize, page: current }));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAddBranch = () => {\n    dispatch(\n      addMenu({\n        url: `seller/branch/add`,\n        id: 'add.branch',\n        name: t('add.branch'),\n      })\n    );\n    navigate(`/seller/branch/add`);\n  };\n\n  return (\n    <Card\n      title={t('branch')}\n      extra={\n        <Space wrap>\n          <Button\n            size='small'\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBranch}\n          >\n            {t('add.branch')}\n          </Button>\n          <DeleteButton type='danger' onClick={allDelete}>\n            {t('delete.all')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={branches}\n        pagination={{\n          pageSize: meta?.per_page,\n          page: meta?.current_page,\n          total: meta?.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={branchDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default SellerBranch;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-edit.js",["6190","6191","6192"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin, Steps } from 'antd';\nimport { IMG_URL } from '../../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport { steps } from './steps';\nimport sellerReceptService from '../../../services/seller/reciept';\n\nconst { Step } = Steps;\n\nconst RecieptEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [current, setCurrent] = useState(activeMenu.data?.step || 0);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    sellerReceptService\n      .getById(id)\n      .then((res) => {\n        let recept = res.data;\n        console.log('recept', recept);\n        form.setFieldsValue({\n          ...recept,\n          active_time: Number(recept.active_time),\n          total_time: Number(recept.total_time),\n          title: {\n            [defaultLang]: recept.translation.title,\n          },\n          description: {\n            [defaultLang]: recept.translation.description,\n          },\n          instruction: Object.assign(\n            {},\n            ...recept.instructions.map((ins) => ({\n              [ins.locale]: ins.title,\n            }))\n          ),\n          ingredient: Object.assign(\n            {},\n            ...recept.ingredients.map((ing) => ({\n              [ing.locale]: ing.title,\n            }))\n          ),\n          nutrition: recept.nutritions?.map((nutrition) => ({\n            percentage: Number(nutrition?.percentage),\n            weight: Number(nutrition?.weight),\n            ...Object.assign(\n              {},\n              ...nutrition.translations.flatMap((translation) => ({\n                [translation.locale]: translation.title,\n              }))\n            ),\n          })),\n          category_id: {\n            value: recept.category.id,\n            label: recept.category.translation.title,\n          },\n          stocks: recept.stocks.map((item) => ({\n            stock_id: {\n              value: item.id,\n              label: item.product.translation.title,\n            },\n            ...item,\n          })),\n        });\n        setImage([createImage(recept.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    form.validateFields();\n    const body = {\n      ...values,\n      total_time: values.total_time.toString(),\n      active_time: values.active_time.toString(),\n      category_id: values.category_id.value,\n      images: image?.map((img) => img.name),\n      stocks: values.stocks.map((stock) => ({\n        min_quantity: stock.min_quantity,\n        stock_id: stock.stock_id.value,\n      })),\n      nutrition: values.nutrition?.map((nutrition) => ({\n        ...nutrition,\n        percentage: nutrition?.percentage?.toString(),\n        weight: nutrition.weight.toString(),\n      })),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/recept';\n    sellerReceptService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBox(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.recepe')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n        >\n          <Steps current={current}>\n            {steps.map((item) => (\n              <Step title={t(item.title)} key={item.title} />\n            ))}\n          </Steps>\n          {steps.map((item) => {\n            const Component = item.content;\n            return (\n              <div\n                key={item.title}\n                className={`steps-content ${\n                  item.step !== current + 1 && 'hidden'\n                }`}\n              >\n                <Component\n                  next={next}\n                  prev={prev}\n                  loading={loadingBtn}\n                  image={image}\n                  setImage={setImage}\n                />\n              </div>\n            );\n          })}\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default RecieptEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-add.js",["6193"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Steps } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../../redux/slices/menu';\n\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport sellerReceptService from '../../../services/seller/reciept';\nimport { steps } from './steps';\n\nconst { Step } = Steps;\n\nconst ReceptAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n\n  const [current, setCurrent] = useState(activeMenu.data?.step || 0);\n\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    form.validateFields();\n    const body = {\n      ...values,\n      total_time: values.total_time.toString(),\n      active_time: values.active_time.toString(),\n      images: image?.map((img) => img.name),\n      category_id: values.category_id.value,\n      stocks: values.stocks?.map((stock) => ({\n        min_quantity: stock.min_quantity,\n        stock_id: stock.stock_id.value,\n      })),\n      nutrition: values.nutrition?.map((nutrition) => ({\n        ...nutrition,\n        percentage: nutrition.percentage.toString(),\n        weight: nutrition.weight.toString(),\n      })),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/recept';\n    sellerReceptService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card title={t('add.recepe')} extra={<LanguageList />}>\n      <Form\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n      >\n        <Steps current={current}>\n          {steps.map((item) => (\n            <Step title={t(item.title)} key={item.title} />\n          ))}\n        </Steps>\n        {steps.map((item) => {\n          const Component = item.content;\n          return (\n            <div\n              key={item.title}\n              className={`steps-content ${\n                item.step !== current + 1 && 'hidden'\n              }`}\n            >\n              <Component\n                next={next}\n                prev={prev}\n                loading={loadingBtn}\n                image={image}\n                setImage={setImage}\n              />\n            </div>\n          );\n        })}\n      </Form>\n    </Card>\n  );\n};\n\nexport default ReceptAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/index.js",["6194"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Card, Image, Space, Table } from 'antd';\nimport brandService from 'services/seller/brands';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport DeleteButton from 'components/delete-button';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport FilterColumns from 'components/filter-column';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport CreateBrand from './createBrand';\nimport moment from 'moment';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { sellerfetchBrands } from 'redux/slices/brand';\nimport formatSortType from 'helpers/formatSortType';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport SearchInput from 'components/search-input';\n\nexport default function Brands() {\n  const { t } = useTranslation();\n  const [text, setText] = useState(null);\n  const [id, setId] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { brands, meta, loading, params } = useSelector(\n    (state) => state.brand,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/brand/${row.id}`,\n        id: 'brand_edit',\n        name: t('brands'),\n      }),\n    );\n    navigate(`/seller/brand/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={getImage(img)}\n            alt='img_gallery'\n            width={100}\n            height='auto'\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: 'created_at',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n              disabled={!row.shop_id}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n              disabled={!row.shop_id}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const brandDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    brandService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(sellerfetchBrands({}));\n        setIsModalVisible(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(sellerfetchBrands({}));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(sellerfetchBrands(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const handleCancel = () => setIsModalOpen(false);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  // const allDelete = () => {\n  //   if (id === null || id.length === 0) {\n  //     toast.warning(t('select.the.product'));\n  //   } else {\n  //     setIsModalVisible(true);\n  //     setText(false);\n  //   }\n  // };\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        url: `seller/brand/add`,\n        id: 'seller/brand/add',\n        name: t('add.brand'),\n      }),\n    );\n    navigate(`/seller/brand/add`);\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n  console.log('brands', brands);\n  return (\n    <Card\n      title={t('brands')}\n      extra={\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n          />\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.brands')}\n          </Button>\n          {/* <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton> */}\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={brands}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {isModalOpen && (\n        <CreateBrand handleCancel={handleCancel} isModalOpen={isModalOpen} />\n      )}\n      <CustomModal\n        click={brandDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/story/story-edit.js",["6195","6196"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Row } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport productService from 'services/seller/product';\nimport { DebounceSelect } from 'components/search';\nimport { useTranslation } from 'react-i18next';\nimport storeisService from 'services/seller/storeis';\nimport { fetchStoreis } from 'redux/slices/storeis';\nimport Loading from 'components/loading';\nimport MediaUpload from '../../../components/upload';\n\nconst StoreisEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.images ? [activeMenu.data?.images[0]] : [],\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      name: item,\n      url: item,\n    }));\n\n  const getStory = (alias) => {\n    setLoading(true);\n    storeisService\n      .getById(alias)\n      .then(({ data }) => {\n        form.setFieldsValue({\n          ...data,\n          image: createImages(data.file_urls),\n          products: {\n            label: data.product.translation.title,\n            value: data.product.id,\n          },\n        });\n        setImage(createImages(data.file_urls));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      ...Object.assign(\n        {},\n        ...image.map((item, index) => ({\n          [`file_urls[${index}]`]: item.name,\n        })),\n      ),\n      product_id: values.products.value,\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/stories';\n    storeisService\n      .update(id, body)\n      .then(() => {\n        const data = {\n          shop_id: shop.id,\n        };\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchStoreis(data));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getStory(id);\n    }\n  }, [activeMenu.refetch]);\n\n  function fetchProductsStock(search) {\n    const data = {\n      search,\n      shop_id: shop.id,\n      status: 'published',\n      active: 1,\n      rest: 1,\n    };\n    return productService.getAll(data).then((res) =>\n      res.data.map((product) => ({\n        label: product.translation.title,\n        value: product.id,\n        key: product.id,\n      })),\n    );\n  }\n\n  return (\n    <Card title={t('edit.story')} className='h-100'>\n      {!loading ? (\n        <Form\n          name='story-add'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n          className='d-flex flex-column h-100'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('products')}\n                name={'products'}\n                rules={[\n                  {\n                    required: false,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DebounceSelect\n                  fetchOptions={fetchProductsStock}\n                  debounceTimeout={200}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('image')}\n                name={'image'}\n                rules={[\n                  {\n                    required: image.length === 0,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='banners'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n            <div className='pb-5'>\n              <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                {t('submit')}\n              </Button>\n            </div>\n          </div>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\n\nexport default StoreisEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/story/story-add.js",["6197"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Card, Col, Form, Row } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport productService from 'services/seller/product';\nimport { DebounceSelect } from 'components/search';\nimport { useTranslation } from 'react-i18next';\nimport storeisService from 'services/seller/storeis';\nimport { fetchStoreis } from 'redux/slices/storeis';\nimport MediaUpload from 'components/upload';\n\nconst StoresAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.images ? [activeMenu.data?.images[0]] : [],\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const body = {\n      ...Object.assign(\n        {},\n        ...image.map((item, index) => ({\n          [`file_urls[${index}]`]: item.name,\n        })),\n      ),\n      product_id: values.products.value,\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'seller/stories';\n    storeisService\n      .create(body)\n      .then(() => {\n        const data = {\n          shop_id: shop.id,\n        };\n        toast.success(t('successfully.created'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchStoreis(data));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchProductsStock(search) {\n    const data = {\n      search,\n      shop_id: shop.id,\n      status: 'published',\n      active: 1,\n      rest: 1,\n    };\n    return productService.getAll(data).then((res) =>\n      res.data.map((product) => ({\n        label: product.translation.title,\n        value: product.id,\n      })),\n    );\n  }\n\n  return (\n    <Card title={t('add.story')} className='h-100'>\n      <Form\n        name='story-add'\n        layout='vertical'\n        onFinish={onFinish}\n        form={form}\n        initialValues={{ active: true, ...activeMenu.data }}\n        className='d-flex flex-column h-100'\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('products')}\n              name={'products'}\n              rules={[\n                {\n                  required: false,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchProductsStock}\n                debounceTimeout={200}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('image')}\n              name={'image'}\n              rules={[\n                {\n                  required: image.length === 0,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <MediaUpload\n                type='banners'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n          <div className='pb-5'>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('submit')}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default StoresAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/deliveryBoyReviews.js",["6198","6199"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { DeleteOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from '../../../services/seller/review';\nimport OrderReviewShowModal from './orderReviewShow';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport { sellerfetchDeliveryboyReviews } from '../../../redux/slices/deliveryboyReview';\n\nexport default function SellerDeliveryBoyReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToOrder = (id) => {\n    dispatch(\n      addMenu({\n        id: 'order_details',\n        url: `order/details/${id}`,\n        name: t('order.details'),\n      })\n    );\n    navigate(`/order/details/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('order.id'),\n      dataIndex: 'order',\n      key: 'order',\n      render: (order) => (\n        <div className='text-hover' onClick={() => goToOrder(order?.id)}>\n          #{order?.id}\n        </div>\n      ),\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover'>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('deliveryman'),\n      dataIndex: 'deliveryman',\n      key: 'deliveryman',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover'>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate allowHalf disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.deliveryboyReview,\n    shallowEqual\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    assign: 'deliveryman',\n  };\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(sellerfetchDeliveryboyReviews());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(sellerfetchDeliveryboyReviews(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(sellerfetchDeliveryboyReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } })\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('deliveryboy.reviews')}\n      extra={\n        <Space wrap>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <OrderReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/orderReviews.js",["6200","6201"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from '../../../services/seller/review';\nimport { sellerfetchOrderReviews } from '../../../redux/slices/orderReview';\nimport OrderReviewShowModal from './orderReviewShow';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nimport FilterColumns from '../../../components/filter-column';\n\nexport default function SellerOrderReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToOrder = (id) => {\n    dispatch(\n      addMenu({\n        id: 'order_details',\n        url: `seller/order/details/${id}`,\n        name: t('order.details'),\n      })\n    );\n    navigate(`/seller/order/details/${id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('order.id'),\n      dataIndex: 'order',\n      key: 'order',\n      render: (order) => (\n        <div className='text-hover' onClick={() => goToOrder(order?.id)}>\n          #{order?.id}\n        </div>\n      ),\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover'>\n          {user?.firstname} {user?.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'order',\n      key: 'shop',\n      is_show: true,\n      render: (order) => (\n        <div className='text-hover'>{order.shop?.translation?.title}</div>\n      ),\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n            {/* <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            /> */}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.orderReview,\n    shallowEqual\n  );\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(sellerfetchOrderReviews());\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(sellerfetchOrderReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(sellerfetchOrderReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } })\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  return (\n    <Card\n      title={t('order.reviews')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <OrderReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/productReviews.js",["6202"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { Button, Card, Rate, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport reviewService from '../../../services/seller/review';\nimport { sellerFetchProductReviews } from '../../../redux/slices/productReview';\nimport ProductReviewShowModal from './productReviewShow';\nimport { useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport FilterColumns from '../../../components/filter-column';\n\nexport default function ProductReviews() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToDetail = (row) => {\n    dispatch(\n      addMenu({\n        url: `/users/user/${row.uuid}`,\n        id: 'user_info',\n        name: t('user.info'),\n      }),\n    );\n    navigate(`/users/user/${row.uuid}`, { state: { user_id: row.id } });\n  };\n\n  const goToProduct = (row) => {\n    dispatch(\n      addMenu({\n        id: `product-edit`,\n        url: `product/${row.uuid}`,\n        name: t('edit.product'),\n      }),\n    );\n    navigate(`/product/${row.uuid}`);\n  };\n\n  const goToShop = (row) => {\n    dispatch(\n      addMenu({\n        id: 'edit-shop',\n        url: `shop/${row.uuid}`,\n        name: t('edit.shop'),\n      }),\n    );\n    navigate(`/shop/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('user'),\n      dataIndex: 'user',\n      key: 'user',\n      is_show: true,\n      render: (user) => (\n        <div className='text-hover' onClick={() => goToDetail(user)}>\n          {user.firstname} {user.lastname || ''}\n        </div>\n      ),\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'product',\n      key: 'shop',\n      is_show: true,\n      render: (product) => (\n        <div className='text-hover' onClick={() => goToShop(product.shop)}>\n          {product.shop?.translation?.title}\n        </div>\n      ),\n    },\n    {\n      title: t('product'),\n      dataIndex: 'product',\n      key: 'product',\n      is_show: true,\n      render: (product) => (\n        <div className='text-hover' onClick={() => goToProduct(product)}>\n          {product?.translation?.title}\n        </div>\n      ),\n    },\n    {\n      title: t('rating'),\n      dataIndex: 'rating',\n      key: 'rating',\n      is_show: true,\n      render: (rating) => <Rate disabled defaultValue={rating} />,\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('DD.MM.YYYY'),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EyeOutlined />}\n              onClick={() => setShow(row.id)}\n            />\n            {/* <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            /> */}\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { reviews, meta, loading, params } = useSelector(\n    (state) => state.productReview,\n    shallowEqual,\n  );\n\n  const reviewDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    reviewService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(sellerFetchProductReviews());\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(sellerFetchProductReviews());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      sort: data?.sort,\n      column: data?.column,\n      perPage: data?.perPage,\n      page: data?.page,\n    };\n    dispatch(sellerFetchProductReviews(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({ activeMenu, data: { perPage, page, column, sort } }),\n    );\n  }\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  return (\n    <Card\n      title={t('product.reviews')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={reviews}\n        pagination={{\n          pageSize: params.perPage,\n          page: params.page,\n          total: meta.total,\n          defaultCurrent: params.page,\n        }}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={reviewDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      {show && (\n        <ProductReviewShowModal id={show} handleCancel={() => setShow(null)} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/shop-ads.js",["6203"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Table, Card, Space, Tag } from 'antd';\nimport { fetchShopAdverts } from 'redux/slices/advert';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport SearchInput from 'components/search-input';\nimport FilterColumns from 'components/filter-column';\nimport { disableRefetch } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport numberToPrice from 'helpers/numberToPrice';\nimport advertService from 'services/seller/advert';\nimport { toast } from 'react-toastify';\nimport paymentService from 'services/rest/payment';\nimport { EyeFilled } from '@ant-design/icons';\nimport AdDetail from './ad-detail';\nimport moment from 'moment';\n\nexport default function Advert() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [id, setId] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    shopAdList,\n    loading: listLoading,\n    meta,\n  } = useSelector((state) => state.advert, shallowEqual);\n\n  const [search, setSearch] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handlePurchase = (id) => {\n    setLoading(true);\n    paymentService\n      .getAll()\n      .then((res) => {\n        const wallet = res.data.find((payment) => payment.tag === 'wallet');\n        if (!wallet) {\n          toast.error(t('request.admin.to.enable.payment.from.wallet'));\n          setLoading(false);\n          return;\n        }\n        advertService\n          .purchase(id, { payment_sys_id: wallet?.id })\n          .then(() => {\n            toast.success(t('purchased.successfully'));\n          })\n          .finally(() => {\n            setLoading(false);\n            dispatch(fetchShopAdverts(paramsData));\n          });\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('ad.package'),\n      dataIndex: 'ads_package',\n      is_show: true,\n      render: (ad) => {\n        return (\n          <Space>\n            <span>{ad?.translation?.title}</span>\n            <Button icon={<EyeFilled />} onClick={() => setId(ad.id)} />\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      is_show: true,\n      render: (_, row) => numberToPrice(row?.ads_package?.price),\n    },\n    {\n      title: t('expire_at'),\n      dataIndex: 'expire_at',\n      is_show: true,\n      render: (_, row) => moment(row?.expired_at).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      is_show: true,\n      render: (status) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('transaction'),\n      dataIndex: 'transaction',\n      is_show: true,\n      render: (transaction) => {\n        return (\n          <div>\n            {transaction?.status === 'paid' ? (\n              <Tag color='cyan'>{t(transaction?.status)}</Tag>\n            ) : transaction?.status === 'canceled' ||\n              transaction?.status === 'rejected' ? (\n              <Tag color='error'>{t(transaction?.status)}</Tag>\n            ) : (\n              <Tag color='orange'>{t('not.paid')}</Tag>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              onClick={() => handlePurchase(row.id)}\n              disabled={row.transaction?.status === 'paid'}\n              loading={loading}\n            >\n              {t('purchase')}\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const paramsData = {\n    perPage: 10,\n    page: 1,\n    sort: 'desc',\n    column: 'created_at',\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchShopAdverts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const paramsData = {\n      search,\n    };\n    dispatch(fetchShopAdverts(paramsData));\n  }, [activeMenu.data, search]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchShopAdverts({ perPage: pageSize, page: current }));\n  };\n\n  return (\n    <>\n      <Card className='p-o'>\n        <div className='flex justify-content-between'>\n          <SearchInput\n            style={{ maxWidth: '200px' }}\n            handleChange={(value) => setSearch(value)}\n            placeholder={t('search')}\n          />\n          <div className='flex gap-3'>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </div>\n        </div>\n      </Card>\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          dataSource={shopAdList}\n          columns={columns?.filter((item) => item.is_show)}\n          rowKey={(record) => record.id}\n          loading={listLoading || loading}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      <AdDetail id={id} onClose={() => setId(null)} />\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-zone/index.js",["6204"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { fetchBookingZone } from '../../../redux/slices/booking-zone';\nimport sellerBookingService from '../../../services/seller/booking-zone';\n\nconst BookingZone = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const data = activeMenu?.data;\n\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    search: data?.search ? data.search : undefined,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const { zone, meta, loading } = useSelector(\n    (state) => state.bookingZone,\n    shallowEqual\n  );\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/booking/zone/${row.id}`,\n        id: 'box_edit',\n        name: t('edit.box'),\n      })\n    );\n    navigate(`/seller/booking/zone/${row.id}`);\n  };\n\n  const goToAddBox = () => {\n    dispatch(\n      addMenu({\n        id: 'add-booking-zone',\n        url: 'seller/booking/zone/add',\n        name: t('add.booking.zone'),\n      })\n    );\n    navigate('/seller/booking/zone/add');\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      render: (_, row) => row.translation?.title,\n      is_show: true,\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop',\n      key: 'shop',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Space>\n            <Image\n              src={row.img}\n              alt='img_gallery'\n              width={100}\n              height='auto'\n              className='rounded'\n              preview\n              placeholder\n              key={img + row.id}\n            />\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('area'),\n      dataIndex: 'area',\n      key: 'area',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const brandDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    sellerBookingService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchBookingZone(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchBookingZone(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBookingZone(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap className='justify-content-end w-100'>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddBox}\n          >\n            {t('add.booking.zone')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('booking.zone')}>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={zone}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n      <CustomModal\n        click={brandDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default BookingZone;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orders-board.js",["6205"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Space, Card, DatePicker } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { ClearOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport { fetchOrders as fetchSellerOrders } from '../../../redux/slices/sellerOrders';\nimport SearchInput from '../../../components/search-input';\nimport { DebounceSelect } from '../../../components/search';\nimport userService from '../../../services/seller/user';\nimport { fetchRestOrderStatus } from '../../../redux/slices/orderStatus';\nimport { Context } from '../../../context/context';\nimport { toast } from 'react-toastify';\nimport orderService from '../../../services/seller/order';\nimport Incorporate from './dnd/Incorporate';\nimport {\n  clearItems,\n  fetchAcceptedOrders,\n  fetchCanceledOrders,\n  fetchDeliveredOrders,\n  fetchNewOrders,\n  fetchOnAWayOrders,\n  fetchReadyOrders,\n  fetchCookingOrders,\n  fetchPauseOrders,\n} from '../../../redux/slices/sellerOrders';\nimport { batch } from 'react-redux';\nimport OrderDeliveryman from './orderDeliveryman';\nimport OrderTypeSwitcher from './order-type-switcher';\nimport { clearOrder } from '../../../redux/slices/order';\nimport ShowLocationsMap from './show-locations.map';\nimport DownloadModal from './downloadModal';\nimport CustomModal from '../../../components/modal';\nimport moment from 'moment';\nconst { RangePicker } = DatePicker;\n\nexport default function SellerOrdersBoard() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [id, setId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [dowloadModal, setDowloadModal] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [type, setType] = useState(null);\n  const [dateRange, setDateRange] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const urlParams = useParams();\n  const orderType = urlParams?.type;\n\n  const data = activeMenu?.data;\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/seller/order/details/${row.id}`);\n  };\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    orderService\n      .delete(params)\n      .then(() => {\n        dispatch(clearItems());\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        fetchOrderAllItem({ status: type });\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(clearItems());\n    fetchOrderAllItem();\n  }, [data]);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      const params = {\n        status: data?.status,\n        perPage: 10,\n        delivery_type: orderType,\n      };\n      dispatch(fetchSellerOrders(params));\n      dispatch(fetchRestOrderStatus({}));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const handleFilter = (item, name) => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: { ...data, [name]: item },\n        }),\n      );\n    });\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.getAll(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname || ''}`,\n        value: item.id,\n      }));\n    });\n  }\n\n  const fetchOrdersCase = (params) => {\n    const paramsWithType = {\n      ...params,\n      delivery_type: orderType,\n      delivery_date_from:\n        type === 'scheduled'\n          ? moment().add(1, 'day').format('YYYY-MM-DD')\n          : undefined,\n\n      search: data?.search ? data.search : undefined,\n      user_id: data?.client_id,\n      status: params?.status,\n      shop_id:\n        activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n      date_from: dateRange?.[0]?.format('YYYY-MM-DD') || undefined,\n      date_to: dateRange?.[1]?.format('YYYY-MM-DD') || undefined,\n    };\n    switch (params.status) {\n      case 'new':\n        dispatch(fetchNewOrders(paramsWithType));\n        break;\n      case 'accepted':\n        dispatch(fetchAcceptedOrders(paramsWithType));\n        break;\n      case 'ready':\n        dispatch(fetchReadyOrders(paramsWithType));\n        break;\n      case 'on_a_way':\n        dispatch(fetchOnAWayOrders(paramsWithType));\n        break;\n      case 'delivered':\n        dispatch(fetchDeliveredOrders(paramsWithType));\n        break;\n      case 'canceled':\n        dispatch(fetchCanceledOrders(paramsWithType));\n        break;\n      case 'cooking':\n        dispatch(fetchCookingOrders(paramsWithType));\n        break;\n      case 'pause':\n        dispatch(fetchPauseOrders(paramsWithType));\n        break;\n      default:\n        console.log(`Sorry, we are out of`);\n    }\n  };\n\n  const fetchOrderAllItem = () => {\n    fetchOrdersCase({ status: 'new' });\n    fetchOrdersCase({ status: 'accepted' });\n    fetchOrdersCase({ status: 'ready' });\n    fetchOrdersCase({ status: 'on_a_way' });\n    fetchOrdersCase({ status: 'delivered' });\n    fetchOrdersCase({ status: 'canceled' });\n    fetchOrdersCase({ status: 'cooking' });\n    fetchOrdersCase({ status: 'pause' });\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        }),\n      );\n    });\n    fetchOrderAllItem();\n  };\n\n  const handleCloseModal = () => {\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n    setDowloadModal(null);\n  };\n  const goToAddOrder = () => {\n    dispatch(clearOrder());\n    dispatch(\n      addMenu({\n        id: 'pos.system',\n        url: 'seller/pos-system',\n        name: t('add.order'),\n      }),\n    );\n    navigate('/seller/pos-system', { state: { delivery_type: orderType } });\n  };\n\n  return (\n    <>\n      <Space className='justify-content-end w-100 mb-3'>\n        <OrderTypeSwitcher listType='seller/orders-board' />\n        <Button\n          type='primary'\n          icon={<PlusCircleOutlined />}\n          onClick={goToAddOrder}\n          style={{ width: '100%' }}\n        >\n          {t('add.order')}\n        </Button>\n      </Space>\n      <Card>\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!data?.search}\n          />\n          <DebounceSelect\n            placeholder={t('select.client')}\n            fetchOptions={getUsers}\n            onSelect={(user) => handleFilter(user.value, 'client_id')}\n            onDeselect={() => handleFilter(null, 'client_id')}\n            style={{ minWidth: 200 }}\n            value={data?.client_id}\n          />\n          {type !== 'scheduled' && (\n            <RangePicker\n              defaultValue={dateRange}\n              onChange={(values) => {\n                handleFilter(JSON.stringify(values), 'data_time');\n                setDateRange(values);\n              }}\n              disabledDate={(current) => {\n                return current && current > moment().endOf('day');\n              }}\n              allowClear={true}\n              style={{ width: '100%' }}\n              onClear={() => {\n                dispatch(clearItems());\n                setDateRange(null);\n              }}\n            />\n          )}\n          <Button icon={<ClearOutlined />} onClick={handleClear}>\n            {t('clear')}\n          </Button>\n        </Space>\n      </Card>\n      <Incorporate\n        goToShow={goToShow}\n        fetchOrderAllItem={fetchOrderAllItem}\n        fetchOrders={fetchOrdersCase}\n        setLocationsMap={setLocationsMap}\n        setId={setId}\n        setIsModalVisible={setIsModalVisible}\n        setText={setText}\n        setDowloadModal={setDowloadModal}\n        type={type}\n        setType={setType}\n        orderType={orderType}\n      />\n      <CustomModal\n        click={orderDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setId}\n      />\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {dowloadModal && (\n        <DownloadModal id={dowloadModal} handleCancel={handleCloseModal} />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment-from-partner/copleted-list.js",["6206"],[],"import React, { useEffect, useState } from 'react';\nimport { Space, Table, Card, DatePicker } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\n\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport numberToPrice from 'helpers/numberToPrice';\n\nimport moment from 'moment';\nimport { fetchPaymentFromPartners } from 'redux/slices/paymentToPartners';\nconst { RangePicker } = DatePicker;\n\nexport default function PaymentToPartnersCompleteList() {\n  const { type } = useParams();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const columns = [\n    {\n      title: t('order.id'),\n      is_show: true,\n      dataIndex: 'order_id',\n      key: 'order_id',\n      sorter: true,\n      render: (id) => <span className='text-hover'>#{id}</span>,\n    },\n    {\n      title: t('order.total_price'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction, row) => {\n        return (\n          <span>\n            {numberToPrice(row?.order?.total_price, defaultCurrency.symbol)}\n          </span>\n        );\n      },\n    },\n\n    {\n      title: t('coupon.price'),\n      is_show: true,\n      dataIndex: 'coupon_price',\n      key: 'coupon_price',\n      render: (coupon_price) => numberToPrice(coupon_price),\n    },\n\n    {\n      title: t('total.cashback'),\n      is_show: true,\n      dataIndex: 'point_histories',\n      key: 'point_histories',\n      render: (cashback) => numberToPrice(cashback?.[0]?.price),\n    },\n\n    {\n      title: t('delivery.fee'),\n      is_show: true,\n      dataIndex: 'delivery_fee',\n      key: 'delivery_fee',\n      render: (_, row) => numberToPrice(row?.order?.delivery_fee),\n    },\n\n    {\n      title: t('service.fee'),\n      is_show: true,\n      dataIndex: 'service_fee',\n      key: 'service_fee',\n      render: (_, row) =>\n        numberToPrice(\n          (row?.order?.service_fee || 0) + (row?.order.commission_fee || 0),\n        ),\n    },\n\n    {\n      title: t('seller.fee'),\n      is_show: true,\n      dataIndex: 'seller_fee',\n      key: 'seller_fee',\n      render: (_, row) => numberToPrice(row?.order?.seller_fee),\n    },\n\n    {\n      title: t('payment.type'),\n      is_show: true,\n      dataIndex: 'transaction',\n      key: 'transaction',\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n  ];\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [dateRange, setDateRange] = useState(\n    moment().subtract(1, 'month'),\n    moment(),\n  );\n  const { list, loading, params, meta } = useSelector(\n    (state) => state.paymentToPartners,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    date_from: Array.isArray(dateRange)\n      ? dateRange[0]?.format('YYYY-MM-DD')\n      : moment().subtract(1, 'month').format('YYYY-MM-DD'),\n    date_to: Array.isArray(dateRange)\n      ? dateRange[1]?.format('YYYY-MM-DD')\n      : moment().format('YYYY-MM-DD'),\n    type,\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchPaymentFromPartners(paramsData));\n  }, [data, dateRange, type]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...{ [name]: item } },\n      }),\n    );\n  };\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchPaymentFromPartners(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  return (\n    <>\n      <Card>\n        <div className='flex justify-content-space-between'>\n          <Space\n            wrap\n            className='order-filter'\n            style={{ flex: 1, width: '100%' }}\n          >\n            <RangePicker\n              value={dateRange}\n              onChange={(values) => {\n                handleFilter((prev) => ({\n                  ...prev,\n                  ...{\n                    date_from: values?.[0]?.format('YYYY-MM-DD'),\n                    date_to: values?.[1]?.format('YYYY-MM-DD'),\n                  },\n                }));\n                setDateRange(values);\n              }}\n              disabledDate={(current) => {\n                return current && current > moment().endOf('day');\n              }}\n              style={{ width: '100%' }}\n            />\n          </Space>\n        </div>\n      </Card>\n\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          columns={columns?.filter((items) => items.is_show)}\n          dataSource={list}\n          loading={loading}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n      </Card>\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/coupon-add.js",["6207","6208"],[],"import React, { useState } from 'react';\nimport { Form, Card } from 'antd';\nimport LanguageList from 'components/language-list';\nimport { useNavigate } from 'react-router-dom';\nimport couponService from 'services/seller/coupon';\nimport moment from 'moment';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCoupon } from 'redux/slices/sellerCoupons';\nimport CouponForm from './coupon-form';\nimport { toast } from 'react-toastify';\n\nconst CouponAdd = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const handleSubmit = (values) => {\n    const nextUrl = 'seller/coupons';\n\n    const params = {\n      ...values,\n      shop_id: myShop?.id,\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      qty: Number(values.qty),\n      price: Number(values.price),\n    };\n\n    return couponService.create(params).then((res) => {\n      toast.success(t('successfully.added'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCoupon({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return (\n    <Card title={t('add.coupon')} extra={<LanguageList />}>\n      <CouponForm form={form} handleSubmit={handleSubmit} />\n    </Card>\n  );\n};\n\nexport default CouponAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/coupon-edit.js",["6209"],[],"import React, { useEffect, useState } from 'react';\nimport { Form, Card } from 'antd';\nimport LanguageList from 'components/language-list';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport couponService from 'services/seller/coupon';\nimport moment from 'moment';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchCoupon } from 'redux/slices/sellerCoupons';\nimport CouponForm from './coupon-form';\nimport { toast } from 'react-toastify';\n\nconst CouponEdit = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function getCoupon(id) {\n    setLoading(true);\n    couponService\n      .getById(id)\n      .then(({ data }) => {\n        const body = {\n          ...data,\n          ...getLanguageFields(data),\n          expired_at: moment(data.expired_at, 'YYYY-MM-DD'),\n        };\n        form.setFieldsValue(body);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  const handleSubmit = (values) => {\n    const nextUrl = 'seller/coupons';\n\n    const params = {\n      ...values,\n      shop_id: myShop?.id,\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      qty: Number(values.qty),\n      price: Number(values.price),\n    };\n\n    return couponService.update(id, params).then((res) => {\n      toast.success(t('successfully.updated'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchCoupon({ shop_id: myShop?.id }));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getCoupon(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.coupon')} extra={<LanguageList />} loading={loading}>\n      <CouponForm form={form} handleSubmit={handleSubmit} />\n    </Card>\n  );\n};\n\nexport default CouponEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-value.js",["6210"],[],"import React, { useState, useEffect, useContext } from 'react';\nimport { Button, Space, Table, Image, Card } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerExtraValue } from 'redux/slices/extraValue';\nimport extraService from 'services/seller/extras';\nimport ExtraValueModal from './extra-value-modal';\nimport DeleteButton from 'components/delete-button';\nimport { IMG_URL } from 'configs/app-global';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\n\nexport default function ExtraValue() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { extraValues, loading, meta } = useSelector(\n    (state) => state.extraValue,\n    shallowEqual,\n  );\n  const { setIsModalVisible } = useContext(Context);\n  const data = activeMenu?.data;\n\n  const paramsData = {\n    perPage: data?.perPage || 10,\n    page: data?.page || 1,\n    group_id: data?.group_id || null,\n  };\n\n  const [id, setId] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'extra_group_id',\n      key: 'extra_group_id',\n      is_show: true,\n      render: (_, row) => row?.group?.translation?.title,\n    },\n    {\n      title: t('value'),\n      dataIndex: 'value',\n      key: 'value',\n      is_show: true,\n      render: (value, row) => (\n        <Space className='extras'>\n          {row?.group?.type === 'color' ? (\n            <div\n              className='extra-color-wrapper-contain'\n              style={{ backgroundColor: row?.value }}\n            />\n          ) : null}\n          {row?.group?.type === 'image' ? (\n            <Image\n              width={100}\n              src={IMG_URL + row?.value}\n              className='borderRadius'\n            />\n          ) : null}\n          {row?.group?.type === 'image' ? null : <span>{row?.value}</span>}\n        </Space>\n      ),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setId([record.id]);\n              setIsModalVisible(true);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => setModal(null);\n\n  const deleteExtra = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    extraService\n      .deleteValue(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchSellerExtraValue(paramsData));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchSellerExtraValue(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerExtraValue(paramsData));\n  }, [activeMenu?.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column } = sorter;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('extra.value')}\n      extra={\n        <Space wrap>\n          <DeleteButton icon={<DeleteOutlined />} onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.extra')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        rowSelection={rowSelection}\n        dataSource={extraValues}\n        rowKey={(record) => record.id}\n        pagination={{\n          pageSize: 10,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        onChange={onChangePagination}\n      />\n      {modal && (\n        <ExtraValueModal\n          isVisible={modal}\n          modal={modal}\n          handleCancel={handleCancel}\n          paramsData={paramsData}\n        />\n      )}\n      <CustomModal\n        click={deleteExtra}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-group.js",["6211","6212","6213","6214"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n  PlusOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport extraService from '../../../../services/seller/extras';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerExtraGroups } from '../../../../redux/slices/extraGroup';\nimport { disableRefetch, setMenuData } from '../../../../redux/slices/menu';\nimport ExtraGroupModal from './extra-group-modal';\nimport DeleteButton from '../../../../components/delete-button';\nimport ExtraGroupShowModal from './extra-group-show-modal';\nimport FilterColumns from '../../../../components/filter-column';\nimport CustomModal from '../../../../components/modal';\nimport { Context } from '../../../../context/context';\nimport useDidUpdate from 'helpers/useDidUpdate';\n\nimport SearchInput from '../../../../components/search-input';\n\nexport default function SellerExtraGroup() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { extraGroups, loading, meta } = useSelector(\n    (state) => state.extraGroup,\n    shallowEqual\n  );\n\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    column: data?.column,\n    perPage: data?.perPage,\n    sort: data?.sort,\n    page: data?.page,\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EyeOutlined />}\n            onClick={() => setShow(record.id)}\n          />\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n            disabled={!row?.shop_id}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([record.id]);\n              setText(true);\n            }}\n            disabled={!row?.shop_id}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => {\n    setShow(null);\n    setModal(null);\n  };\n\n  const onDeleteExtra = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    extraService\n      .deleteGroup(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchSellerExtraGroups());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerExtraGroups(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerExtraGroups(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      })\n    );\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column } = sorter;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column },\n      })\n    );\n  }\n\n  return (\n    <Card\n      title={t('extra.group')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.extra')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={extraGroups}\n        rowKey={(record) => record.id}\n        pagination={{\n          pageSize: paramsData.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        onChange={onChangePagination}\n      />\n      {modal && <ExtraGroupModal modal={modal} handleCancel={handleCancel} />}\n      <CustomModal\n        click={onDeleteExtra}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n      {show && <ExtraGroupShowModal open={show} handleClose={handleCancel} />}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-value.js",["6215"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Space, Table, Image, Card } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerPropertyValue } from 'redux/slices/propertyValue';\nimport propertyService from 'services/seller/property';\nimport PropertyValueModal from './property-value-modal';\nimport PropertyDeleteModal from './property-delete-modal';\nimport DeleteButton from 'components/delete-button';\nimport { IMG_URL } from 'configs/app-global';\nimport { disableRefetch } from 'redux/slices/menu';\nimport FilterColumns from 'components/filter-column';\n\nexport default function SellerPropertyValue() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { propertyValues, loading } = useSelector(\n    (state) => state.propertyValue,\n    shallowEqual\n  );\n\n  const [id, setId] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'extra_group_id',\n      key: 'extra_group_id',\n      is_show: true,\n      render: (_, row) => row.group?.translation?.title,\n    },\n    {\n      title: t('value'),\n      dataIndex: 'value',\n      key: 'value',\n      is_show: true,\n      render: (_, row) => (\n        <Space className='extras'>\n          {row.group.type === 'color' ? (\n            <div\n              className='extra-color-wrapper-contain'\n              style={{ backgroundColor: row.value }}\n            />\n          ) : null}\n          {row.group.type === 'image' ? (\n            <Image\n              width={100}\n              src={IMG_URL + row.value}\n              className='borderRadius'\n            />\n          ) : null}\n          {row.group.type === 'image' ? null : <span>{row.value}</span>}\n        </Space>\n      ),\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n            disabled={!record?.group?.shop_id}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => setId([record.id])}\n            disabled={!record?.group?.shop_id}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => setModal(null);\n\n  const deleteProperty = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    propertyService\n      .deleteValue(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchSellerPropertyValue());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerPropertyValue());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card\n      title={t('property.value')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.property')}\n          </Button>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={propertyValues}\n        rowKey={(record) => record.id}\n        pagination={false}\n      />\n      {modal && (\n        <PropertyValueModal modal={modal} handleCancel={handleCancel} />\n      )}\n      {id && (\n        <PropertyDeleteModal\n          id={id}\n          click={deleteProperty}\n          text={t('delete.property')}\n          loading={loadingBtn}\n          handleClose={() => setId(null)}\n        />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/edit.js",["6216"],[],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Form } from 'antd';\nimport LooksForm from './form';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport sellerLooksService from 'services/seller/banner';\nimport Loading from 'components/loading';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nexport default function EditLook() {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const { id } = useParams();\n\n  const [loading, setLoading] = useState(false);\n\n  const fetchLook = (id) => {\n    setLoading(true);\n\n    const params = {\n      type: 'look',\n    };\n\n    sellerLooksService\n      .getById(id, params)\n      .then((res) => {\n        const data = res?.data;\n        const body = {\n          [`title[${data?.translation?.locale}]`]: data?.translation?.title,\n          [`description[${data?.translation?.locale}]`]:\n            data?.translation?.description,\n          products: data?.products?.map((product) => ({\n            label: product?.translation?.title,\n            value: product?.id,\n            key: product?.id,\n          })),\n          image: data?.galleries?.map((img) => ({\n            uid: img.id,\n            name: img.path,\n            url: img.path,\n          })),\n          active: Boolean(data?.active),\n        };\n\n        form.setFieldsValue(body);\n        dispatch(setMenuData({ activeMenu, data: body }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchLook(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const handleSubmit = (values, image) => {\n    const body = {\n      type: 'look',\n      active: Number(values.active),\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      products: values.products.map((i) => i.value),\n      images: image.map((image) => image.name),\n    };\n\n    return sellerLooksService.update(id, body);\n  };\n\n  return (\n    <Fragment>\n      {!loading ? (\n        <LooksForm form={form} handleSubmit={handleSubmit} />\n      ) : (\n        <Loading />\n      )}\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-group.js",["6217","6218"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerPropertyGroups } from 'redux/slices/propertyGroup';\nimport { disableRefetch, setMenuData } from 'redux/slices/menu';\nimport PropertyGroupModal from './property-group-modal';\nimport DeleteButton from 'components/delete-button';\nimport PropertyGroupShowModal from './property-group-show-modal';\nimport FilterColumns from 'components/filter-column';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport propertyService from 'services/seller/property';\n\nexport default function SellerPropertyGroup() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { setIsModalVisible } = useContext(Context);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { propertyGroups, loading, meta } = useSelector(\n    (state) => state.propertyGroup,\n    shallowEqual\n  );\n\n  const [id, setId] = useState(null);\n  const [show, setShow] = useState(null);\n  const [modal, setModal] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    column: data?.column,\n    perPage: data?.perPage,\n    sort: data?.sort,\n    page: data?.page,\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'translation',\n      key: 'translation',\n      is_show: true,\n      render: (translation) => translation?.title,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      key: 'type',\n      is_show: true,\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      render: (record, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EyeOutlined />}\n            onClick={() => setShow(record.id)}\n          />\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => setModal(record)}\n            disabled={!row?.shop}\n          />\n          <DeleteButton\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([record.id]);\n              setText(true);\n            }}\n            disabled={!row?.shop}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const handleCancel = () => {\n    setShow(null);\n    setModal(null);\n  };\n\n  const onDeleteExtra = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    propertyService\n      .deleteGroup(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        setId(null);\n        dispatch(fetchSellerPropertyGroups());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerPropertyGroups(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerPropertyGroups(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, [name]: item },\n      })\n    );\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column } = sorter;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column },\n      })\n    );\n  }\n\n  return (\n    <Card\n      title={t('property.group')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={() => setModal({})}\n          >\n            {t('add.property')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={propertyGroups}\n        rowKey={(record) => record.id}\n        pagination={{\n          pageSize: paramsData.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        onChange={onChangePagination}\n      />\n      {modal && (\n        <PropertyGroupModal modal={modal} handleCancel={handleCancel} />\n      )}\n      <CustomModal\n        click={onDeleteExtra}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n      {show && (\n        <PropertyGroupShowModal open={show} handleClose={handleCancel} />\n      )}\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payment/index.js",["6219"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { addMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport CustomModal from '../../../components/modal';\nimport { toast } from 'react-toastify';\nimport { Context } from '../../../context/context';\nimport { fetchSellerPayments } from '../../../redux/slices/payment';\nimport paymentService from '../../../services/seller/payment';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\n\nexport default function SellerPayment() {\n  const { t } = useTranslation();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const navigate = useNavigate();\n  const [text, setText] = useState(null);\n  const { payments, loading } = useSelector(\n    (state) => state.payment,\n    shallowEqual\n  );\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      is_show: true,\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: t('title'),\n      is_show: true,\n      dataIndex: 'title',\n      key: 'title',\n      render: (title, row) => {\n        return <>{row.payment?.tag}</>;\n      },\n    },\n    {\n      title: t('options'),\n      is_show: true,\n      key: 'options',\n      dataIndex: 'options',\n      render: (data, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/payments/${row.id}`,\n        id: 'payments_edit',\n        name: t('edit.payments'),\n      })\n    );\n    navigate(`/seller/payments/${row.id}`);\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerPayments());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchSellerPayments({ perPage: pageSize, page: current }));\n  };\n\n  const paymentDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    paymentService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchSellerPayments());\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.payment',\n        url: 'seller/payments/add',\n        name: t('add.payment'),\n      })\n    );\n    navigate('/seller/payments/add');\n  };\n\n  return (\n    <Card\n      title={t('payment')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.payment')}\n          </Button>\n          <DeleteButton className='' type='danger' onClick={allDelete}>\n            {t('delete.all')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={payments}\n        rowKey={(record) => record.id}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={paymentDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/price-edit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recipe-categories/index.js",["6220"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  ClearOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table, Tabs, Tag, Switch } from 'antd';\nimport { export_url } from '../../../configs/app-global';\nimport { Context } from '../../../context/context';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport sellerCategoryService from '../../../services/seller/category';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport SearchInput from '../../../components/search-input';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport formatSortType from '../../../helpers/formatSortType';\nimport { fetchSellerRecipeCategories } from '../../../redux/slices/recipe-category';\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst { TabPane } = Tabs;\nconst roles = ['all', 'pending', 'published', 'unpublished'];\n\nconst RecipeCategories = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const [active, setActive] = useState(null);\n  const immutable = activeMenu.data?.role || role;\n\n  function goToEdit(row) {\n    dispatch(\n      addMenu({\n        url: `seller/recipe-category/edit/${row.uuid}`,\n        id: 'category_edit',\n        name: t('edit.category'),\n      })\n    );\n    navigate(`/seller/recipe-category/edit/${row.uuid}`, { state: 'edit' });\n  }\n\n  const goToAddCategory = () => {\n    dispatch(\n      addMenu({\n        id: 'category-add',\n        url: 'seller/recipe-category/add',\n        name: t('add.category'),\n      })\n    );\n    navigate('/seller/recipe-category/add');\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        url: `seller/recipe-categories/import`,\n        id: 'category_import',\n        name: t('import.category'),\n      })\n    );\n    navigate(`/seller/recipe-categories/import`);\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `category-clone`,\n        url: `seller/recipe-category-clone/${uuid}`,\n        name: t('category.clone'),\n      })\n    );\n    navigate(`/seller/recipe-category-clone/${uuid}`, { state: 'clone' });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={img || 'https://via.placeholder.com/150'}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { categories, meta, loading } = useSelector(\n    (state) => state.recipeCategory,\n    shallowEqual\n  );\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    pageSize: meta.per_page,\n    page: data?.page || 1,\n    status: immutable === 'all' ? undefined : immutable,\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    sellerCategoryService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchSellerRecipeCategories(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerRecipeCategories(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerRecipeCategories(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const excelExport = () => {\n    setDownloading(true);\n    sellerCategoryService\n      .export()\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      })\n    );\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    sellerCategoryService.setActive(id).then(() => {\n      setLoadingBtn(false);\n      dispatch(fetchSellerRecipeCategories(paramsData));\n      setIsModalVisible(false);\n    });\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            className='w-25'\n            handleChange={(e) => {\n              handleFilter({ search: e });\n            }}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button style={{ minWidth: 150 }} onClick={goToImport}>\n            <CgImport className='mr-2' />\n            {t('import')}\n          </Button>\n          <Button\n            style={{ minWidth: 150 }}\n            loading={downloading}\n            onClick={excelExport}\n          >\n            <CgExport className='mr-2' />\n            {t('export')}\n          </Button>\n          <Button\n            icon={<ClearOutlined />}\n            onClick={handleClear}\n            disabled={!activeMenu.data}\n            style={{ minWidth: 100 }}\n          />\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAddCategory}\n          >\n            {t('add.category')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('categories')}>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={categories}\n          pagination={{\n            pageSize: meta.per_page,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n\n      <CustomModal\n        click={active ? handleActive : categoryDelete}\n        text={\n          active\n            ? t('set.active.product')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        setText={setId}\n        setActive={setActive}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default RecipeCategories;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/price-add.js",["6221"],[],"import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Form } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport deliveryPriceService from 'services/seller/delivery-price';\nimport { fetchSellerDeliveryPrice } from 'redux/slices/delivery-price';\nimport PriceForm from './price-form';\n\nconst AddDeliveryPrice = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    const { area, city, country, region, price, fitting_rooms, active } =\n      values;\n\n    const body = {\n      price,\n      fitting_rooms,\n      active: Number(active),\n      area_id: area?.value,\n      city_id: city?.value,\n      country_id: country?.value,\n      region_id: region?.value,\n      address: getTranslationFields(languages, values, 'address'),\n      shop_id: myShop?.id,\n    };\n    const nextUrl = 'seller/delivery-price';\n\n    return deliveryPriceService.create(body).then(() => {\n      toast.success(t('successfully.created'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchSellerDeliveryPrice({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return <PriceForm form={form} handleSubmit={onFinish} />;\n};\n\nexport default AddDeliveryPrice;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/index.js",["6222","6223","6224","6225"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Table } from 'antd';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { fetchSellerRecepts } from '../../../redux/slices/reciept';\nimport sellerReceptService from '../../../services/seller/reciept';\nimport { IMG_URL } from '../../../configs/app-global';\n\nconst Reciepts = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('published');\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu?.data;\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n\n  const paramsData = {\n    sort: data?.sort,\n    column: data?.column,\n    search: data?.search ? data.search : undefined,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const { sellerReciepts, meta, loading } = useSelector(\n    (state) => state.reciept,\n    shallowEqual\n  );\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/recept/edit/${row.id}`,\n        id: 'recepe_edit',\n        name: t('edit.recepe'),\n      })\n    );\n    navigate(`/seller/recept/edit/${row.id}`, { state: 'edit' });\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'recepe_add',\n        url: 'seller/recept/add',\n        name: t('add.recepe'),\n      })\n    );\n    navigate('/seller/recept/add');\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      sorter: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      render: (_, row) => row.translation?.title,\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => (\n        <Image\n          width={100}\n          src={IMG_URL + img}\n          preview\n          placeholder\n          className='rounded'\n        />\n      ),\n    },\n    {\n      title: t('recipe.category'),\n      dataIndex: 'category',\n      key: 'category',\n      is_show: true,\n      render: (category) => category?.translation?.title,\n    },\n    {\n      title: t('discount'),\n      dataIndex: 'discount',\n      key: 'discount',\n      is_show: true,\n      render: (_, row) =>\n        row.discount_type === 'fix'\n          ? numberToPrice(row.discount_price, defaultCurrency.symbol)\n          : `${row.discount_price} %`,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const brandDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    sellerReceptService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchSellerRecepts(paramsData));\n        setIsModalVisible(false);\n        setText(null);\n      })\n      .finally(() => {\n        setId(null);\n        setLoadingBtn(false);\n      });\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerRecepts(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerRecepts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      })\n    );\n  };\n\n  return (\n    <>\n      <Card className='p-0'>\n        <Space wrap className='justify-content-end w-100'>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.recepe')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card title={t('recepes')}>\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={sellerReciepts}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n      <CustomModal\n        click={brandDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default Reciepts;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/deliverymen.js",["6226","6227"],[],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Table, Tag } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { useSelector, useDispatch, shallowEqual, batch } from 'react-redux';\nimport { fetchSellerDeliverymans } from 'redux/slices/deliveryman';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport useDemo from 'helpers/useDemo';\nimport hideEmail from 'components/hideEmail';\nimport { IMG_URL } from 'configs/app-global';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport DeleteButton from 'components/delete-button';\nimport SearchInput from 'components/search-input';\nimport DeliverymenStatusModal from './status-change-modal';\nimport { useNavigate } from 'react-router-dom';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nfunction SellerDeliverymen() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { isDemo } = useDemo();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { deliverymans, params, loading, meta } = useSelector(\n    (state) => state.deliveryman,\n    shallowEqual,\n  );\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const [id, setId] = useState(null);\n  const [statusChange, setStatusChange] = useState(null);\n\n  const paramsData = {\n    search: activeMenu?.data?.search ?? null,\n    ...params,\n  };\n\n  if (!paramsData?.search?.length) delete paramsData?.search;\n\n  const columns = [\n    { title: t('id'), is_show: true, dataIndex: 'id', key: 'id' },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      is_show: true,\n      render: (img) => {\n        return (\n          <Image\n            width={100}\n            src={IMG_URL + img}\n            placeholder\n            style={{ borderRadius: 4 }}\n          />\n        );\n      },\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => (row?.firstname || '') + ' ' + (row?.lastname || ''),\n    },\n    {\n      title: t('email'),\n      dataIndex: 'email',\n      key: 'email',\n      is_show: true,\n      render: (email) =>\n        isDemo || ReactAppIsDemo === 'true' ? hideEmail(email) : email,\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      key: 'status',\n      is_show: true,\n      render: (_, row) => {\n        const invite = row?.invitations?.filter(\n          (item) => item?.shop_id === myShop?.id,\n        )?.[0];\n\n        return (\n          <div>\n            {invite?.status === 'new' ? (\n              <Tag color='blue'>{t(invite?.status)}</Tag>\n            ) : invite?.status === 'rejected' ? (\n              <Tag color='error'>{t(invite?.status)}</Tag>\n            ) : (\n              <Tag color='cyan'>{t(invite?.status)}</Tag>\n            )}\n            {myShop?.delivery_type === 2 && (\n              <EditOutlined\n                onClick={() => setStatusChange({ ...row, invite })}\n              />\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      key: 'options',\n      is_show: false,\n      render: () => {\n        return (\n          <Space>\n            <Button type='primary' icon={<EditOutlined />} />\n            <DeleteButton icon={<DeleteOutlined />} />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerDeliverymans(paramsData));\n  }, [activeMenu.data?.search]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchSellerDeliverymans(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const onChangePagination = ({ pageSize, current }) => {\n    const params = {\n      ...paramsData,\n      perPage: pageSize,\n      page: current,\n    };\n\n    dispatch(fetchSellerDeliverymans(params));\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'seller-deliverymen-add',\n        url: `seller/deliverymen/add`,\n        name: t('add.deliveryman'),\n      }),\n    );\n    navigate('add', { state: { paramsData } });\n  };\n\n  return (\n    <Fragment>\n      <Card>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n          />\n        </Space>\n        {myShop?.delivery_type === 2 && (\n          <Button style={{ float: 'right' }} type='primary' onClick={goToAdd}>\n            {t('add.deliveryman')}\n          </Button>\n        )}\n      </Card>\n      <Card>\n        <Table\n          loading={loading}\n          dataSource={deliverymans || []}\n          columns={columns?.filter((item) => item?.is_show)}\n          scroll={{ x: true }}\n          rowKey={(row) => row.id}\n          // rowSelection={rowSelection}\n          pagination={{\n            pageSize: meta?.per_page,\n            page: meta?.current_page,\n            total: meta?.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      {statusChange && (\n        <DeliverymenStatusModal\n          data={statusChange}\n          handleCancel={() => setStatusChange(null)}\n          paramsData={paramsData}\n        />\n      )}\n    </Fragment>\n  );\n}\n\nexport default SellerDeliverymen;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/index.js",["6228","6229","6230","6231","6232"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Table, Card, Space, Form } from 'antd';\nimport { fetchSellerAdverts, fetchShopAdverts } from 'redux/slices/advert';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport SearchInput from 'components/search-input';\nimport FilterColumns from 'components/filter-column';\nimport { addMenu, disableRefetch } from 'redux/slices/menu';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport numberToPrice from 'helpers/numberToPrice';\nimport advertService from 'services/seller/advert';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { EyeFilled } from '@ant-design/icons';\nimport AdDetail from './ad-detail';\nimport AssignProduct from './assign-product';\nexport default function Advert() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [id, setId] = useState(null);\n  const [isAddProduct, setIsAddProduct] = useState(null);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    advertList,\n    loading: listLoading,\n    meta,\n  } = useSelector((state) => state.advert, shallowEqual);\n\n  const [search, setSearch] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handlePurchase = ({ product_ids, ads_package_id }) => {\n    setLoading(true);\n    advertService\n      .create({ ads_package_id, product_ids })\n      .then(() => {\n        toast.success(t('assigned.successfully'));\n        form.resetFields();\n        // dispatch(\n        //   addMenu({\n        //     id: 'shop_ads',\n        //     url: 'seller/shop-ads',\n        //     name: t('ads'),\n        //   })\n        // );\n        // dispatch(fetchShopAdverts());\n        // navigate('/seller/shop-ads');\n      })\n      .finally(() => {\n        setLoading(false);\n        setIsAddProduct(null);\n      });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      is_show: true,\n      render: (_, row) => {\n        return <span>{row?.translation?.title}</span>;\n      },\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      is_show: true,\n      render: (price) => numberToPrice(price),\n    },\n\n    {\n      title: t('time'),\n      dataIndex: 'time',\n      is_show: true,\n      render: (time, row) => (\n        <span>\n          {time} {row.time_type}\n        </span>\n      ),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeFilled />} onClick={() => setId(row.id)} />\n            <Button\n              onClick={() => setIsAddProduct(row.id)}\n              // onClick={() => handlePurchase(row.id)}\n              loading={loading}\n            >\n              {t('assign')}\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const paramsData = {\n    perPage: 10,\n    page: 1,\n    active: 1,\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerAdverts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    const data = activeMenu.data;\n    const paramsData = {\n      search,\n    };\n    dispatch(fetchSellerAdverts(paramsData));\n  }, [activeMenu.data, search]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(fetchSellerAdverts({ perPage: pageSize, page: current }));\n  };\n\n  return (\n    <>\n      <Card className='p-o'>\n        <div className='flex justify-content-between'>\n          <SearchInput\n            style={{ maxWidth: '200px' }}\n            handleChange={(value) => setSearch(value)}\n            placeholder={t('search')}\n          />\n          <div className='flex gap-3'>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </div>\n        </div>\n      </Card>\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          dataSource={advertList}\n          columns={columns?.filter((item) => item.is_show)}\n          rowKey={(record) => record.id}\n          loading={listLoading || loading}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      <AdDetail id={id} onClose={() => setId(null)} />\n      <AssignProduct\n        id={isAddProduct}\n        onClose={() => setIsAddProduct(null)}\n        handlePurchase={handlePurchase}\n        loading={loading}\n        form={form}\n      />\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/story/index.js",["6233"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Table } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../../components/delete-button';\nimport storeisService from '../../../services/seller/storeis';\nimport { fetchStoreis } from '../../../redux/slices/storeis';\nimport FilterColumns from '../../../components/filter-column';\nimport useDemo from '../../../helpers/useDemo';\n\nconst Storeis = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [text, setText] = useState(null);\n  const { isDemo } = useDemo();\n\n  const goToEdit = (row) => {\n    if (isDemo) {\n      toast.warning(t('cannot.work.demo'));\n      return;\n    }\n    dispatch(\n      addMenu({\n        url: `seller/story/${row.id}`,\n        id: 'story_edit',\n        name: t('edit.story'),\n      })\n    );\n    navigate(`/seller/story/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'file_urls',\n      key: 'file_urls',\n      is_show: true,\n      render: (file_urls) => {\n        return (\n          <Image\n            src={file_urls ? file_urls[0] : 'https://via.placeholder.com/150'}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n          />\n        );\n      },\n    },\n    {\n      title: t('product'),\n      dataIndex: 'stock',\n      key: 'stock',\n      is_show: true,\n      render: (_, row) => row?.product?.translation?.title,\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n              setText(true);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { storeis, meta, loading } = useSelector(\n    (state) => state.storeis,\n    shallowEqual\n  );\n\n  const bannerDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    storeisService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchStoreis());\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    const data = {\n      shop_id: shop.id,\n    };\n    if (activeMenu.refetch) {\n      dispatch(fetchStoreis(data));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n    dispatch(\n      fetchStoreis({ perPage: pageSize, page: current, shop_id: shop.id })\n    );\n  };\n\n  const onSelectChange = (newSelectedRowKeys) => {\n    setId(newSelectedRowKeys);\n  };\n\n  const rowSelection = {\n    id,\n    onChange: onSelectChange,\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const goToAdd = () => {\n    if (isDemo) {\n      toast.warning(t('cannot.work.demo'));\n      return;\n    }\n    dispatch(\n      addMenu({\n        id: 'add.story',\n        url: `seller/story/add`,\n        name: t('add.story'),\n      })\n    );\n    navigate(`/seller/story/add`);\n  };\n\n  return (\n    <Card\n      title={t('stories')}\n      extra={\n        <Space>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.story')}\n          </Button>\n          <DeleteButton className='' type='danger' onClick={allDelete}>\n            {t('delete.all')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={storeis}\n        pagination={{\n          pageSize: meta.per_page,\n          page: meta.current_page,\n          total: meta.total,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={bannerDelete}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n};\n\nexport default Storeis;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/index.js",["6234"],[],"import React, { Fragment, useContext, useState, useEffect } from 'react';\nimport { Button, Space, Switch, Table, Image, Card } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { IMG_URL } from 'configs/app-global';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport DeleteButton from 'components/delete-button';\nimport SearchInput from 'components/search-input';\nimport { Context } from 'context/context';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { sellerFetchLooks } from 'redux/slices/looks';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport sellerLooksService from 'services/seller/banner';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function Looks() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { looks, loading, params, meta } = useSelector(\n    (state) => state.looks,\n    shallowEqual,\n  );\n\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [active, setActive] = useState(false);\n\n  const paramsData = {\n    search: activeMenu?.data?.search ?? null,\n    ...params,\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      key: 'title',\n      is_show: true,\n      render: (_, record) => record?.translation?.title,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (_, record) => (\n        <Image\n          width={100}\n          height={100}\n          src={\n            !!record?.img\n              ? IMG_URL + record?.img\n              : 'https://via.placeholder.com/150'\n          }\n          preview={!!record?.img}\n          placeholder\n          style={{ borderRadius: 4, objectFit: 'cover' }}\n        />\n      ),\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (_, record) =>\n        moment(record?.created_at).format('DD-MM-YYYY HH:mm'),\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      key: 'active',\n      is_show: true,\n      render: (_, record) => {\n        return (\n          <Switch\n            onChange={() => {\n              setId([record?.id]);\n              setActive(true);\n              setIsModalVisible(true);\n            }}\n            checked={record?.active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, record) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(record?.id)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([record.id]);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    sellerLooksService\n      .setActive(id)\n      .then(() => {\n        dispatch(sellerFetchLooks({ paramsData }));\n        toast.success(t('successfully.updated'));\n        setIsModalVisible(false);\n        setActive(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleDeleteLook = () => {\n    setLoadingBtn(true);\n\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n\n    sellerLooksService\n      .delete(params)\n      .then(() => {\n        dispatch(sellerFetchLooks({ paramsData }));\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        setActive(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const deleteSelected = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      }),\n    );\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'look_add',\n        url: 'seller/looks/add',\n        name: 'add.look',\n      }),\n    );\n    clearData();\n    navigate('add');\n  };\n\n  const goToEdit = (id) => {\n    dispatch(\n      addMenu({\n        id: 'look_edit',\n        url: `seller/looks/${id}`,\n        name: 'edit.look',\n      }),\n    );\n    clearData();\n    navigate(`${id}`);\n  };\n\n  const onChangePagination = (pageNumber) => {\n    const { pageSize, current } = pageNumber;\n\n    const params = {\n      ...paramsData,\n      perPage: pageSize,\n      page: current,\n    };\n\n    dispatch(sellerFetchLooks(params));\n  };\n\n  useDidUpdate(() => {\n    dispatch(sellerFetchLooks(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(sellerFetchLooks(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Fragment>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            style={{ minWidth: 300 }}\n            handleChange={(e) => handleFilter({ search: e })}\n          />\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.looks')}\n          </Button>\n          <DeleteButton icon={<DeleteOutlined />} onClick={deleteSelected}>\n            {t('delete.selected')}\n          </DeleteButton>\n        </Space>\n      </Card>\n      <Card>\n        <Table\n          scroll={{ x: true }}\n          rowKey={(record) => record.id}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={looks}\n          loading={loading}\n          pagination={{\n            pageSize: meta.per_page,\n            page: meta.current_page,\n            total: meta.total,\n          }}\n          onChange={onChangePagination}\n        />\n      </Card>\n      <CustomModal\n        click={active ? handleActive : handleDeleteLook}\n        text={\n          active\n            ? t('set.active')\n            : t('are.you.sure.you.want.to.delete.the.selected.products')\n        }\n        loading={loadingBtn}\n        setActive={setActive}\n      />\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/index.js",["6235"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table, Tag } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Context } from 'context/context';\nimport CustomModal from 'components/modal';\nimport { toast } from 'react-toastify';\nimport couponService from 'services/seller/coupon';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchCoupon } from 'redux/slices/sellerCoupons';\nimport formatSortType from 'helpers/formatSortType';\n\nconst SellerCoupon = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/coupons/${row.id}`,\n        id: 'coupon_edit',\n        name: t('edit.coupon'),\n      }),\n    );\n    navigate(`${row.id}`);\n  };\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'add.coupon',\n        url: `seller/coupons/add`,\n        name: t('add.coupon'),\n      }),\n    );\n    navigate(`add`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n    },\n    {\n      title: t('title'),\n      dataIndex: 'title',\n      is_show: true,\n      render: (_, row) => row.translation?.title,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      is_show: true,\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      is_show: true,\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      is_show: true,\n    },\n    {\n      title: t('quantity'),\n      dataIndex: 'qty',\n      is_show: true,\n    },\n    {\n      title: t('expired.at'),\n      dataIndex: 'expired_at',\n      is_show: true,\n      render: (expired_at) => (\n        <div>\n          {moment(new Date()).isBefore(expired_at) ? (\n            <Tag color='blue'>{moment(expired_at).format('YYYY-MM-DD')}</Tag>\n          ) : (\n            <Tag color='error'>{moment(expired_at).format('YYYY-MM-DD')}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setCouponId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [couponId, setCouponId] = useState(null);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { coupons, meta, loading, params } = useSelector(\n    (state) => state.sellerCoupons,\n    shallowEqual,\n  );\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    status: data?.role,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  function deleteCoupon() {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...couponId.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    couponService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setCouponId(null);\n        setIsModalVisible(false);\n        dispatch(fetchCoupon(paramsData));\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchCoupon(paramsData));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchCoupon(paramsData));\n  }, [activeMenu.data]);\n\n  const rowSelection = {\n    selectedRowKeys: couponId,\n    onChange: (key) => {\n      setCouponId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (couponId === null || couponId.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  return (\n    <Card\n      title={t('coupons')}\n      extra={\n        <Space wrap>\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAdd}\n          >\n            {t('add.coupon')}\n          </Button>\n\n          <DeleteButton onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        rowKey={(record) => record.id}\n        dataSource={coupons}\n        columns={columns?.filter((item) => item.is_show)}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={deleteCoupon}\n        text={text ? t('delete') : t('all.delete')}\n        setText={setCouponId}\n        loading={loadingBtn}\n      />\n    </Card>\n  );\n};\n\nexport default SellerCoupon;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/order-edit.js",["6236","6237"],[],"import React, { useEffect, useState } from 'react';\nimport { Form, PageHeader, Row, Col, Button, Spin } from 'antd';\n\nimport UserInfo from './user-info';\nimport DeliveryInfo from './delivery-info';\nimport ProductInfo from './product-info';\nimport PreviewInfo from './preview-info';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport orderService from '../../../services/order';\nimport moment from 'moment';\nimport {\n  clearOrder,\n  setOrderCurrency,\n  setOrderData,\n  setOrderItems,\n} from '../../../redux/slices/order';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport getImageFromStock from '../../../helpers/getImageFromStock';\nimport { disableRefetch, removeFromMenu } from '../../../redux/slices/menu';\nimport { fetchOrders } from '../../../redux/slices/orders';\nimport { useTranslation } from 'react-i18next';\nimport transactionService from '../../../services/transaction';\nimport calculateTotalPrice from '../../../helpers/calculateTotalPrice';\n\nexport default function WaiterOrderEdit() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { orderShops, data, total, coupons } = useSelector(\n    (state) => state.order,\n    shallowEqual\n  );\n  const { currencies } = useSelector((state) => state.currency, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const formData = form.getFieldsValue(true);\n      const data = {\n        ...formData,\n        deliveries: formData.deliveries.map((item) => ({\n          ...item,\n          delivery_date: item.delivery_date\n            ? moment(item.delivery_date).format('YYYY-MM-DD')\n            : undefined,\n        })),\n      };\n      dispatch(setOrderData(data));\n    };\n  }, []);\n\n  function formatUser(user) {\n    return {\n      label: user.firstname + ' ' + (user.lastname || ''),\n      value: user.id,\n    };\n  }\n  function formatAddress(item) {\n    if (!item) return null;\n    return {\n      label: item.address,\n      value: item.id,\n    };\n  }\n  function formatPayment(item) {\n    if (!item) return null;\n    return {\n      label: item.translation?.title,\n      value: item.id,\n    };\n  }\n  function formatDelivery(list) {\n    return list.map((item) => ({\n      delivery: {\n        label: item.delivery_type.translation.title,\n        value: item.delivery_type.id,\n      },\n      delivery_date: item.delivery_date,\n      delivery_time: item.delivery_time,\n      shop_id: item.delivery_type.shop_id,\n      delivery_fee: item.delivery_fee,\n    }));\n  }\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then((res) => {\n        const order = res.data;\n        dispatch(setOrderCurrency(order.currency));\n        dispatch(setOrderData({ deliveries: formatDelivery(order.details) }));\n        const items = order.details.flatMap((item) =>\n          item.order_stocks.map((el) => ({\n            ...el.stock.product,\n            ...el.stock,\n            quantity: el.quantity,\n            stock: el.stock,\n            img: getImageFromStock(el.stock) || el.stock.product.img,\n            product: undefined,\n          }))\n        );\n        dispatch(setOrderItems(items));\n        form.setFieldsValue({\n          user: formatUser(order.user),\n          currency_id: order.currency.id,\n          address: formatAddress(order.details[0].delivery_address),\n          payment_type: formatPayment(\n            order.details[0].transaction?.payment_system\n          ),\n          note: order.note,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  function createTransaction(id, data) {\n    transactionService\n      .create(id, data)\n      .then((res) => {\n        setOrderId(res.data.id);\n        dispatch(clearOrder());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const orderUpdate = (data) => {\n    const payment = {\n      payment_sys_id: data.payment_type,\n    };\n    setLoadingBtn(true);\n    orderService\n      .update(id, data)\n      .then((res) => createTransaction(res.data.id, payment))\n      .catch(() => setLoadingBtn(false));\n  };\n\n  const onFinish = (values) => {\n    const deliveryList = values.deliveries;\n    const list = deliveryList.map((item) => ({\n      delivery_type_id: item.delivery.value,\n      shop_id: item.shop_id,\n      delivery_address_id: values.address.value,\n      delivery_date: moment(item.delivery_date).format('YYYY-MM-DD'),\n      delivery_time: item.delivery_time,\n      delivery_fee: activeMenu.data\n        .find((shop) => shop.id === item.shop_id)\n        .deliveries.find((el) => el.id === item.delivery.value).price,\n    }));\n    const deliveryPrice = list.reduce(\n      (total, item) => (total += item.delivery_fee),\n      0\n    );\n    const shops = orderShops.map((item) => ({\n      ...list.find((el) => el.shop_id === item.id),\n      tax: calculateTotalPrice(item).shopTax,\n      coupon: coupons.find((el) => el.shop_id === item.id)?.coupon,\n      products: item.products.map((product) => ({\n        id: product.id,\n        price: product.price,\n        qty: product.qty,\n        tax: product.tax,\n        discount: product.discount,\n        total_price: product.total_price,\n      })),\n    }));\n    const totalPrice = deliveryPrice + total.order_total;\n    const body = {\n      shops,\n      user_id: values.user?.value,\n      total: totalPrice,\n      currency_id: values.currency_id,\n      rate: currencies.find((item) => item.id === values.currency_id)?.rate,\n      payment_type: values.payment_type.value,\n      note: values.note,\n    };\n    orderUpdate(body);\n  };\n\n  const handleCloseInvoice = () => {\n    setOrderId(null);\n    const nextUrl = 'orders';\n    dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    navigate(`/${nextUrl}`);\n    dispatch(fetchOrders());\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={t('edit.order')}\n        extra={\n          <Button\n            type='primary'\n            loading={loadingBtn}\n            onClick={() => form.submit()}\n          >\n            {t('save')}\n          </Button>\n        }\n      />\n      <Form\n        name='order-form'\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        className='order-add'\n        initialValues={{\n          user: data.user || null,\n          address: data.address || null,\n          currency_id: data.currency.id,\n          payment_type: data.payment_type || null,\n          deliveries: data.deliveries.map((item) => ({\n            ...item,\n            delivery_date: moment(item.delivery_date),\n          })),\n          note: data.note,\n        }}\n      >\n        <Row gutter={24} hidden={loading}>\n          <Col span={16}>\n            <ProductInfo form={form} />\n          </Col>\n          <Col span={8}>\n            <UserInfo form={form} />\n            <DeliveryInfo form={form} />\n          </Col>\n        </Row>\n        {loading && (\n          <div className='loader'>\n            <Spin />\n          </div>\n        )}\n      </Form>\n      {orderId ? (\n        <PreviewInfo orderId={orderId} handleClose={handleCloseInvoice} />\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/index.js",["6238"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Space, Table } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport deliveryPriceService from 'services/seller/delivery-price';\nimport { fetchSellerDeliveryPrice } from 'redux/slices/delivery-price';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport formatSortType from 'helpers/formatSortType';\nimport numberToPrice from 'helpers/numberToPrice';\n\nconst DeliveryPrice = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { deliveryPrice, meta, loading, params } = useSelector(\n    (state) => state.deliveryPrice,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const [id, setId] = useState(null);\n  const data = activeMenu.data;\n  const paramsData = {\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('country'),\n      dataIndex: 'country',\n      key: 'country',\n      is_show: true,\n      render: (country) => country?.translation?.title ?? '--',\n    },\n    {\n      title: t('region'),\n      dataIndex: 'region',\n      key: 'region',\n      is_show: true,\n      render: (region) => region?.translation?.title ?? '--',\n    },\n    {\n      title: t('city'),\n      dataIndex: 'city',\n      key: 'city',\n      is_show: true,\n      render: (city) => city?.translation?.title ?? '--',\n    },\n    {\n      title: t('area'),\n      dataIndex: 'area',\n      key: 'area',\n      is_show: true,\n      render: (area) => area?.translation?.title ?? '--',\n    },\n    {\n      title: t('price'),\n      dataIndex: 'price',\n      key: 'price',\n      is_show: true,\n      render: (price) => numberToPrice(price, defaultCurrency?.symbol),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          <Button\n            type='primary'\n            icon={<EditOutlined />}\n            onClick={() => goToEdit(row)}\n          />\n          <DeleteButton\n            icon={<DeleteOutlined />}\n            onClick={() => {\n              setIsModalVisible(true);\n              setId([row.id]);\n            }}\n          />\n        </Space>\n      ),\n    },\n  ]);\n\n  const goToAdd = () => {\n    dispatch(\n      addMenu({\n        id: 'delivery-price/add',\n        url: 'seller/delivery-price/add',\n        name: t('add.delivery.price'),\n      }),\n    );\n    navigate('add');\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/delivery-price/${row.id}`,\n        id: 'price.edit',\n        name: t('edit.delivery.price'),\n      }),\n    );\n    navigate(`${row.id}`);\n  };\n\n  const deleteDeliveryPrice = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    deliveryPriceService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchSellerDeliveryPrice({}));\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerDeliveryPrice(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerDeliveryPrice(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  return (\n    <Card\n      title={t('delivery.price')}\n      extra={\n        <Space wrap>\n          <Button\n            type='primary'\n            icon={<PlusCircleOutlined />}\n            onClick={goToAdd}\n          >\n            {t('add.delivery.price')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n          <FilterColumns setColumns={setColumns} columns={columns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={deliveryPrice}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.id}\n        loading={loading}\n        onChange={onChangePagination}\n      />\n      <CustomModal\n        click={deleteDeliveryPrice}\n        text={t('delete')}\n        loading={loadingBtn}\n        setText={setId}\n      />\n    </Card>\n  );\n};\n\nexport default DeliveryPrice;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/order-details.js",["6239","6240","6241"],[],"import React, { useEffect, useState, useRef } from 'react';\nimport { Card, Table, Image, Tag, Button, Space, Row, Col, Spin } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport orderService from '../../../services/waiter/order';\nimport getImage from '../../../helpers/getImage';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../../redux/slices/menu';\nimport OrderStatusModal from './orderStatusModal';\nimport OrderDeliveryman from './orderDeliveryman';\nimport { useTranslation } from 'react-i18next';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport ShowLocationsMap from './show-locations.map';\nimport { BsCalendarDay } from 'react-icons/bs';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport moment from 'moment';\n\nexport default function WaiterOrderDetails() {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual\n  );\n  const data = activeMenu?.data?.data;\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const totalPriceRef = useRef();\n  const productListRef = useRef();\n\n  const [totalPrice, setTotalPrice] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [orderDetails, setOrderDetails] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [locationsMap, setLocationsMap] = useState(null);\n\n  const expandedRowRender = (record) => {\n    const columns = [\n      {\n        title: t('id'),\n        dataIndex: 'id',\n        key: 'id',\n        render: (_, row) => row.stock?.id,\n      },\n      {\n        title: t('product.name'),\n        dataIndex: 'product',\n        key: 'product',\n        render: (_, row) => (\n          <Space direction='vertical' className='relative'>\n            {row.stock?.product?.translation?.title}\n            {row.stock?.extras?.map((extra) => (\n              <Tag key={extra?.id}>\n                {extra.group?.translation?.title}: {extra.value?.value}\n              </Tag>\n            ))}\n          </Space>\n        ),\n      },\n      {\n        title: t('image'),\n        dataIndex: 'img',\n        key: 'img',\n        render: (_, row) => (\n          <Image\n            src={getImage(row.stock?.product?.img)}\n            alt='product'\n            width={100}\n            height='auto'\n            className='rounded'\n            preview\n            placeholder\n          />\n        ),\n      },\n      {\n        title: t('price'),\n        dataIndex: 'origin_price',\n        key: 'origin_price',\n        render: (origin_price) =>\n          numberToPrice(origin_price, defaultCurrency?.symbol),\n      },\n      {\n        title: t('quantity'),\n        dataIndex: 'quantity',\n        key: 'quantity',\n        render: (text) => <span>{text}</span>,\n      },\n      {\n        title: t('discount'),\n        dataIndex: 'discount',\n        key: 'discount',\n        render: (discount = 0) =>\n          numberToPrice(discount, defaultCurrency?.symbol),\n      },\n      {\n        title: t('tax'),\n        dataIndex: 'tax',\n        key: 'tax',\n        render: (tax) => numberToPrice(tax, defaultCurrency?.symbol),\n      },\n      {\n        title: t('total.price'),\n        dataIndex: 'total_price',\n        key: 'total_price',\n        render: (total_price, row) => {\n          return numberToPrice(total_price, defaultCurrency?.symbol);\n        },\n      },\n    ];\n    const data = record?.products || [];\n\n    return <Table columns={columns} dataSource={data} pagination={false} />;\n  };\n\n  const columns = [\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      render: (_, row) => row?.shop?.id,\n    },\n    {\n      title: t('shop.name'),\n      dataIndex: 'shop.name',\n      key: 'shop.name',\n      render: (_, row) => (\n        <Space direction='vertical' className='relative'>\n          {row?.shop.translation?.title}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'shop.img',\n      key: 'shop.img',\n      render: (_, row) => (\n        <Image\n          src={getImage(row?.shop?.logo_img)}\n          alt='product'\n          width={100}\n          height='auto'\n          className='rounded'\n          preview\n          placeholder\n        />\n      ),\n    },\n    {\n      title: t('Phone'),\n      dataIndex: 'origin_price',\n      key: 'shop.phone',\n      render: (_, row) => {\n        return <a href={`tel:${row?.shop?.phone}`}>{row?.shop?.phone}</a>;\n      },\n    },\n    {\n      title: t('tax'),\n      dataIndex: 'tax',\n      key: 'tax',\n      render: (_, row) => row?.shop?.tax,\n    },\n    {\n      title: t('total.price'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      render: (total_price) => {\n        return numberToPrice(total_price, defaultCurrency?.symbol);\n      },\n    },\n  ];\n\n  const handleCloseModal = () => {\n    setOrderDetails(null);\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n  };\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        const currency = data.currency;\n        const user = data.user;\n        const id = data.id;\n        const price = data.price;\n        const createdAt = data.created_at;\n        const details = data.details.map((item) => ({\n          ...item,\n          title: item.shop?.translation?.title,\n        }));\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { details, currency, user, id, createdAt, price, data },\n          })\n        );\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrder();\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <div className='order_details'>\n      <Card\n        className='order-details-info'\n        title={\n          <>\n            <FiShoppingCart className='mr-2 icon' />\n            {`${t('order')} ${data?.id ? `#${data?.id} ` : ''}`}{' '}\n            {t('from.order')} {data?.table?.name}\n          </>\n        }\n        extra={\n          data?.status !== 'delivered' &&\n          data?.status !== 'canceled' &&\n          data?.status !== 'accepted' &&\n          data?.status !== 'cooking' ? (\n            <Button type='primary' onClick={() => setOrderDetails(data)}>\n              {t('change.status')}\n            </Button>\n          ) : null\n        }\n      />\n      <Spin spinning={loading}>\n        <Card style={{ minHeight: '200px' }}>\n          <Row hidden={loading} className='mb-3 order_detail'>\n            <Col span={12}>\n              <div>\n                {t('created.date.&.time')}:\n                <span className='ml-2'>\n                  <BsCalendarDay className='mr-1' />{' '}\n                  {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}{' '}\n                </span>\n              </div>\n            </Col>\n            <Col span={12}>\n              <div>\n                {t('status')}:\n                <span className='ml-2'>\n                  {data?.status === 'new' ? (\n                    <Tag color='blue'>{t(data?.status)}</Tag>\n                  ) : data?.status === 'canceled' ? (\n                    <Tag color='error'>{t(data?.status)}</Tag>\n                  ) : (\n                    <Tag color='cyan'>{t(data?.status)}</Tag>\n                  )}\n                </span>\n              </div>\n            </Col>{' '}\n            <Col span={12}>\n              <div>\n                {t('table')}:\n                <span className='ml-2'>\n                  {data?.table?.name || t('unspecified')}\n                </span>\n              </div>\n            </Col>\n            <Col span={12}>\n              <div>\n                {t('delivery_type')}:\n                <span className='ml-2'>\n                  {data?.delivery_type || t('unspecified')}\n                </span>\n              </div>\n            </Col>\n          </Row>\n        </Card>\n      </Spin>\n      <Card className='w-100 order-table'>\n        <Table\n          ref={productListRef}\n          scroll={{ x: true }}\n          columns={columns}\n          dataSource={activeMenu.data?.details || []}\n          loading={loading}\n          rowKey={(record) => record.id}\n          pagination={false}\n          expandable={{ expandedRowRender, defaultExpandedRowKeys: ['0'] }}\n        />\n        <Space\n          size={100}\n          className='d-flex justify-content-end w-100 order-table__summary'\n        >\n          <div>\n            <span>{t('delivery.fee')}:</span>\n            <br />\n            <span>{t('order.tax')}:</span>\n            <br />\n            <span>{t('product')}:</span>\n            <br />\n            <span>{t('discount')}:</span>\n            <br />\n            <h3>{t('total.price')}:</h3>\n          </div>\n          <div>\n            <span>\n              {numberToPrice(\n                data?.delivery_price ?? 0,\n                defaultCurrency?.symbol\n              )}\n            </span>\n            <br />\n            <span>\n              {numberToPrice(data?.total_tax, defaultCurrency?.symbol)}\n            </span>\n            <br />\n            <span>\n              {numberToPrice(data?.origin_price, defaultCurrency?.symbol)}\n            </span>\n            <br />\n            <span>\n              {numberToPrice(data?.total_discount, defaultCurrency?.symbol)}\n            </span>\n            <br />\n            <h3 ref={totalPriceRef}>\n              {numberToPrice(data?.total_price, defaultCurrency?.symbol)}\n            </h3>\n          </div>\n        </Space>\n      </Card>\n\n      {orderDetails && (\n        <OrderStatusModal\n          orderDetails={orderDetails}\n          handleCancel={handleCloseModal}\n          status={statusList}\n        />\n      )}\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orders-board.js",["6242","6243","6244","6245","6246","6247"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Space, Card } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { ClearOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport { fetchOrders, handleSearch } from '../../../redux/slices/waiterOrder';\nimport SearchInput from '../../../components/search-input';\nimport userService from '../../../services/seller/user';\nimport { fetchRestOrderStatus } from '../../../redux/slices/orderStatus';\nimport DeleteButton from '../../../components/delete-button';\nimport { Context } from '../../../context/context';\nimport { toast } from 'react-toastify';\nimport orderService from '../../../services/waiter/order';\nimport Incorporate from './dnd/Incorporate';\nimport {\n  clearItems,\n  fetchAcceptedOrders,\n  fetchCanceledOrders,\n  fetchDeliveredOrders,\n  fetchNewOrders,\n  fetchOnAWayOrders,\n  fetchReadyOrders,\n} from '../../../redux/slices/waiterOrder';\nimport { batch } from 'react-redux';\nimport OrderDeliveryman from './orderDeliveryman';\nimport { clearOrder } from '../../../redux/slices/order';\nimport ShowLocationsMap from './show-locations.map';\nimport DownloadModal from './downloadModal';\nimport CustomModal from '../../../components/modal';\n\nexport default function SellerOrdersBoard() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [id, setId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [text, setText] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [locationsMap, setLocationsMap] = useState(null);\n  const [dowloadModal, setDowloadModal] = useState(null);\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n  const [type, setType] = useState(null);\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `waiter/order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      })\n    );\n    navigate(`/waiter/order/details/${row.id}`);\n  };\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const data = activeMenu?.data;\n\n  const paramsData = {\n    search: data?.search,\n    // sort: data?.sort,\n    // column: data?.column,\n    perPage: data?.perPage || 5,\n    page: data?.page || 1,\n    user_id: data?.userId,\n    status: data?.status,\n  };\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    orderService\n      .delete(params)\n      .then(() => {\n        dispatch(clearItems());\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        fetchOrderAllItem({ status: type });\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    // dispatch(handleSearch(paramsData));\n    dispatch(clearItems());\n    fetchOrderAllItem();\n  }, [data]);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchOrders(paramsData));\n      dispatch(fetchRestOrderStatus());\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const handleFilter = (item, name) => {\n    dispatch(clearItems());\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.getAll(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: `${item.firstname} ${item.lastname || ''}`,\n        value: item.id,\n      }));\n    });\n  }\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const fetchOrdersCase = (params) => {\n    const paramsWithType = {\n      ...paramsData,\n      ...params,\n    };\n    switch (params.status) {\n      case 'new':\n        dispatch(fetchNewOrders(paramsWithType));\n        break;\n      case 'accepted':\n        dispatch(fetchAcceptedOrders(paramsWithType));\n        break;\n      case 'ready':\n        dispatch(fetchReadyOrders(paramsWithType));\n        break;\n      case 'on_a_way':\n        dispatch(fetchOnAWayOrders(paramsWithType));\n        break;\n      case 'delivered':\n        dispatch(fetchDeliveredOrders(paramsWithType));\n        break;\n      case 'canceled':\n        dispatch(fetchCanceledOrders(paramsWithType));\n        break;\n      default:\n        console.log(`Sorry, we are out of`);\n    }\n  };\n\n  const fetchOrderAllItem = () => {\n    fetchOrdersCase({ status: 'new' });\n    fetchOrdersCase({ status: 'accepted' });\n    fetchOrdersCase({ status: 'ready' });\n    fetchOrdersCase({ status: 'on_a_way' });\n    fetchOrdersCase({ status: 'delivered' });\n    fetchOrdersCase({ status: 'canceled' });\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        })\n      );\n    });\n    fetchOrderAllItem();\n  };\n\n  const handleCloseModal = () => {\n    setOrderDeliveryDetails(null);\n    setLocationsMap(null);\n    setDowloadModal(null);\n  };\n\n  const goToAddOrder = () => {\n    dispatch(clearOrder());\n    dispatch(\n      addMenu({\n        id: 'pos.system',\n        url: 'seller/pos-system',\n        name: t('add.order'),\n      })\n    );\n    navigate('/seller/pos-system');\n  };\n\n  return (\n    <>\n      <Card>\n        <Space wrap>\n          <SearchInput\n            placeholder={t('search')}\n            resetSearch={!data?.search}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={data?.search}\n          />\n          <Button icon={<ClearOutlined />} onClick={handleClear}>\n            {t('clear')}\n          </Button>\n          {/* <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton> */}\n        </Space>\n      </Card>\n\n      <Incorporate\n        goToShow={goToShow}\n        fetchOrderAllItem={fetchOrderAllItem}\n        fetchOrders={fetchOrdersCase}\n        setLocationsMap={setLocationsMap}\n        setId={setId}\n        setIsModalVisible={setIsModalVisible}\n        setText={setText}\n        setDowloadModal={setDowloadModal}\n        type={type}\n        setType={setType}\n      />\n      <CustomModal\n        click={orderDelete}\n        text={text ? t('delete') : t('all.delete')}\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setId}\n      />\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n      {locationsMap && (\n        <ShowLocationsMap id={locationsMap} handleCancel={handleCloseModal} />\n      )}\n      {dowloadModal && (\n        <DownloadModal id={dowloadModal} handleCancel={handleCloseModal} />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/report-orders/index.js",["6248","6249","6250","6251","6252"],[],"import {\n  Card,\n  Col,\n  Row,\n  Space,\n  Typography,\n  Table,\n  Tag,\n  DatePicker,\n  Spin,\n  Menu,\n  Dropdown,\n  Button,\n} from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { disableRefetch, setMenu } from '../../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport ReportChart from '../../../components/report/chart';\nimport moment from 'moment';\nimport { ReportContext } from '../../../context/report';\nimport FilterColumns from '../../../components/filter-column';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  fetchSellerOrderProduct,\n  fetchSellerOrderProductChart,\n} from '../../../redux/slices/report/order';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { DebounceSelect } from 'components/search';\nimport shopService from 'services/restaurant';\nconst { Text, Title } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst ReportOrder = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { date_from, date_to, by_time, chart, handleChart, handleDateRange } =\n    useContext(ReportContext);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    loading,\n    chartData: reportData,\n    productList: reportProducts,\n  } = useSelector((state) => state.orderReport, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [selectedShop, setSelectedShop] = useState();\n\n  const [columns, setColumns] = useState([\n    {\n      title: 'Order #',\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n      render: (_, data) => (\n        <Button type='primary' onClick={() => goToShow(data)}>\n          #{data.id}\n        </Button>\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'items_sold',\n      key: 'items_sold',\n      is_show: true,\n      render: (_, row) => <Tag>{row.status}</Tag>,\n    },\n    {\n      title: 'Customer',\n      dataIndex: 'user_firstname',\n      key: 'user_firstname',\n      is_show: true,\n      render: (_, data) => <>{`${data.firstname} ${data.lastname}`}</>,\n    },\n    {\n      title: 'Customer type',\n      key: 'user_active',\n      dataIndex: 'user_active',\n      is_show: true,\n      render: (_, data) => {\n        const status = Boolean(data.active);\n        return (\n          <Tag color={status ? 'green' : 'red'} key={data.id}>\n            {status ? 'Active' : 'Inactive'}\n          </Tag>\n        );\n      },\n    },\n    {\n      title: 'Product(s)',\n      key: 'category',\n      dataIndex: 'category',\n      is_show: true,\n      render: (_, data) => {\n        if (data.products?.length > 1) {\n          return (\n            <>\n              <p>{data.products[0]}</p>\n\n              <Dropdown\n                overlay={\n                  <Menu>\n                    {data.products\n                      ?.slice(1, data.products.length)\n                      .map((item, key) => (\n                        <Menu.Item key={key}>{item}</Menu.Item>\n                      ))}\n                  </Menu>\n                }\n              >\n                <Tag style={{ cursor: 'pointer' }}>{`+ ${\n                  data.products?.length - 1\n                } more`}</Tag>\n              </Dropdown>\n            </>\n          );\n        } else {\n          return <>{data.products[0]}</>;\n        }\n      },\n    },\n    {\n      title: 'Item sold',\n      key: 'item_sold',\n      dataIndex: 'item_sold',\n      sorter: (a, b) => Number(a.quantity) - Number(b.quantity),\n\n      is_show: true,\n      render: (_, data) => {\n        return Number(data.quantity);\n      },\n    },\n    {\n      title: 'Net sales',\n      key: 'price',\n      dataIndex: 'price',\n      is_show: true,\n      sorter: (a, b) => a.price - b.price,\n      render: (_, data) => {\n        return <>{numberToPrice(data.price, defaultCurrency?.symbol)}</>;\n      },\n    },\n  ]);\n\n  const performance = [\n    {\n      label: 'Item sold',\n      value: 'quantity',\n      price: false,\n      qty: 'quantity',\n    },\n    {\n      label: 'Net sales',\n      value: 'price',\n      price: true,\n      qty: 'price',\n    },\n    {\n      label: 'Avg Order price',\n      value: 'avg_price',\n      price: true,\n      qty: 'avg_price',\n    },\n    {\n      label: 'Orders',\n      value: 'count',\n      price: false,\n      qty: 'count',\n    },\n  ];\n\n  const goToShow = (row) => {\n    const url = `seller/order/details/${row.id}`;\n    dispatch(\n      setMenu({\n        url,\n        id: 'order_details',\n        name: t('order.details'),\n        refetch: true,\n        data: {},\n      })\n    );\n    navigate(`/${url}`);\n  };\n\n  const fetchOrderChart = () => {\n    if (performance.find((item) => item.value === chart)) {\n      const data = {\n        date_from,\n        date_to,\n        type: by_time,\n        chart,\n        shop_id: selectedShop?.value,\n      };\n      dispatch(fetchSellerOrderProductChart(data));\n    }\n  };\n\n  const fetchOrderList = (page, perPage) => {\n    dispatch(\n      fetchSellerOrderProduct({\n        date_from,\n        date_to,\n        by_time,\n        chart,\n        page: 1,\n        perPage: 10,\n        shop_id: selectedShop?.value,\n      })\n    );\n  };\n\n  useEffect(() => {\n    handleChart(performance[0].value);\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchOrderList();\n      fetchOrderChart();\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    fetchOrderList();\n  }, [date_to, by_time, chart, date_from, selectedShop?.value]);\n\n  useDidUpdate(() => {\n    fetchOrderChart();\n  }, [date_to, by_time, chart, date_from, selectedShop?.value]);\n\n  const onChangePagination = (pagination) => {\n    const { pageSize: perPage, current: page } = pagination;\n    fetchOrderList(page, perPage);\n  };\n\n  async function fetchUserShopList(search) {\n    const params = { search, active: 1 };\n    return shopService.get(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n      }))\n    );\n  }\n\n  return (\n    <Spin size='large' spinning={loading}>\n      <Row gutter={24} className='mb-3'>\n        <Col span={12}>\n          <Space size='large'>\n            <RangePicker\n              defaultValue={[moment(date_from), moment(date_to)]}\n              onChange={handleDateRange}\n            />\n            {/* <DebounceSelect\n              style={{ width: '200px' }}\n              value={selectedShop}\n              onClear={() => setSelectedShop(undefined)}\n              onSelect={(value) => setSelectedShop(value)}\n              fetchOptions={fetchUserShopList}\n              placeholder={t('select.shop')}\n            /> */}\n          </Space>\n        </Col>\n      </Row>\n      <Row gutter={24} className='report-products'>\n        {performance?.map((item, key) => (\n          <Col\n            span={6}\n            key={item.label}\n            onClick={() => handleChart(item.value)}\n          >\n            <Card className={chart === item.value && 'active'}>\n              <Row className='mb-5'>\n                <Col>\n                  <Text>{item.label}</Text>\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={18}>\n                  <Title level={2}>\n                    {!item.price\n                      ? reportData[item.qty]\n                      : numberToPrice(\n                          reportData[item.qty],\n                          defaultCurrency?.symbol\n                        )}\n                  </Title>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <ReportChart reportData={reportData} chart_data='price_avg' />\n      <Row gutter={24}>\n        <Col span={24}>\n          <Card>\n            <Space className='d-flex justify-content-between'>\n              <Text level={3}>Orders</Text>\n              <Space className='d-flex justify-content-end'>\n                {/* <Tag color='geekblue'>{t('compare')}</Tag> */}\n                <FilterColumns columns={columns} setColumns={setColumns} />\n              </Space>\n            </Space>\n\n            <Table\n              columns={columns?.filter((item) => item.is_show)}\n              dataSource={reportProducts?.data}\n              rowKey={(row) => row.id}\n              loading={loading}\n              pagination={{\n                pageSize: reportProducts?.per_page,\n                page: reportProducts?.current_page || 1,\n                total: reportProducts?.total,\n                defaultCurrent: 1,\n              }}\n              onChange={onChangePagination}\n              scroll={{ x: 1200 }}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </Spin>\n  );\n};\n\nexport default ReportOrder;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/index.js",["6253","6254","6255"],[],"import React, { useEffect, useState, useContext } from 'react';\nimport { Button, Space, Table, Card, Tabs, Tag, Select, Tooltip } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { ClearOutlined, EyeOutlined, PlusOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { Context } from '../../../context/context';\nimport { batch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { clearItems, fetchOrders } from '../../../redux/slices/waiterOrder';\nimport { fetchOrders as fetchWaiterOrders } from '../../../redux/slices/waiterOrder';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport formatSortType from '../../../helpers/formatSortType';\nimport SearchInput from '../../../components/search-input';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport FilterColumns from '../../../components/filter-column';\nimport CustomModal from '../../../components/modal';\nimport orderService from '../../../services/waiter/order';\nimport OrderDeliveryman from './orderDeliveryman';\nimport RiveResult from 'components/rive-result';\nimport { DebounceSelect } from 'components/search';\nimport bookingTable from 'services/rest/table';\n\nexport default function WaiterOrder() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [id, setId] = useState(null);\n  const [text, setText] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [isAttaching, setIsAttaching] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual\n  );\n  const [orderDeliveryDetails, setOrderDeliveryDetails] = useState(null);\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `waiter/order/details/${row.id}`,\n        id: 'order_details',\n        name: t('order.details'),\n      })\n    );\n    navigate(`/waiter/order/details/${row.id}`);\n  };\n\n  const handleAttachtoMe = (id) => {\n    setIsAttaching(true);\n    orderService\n      .attachToMe(id)\n      .then(() => {\n        dispatch(fetchWaiterOrders(paramsData));\n      })\n      .finally(() => {\n        setIsAttaching(false);\n      });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      sorter: true,\n      is_show: true,\n    },\n    {\n      title: t('table'),\n      dataIndex: 'table',\n      key: 'table',\n      is_show: true,\n      render: (table) => <div>{table?.name}</div>,\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n\n    {\n      title: t('products'),\n      dataIndex: 'order_details_count',\n      key: 'order_details_count',\n      is_show: true,\n      render: (order_details_count) => {\n        return (\n          <div className='text-lowercase'>\n            {order_details_count || 0} {t('products')}\n          </div>\n        );\n      },\n    },\n    {\n      title: t('amount'),\n      dataIndex: 'total_price',\n      key: 'total_price',\n      is_show: true,\n      render: (total_price) => {\n        return numberToPrice(total_price, defaultCurrency?.symbol);\n      },\n    },\n    {\n      title: t('payment.type'),\n      dataIndex: 'transaction',\n      key: 'transaction',\n      is_show: true,\n      render: (transaction) => t(transaction?.payment_system?.tag) || '-',\n    },\n    {\n      title: t('created.at'),\n      is_show: true,\n      dataIndex: 'created_at',\n      key: 'created_at',\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n            <Tooltip title={t('assign.to.me')}>\n              <Button\n                onClick={() => handleAttachtoMe(row.id)}\n                type='primary'\n                icon={<PlusOutlined />}\n              />\n            </Tooltip>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { orders, meta, loading, params } = useSelector(\n    (state) => state.waiterOrder,\n    shallowEqual\n  );\n  const data = activeMenu?.data;\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    user_id: data?.user_id,\n    table_id: data?.table_id,\n    shop_id:\n      activeMenu.data?.shop_id !== null ? activeMenu.data?.shop_id : null,\n    delivery_type: 'dine_in',\n    'empty-waiter': 1,\n    status: 'new',\n  };\n\n  function onChangePagination(pagination, filters, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const orderDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    orderService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        setIsModalVisible(false);\n        dispatch(fetchWaiterOrders(paramsData));\n        setText(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchWaiterOrders(paramsData));\n  }, [activeMenu?.data]);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      dispatch(fetchWaiterOrders(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu?.refetch]);\n\n  const handleFilter = (item, name) => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, [name]: item },\n      })\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const handleClear = () => {\n    batch(() => {\n      dispatch(clearItems());\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: null,\n        })\n      );\n    });\n    dispatch(fetchOrders({ status: 'all', page: data?.page, perPage: 10 }));\n  };\n\n  const handleCloseModal = () => {\n    setOrderDeliveryDetails(null);\n  };\n\n  async function getTables(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return bookingTable.getAllRestTables(params).then(({ data }) => {\n      return data.map((item) => ({\n        label: item.name,\n        value: item.id,\n      }));\n    });\n  }\n\n  return (\n    <>\n      <Card>\n        <Space wrap className='p-0 mb-0'>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(search) => handleFilter(search, 'search')}\n            defaultValue={activeMenu.data?.search}\n          />\n          <DebounceSelect\n            placeholder={t('select.table')}\n            fetchOptions={getTables}\n            onSelect={(user) => handleFilter(user.value, 'table_id')}\n            onDeselect={() => handleFilter(null, 'table_id')}\n            style={{ minWidth: 200 }}\n          />\n          <Button icon={<ClearOutlined />} onClick={handleClear}>\n            {t('clear')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      </Card>\n\n      <Card>\n        <Table\n          locale={{\n            emptyText: <RiveResult />,\n          }}\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={orders}\n          loading={loading || isAttaching}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta?.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n        />\n        <CustomModal\n          click={orderDelete}\n          text={text ? t('delete') : t('all.delete')}\n          loading={loadingBtn}\n          setText={setId}\n        />\n      </Card>\n      {orderDeliveryDetails && (\n        <OrderDeliveryman\n          orderDetails={orderDeliveryDetails}\n          handleCancel={handleCloseModal}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/wallet/index.js",["6256"],[],"import { Button, Card, Table, Tag, Typography } from 'antd';\nimport numberToPrice from 'helpers/numberToPrice';\nimport moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { disableRefetch } from 'redux/slices/menu';\nimport userService from 'services/user';\nimport WalletTopUp from './top-up';\n\nconst SellerWallet = () => {\n  const [user, setUser] = useState(null);\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu);\n  const getProfile = useCallback(() => {\n    setLoading(true);\n    userService\n      .profileShow()\n      .then((res) => {\n        setUser(res.data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu?.refetch) {\n      getProfile();\n    }\n    dispatch(disableRefetch(activeMenu));\n  }, [activeMenu?.refetch]);\n\n  const columns = [\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      render: (created_at) => moment(created_at).format('YYYY-MM-DD hh:mm'),\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      render: (status) => (\n        <div>\n          {status === 'paid' ? (\n            <Tag color='cyan'>{status}</Tag>\n          ) : (\n            <Tag color='blue'>{status}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('type'),\n      dataIndex: 'type',\n      render: (type) =>\n        type === 'topup' ? (\n          <Tag color='cyan'>{type}</Tag>\n        ) : (\n          <Tag color='error'>{type}</Tag>\n        ),\n    },\n    {\n      title: t('note'),\n      dataIndex: 'note',\n    },\n  ];\n\n  return (\n    <Card\n      title={t('user.wallet')}\n      extra={!loading ? <Button onClick={() => setOpen(true)}>{t('top.up')}</Button> : null}\n    >\n      {user?.wallet ? (\n        <>\n          <Typography.Title>\n            {numberToPrice(user?.wallet.price)}\n          </Typography.Title>\n          <Table\n            loading={loading}\n            dataSource={user?.wallet?.histories}\n            columns={columns}\n          />\n        </>\n      ) : (\n        <Table dataSource={[]} columns={columns} loading={loading} />\n      )}\n      <WalletTopUp refetch={getProfile} open={open} handleCancel={() => setOpen(false)}  />\n    </Card>\n  );\n};\n\nexport default SellerWallet;\n","/home/mostafa/Magde/new/frontadminreact/src/components/notification-drawer.js",["6257"],[],"import React, { useEffect } from 'react';\nimport { Button, Drawer, List } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu } from 'redux/slices/menu';\nimport { useNavigate } from 'react-router-dom';\nimport notificationService from 'services/notification';\n\nexport default function NotificationDrawer({\n  handleClose,\n  visible,\n  list,\n  readAll,\n  loading,\n  paginate,\n  setPaginate,\n}) {\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  const { direction } = useSelector((state) => state.theme.theme, shallowEqual);\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const goToShow = (id) => {\n    let url = '';\n    switch (user.role) {\n      case 'admin':\n        url = `order/details/${id}`;\n        break;\n      case 'manager':\n        url = `order/details/${id}`;\n        break;\n      case 'seller':\n        url = `seller/order/details/${id}`;\n        break;\n      case 'moderator':\n        url = `seller/order/details/${id}`;\n        break;\n      case 'deliveryman':\n        url = `deliveryman/order/details/${id}`;\n        break;\n\n      default:\n        break;\n    }\n    dispatch(\n      addMenu({\n        url,\n        id: 'order_details',\n        name: t('order.details'),\n      }),\n    );\n    navigate(`/${url}`);\n  };\n\n  const fetchReadAtNotification = (id) => {\n    notificationService.readAt(id).then(() => {});\n  };\n\n  const handleClickNotification = (item) => {\n    if (item?.model_type === 'order') {\n      const orderId = item?.data?.id;\n      const id = item?.id;\n      handleClose();\n      goToShow(orderId);\n      fetchReadAtNotification(id);\n    }\n  };\n\n  const handleReadAll = () => {\n    readAll().finally(() => handleClose());\n  };\n\n  return (\n    <Drawer\n      title={t('notifications')}\n      placement={direction === 'rtl' ? 'right' : 'left'}\n      closable={false}\n      onClose={handleClose}\n      visible={visible}\n      key={'left'}\n      extra={<Button onClick={handleReadAll}>{t('read.all')}</Button>}\n    >\n      <List\n        size='small'\n        itemLayout='horizontal'\n        dataSource={list}\n        loading={loading}\n        renderItem={(item) => (\n          <List.Item\n            className='list-clickable'\n            onClick={() => handleClickNotification(item)}\n          >\n            <div\n              className='py-1'\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                columnGap: '10px',\n              }}\n            >\n              {!item?.read_at && (\n                <span\n                  style={{\n                    display: 'block',\n                    width: '5px',\n                    height: '5px',\n                    borderRadius: '50%',\n                    backgroundColor: 'tomato',\n                  }}\n                />\n              )}\n              <span className='font-weight-bold'>{item?.title}</span>\n            </div>\n          </List.Item>\n        )}\n      />\n      <Button\n        onClick={() => setPaginate({ page: paginate.page + 1 })}\n        className='w-100 mt-4'\n        type='primary'\n        disabled={loading}\n      >\n        {t('load.more')}\n      </Button>\n    </Drawer>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/user-modal.js",["6258","6259"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Col,\n  DatePicker,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Row,\n  Select,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport userService from '../services/user';\nimport Loading from './loading';\nimport moment from 'moment';\nimport createImage from '../helpers/createImage';\nimport { useDispatch } from 'react-redux';\nimport { updateUser } from '../redux/slices/auth';\nimport useDemo from '../helpers/useDemo';\nimport MediaUpload from './upload';\n\nexport default function UserModal({ visible, handleCancel }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [data, setData] = useState({});\n  const [image, setImage] = useState([]);\n  const [error, setError] = useState(null);\n  const { isDemo, demoDeliveryman, demoSeller } = useDemo();\n\n  function fetchProfile() {\n    setLoading(true);\n    userService\n      .profileShow()\n      .then((res) => {\n        const obj = {\n          ...res.data,\n          birthday: moment(res.data.birthday),\n        };\n        setImage(res.data.img ? [createImage(res.data.img)] : []);\n        setData(obj);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  const onFinish = (values) => {\n    const payload = {\n      images: image[0] ? [image[0]?.name] : undefined,\n      firstname: values.firstname,\n      lastname: values.lastname,\n      phone: values.phone,\n      email: values.email,\n      birthday: moment(values.birthday).format('YYYY-MM-DD'),\n      gender: values.gender,\n      password: values.password,\n      password_confirmation: values.password_confirmation,\n    };\n    setLoadingBtn(true);\n    userService\n      .profileUpdate(payload)\n      .then((res) => {\n        dispatch(updateUser(res.data));\n        handleCancel();\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Modal\n      title={t('edit.profile')}\n      visible={visible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='ok-button'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n          disabled={\n            (isDemo && data?.id == demoDeliveryman) ||\n            (isDemo && data?.id == demoSeller) ||\n            (isDemo && data?.role === 'admin')\n          }\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <Form\n          layout='vertical'\n          name='lang-form'\n          form={form}\n          onFinish={onFinish}\n          initialValues={{ ...data }}\n        >\n          <Row gutter={12}>\n            <Col span={24}>\n              <Form.Item label={t('avatar')}>\n                <MediaUpload\n                  type='users'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('firstname')}\n                name='firstname'\n                help={error?.firstname ? error.firstname[0] : null}\n                validateStatus={error?.firstname ? 'error' : 'success'}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('lastname')}\n                name='lastname'\n                help={error?.lastname ? error.lastname[0] : null}\n                validateStatus={error?.lastname ? 'error' : 'success'}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('phone')}\n                name='phone'\n                help={error?.phone ? error.phone[0] : null}\n                validateStatus={error?.phone ? 'error' : 'success'}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber min={0} className='w-100' disabled={isDemo} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('email')}\n                name='email'\n                help={error?.email ? error.email[0] : null}\n                validateStatus={error?.email ? 'error' : 'success'}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Input type='email' disabled={isDemo} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('birthday')}\n                name='birthday'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <DatePicker\n                  className='w-100'\n                  placeholder=''\n                  disabledDate={(current) =>\n                    moment().add(-1, 'days') <= current\n                  }\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('gender')}\n                name='gender'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select picker='dayTime' className='w-100'>\n                  <Select.Option value='male'>{t('male')}</Select.Option>\n                  <Select.Option value='female'>{t('female')}</Select.Option>\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('password')}\n                name='password'\n                help={error?.password ? error.password[0] : null}\n                validateStatus={error?.password ? 'error' : 'success'}\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <Input type='password' className='w-100' disabled={isDemo} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('password.confirmation')}\n                help={\n                  error?.password_confirmation\n                    ? error.password_confirmation[0]\n                    : null\n                }\n                validateStatus={\n                  error?.password_confirmation ? 'error' : 'success'\n                }\n                name='password_confirmation'\n                dependencies={['password']}\n                rules={[\n                  {\n                    required: false,\n                    message: t('required'),\n                  },\n                  ({ getFieldValue }) => ({\n                    validator(rule, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(t('two.passwords.dont.match'));\n                    },\n                  }),\n                ]}\n              >\n                <Input type='password' disabled={isDemo} />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/getAvatar.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/notification.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/language-list.js",["6260"],[],"import React, { useEffect } from 'react';\nimport { Radio } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setDefaultLanguage, setLangugages } from '../redux/slices/formLang';\nimport languagesService from '../services/languages';\n\nconst LanguageList = () => {\n  const dispatch = useDispatch();\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const fetchLanguages = () => {\n    languagesService.getAllActive().then(({ data }) => {\n      dispatch(setLangugages(data));\n      dispatch(\n        setDefaultLanguage(data.find((item) => item.default === 1).locale),\n      );\n    });\n  };\n\n  useEffect(() => {\n    fetchLanguages();\n  }, []);\n\n  const onChangeLanguage = ({ target: { value } }) => {\n    dispatch(setDefaultLanguage(value));\n  };\n\n  return (\n    <>\n      <Radio.Group\n        value={defaultLang}\n        onChange={onChangeLanguage}\n        className='float-right'\n        buttonStyle='solid'\n      >\n        {languages?.map((item) => {\n          return (\n            <Radio.Button value={item.locale} key={item.id}>\n              {item.title}\n            </Radio.Button>\n          );\n        })}\n      </Radio.Group>\n    </>\n  );\n};\n\nexport default LanguageList;\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/useQueryParams.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/ckeEditorEdit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getDefaultLocation.js",["6261","6262"],[],"import { LAT, LNG } from 'configs/app-global';\n\nexport default function getDefaultLocation(settings) {\n  if (!settings?.location) {\n    return {\n      lat: 47.4143302506288,\n      lng: 8.532059477976883,\n    };\n  }\n  const location = settings.location.split(', ');\n  return {\n    lat: Number(location?.[0]),\n    lng: Number(location?.[1]),\n  };\n}\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/createImage.js",["6263"],[],"import { IMG_URL } from '../configs/app-global';\n\nexport default function createImage(name) {\n  const findHTTPS = name?.includes('https');\n\n  return {\n    name,\n    url: findHTTPS ? name : name,\n  };\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/ckeEditor.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getTranslationFields.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/addons/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-stock.js",["6264"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Row, Space } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport productService from '../../services/product';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { setRefetch } from '../../redux/slices/menu';\n\nconst ProductStock = ({ prev, next, current }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { uuid } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loadingBtn, setLoadingBtn] = useState(null);\n  const dispatch = useDispatch();\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    let extras;\n\n    extras = [\n      {\n        price: values.price,\n        quantity: values.quantity,\n        sku: values.sku,\n      },\n    ];\n\n    productService\n      .stocks(uuid, { extras })\n      .then(() => next())\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    dispatch(setRefetch(activeMenu));\n    form.setFieldsValue({\n      price: activeMenu.data?.stocks?.length\n        ? activeMenu.data.stocks[0].price\n        : [],\n      quantity: activeMenu.data?.stocks?.length\n        ? activeMenu.data.stocks[0].quantity\n        : [],\n      sku: activeMenu.data?.stocks?.length ? activeMenu.data.stocks[0].sku : [],\n    });\n  }, []);\n\n  return (\n    <Form layout='vertical' form={form} onFinish={onFinish}>\n      <Row\n        gutter={12}\n        align='middle'\n        style={{ flexWrap: 'nowrap', overflowX: 'auto' }}\n      >\n        <Col>\n          <Form.Item\n            label={t('price')}\n            name={'price'}\n            rules={[{ required: true, message: t('required') }]}\n          >\n            <InputNumber min={0} className='w-100' style={{ minWidth: 200 }} />\n          </Form.Item>\n        </Col>\n        <Col>\n          <Form.Item\n            label={t('quantity')}\n            name={'quantity'}\n            rules={[{ required: true, message: t('required') }]}\n          >\n            <InputNumber min={1} className='w-100' style={{ minWidth: 200 }} />\n          </Form.Item>\n        </Col>\n        <Col>\n          <Form.Item\n            label={t('sku')}\n            name={'sku'}\n          >\n            <Input style={{ minWidth: 200 }} />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Space className='mt-4'>\n        <Button onClick={prev}>{t('prev')}</Button>\n        <Button type='primary' htmlType='submit' loading={!!loadingBtn}>\n          {t('next')}\n        </Button>\n      </Space>\n    </Form>\n  );\n};\n\nexport default ProductStock;\n","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-finish.js",["6265"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Descriptions, Space, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { removeFromMenu } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport productService from '../../services/product';\nimport { fetchAddons } from '../../redux/slices/addons';\n\nconst ProductFinish = ({ prev }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(null);\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.addons, shallowEqual);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        setData(data);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  function finish() {\n    const body = {\n      status: undefined,\n      ...params,\n    };\n    const nextUrl = 'catalog/addons';\n    dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    dispatch(fetchAddons(body));\n    navigate(`/${nextUrl}`);\n  }\n\n  useEffect(() => {\n    fetchProduct(uuid);\n  }, []);\n\n  return !loading ? (\n    <>\n      <Descriptions title={t('product.info')} bordered>\n        <Descriptions.Item label={`${t('title')} (${defaultLang})`} span={3}>\n          {data[`title[${defaultLang}]`]}\n        </Descriptions.Item>\n        <Descriptions.Item\n          label={`${t('description')} (${defaultLang})`}\n          span={3}\n        >\n          {data[`description[${defaultLang}]`]}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('shop')} span={1.5}>\n          {data.shop?.translation.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('unit')} span={1.5}>\n          {data.unit?.translation.title}\n        </Descriptions.Item>\n\n        <Descriptions.Item label={t('tax')}>{data.tax}</Descriptions.Item>\n        <Descriptions.Item label={t('min.quantity')}>\n          {data.min_qty}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('max.quantity')}>\n          {data.max_qty}\n        </Descriptions.Item>\n      </Descriptions>\n      {data.stocks?.map((item, idx) => {\n        if (!item) {\n          return '';\n        }\n        return (\n          <Descriptions key={'desc' + idx} bordered className='mt-4'>\n            <Descriptions.Item label={t('price')} span={2}>\n              {item.price}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('quantity')} span={2}>\n              {item.quantity}\n            </Descriptions.Item>\n            {item.extras.map((extra, idx) => (\n              <Descriptions.Item\n                key={'extra' + idx}\n                label={extra?.group?.translation?.title}\n              >\n                {extra?.value}\n              </Descriptions.Item>\n            ))}\n          </Descriptions>\n        );\n      })}\n      <div className='d-flex justify-content-end mt-4'>\n        <Space wrap>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button type='primary' onClick={finish}>\n            {t('finish')}\n          </Button>\n        </Space>\n      </div>\n    </>\n  ) : (\n    <div className='d-flex justify-content-center align-items-center'>\n      <Spin size='large' className='py-5' />\n    </div>\n  );\n};\n\nexport default ProductFinish;\n","/home/mostafa/Magde/new/frontadminreact/src/views/addons/addons-index.js",["6266","6267","6268"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  Switch,\n} from 'antd';\nimport { DebounceSelect } from '../../components/search';\nimport shopService from '../../services/restaurant';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport productService from '../../services/product';\nimport { replaceMenu, setMenuData } from '../../redux/slices/menu';\nimport unitService from '../../services/unit';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport TextArea from 'antd/lib/input/TextArea';\n\nconst ProductsIndex = ({ next, action_type = '' }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [units, setUnits] = useState([]);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n  }, []);\n\n  async function fetchUserShopList(search) {\n    const params = { search };\n    return shopService.get(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n      }))\n    );\n  }\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const params = {\n      ...values,\n      min_qty: 1,\n      max_qty: 1000,\n      active: Number(values.active),\n      shop_id: values.shop?.value,\n      unit_id: values.unit?.value,\n      unit: undefined,\n      addon: Number(1),\n      shop: undefined,\n    };\n\n    if (action_type === 'edit') {\n      productUpdate(values, params);\n    } else {\n      productCreate(values, params);\n    }\n  };\n\n  function productCreate(values, params) {\n    productService\n      .create(params)\n      .then(({ data }) => {\n        dispatch(\n          replaceMenu({\n            id: `product-${data.uuid}`,\n            url: `product/${data.uuid}`,\n            name: t('add.product'),\n            data: values,\n            refetch: false,\n          })\n        );\n        navigate(`/addon/${data.uuid}?step=1`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function productUpdate(values, params) {\n    productService\n      .update(uuid, params)\n      .then(() => {\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: values,\n          })\n        );\n        next();\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function fetchUnits() {\n    const params = {\n      perPage: 100,\n      page: 1,\n      active: 1,\n    };\n    unitService.getAll(params).then(({ data }) => setUnits(formatUnits(data)));\n  }\n\n  useEffect(() => {\n    fetchUnits();\n  }, []);\n\n  function formatUnits(data) {\n    return data.map((item) => ({\n      label: item.translation?.title,\n      value: item.id,\n    }));\n  }\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      initialValues={{ active: true, ...activeMenu.data }}\n      onFinish={onFinish}\n      className={'addon-menu'}\n    >\n      <Row gutter={12}>\n        <Col xs={24} sm={24} md={16}>\n          <Card title={t('basic.info')}>\n            <Row gutter={24}>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    key={'name' + item.id}\n                    label={t('name')}\n                    name={`title[${item.locale}]`}\n                    rules={[\n                      {\n                        validator(_, value) {\n                          if (!value && item?.locale === defaultLang) {\n                            return Promise.reject(new Error(t('required')));\n                          } else if (value && value?.trim() === '') {\n                            return Promise.reject(\n                              new Error(t('no.empty.space'))\n                            );\n                          } else if (value && value?.trim().length < 2) {\n                            return Promise.reject(\n                              new Error(t('must.be.at.least.2'))\n                            );\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    key={'description' + item.id}\n                    label={t('description')}\n                    name={`description[${item.locale}]`}\n                    rules={[\n                      {\n                        validator(_, value) {\n                          if (!value && item?.locale === defaultLang) {\n                            return Promise.reject(new Error(t('required')));\n                          } else if (value && value?.trim() === '') {\n                            return Promise.reject(\n                              new Error(t('no.empty.space'))\n                            );\n                          } else if (value && value?.trim().length < 5) {\n                            return Promise.reject(\n                              new Error(t('must.be.at.least.5'))\n                            );\n                          }\n                          return Promise.resolve();\n                        },\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <TextArea rows={4} span={4} />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('tax')}\n                  name='tax'\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && value !== 0) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && (value < 0 || value > 100)) {\n                          return Promise.reject(\n                            new Error(t('must.be.between.0.and.100'))\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumber className='w-100' addonAfter='%' />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n\n        <Col xs={24} sm={24} md={8}>\n          <Card title={t('shop/restaurant')}>\n            <Form.Item\n              name='shop'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchUserShopList}\n                disabled={action_type === 'edit'}\n              />\n            </Form.Item>\n          </Card>\n          <Card title={t('addition')}>\n            <Form.Item\n              label={t('unit')}\n              name='unit'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select\n                labelInValue={true}\n                filterOption={false}\n                options={units}\n              />\n            </Form.Item>\n\n          </Card>\n        </Col>\n      </Row>\n\n      <Button type='primary' htmlType='submit' loading={loadingBtn}>\n        {t('next')}\n      </Button>\n    </Form>\n  );\n};\n\nexport default ProductsIndex;\n","/home/mostafa/Magde/new/frontadminreact/src/views/banners/banner-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/async-tree-select.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/refetch-search.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/search.js",["6269"],[],"import React, { useState, useMemo, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Select, Spin } from 'antd';\n\nexport const DebounceSelect = ({\n  fetchOptions,\n  debounceTimeout = 400,\n  onClear,\n  refetchOptions = false,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (value) => {\n      setOptions([]);\n      setFetching(true);\n      fetchOptions(value).then((newOptions) => {\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    };\n    return debounce(loadOptions, debounceTimeout);\n  }, [fetchOptions, debounceTimeout]);\n\n  const fetchOnFocus = () => {\n    if (!options.length || refetchOptions) {\n      debounceFetcher('');\n    }\n  };\n\n  return (\n    <Select\n      showSearch\n      allowClear\n      labelInValue={true}\n      filterOption={false}\n      onSearch={debounceFetcher}\n      onClear={() => {\n        debounceFetcher('');\n        !!onClear && onClear();\n      }}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n      options={options}\n      onFocus={fetchOnFocus}\n    />\n  );\n};\n","/home/mostafa/Magde/new/frontadminreact/src/components/async-select.js",["6270"],[],"import React, { useEffect, useState } from 'react';\nimport { Select, Spin } from 'antd';\n\nexport const AsyncSelect = ({\n  fetchOptions,\n  refetch = false,\n  value,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  if (typeof value?.label === 'object' && value?.label !== null) {\n    value.label = value.label.value;\n  }\n\n  const fetchOnFocus = () => {\n    if (!options.length || refetch) {\n      setFetching(true);\n      fetchOptions().then((newOptions) => {\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    }\n  };\n\n  return (\n    <>\n      <Select\n        labelInValue={true}\n        filterOption={false}\n        notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n        value={value}\n        {...props}\n        options={fetching ? [] : options}\n        onFocus={fetchOnFocus}\n      />\n    </>\n  );\n};\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-list.js",["6271"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  ClearOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Image, Space, Switch, Table, Tabs, Tag } from 'antd';\nimport { export_url } from 'configs/app-global';\nimport { Context } from 'context/context';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport categoryService from 'services/category';\nimport { fetchCategories } from 'redux/slices/category';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from 'components/delete-button';\nimport FilterColumns from 'components/filter-column';\nimport SearchInput from 'components/search-input';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport formatSortType from 'helpers/formatSortType';\nimport CategoryStatusModal from './categoryStatusModal';\n\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst { TabPane } = Tabs;\nconst roles = ['all', 'pending', 'published', 'unpublished'];\n\nconst CategoryList = ({\n  parentId,\n  type = 'main',\n  parent_type,\n  isRefetch = false,\n  handleAddAction = () => {},\n  activeTab = 'list',\n}) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [role, setRole] = useState('all');\n  const immutable = activeMenu.data?.role || role;\n  const { uuid: parentUuid } = useParams();\n  const [active, setActive] = useState(null);\n  const [categoryDetails, setCategoryDetails] = useState(null);\n\n  function goToEdit(row) {\n    dispatch(\n      addMenu({\n        url: `category/${row.uuid}`,\n        id: parentId ? 'category_sub_edit' : 'category_edit',\n        name: parentId ? t('edit.sub.category') : t('edit.category'),\n      }),\n    );\n    navigate(`/category/${row.uuid}`, { state: { parentId, parentUuid } });\n  }\n  function goToShow(row) {\n    dispatch(\n      addMenu({\n        url: `category/show/${row.uuid}`,\n        id: 'category_show',\n        name: t('category.show'),\n      }),\n    );\n    navigate(`/category/show/${row.uuid}`, { state: { parentId, parentUuid } });\n  }\n\n  const goToAddCategory = () => {\n    if (parentId) {\n      handleAddAction(parentId);\n    } else {\n      dispatch(\n        addMenu({\n          id: parentId ? 'sub-category-add' : 'category-add',\n          url: 'category/add',\n          name: parentId ? t('add.sub.category') : t('add.category'),\n        }),\n      );\n      navigate('/category/add', { state: { parentId, parentUuid } });\n    }\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        url: `catalog/categories/import`,\n        id: parentId ? 'sub_category_import' : 'category_import',\n        name: parentId ? t('import.sub.category') : t('import.category'),\n      }),\n    );\n    navigate(`/catalog/categories/import`, { state: { parentId, parentUuid } });\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: parentId ? 'sub-category-clone' : `category-clone`,\n        url: `category-clone/${uuid}`,\n        name: parentId ? t('sub.category.clone') : t('category.clone'),\n      }),\n    );\n    navigate(`/category-clone/${uuid}`, { state: { parentId, parentUuid } });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={img || 'https://via.placeholder.com/150'}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n          <EditOutlined onClick={() => setCategoryDetails(row)} />\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { categories, meta, loading } = useSelector(\n    (state) => state.category,\n    shallowEqual,\n  );\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    perPage: activeMenu?.data?.perPage || 10,\n    page: data?.page || 1,\n    status: immutable === 'all' ? undefined : immutable,\n    type: type,\n    parent_id: parentId,\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    categoryService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchCategories(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && activeTab === 'list') {\n      dispatch(fetchCategories(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  // useEffect(() => {\n  //   if (isRefetch) dispatch(fetchCategories(paramsData));\n  // }, [isRefetch]);\n\n  useDidUpdate(() => {\n    if (activeTab === 'list') {\n      dispatch(fetchCategories(paramsData));\n    }\n  }, [activeMenu.data, type, parentId, activeTab]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const excelExport = () => {\n    setDownloading(true);\n    categoryService\n      .export(paramsData)\n      .then((res) => {\n        window.location.href = export_url + res.data.file_name;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      }),\n    );\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    categoryService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchCategories(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <>\n      {!parentId && (\n        <Card className='p-0'>\n          <Space wrap size={[14, 20]}>\n            <SearchInput\n              placeholder={t('search')}\n              className='w-25'\n              handleChange={(e) => {\n                handleFilter({ search: e });\n              }}\n              defaultValue={activeMenu.data?.search}\n              resetSearch={!activeMenu.data?.search}\n              style={{ minWidth: 300 }}\n            />\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n\n            <Button style={{ minWidth: 150 }} onClick={goToImport}>\n              <CgImport className='mr-2' />\n              {t('import')}\n            </Button>\n            <Button\n              style={{ minWidth: 150 }}\n              loading={downloading}\n              onClick={excelExport}\n            >\n              <CgExport className='mr-2' />\n              {t('export')}\n            </Button>\n            {parent_type !== 'child' && (\n              <Button\n                type='primary'\n                icon={<PlusCircleOutlined />}\n                onClick={goToAddCategory}\n              >\n                {t('add.category')}\n              </Button>\n            )}\n            <Button\n              icon={<ClearOutlined />}\n              onClick={handleClear}\n              disabled={!activeMenu.data}\n              style={{ minWidth: 100 }}\n            />\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        </Card>\n      )}\n\n      <Card title={parentId ? t('sub.category') : t('categories')}>\n        {parentId && (\n          <Space wrap size={[14, 20]}>\n            <SearchInput\n              placeholder={t('search')}\n              className='w-25'\n              handleChange={(e) => {\n                handleFilter({ search: e });\n              }}\n              defaultValue={activeMenu.data?.search}\n              resetSearch={!activeMenu.data?.search}\n              style={{ minWidth: 300 }}\n            />\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n\n            <Button style={{ minWidth: 150 }} onClick={goToImport}>\n              <CgImport className='mr-2' />\n              {t('import')}\n            </Button>\n            <Button\n              style={{ minWidth: 150 }}\n              loading={downloading}\n              onClick={excelExport}\n            >\n              <CgExport className='mr-2' />\n              {t('export')}\n            </Button>\n            {parent_type !== 'child' && (\n              <Button\n                type='primary'\n                icon={<PlusCircleOutlined />}\n                onClick={goToAddCategory}\n              >\n                {t('add.category')}\n              </Button>\n            )}\n            <Button\n              icon={<ClearOutlined />}\n              onClick={handleClear}\n              disabled={!activeMenu.data}\n              style={{ minWidth: 100 }}\n            />\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        )}\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={categories}\n          pagination={{\n            pageSize: activeMenu.data?.perPage || 10,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n\n      <CustomModal\n        click={active ? handleActive : categoryDelete}\n        text={\n          active\n            ? t('set.active.category')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        setText={setId}\n        loading={loadingBtn}\n      />\n\n      {categoryDetails && (\n        <CategoryStatusModal\n          categoryDetails={categoryDetails}\n          handleCancel={() => setCategoryDetails(null)}\n          paramsData={paramsData}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CategoryList;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/subcategory-add.js",["6272"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport categoryService from '../../services/category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\n\nconst SubcategoryAdd = ({ parent = {}, setId, setIsRefetch }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      form.resetFields();\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n\n    const body = {\n      ...values,\n      type: parent?.type === 'main' ? 'sub_main' : 'child',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        setId(null);\n        form.resetFields();\n        setIsRefetch(true);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n  if (!parent?.id) return '';\n\n  return (\n    <Form\n      name='basic'\n      layout='vertical'\n      onFinish={onFinish}\n      initialValues={{\n        active: true,\n        ...parent,\n      }}\n      form={form}\n    >\n      <Row gutter={24}>\n        <Col span={24}>\n          <Form.Item\n            label={t('parent.category')}\n            name='parent_id'\n            rules={[{ required: false, message: t('required') }]}\n          >\n            <Select disabled />\n          </Form.Item>\n        </Col>\n        <Col span={24}>\n          {languages.map((item, index) => (\n            <Form.Item\n              key={item.title + index}\n              label={t('name')}\n              name={`title[${item.locale}]`}\n              help={\n                error\n                  ? error[`title.${defaultLang}`]\n                    ? error[`title.${defaultLang}`][0]\n                    : null\n                  : null\n              }\n              validateStatus={error ? 'error' : 'success'}\n              rules={[\n                {\n                  required: true,\n                  validator(_, value) {\n                    if (!value && item?.locale === defaultLang) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              hidden={item.locale !== defaultLang}\n            >\n              <Input placeholder={t('name')} />\n            </Form.Item>\n          ))}\n        </Col>\n\n        <Col span={24}>\n          {languages.map((item, index) => (\n            <Form.Item\n              key={item.locale + index}\n              label={t('description')}\n              name={`description[${item.locale}]`}\n              rules={[\n                {\n                  required: true,\n                  validator(_, value) {\n                    if (!value && item?.locale === defaultLang) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 5) {\n                      return Promise.reject(new Error(t('must.be.at.least.5')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              hidden={item.locale !== defaultLang}\n            >\n              <TextArea rows={4} />\n            </Form.Item>\n          ))}\n        </Col>\n\n        <Col span={24}>\n          <Form.Item\n            label={t('keywords')}\n            name='keywords'\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n          >\n            <Select mode='tags' style={{ width: '100%' }}></Select>\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            label={t('image')}\n            name='images'\n            rules={[\n              {\n                validator() {\n                  if (image?.length === 0) {\n                    return Promise.reject(new Error(t('required')));\n                  }\n                  return Promise.resolve();\n                },\n              },\n            ]}\n          >\n            <MediaUpload\n              type='categories'\n              imageList={image}\n              setImageList={setImage}\n              form={form}\n              multiple={false}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label={t('active')} name='active' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Button\n        type='primary'\n        htmlType='submit'\n        loading={loadingBtn}\n        className='w-100'\n      >\n        {t('submit')}\n      </Button>\n    </Form>\n  );\n};\nexport default SubcategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/scrollTo.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/hideEmail.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getImage.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/numberToPrice.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/upload/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/chat/channel.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/chat/message-action-indicator.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/chat/upload-media.js",["6273"],[],"import React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Modal } from 'antd';\nimport galleryService from '../../services/gallery';\nimport Loading from '../../components/loading';\n\nconst UploadMedia = ({\n  modal,\n  url,\n  setModal,\n  setPercent = () => {},\n  file,\n  handleOnSubmit,\n}) => {\n  const toggle = () => setModal(!modal);\n  const [loading, setLoading] = useState(false);\n  const handleUpload = () => {\n    setLoading(true);\n    if (!file) {\n      return toast.error('Please upload an image first!');\n    }\n    let formData = new FormData();\n    formData.append('image', file);\n    formData.append('type', 'users');\n\n    galleryService\n      .upload(formData)\n      .then((res) => {\n        handleOnSubmit({ type: 'image', message: res.data.title });\n      })\n      .catch((err) => console.error(err))\n      .finally(() => {\n        setLoading(false);\n        setModal(false);\n      });\n  };\n  return (\n    <Modal visible={modal} footer={false} onOk={toggle} onCancel={toggle}>\n      <div className='upload-form position-relative'>\n        {loading && (\n          <div className='position-absolute h-100 w-100 d-flex justify-content-center align-items-center bg-transparent'>\n            <Loading />\n          </div>\n        )}\n        <img src={url} />\n        <div className='footer-btns'>\n          <Button disabled={loading} onClick={toggle}>\n            Cancel\n          </Button>\n          <Button disabled={loading} onClick={handleUpload}>\n            Send\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default UploadMedia;\n","/home/mostafa/Magde/new/frontadminreact/src/views/coupons/coupon-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/search-input.js",["6274","6275"],[],"import React, { useMemo, useState, useEffect } from 'react';\nimport { Input } from 'antd';\nimport { debounce } from 'lodash';\nimport { SearchOutlined } from '@ant-design/icons';\n\nexport default function SearchInput({\n  handleChange,\n  defaultValue,\n  resetSearch,\n  ...props\n}) {\n  const [searchTerm, setSearchTerm] = useState(defaultValue);\n\n  const debounceSearch = useMemo(() => {\n    const loadOptions = (value) => {\n      handleChange(value);\n    };\n    return debounce(loadOptions, 800);\n  }, []);\n\n  useEffect(() => {\n    setSearchTerm(defaultValue);\n  }, [resetSearch]);\n\n  return (\n    <Input\n      value={searchTerm}\n      onChange={(event) => {\n        setSearchTerm(event.target.value);\n        debounceSearch(event.target.value);\n      }}\n      prefix={<SearchOutlined />}\n      {...props}\n    />\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/formatSortType.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/useDemo.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/delete-button.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/filter-column.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/rive-result.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/update-booking.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/hideNumber.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/qr-code.js",["6276"],[],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport { toast } from 'react-toastify';\nimport { Tag, Button } from 'antd';\nimport axios from 'axios';\nimport {\n  API_KEY,\n  DYNAMIC_LINK_DOMAIN,\n  WEBSITE_URL,\n  ANDROID_PACKAGE_NAME,\n  IOS_BUNDLE_ID,\n} from 'configs/app-global';\nimport Loading from 'components/loading';\n\nconst firebaseUrl = `https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=${API_KEY}`;\n\nexport default function QrCode({ orderId, showLink = true, size = 2 }) {\n  const { t } = useTranslation();\n\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchQrCodeUrl = async () => {\n    setLoading(true);\n\n    const requestData = {\n      dynamicLinkInfo: {\n        domainUriPrefix: DYNAMIC_LINK_DOMAIN,\n        link: `${WEBSITE_URL}/orders/${orderId}`,\n        androidInfo: {\n          androidPackageName: ANDROID_PACKAGE_NAME,\n        },\n        iosInfo: {\n          iosBundleId: IOS_BUNDLE_ID,\n        },\n      },\n    };\n\n    try {\n      const { data } = await axios.post(firebaseUrl, requestData);\n      setError(null);\n      setQrCodeUrl(data?.shortLink);\n    } catch (error) {\n      setError(error);\n      toast.error(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchQrCodeUrl();\n  }, [orderId]);\n\n  return (\n    <>\n      <h3>{t('qr_code')}:</h3>\n      <div>\n        {!loading && !error ? (\n          <>\n            <div\n              style={{\n                width: `${size * 100}px`,\n                height: `${size * 100}px`,\n                borderRadius: '10px',\n                overflow: !error ? 'hidden' : 'none',\n              }}\n            >\n              <QRCodeCanvas\n                size={500}\n                id='qrCode'\n                includeMargin\n                value={qrCodeUrl}\n                style={{\n                  width: '100%',\n                  aspectRatio: '1/1',\n                  height: '100%',\n                }}\n                bgColor={'#fff'}\n                level={'H'}\n              />\n            </div>\n            <br />\n            {showLink && (\n              <Button\n                type={'primary'}\n                href={qrCodeUrl}\n                target={'_blank'}\n                rel={'noreferrer'}\n                style={{ width: `${size * 100}px` }}\n              >\n                {t('link.to.order')}\n              </Button>\n            )}\n          </>\n        ) : !!error ? (\n          <Tag color='red'>{t('smth.went.wrong')}</Tag>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/addons/productStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/payout-requests/payoutRequestModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/transactions/transactionShowModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/transactions/status-modal.js",["6277"],[],"import React, { useState } from 'react';\nimport { Button, Col, Form, Modal, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport transactionService from '../../services/transaction';\nimport { fetchTransactions } from '../../redux/slices/transaction';\n\nconst status = ['paid', 'canceled'];\n\nexport default function StatusModal({\n  transactionDetails: data,\n  handleCancel,\n  paramsData,\n}) {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = (values) => {\n    setLoading(true);\n    transactionService\n      .updateTransactionStatus(data.id, values)\n      .then(() => {\n        handleCancel();\n        dispatch(fetchTransactions(paramsData));\n      })\n      .catch((err) => toast.error(err.message))\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Modal\n      visible={!!data}\n      title={t('transaction.status')}\n      closable={false}\n      footer={[\n        <Button\n          key='save-form'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loading}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cansel-modal' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{ status: data.status }}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <Form.Item\n              label={t('status')}\n              name='status'\n              rules={[\n                {\n                  validator(_, value) {\n                    if (!value || value === 'progress')\n                      return Promise.reject(new Error(t('required')));\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <Select>\n                {status.map((item, index) => (\n                  <Select.Option key={index} value={item}>\n                    {t(item)}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/cashback/cashbackEditModal.js",["6278"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, InputNumber, Modal, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport pointService from '../../services/points';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setRefetch } from '../../redux/slices/menu';\nimport Loading from '../../components/loading';\nimport shopService from '../../services/restaurant';\nimport { DebounceSelect } from '../../components/search';\n\nexport default function CashbackEditModal({ visibility: id, handleCancel }) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    pointService\n      .getById(id)\n      .then(({ data }) => {\n        const body = {\n          ...data,\n          shop_id: {\n            label: data?.shop?.translation?.title,\n            value: data?.shop?.id,\n          },\n        };\n        form.setFieldsValue(body);\n      })\n      .finally(() => setLoading(false));\n  }, [id]);\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }))\n    );\n  }\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const payload = {\n      ...values,\n      type: 'percent',\n      shop_id: values.shop_id.value,\n    };\n    pointService\n      .update(id, payload)\n      .then(() => {\n        handleCancel();\n        dispatch(setRefetch(activeMenu));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Modal\n      visible={!!id}\n      title={t('edit.cashback')}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-cashback'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-cashback' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <Form form={form} layout='vertical' onFinish={onFinish}>\n          <Row gutter={12}>\n            <Col span={24}>\n              <Form.Item\n                label={t('shop/restaurant')}\n                name='shop_id'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DebounceSelect\n                  placeholder={t('select.shop')}\n                  fetchOptions={fetchShops}\n                  style={{ minWidth: 150 }}\n                  allowClear={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('cashback')}\n                name='price'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <InputNumber min={0} className='w-100' addonAfter='%' />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('min.amount')}\n                name='value'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/cashback/cashbackModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/career-categories/career-category-status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/menu-categories/category-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/menu-categories/category-edit.js",["6279","6280"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Form, Input, Modal } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch } from '../../redux/slices/menu';\nimport categoryService from '../../services/category';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { setRefetch } from 'redux/slices/menu';\n\nconst MenuCategoryEdit = ({ isModalOpen, handleCancel }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  const uuid = isModalOpen?.uuid;\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getCategory = (alias) => {\n    setLoading(true);\n    categoryService\n      .getById(alias)\n      .then((res) => {\n        let category = res.data;\n        const body = {\n          ...getLanguageFields(category),\n        };\n        form.setFieldsValue(body);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      type: 'menu',\n    };\n\n    console.log('isModalOpen => ', isModalOpen);\n\n    categoryService\n      .update(uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        handleCancel();\n        dispatch(setRefetch(activeMenu));\n      })\n      .catch((err) => console.error(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (isModalOpen) getCategory(isModalOpen.uuid);\n  }, [isModalOpen]);\n\n  return (\n    <Modal\n      visible={isModalOpen}\n      title={t('edit.menu.category')}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          loading={loadingBtn}\n          type='primary'\n          key={'saveBtn'}\n          onClick={() => form.submit()}\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Card extra={<LanguageList />} loading={loading}>\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          initialValues={{\n            ...activeMenu.data,\n          }}\n          form={form}\n        >\n          {languages.map((item, index) => (\n            <Form.Item\n              key={item.title + index}\n              label={t('name')}\n              name={`title[${item.locale}]`}\n              rules={[\n                {\n                  required: item.locale === defaultLang,\n                  message: t('required'),\n                },\n              ]}\n              hidden={item.locale !== defaultLang}\n            >\n              <Input placeholder={t('name')} className='w-100' />\n            </Form.Item>\n          ))}\n        </Form>\n      </Card>\n    </Modal>\n  );\n};\nexport default MenuCategoryEdit;\n","/home/mostafa/Magde/new/frontadminreact/src/views/admin-payouts/payoutActionModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/admin-payouts/payoutStatusChangeModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-request-list.js",["6281","6282","6283"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Card, Image, Table, Button, Space, Tag, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport { EditOutlined, MessageOutlined } from '@ant-design/icons';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport FilterColumns from 'components/filter-column';\nimport formatSortType from 'helpers/formatSortType';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchRequestModels } from 'redux/slices/request-models';\nimport { HiArrowNarrowRight } from 'react-icons/hi';\nimport requestAdminModelsService from 'services/request-models';\nimport moment from 'moment';\nimport CategoryRequestModal from './category-request-modal';\n\nconst body = {\n  type: 'category',\n};\n\nexport default function CategoryRequestList({\n  parentId,\n  type = 'main',\n  activeTab = 'request',\n}) {\n  const { t } = useTranslation();\n  const { setIsModalVisible } = useContext(Context);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isVisibleMsgModal, setIsVisibleMsgModal] = useState(false);\n  const [modalText, setModalText] = useState('');\n  const [id, setId] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    data: requests,\n    meta,\n    loading,\n    params,\n  } = useSelector((state) => state.requestModels, shallowEqual);\n  const data = activeMenu.data;\n  const { uuid: parentUuid } = useParams();\n\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    parent_id: parentId,\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `category-request/${row.id}`,\n        id: 'request_edit',\n        name: t('request.edit'),\n      }),\n    );\n    navigate(`/category-request/${row.id}`, {\n      state: { parentId, parentUuid },\n    });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('created.by'),\n      dataIndex: 'createdBy',\n      key: 'createdBy',\n      is_show: true,\n      render: (createdBy) => (\n        <span>\n          {createdBy.firstname} {createdBy?.lastname}{' '}\n          <a href={`tel:${createdBy?.phone}`}>{createdBy?.phone}</a>\n        </span>\n      ),\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          {row.model.translation.title} <HiArrowNarrowRight />{' '}\n          {row.data.title[row.model.translation.locale]}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Image\n              src={getImage(row.model.img)}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n            <HiArrowNarrowRight />\n            <Image\n              src={getImage(row.data.images.at(0))}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EditOutlined />} onClick={() => goToEdit(row)} />\n            {row?.status === 'canceled' && row?.status_note && (\n              <Button\n                icon={<MessageOutlined />}\n                onClick={() => {\n                  setModalText(row.status_note);\n                  setIsVisibleMsgModal(true);\n                }}\n              />\n            )}\n            <Button\n              type='primary'\n              onClick={() => {\n                setId([{ id: row.id, status: 'approved' }]);\n                setIsModalVisible(true);\n              }}\n            >\n              {t('accept')}\n            </Button>\n            <Button\n              type='primary'\n              danger\n              onClick={() => {\n                setId([{ id: row.id, status: 'canceled' }]);\n                setModalVisible(true);\n              }}\n            >\n              {t('decline')}\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch && activeTab === 'request') {\n      dispatch(fetchRequestModels(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    if (activeTab === 'request') {\n      dispatch(fetchRequestModels(paramsData));\n    }\n  }, [activeMenu.data, activeTab]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const requestStatusChange = (data) => {\n    setLoadingBtn(true);\n    const params = {\n      status: id?.at(0).status,\n      status_note: data?.status_note,\n    };\n    requestAdminModelsService\n      .changeStatus(id?.at(0).id, params)\n      .then(() => {\n        toast.success(t('successfully.changed'));\n        dispatch(fetchRequestModels(body));\n        setIsModalVisible(false);\n        setId(null);\n      })\n      .finally(() => {\n        setModalVisible(false);\n        setLoadingBtn(false);\n      });\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('requests')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={requests}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.key}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      <CustomModal\n        click={requestStatusChange}\n        text={t('change.status')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      <CategoryRequestModal\n        data={{ title: 'decline' }}\n        visible={modalVisible}\n        handleCancel={() => setModalVisible(false)}\n        handleOk={requestStatusChange}\n        laoding={loadingBtn}\n      />\n      <Modal\n        title='Reject message'\n        closable={false}\n        visible={isVisibleMsgModal}\n        footer={null}\n        centered\n      >\n        <p>{modalText}</p>\n        <div className='d-flex justify-content-end'>\n          <Button\n            type='primary'\n            className='mr-2'\n            onClick={() => setIsVisibleMsgModal(false)}\n          >\n            {t('close')}\n          </Button>\n        </div>\n      </Modal>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/generalDashboard.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/deliverymanDashboard.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/managerDashboard.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/moderatorDashboard.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/filter.js",["6284"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'antd';\nimport shopService from 'services/shop';\nimport brandService from 'services/brand';\nimport categoryService from 'services/category';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchRestProducts } from 'redux/slices/product';\nimport SearchInput from 'components/search-input';\nimport { useTranslation } from 'react-i18next';\nimport { setCartData, setProductsParams } from 'redux/slices/cart';\nimport { fetchRestPayments } from 'redux/slices/payment';\nimport { disableRefetch } from 'redux/slices/menu';\nimport { InfiniteSelect } from 'components/infinite-select';\n\nconst Filter = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { currentBag, productsParams } = useSelector(\n    (state) => state.cart,\n    shallowEqual,\n  );\n\n  const [search, setSearch] = useState(productsParams?.search);\n  const [shop, setShop] = useState(productsParams?.shop);\n  const [category, setCategory] = useState(productsParams?.category);\n  const [brand, setBrand] = useState(productsParams?.brand);\n  const [links, setLinks] = useState(null);\n\n  useEffect(() => {\n    setSearch(productsParams?.search);\n    setShop(productsParams?.shop);\n    setCategory(productsParams?.category);\n    setBrand(productsParams?.brand);\n    setLinks(null);\n  }, [productsParams]);\n\n  const params = {\n    ...productsParams,\n    search,\n    active: 1,\n    status: 'published',\n    page: 1,\n    perPage: 12,\n  };\n\n  async function fetchUserShop({ search, page }) {\n    const params = { search, page, status: 'approved' };\n    return shopService.search(params).then((res) => {\n      setLinks(res?.links);\n      return res.data.map((item) => ({\n        label: item?.translation?.title ?? 'no name',\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  async function fetchUserBrand({ search, page = 1 }) {\n    const params = { search, page };\n    return brandService.search(params).then((res) => {\n      setLinks(res?.links);\n      return res.data.map((item) => ({\n        label: item?.title ?? 'no name',\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  async function fetchUserCategory({ search, page }) {\n    const params = { search, page, type: 'main' };\n    return categoryService.search(params).then((res) => {\n      setLinks(res?.links);\n      return res.data.map((item) => ({\n        label: item?.translation?.title ?? 'no name',\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  useDidUpdate(() => {\n    batch(() => {\n      dispatch(setProductsParams({ search }));\n      dispatch(fetchRestProducts(params));\n    });\n  }, [brand, category, search, shop]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      batch(() => {\n        dispatch(fetchRestPayments(params));\n        dispatch(setCartData({ bag_id: currentBag }));\n        dispatch(fetchRestProducts(params));\n        dispatch(disableRefetch(activeMenu));\n      });\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card>\n      <Row gutter={12}>\n        <Col span={6}>\n          <SearchInput\n            className='w-100'\n            placeholder={t('search')}\n            handleChange={setSearch}\n          />\n        </Col>\n        <Col span={6}>\n          <InfiniteSelect\n            className='w-100'\n            hasMore={links?.next}\n            debounceTimeout={500}\n            placeholder={t('select.shop')}\n            fetchOptions={fetchUserShop}\n            onChange={(value) => {\n              setShop(value);\n              dispatch(\n                setProductsParams({ shop_id: value?.value, shop: value }),\n              );\n            }}\n            value={shop}\n          />\n        </Col>\n        <Col span={6}>\n          <InfiniteSelect\n            className='w-100'\n            hasMore={links?.next}\n            allowClear\n            placeholder={t('select.category')}\n            fetchOptions={fetchUserCategory}\n            onChange={(value) => {\n              setCategory(value);\n              dispatch(\n                setProductsParams({\n                  category_id: value?.value,\n                  category: value,\n                }),\n              );\n            }}\n            value={category}\n          />\n        </Col>\n        <Col span={6}>\n          <InfiniteSelect\n            hasMore={links?.next}\n            className='w-100'\n            placeholder={t('select.brand')}\n            fetchOptions={fetchUserBrand}\n            onChange={(value) => {\n              setBrand(value);\n              dispatch(\n                setProductsParams({ brand_id: value?.value, brand: value }),\n              );\n            }}\n            value={brand}\n            allowClear\n          />\n        </Col>\n      </Row>\n    </Card>\n  );\n};\nexport default Filter;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-request/details-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveryman-request/status-change-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/userOrders.js",[],["6285"],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/product-card.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/order-tabs.js",["6286","6287"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Row,\n  Select,\n  Space,\n  Spin,\n  InputNumber,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CloseOutlined,\n  PlusOutlined,\n  ShoppingCartOutlined,\n  UserAddOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport userService from 'services/user';\nimport { isArray } from 'lodash';\nimport {\n  addBag,\n  removeBag,\n  setCartData,\n  setCurrency,\n  setCurrentBag,\n} from 'redux/slices/cart';\nimport { getCartData } from 'redux/selectors/cartSelector';\nimport PosUserModal from './pos-user-modal';\nimport DeliveryInfo from './delivery-info';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport { AsyncSelect } from 'components/async-select';\nimport moment from 'moment';\nimport restPaymentService from 'services/rest/payment';\n\nexport default function OrderTabs() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  const { currencies, loading } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { currentBag, bags, currency } = useSelector(\n    (state) => state.cart,\n    shallowEqual,\n  );\n  const data = useSelector((state) => getCartData(state.cart));\n  const { before_order_phone_required } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  const [users, setUsers] = useState([]);\n  const [userModal, setUserModal] = useState(null);\n  const [links, setLinks] = useState(null);\n\n  async function getUsers({ search }) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.getAll(params).then((res) => {\n      setLinks(res.links);\n      setUsers(res.data);\n      return formatUser(res.data);\n    });\n  }\n\n  function formatUser(data) {\n    if (!data) return;\n    if (isArray(data)) {\n      return data.map((item) => ({\n        label: `${item?.firstname ?? ''} ${item?.lastname ?? ''}`,\n        value: item?.id,\n        key: item?.id,\n      }));\n    } else {\n      return {\n        label: `${data?.firstname ?? ''} ${data?.lastname ?? ''}`,\n        value: data?.id,\n        key: data?.id,\n      };\n    }\n  }\n\n  function selectUser(userObj) {\n    const user = users.find((item) => item.id === userObj.value);\n    dispatch(\n      setCartData({\n        user: userObj,\n        userUuid: user?.uuid,\n        bag_id: currentBag,\n        userOBJ: user,\n        phone: user?.phone,\n      }),\n    );\n    form.setFieldsValue({ address: null, phone: user?.phone });\n  }\n\n  const goToAddClient = () => setUserModal(true);\n\n  const closeTab = (event, item) => {\n    event.preventDefault();\n    event.stopPropagation();\n    dispatch(removeBag(item));\n  };\n\n  function selectCurrency(item) {\n    const currentCurrency = currencies.find((el) => el.id === item.value);\n    dispatch(setCurrency(currentCurrency));\n  }\n\n  useEffect(() => {\n    if (!currency) {\n      const currentCurrency = currencies.find((item) => item.default);\n      const formCurrency = {\n        label: `${currentCurrency?.title} (${currentCurrency?.symbol})`,\n        value: currentCurrency?.id,\n        key: currentCurrency?.id,\n      };\n      dispatch(\n        setCartData({\n          currentCurrency,\n          bag_id: currentBag,\n        }),\n      );\n      dispatch(setCurrency(currentCurrency));\n      form.setFieldsValue({\n        currency: formCurrency,\n      });\n    } else {\n      const formCurrency = {\n        label: `${currency?.title} (${currency?.symbol})`,\n        value: currency?.id,\n        key: currency?.id,\n      };\n      dispatch(\n        setCartData({\n          formCurrency,\n          bag_id: currentBag,\n        }),\n      );\n      form.setFieldsValue({\n        currency: formCurrency,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      user: data?.user || null,\n      payment_type: data?.paymentType || null,\n      address: data.address\n        ? {\n            value: data.address.value,\n            label: data.address.label,\n          }\n        : null,\n      delivery: data?.deliveries || null,\n      delivery_time: data?.delivery_time\n        ? moment(`${data?.delivery_date} ${data?.delivery_time}`)\n        : null,\n      delivery_date: data?.delivery_date ? moment(data?.delivery_date) : null,\n      delivery_point: data?.delivery_point || null,\n      country: data?.country || null,\n      city: data?.city || null,\n      phone: data?.phone || null,\n      home_number: data?.street_house_number || null,\n      zip_code: data?.zip_code || null,\n    });\n  }, [currentBag, data]);\n\n  const handleAddBag = () => {\n    dispatch(addBag({ shop: data?.shop }));\n  };\n\n  async function fetchPaymentList() {\n    return restPaymentService.getAll().then(({ data }) =>\n      data\n        .filter((el) => el.tag === 'cash' || el.tag === 'wallet')\n        .map((item) => ({\n          label: t(item.tag) || t('no.name'),\n          value: item?.tag,\n          key: item?.id,\n        })),\n    );\n  }\n\n  return (\n    <div className='order-tabs'>\n      <div className='tabs-container'>\n        <div className='tabs'>\n          {bags.map((item) => (\n            <div\n              key={'tab' + item}\n              className={item === currentBag ? 'tab active' : 'tab'}\n              onClick={() => dispatch(setCurrentBag(item))}\n            >\n              <Space>\n                <ShoppingCartOutlined />\n                <span>\n                  {t('bag')} - {item + 1}\n                </span>\n                {item && item === currentBag ? (\n                  <CloseOutlined\n                    onClick={(event) => closeTab(event, item)}\n                    className='close-button'\n                    size={12}\n                  />\n                ) : (\n                  ''\n                )}\n              </Space>\n            </div>\n          ))}\n        </div>\n        <Button\n          size='small'\n          type='primary'\n          shape='circle'\n          icon={<PlusOutlined />}\n          className='tab-add-button'\n          onClick={() => handleAddBag()}\n        />\n      </div>\n      <Form layout='vertical' name='pos-form' form={form}>\n        <Card className={!!currentBag ? '' : t('tab-card')}>\n          {loading && (\n            <div className='loader'>\n              <Spin />\n            </div>\n          )}\n\n          <Row gutter={6} style={{ marginBottom: 15 }}>\n            <Col span={21}>\n              <Form.Item\n                name='user'\n                rules={[{ required: true, message: '' }]}\n                className='w-100'\n              >\n                <InfiniteSelect\n                  hasMore={links?.next}\n                  placeholder={t('select.client')}\n                  fetchOptions={getUsers}\n                  onSelect={selectUser}\n                  onClear={() => {\n                    form.setFieldsValue({ phone: null, user: null });\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={3}>\n              <Form.Item>\n                <Button icon={<UserAddOutlined />} onClick={goToAddClient} />\n              </Form.Item>\n            </Col>\n            {before_order_phone_required === '1' && (\n              <Col span={12}>\n                <Form.Item\n                  name='phone'\n                  rules={[\n                    { required: true, message: t('required') },\n                    {\n                      validator(_, value) {\n                        if (value < 0) {\n                          return Promise.reject(\n                            new Error(t('must.be.positive')),\n                          );\n                        }\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    className='w-100'\n                    placeholder={t('phone.number')}\n                    disabled={data?.userOBJ?.phone}\n                    onChange={(phone) =>\n                      dispatch(\n                        setCartData({ phone: phone, bag_id: currentBag }),\n                      )\n                    }\n                  />\n                </Form.Item>\n              </Col>\n            )}\n\n            <Col span={12}>\n              <Form.Item\n                name='currency'\n                rules={[{ required: true, message: 'missing_currency' }]}\n              >\n                <Select\n                  placeholder={t('select.currency')}\n                  onSelect={selectCurrency}\n                  labelInValue\n                  disabled\n                  onChange={(e) => {\n                    const currency = e;\n                    dispatch(\n                      setCartData({\n                        currency,\n                        bag_id: currentBag,\n                      }),\n                    );\n                  }}\n                >\n                  {currencies.map((item, index) => (\n                    <Select.Option key={index} value={item?.id}>\n                      {`${item?.title} (${item?.symbol})`}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                name='payment_type'\n                rules={[{ required: true, message: t('missing.payment.type') }]}\n              >\n                <AsyncSelect\n                  fetchOptions={fetchPaymentList}\n                  className='w-100'\n                  placeholder={t('select.payment.type')}\n                  onSelect={(paymentType) => {\n                    dispatch(setCartData({ paymentType, bag_id: currentBag }));\n                  }}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n        <DeliveryInfo form={form} />\n      </Form>\n      {userModal && (\n        <PosUserModal\n          visible={userModal}\n          handleCancel={() => setUserModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/order-cart.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/walletHistory.js",[],["6288"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/userEditForm.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/userPassword.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/add-deliveryman-settings.js",[],["6289"],"/home/mostafa/Magde/new/frontadminreact/src/components/map-custom-marker.js",["6290"],[],"import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MAP_API_KEY } from 'configs/app-global';\n\nexport default function MapCustomMarker({ center, handleLoadMap, children }) {\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  return (\n    <GoogleMapReact\n      bootstrapURLKeys={{\n        key: MAP_API_KEY,\n      }}\n      defaultZoom={12}\n      defaultCenter={center}\n      options={{\n        fullscreenControl: false,\n      }}\n      yesIWantToUseGoogleMapApiInternals\n      onGoogleApiLoaded={({ map, maps }) => handleLoadMap(map, maps)}\n    >\n      {children}\n    </GoogleMapReact>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/deliveryman-settings.js",["6291"],[],"import { Col, Form, Input, Row, Select, InputNumber, Switch } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from '../../components/upload';\nimport Map from '../../components/map';\n\nconst type_of_technique = [\n  { label: 'Benzine', value: 'benzine' },\n  { label: 'Diesel', value: 'diesel' },\n  { label: 'Gas', value: 'gas' },\n  { label: 'Motorbike', value: 'motorbike' },\n  { label: 'Bike', value: 'bike' },\n  { label: 'Foot', value: 'foot' },\n  { label: 'Electric', value: 'electric' },\n];\n\nconst DeliverySetting = ({ location, setLocation, form, image, setImage }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Row gutter={12}>\n      <Col span={12}>\n        <Form.Item\n          label={t('brand')}\n          name='brand'\n          rules={[\n            {\n              required: true,\n              message: t('required'),\n            },\n            {\n              validator(_, value) {\n                if (value && value?.trim()?.length < 2) {\n                  return Promise.reject(new Error(t('must.be.at.least.2')));\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input placeholder={t('type.here')} maxLength={20} />\n        </Form.Item>\n      </Col>\n      <Col span={12}>\n        <Form.Item\n          label={t('model')}\n          name='model'\n          rules={[\n            {\n              required: true,\n              message: t('required'),\n            },\n            {\n              validator(_, value) {\n                if (value && value?.trim()?.length < 2) {\n                  return Promise.reject(new Error(t('must.be.at.least.2')));\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input placeholder={t('type.here')} maxLength={20} />\n        </Form.Item>\n      </Col>\n      <Col span={12}>\n        <Form.Item\n          label={t('type.of.technique')}\n          name='type_of_technique'\n          rules={[\n            {\n              required: true,\n              message: t('required'),\n            },\n          ]}\n        >\n          <Select\n            options={type_of_technique}\n            placeholder={t('select.technique')}\n          />\n        </Form.Item>\n      </Col>\n      <Col span={12}>\n        <Form.Item\n          label={t('car.number')}\n          name='number'\n          rules={[\n            {\n              required: true,\n              message: t('required'),\n            },\n            {\n              validator(_, value) {\n                if (value && value?.trim()?.length < 2) {\n                  return Promise.reject(new Error(t('must.be.at.least.2')));\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input placeholder={t('type.here')} maxLength={20} />\n        </Form.Item>\n      </Col>\n      <Col span={12}>\n        <Form.Item\n          label={t('car.color')}\n          name='color'\n          rules={[\n            {\n              required: true,\n              message: t('required'),\n            },\n            {\n              validator(_, value) {\n                if (value && value?.trim()?.length < 2) {\n                  return Promise.reject(new Error(t('must.be.at.least.2')));\n                }\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input placeholder={t('type.here')} maxLength={20} />\n        </Form.Item>\n      </Col>\n      <Col span={12}>\n        <Form.Item\n          label={t('image')}\n          name='deliveryman-settings-images'\n          rules={[\n            {\n              // validator() {\n              //   if (image?.length === 0) {\n              //     return Promise.reject(new Error(t('required')));\n              //   }\n              //   return Promise.resolve();\n              // },\n              required: !image?.length,\n              message: t('required'),\n            },\n          ]}\n        >\n          <MediaUpload\n            type='deliveryman/settings'\n            imageList={image}\n            setImageList={setImage}\n            form={form}\n            length='1'\n            multiple={true}\n          />\n        </Form.Item>\n      </Col>\n      <Col span={6}>\n        <Form.Item\n          label={t('online')}\n          name='online'\n          rules={[{ required: true, message: t('required') }]}\n          valuePropName='checked'\n        >\n          <Switch />\n        </Form.Item>\n      </Col>\n      <Col span={24}>\n        <Form.Item label={t('map')} name='location'>\n          <Map location={location} setLocation={setLocation} />\n        </Form.Item>\n      </Col>\n    </Row>\n  );\n};\n\nexport default DeliverySetting;\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/deliveryman-address.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/order-card.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/delivery-statistic.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/order-data.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/orderStatusModal.js",["6292","6293","6294"],[],"import React, { useEffect, useState, useRef } from 'react';\nimport {\n  Button,\n  Col,\n  Collapse,\n  Divider,\n  Form,\n  Input,\n  Modal,\n  Row,\n  Select,\n} from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport orderService from 'services/order';\nimport Loading from 'components/loading';\nimport LanguageList from 'components/language-list';\nimport moment from 'moment';\nimport { EditOutlined, SendOutlined } from '@ant-design/icons';\n\nconst { Panel } = Collapse;\n\nexport default function OrderStatusModal({\n  orderId,\n  handleCancel,\n  refetchPage,\n}) {\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n\n  const changeInputRef = useRef(null);\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [statuses, setStatuses] = useState(\n    !!statusList?.length\n      ? statusList?.map((item) => ({\n          value: item?.name,\n          label: t(item?.name),\n          key: item?.id,\n        }))\n      : [],\n  );\n  const [data, setData] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [changeNote, setChangeNote] = useState(null);\n  const [status, setStatus] = useState(null);\n\n  // console.log('status => ', statusList);\n\n  const fetchOrderById = () => {\n    setLoading(true);\n    orderService\n      .getById(orderId)\n      .then((res) => {\n        setData(res.data);\n        setNotes(res.data?.notes?.filter((item) => !!item?.notes?.length));\n        setStatus(res.data?.status);\n        form.setFieldsValue({ status: res?.data?.status });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchOrderById();\n  }, [orderId]);\n\n  useEffect(() => {\n    if (data?.status === 'pause') {\n      setStatuses(\n        statusList?.map((item) => ({\n          value: item?.name,\n          label: t(item?.name),\n          key: item?.id,\n        })),\n      );\n      return;\n    }\n\n    const statusIndex = statusList.findIndex(\n      (item) => item.name === data?.status,\n    );\n\n    const newStatuses =\n      statusIndex >= 0\n        ? [\n            statusList[statusIndex],\n            statusIndex < statusList.length - 1\n              ? statusList[statusIndex + 1]?.name === 'pause'\n                ? statusList[statusIndex + 2]\n                : statusList[statusIndex + 1]\n              : null,\n          ]\n        : [\n            statusIndex < statusList.length - 1\n              ? statusList[statusIndex + 1]\n              : null,\n          ];\n\n    if (statusList[statusIndex]?.name === 'on_a_way') {\n      newStatuses.push(statusList[statusIndex + 3]);\n    }\n\n    if (statusList?.filter((item) => item?.name === 'pause' && item?.active)) {\n      newStatuses?.push(\n        statusList?.filter(\n          (item) => item?.name === 'pause' && item?.active,\n        )?.[0],\n      );\n    }\n\n    newStatuses.push({\n      name: 'canceled',\n      id: 8,\n      active: true,\n      sort: statusList?.length + 1,\n    });\n\n    setStatuses(\n      newStatuses.filter(Boolean).map((item) => ({\n        value: item?.name,\n        label: t(item?.name),\n        key: item?.id,\n      })),\n    ); // Remove null values\n  }, [data]);\n\n  const removeUndefinedValues = (obj) => {\n    const filteredEntries = Object.entries(obj).filter(([_, value]) => !!value);\n\n    if (filteredEntries?.length === 0) {\n      return;\n    }\n\n    return Object.fromEntries(filteredEntries);\n  };\n\n  const onFinish = (values) => {\n    let updatedNoteTitle = null;\n\n    setLoadingBtn(true);\n\n    if (!!changeNote && values?.status === data?.status) {\n      updatedNoteTitle = {\n        ...Object.assign(\n          {},\n          ...languages.map((lang) => ({\n            [lang.locale]: values[`title[${lang.locale}]`],\n          })),\n        ),\n      };\n      updatedNoteTitle = removeUndefinedValues(updatedNoteTitle);\n    }\n\n    const currentNotes = removeUndefinedValues({\n      ...Object.assign(\n        {},\n        ...languages.map((lang) => ({\n          [lang.locale]: values[`note[${lang.locale}]`],\n        })),\n      ),\n    });\n\n    const title = !!currentNotes ? { title: currentNotes } : null;\n\n    const previousNotes =\n      data?.status === values?.status\n        ? data?.notes\n            ?.filter((item) => item?.status === values?.status)\n            .flatMap((item) =>\n              item?.notes?.map((note, index) =>\n                index === changeNote?.index\n                  ? { ...note, title: { ...note?.title, ...updatedNoteTitle } }\n                  : note,\n              ),\n            )\n            .filter(Boolean)\n        : [];\n\n    const params = {\n      status: values?.status,\n      notes: [...previousNotes, title].filter(Boolean),\n    };\n\n    orderService\n      .updateStatus(data.id, params)\n      .then(() => {\n        handleCancel();\n        refetchPage();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [`title[${defaultLang || 'en'}]`]:\n        changeNote?.title?.[defaultLang || 'en'],\n    });\n  }, [defaultLang]);\n\n  return (\n    <Modal\n      visible={!!orderId}\n      title={[t('order.status')]}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-form'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cansel-modal' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <Form\n            form={form}\n            layout='vertical'\n            onFinish={onFinish}\n            name='order-status-change-form'\n          >\n            <Row gutter={12} style={{ marginBottom: '20px' }}>\n              <Col span={24}>\n                <LanguageList />\n              </Col>\n            </Row>\n\n            {!!data?.notes?.some((item) => !!item?.notes?.length) && (\n              <>\n                <Collapse>\n                  {notes?.map((item) => (\n                    <Panel header={t(item?.status)} key={item?.id}>\n                      {item?.notes?.map((note, index) => (\n                        <Row\n                          style={{\n                            marginBottom: '15px',\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                          }}\n                          gutter={12}\n                          key={index}\n                        >\n                          <Col\n                            span={\n                              item?.status === data?.status &&\n                              status === data?.status\n                                ? 22\n                                : 24\n                            }\n                          >\n                            <div style={{ display: 'flex', columnGap: '10px' }}>\n                              <span style={{ marginTop: '3px' }}>\n                                {index + 1}.{' '}\n                              </span>\n                              <div style={{ width: '100%' }}>\n                                <p\n                                  style={{\n                                    margin: 0,\n                                    fontSize: '15px',\n                                    wordBreak: 'break-all',\n                                  }}\n                                  hidden={\n                                    changeNote?.orderId === item?.id &&\n                                    changeNote?.index === index &&\n                                    data?.status === status\n                                  }\n                                >\n                                  {note?.title?.[defaultLang || 'en'] || '--'}\n                                </p>\n                                {\n                                  <Form.Item\n                                    name={`title[${defaultLang || 'en'}]`}\n                                    hidden={\n                                      changeNote?.orderId !== item?.id ||\n                                      changeNote?.index !== index ||\n                                      data?.status !== status\n                                    }\n                                  >\n                                    <Input.TextArea\n                                      maxLength={200}\n                                      key={index}\n                                      style={{\n                                        width: '100%',\n                                      }}\n                                      rows={\n                                        Math.floor(\n                                          note?.title?.[defaultLang || 'en']\n                                            ?.length / 41 || 0,\n                                        ) + 1\n                                      }\n                                      ref={changeInputRef}\n                                    />\n                                  </Form.Item>\n                                }\n                              </div>\n                            </div>\n                            <p\n                              style={{\n                                fontSize: '12px',\n                                margin: 0,\n                                float: 'right',\n                              }}\n                            >\n                              {moment(note?.created_at).format(\n                                'DD-MM-YYYY HH:mm',\n                              )}\n                            </p>\n                          </Col>\n                          {item?.status === data?.status &&\n                            data?.status === status && (\n                              <Col span={2}>\n                                {changeNote?.orderId === item?.id &&\n                                index === changeNote?.index ? (\n                                  <Button\n                                    type='primary'\n                                    icon={<SendOutlined />}\n                                    size={'small'}\n                                    onClick={() => form.submit()}\n                                    loading={loadingBtn}\n                                  />\n                                ) : (\n                                  item?.status === data?.status && (\n                                    <Button\n                                      icon={<EditOutlined />}\n                                      size='small'\n                                      onClick={() => {\n                                        changeInputRef.current.focus();\n                                        setChangeNote({\n                                          orderId: item?.id,\n                                          index: index,\n                                          title: note?.title,\n                                        });\n                                        form.setFieldsValue({\n                                          [`title[${defaultLang || 'en'}]`]:\n                                            note?.title?.[defaultLang || 'en'],\n                                        });\n                                      }}\n                                    />\n                                  )\n                                )}\n                              </Col>\n                            )}\n                        </Row>\n                      )) || '--'}\n                    </Panel>\n                  ))}\n                </Collapse>\n                <Divider />\n              </>\n            )}\n\n            <Row gutter={12}>\n              <Col span={24}>\n                <Form.Item\n                  label={t('status')}\n                  name='status'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Select\n                    options={statuses}\n                    onSelect={(item) => setStatus(item)}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    name={`note[${item?.locale}]`}\n                    key={`note_${item?.id}`}\n                    label={t('note')}\n                    hidden={item?.locale !== defaultLang}\n                  >\n                    <Input.TextArea maxLength={200} />\n                  </Form.Item>\n                ))}\n              </Col>\n            </Row>\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/orderDeliveryman.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/show-locations.map.js",["6295"],[],"import GoogleMapReact from 'google-map-react';\nimport { Button, Card, Col, Modal, Row, Steps, Tag } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport orderService from 'services/order';\nimport Loading from 'components/loading';\nimport { BsCalendar2Day, BsCheckLg } from 'react-icons/bs';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MAP_API_KEY } from 'configs/app-global';\nimport FaUser from 'assets/images/user.jpg';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { ShoppingCartOutlined } from '@ant-design/icons';\nimport { MdRestaurant } from 'react-icons/md';\nimport { IoBicycleSharp, IoCheckmarkDoneSharp } from 'react-icons/io5';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport moment from 'moment';\nconst { Step } = Steps;\n\nconst User = () => (\n  <div\n    style={{\n      position: 'absolute',\n      transform: 'translate(-50%, -100%)',\n    }}\n  >\n    <img src={FaUser} width='50' alt='Pin' />\n  </div>\n);\n\nconst ShowLocationsMap = ({ id, handleCancel }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n  const [status, setStatus] = useState(null);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const center = getDefaultLocation(settings);\n  const [current, setCurrent] = useState(0);\n  const [userLocation, setUserLocation] = useState({\n    lat: center?.lat,\n    lng: center?.lng,\n  });\n  const [steps, setSteps] = useState([\n    { id: 0, name: 'new', icon: <ShoppingCartOutlined /> },\n    { id: 1, name: 'accepted', icon: <BsCheckLg /> },\n    { id: 2, name: 'ready', icon: <MdRestaurant /> },\n    { id: 3, name: 'on_a_way', icon: <IoBicycleSharp /> },\n    { id: 4, name: 'delivered', icon: <IoCheckmarkDoneSharp /> },\n  ]);\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        setSteps(\n          data.status === 'canceled'\n            ? [\n                { id: 1, name: 'new', icon: <ShoppingCartOutlined /> },\n                { id: 5, name: 'canceled', icon: <AiOutlineCloseCircle /> },\n              ]\n            : steps,\n        );\n        setCurrent(\n          data.status === 'canceled'\n            ? 1\n            : steps.find((item) => item.name === data.status)?.id,\n        );\n\n        const address = data?.address?.location ??\n          data?.my_address?.location ??\n          data?.delivery_point?.location ?? {\n            latitude: center?.lat,\n            longitude: center?.lng,\n          };\n\n        setUserLocation({\n          lat: Number(address?.latitude),\n          lng: Number(address?.longitude),\n        });\n\n        setStatus(data.status === 'canceled' ? 'error' : 'success');\n        setData(data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    fetchOrder();\n  }, []);\n\n  return (\n    <>\n      <Modal\n        visible={!!id}\n        title={t('show.locations')}\n        onCancel={() => handleCancel()}\n        style={{ minWidth: '80vw' }}\n        footer={[\n          <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {loading ? (\n          <Loading />\n        ) : (\n          <Card>\n            <Steps current={current} status={status} className='mb-5'>\n              {steps?.map((item, index) => (\n                <Step\n                  title={t(item.name)}\n                  key={item.id + index}\n                  icon={item?.icon}\n                />\n              ))}\n            </Steps>\n            <Row gutter={12}>\n              <Col span={12}>\n                <h3>\n                  {t('order.id')} #{data?.id}\n                </h3>\n                <p>\n                  <BsCalendar2Day />{' '}\n                  {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}\n                </p>\n                <p>\n                  {t('scheduled.at')} {data?.delivery_date}\n                </p>\n              </Col>\n              <Col span={12}>\n                <p>\n                  {t('status')}{' '}\n                  {data?.status === 'new' ? (\n                    <Tag color='blue'>{t(data?.status)}</Tag>\n                  ) : data?.status === 'canceled' ? (\n                    <Tag color='error'>{t(data?.status)}</Tag>\n                  ) : (\n                    <Tag color='cyan'>{t(data?.status)}</Tag>\n                  )}\n                </p>\n                <p>\n                  {t('payment.method')}{' '}\n                  <strong>{data?.transaction?.payment_system?.tag}</strong>\n                </p>\n                <p>\n                  {t('order.type')} <strong>{data?.delivery_type}</strong>\n                </p>\n                <p>\n                  {t('payment.type')}{' '}\n                  <strong>{data?.transaction?.status}</strong>\n                </p>\n              </Col>\n\n              <Col span={24} className='mt-5'>\n                <h4>{t('map')}</h4>\n                <div\n                  className='map-container'\n                  style={{ height: 400, width: '100%' }}\n                >\n                  <GoogleMapReact\n                    bootstrapURLKeys={{\n                      key: !!google_map_key ? MAP_API_KEY : google_map_key,\n                    }}\n                    defaultZoom={10}\n                    center={userLocation ?? center}\n                    options={{\n                      fullscreenControl: false,\n                    }}\n                  >\n                    <User lat={userLocation?.lat} lng={userLocation?.lng} />\n                  </GoogleMapReact>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default ShowLocationsMap;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/user-data.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/downloadModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveryList/show-locations.map.js",["6296","6297"],[],"import GoogleMapReact from 'google-map-react';\nimport { Button, Card, Modal } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MAP_API_KEY } from '../../configs/app-global';\nimport FaUser from '../../assets/images/user.jpg';\nimport FaStore from '../../assets/images/shop.png';\nimport getDefaultLocation from '../../helpers/getDefaultLocation';\n\nconst User = () => (\n  <img\n    src={FaUser}\n    width='50'\n    alt='Pin'\n    style={{\n      position: 'absolute',\n      transform: 'translate(-50%, -100%)',\n    }}\n  />\n);\nconst Store = () => <img src={FaStore} width='50' alt='Pin' />;\n\nconst ShowLocationsMap = ({ id: data, handleCancel }) => {\n  const { t } = useTranslation();\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const center = getDefaultLocation(settings);\n  const user = {\n    lat: data?.delivery_man_setting?.location?.latitude,\n    lng: data?.delivery_man_setting?.location?.longitude,\n  };\n\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  return (\n    <>\n      <Modal\n        visible={!!data}\n        title={t('show.locations')}\n        style={{ minWidth: '80vw' }}\n        onCancel={handleCancel}\n        footer={[\n          <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <div className='map-container' style={{ height: 400, width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: google_map_key === undefined ? MAP_API_KEY : google_map_key,\n            }}\n            defaultZoom={10}\n            center={center}\n            options={{\n              fullscreenControl: false,\n            }}\n          >\n            {data?.delivery_man_setting !== null ? (\n              <User lat={user?.lat} lng={user?.lng} />\n            ) : null}\n          </GoogleMapReact>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ShowLocationsMap;\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveriesMap/user-card.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveryList/add-delivery-settings.js",["6298"],[],"import {\n  Button,\n  Col,\n  Form,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Switch,\n} from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport deliveryService from 'services/delivery';\nimport Loading from 'components/loading';\nimport { fetchDelivery } from 'redux/slices/deliveries';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport MediaUpload from 'components/upload';\nimport Map from 'components/map';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { DebounceSelect } from 'components/search';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nimport regionService from 'services/deliveryzone/region';\n\nconst type_of_technique = [\n  { label: 'Benzine', value: 'benzine' },\n  { label: 'Diesel', value: 'diesel' },\n  { label: 'Gas', value: 'gas' },\n  { label: 'Motorbike', value: 'motorbike' },\n  { label: 'Bike', value: 'bike' },\n  { label: 'Foot', value: 'foot' },\n  { label: 'Electric', value: 'electric' },\n];\n\nconst DeliverySettingCreate = ({ data, handleCancel }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [image, setImage] = useState([]);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const [location, setLocation] = useState(getDefaultLocation(settings));\n  const [deliveryZone, setDeliveryZone] = useState({\n    region: null,\n    country: null,\n    city: null,\n  });\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  const fetchDeliverySettings = (id) => {\n    setLoading(true);\n    deliveryService\n      .getById(id)\n      .then((res) => {\n        const responseData = {\n          ...res.data,\n          user_id: {\n            label:\n              res.data?.deliveryman?.firstname +\n              ' ' +\n              res.data?.deliveryman?.firstname,\n            value: res.data?.deliveryman?.id,\n            images: createImages(res.data?.galleries),\n            location: {\n              lat: res.data?.location?.latitude,\n              lng: res.data?.location?.longitude,\n            },\n          },\n          region: !!res.data?.region\n            ? {\n                label: res.data?.region?.translation?.title,\n                value: res.data?.region?.id,\n                key: res.data?.region?.id,\n              }\n            : null,\n          country: !!res.data?.country\n            ? {\n                label: res.data?.country?.translation?.title,\n                value: res.data?.country?.id,\n                key: res.data?.country?.id,\n              }\n            : null,\n          city: !!res.data?.city\n            ? {\n                label: res.data?.city?.translation?.title,\n                value: res.data?.city?.id,\n                key: res.data?.city?.id,\n              }\n            : null,\n        };\n        setDeliveryZone({\n          region: !!res.data?.region\n            ? {\n                label: res.data?.region?.translation?.title,\n                value: res.data?.region?.id,\n                key: res.data?.region?.id,\n              }\n            : null,\n          country: !!res.data?.country\n            ? {\n                label: res.data?.country?.translation?.title,\n                value: res.data?.country?.id,\n                key: res.data?.country?.id,\n              }\n            : null,\n          city: !!res.data?.city\n            ? {\n                label: res.data?.city?.translation?.title,\n                value: res.data?.city?.id,\n                key: res.data?.city?.id,\n              }\n            : null,\n        });\n        setLocation({\n          lat: res.data?.location?.latitude,\n          lng: res.data?.location?.longitude,\n        });\n        setImage(createImages(res.data.galleries));\n        form.setFieldsValue(responseData);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const fetchRegions = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      // has_price: 1,\n    };\n\n    return regionService.get(params).then(({ data }) =>\n      data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchCountries = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      region_id: deliveryZone?.region?.value,\n      // has_price: 1,\n    };\n\n    return countryService.get(params).then(({ data }) =>\n      data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.region_id,\n      })),\n    );\n  };\n\n  const fetchCities = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      country_id: deliveryZone?.country?.value,\n      // has_price: 1,\n    };\n\n    return cityService.get(params).then(({ data }) =>\n      data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const params = {\n      ...values,\n      user_id: data.id,\n      images: image.map((img) => img.name),\n      location: {\n        latitude: location.lat,\n        longitude: location.lng,\n      },\n      region_id: values.region.value,\n      country_id: values.country.value,\n      city_id: values.city.value,\n    };\n    if (data.settingsId) {\n      deliveryService\n        .update(data.settingsId, params)\n        .then(() => {\n          handleCancel();\n          dispatch(fetchDelivery({}));\n        })\n        .finally(() => setLoadingBtn(false));\n    } else {\n      deliveryService\n        .create(params)\n        .then(() => {\n          handleCancel();\n          dispatch(fetchDelivery({}));\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  useEffect(() => {\n    if (data.settingsId) {\n      fetchDeliverySettings(data.settingsId);\n    }\n  }, []);\n\n  return (\n    <>\n      <Modal\n        visible={!!data}\n        title={data.id ? t('edit.delivery.setting') : t('add.delivery.setting')}\n        closable={false}\n        onCancel={handleCancel}\n        style={{ minWidth: '80vw' }}\n        footer={[\n          <Space>\n            <Button\n              type='primary'\n              htmlType='submit'\n              key={'submit'}\n              onClick={() => form.submit()}\n              loading={loadingBtn}\n            >\n              {t('submit')}\n            </Button>\n            <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n              {t('cancel')}\n            </Button>\n          </Space>,\n        ]}\n      >\n        <Form\n          name='basic'\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ online: true }}\n        >\n          {loading ? (\n            <Loading />\n          ) : (\n            <Row gutter={12}>\n              <Col span={12}>\n                <Form.Item\n                  label={t('brand')}\n                  name='brand'\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('model')}\n                  name='model'\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('type.of.technique')}\n                  name='type_of_technique'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Select options={type_of_technique} />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('car.number')}\n                  name='number'\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('car.color')}\n                  name='color'\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name='region'\n                  label={t('region')}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <DebounceSelect\n                    fetchOptions={fetchRegions}\n                    placeholder={t('select.region')}\n                    onChange={(value) => {\n                      form.setFieldsValue({\n                        country: null,\n                        city: null,\n                      });\n                      setDeliveryZone({\n                        region: value,\n                        country: null,\n                        city: null,\n                      });\n                    }}\n                    onClear={() => {\n                      form.setFieldsValue({\n                        region: [],\n                        country: [],\n                        city: [],\n                      });\n                      setDeliveryZone({\n                        region: null,\n                        country: null,\n                        city: null,\n                      });\n                    }}\n                    autoComplete='none'\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name='country'\n                  label={t('country')}\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <DebounceSelect\n                    fetchOptions={fetchCountries}\n                    placeholder={t('select.country')}\n                    refetchOptions={true}\n                    onChange={(value) => {\n                      form.setFieldsValue({\n                        city: null,\n                      });\n                      setDeliveryZone({\n                        ...deliveryZone,\n                        country: value,\n                        city: null,\n                      });\n                    }}\n                    onClear={() => {\n                      form.setFieldsValue({ country: [], city: [] });\n                      setDeliveryZone({\n                        ...deliveryZone,\n                        country: null,\n                        city: null,\n                      });\n                    }}\n                    disabled={!deliveryZone.region}\n                    autoComplete='none'\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item name='city' label={t('city')}>\n                  <DebounceSelect\n                    fetchOptions={fetchCities}\n                    placeholder={t('select.city')}\n                    refetchOptions={true}\n                    disabled={!deliveryZone.region || !deliveryZone.country}\n                    autoComplete='none'\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('image')}\n                  name='images'\n                  rules={[\n                    {\n                      validator() {\n                        if (image?.length === 0) {\n                          return Promise.reject(new Error(t('required')));\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <MediaUpload\n                    type='deliveryman/settings'\n                    imageList={image}\n                    setImageList={setImage}\n                    form={form}\n                    length='1'\n                    multiple={true}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('online')}\n                  name='online'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n              <Col span={24}>\n                <Form.Item label={t('map')} name='location'>\n                  <Map location={location} setLocation={setLocation} />\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default DeliverySettingCreate;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/product-property.js",["6299","6300","6301"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  message,\n  Modal,\n  Row,\n  Space,\n  Table,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setMenuData } from 'redux/slices/menu';\nimport productService from 'services/product';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport DeleteButton from 'components/delete-button';\nimport propertyService from 'services/property';\nimport { DebounceSelect } from 'components/search';\n\nconst ProductProperty = ({ next, prev }) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [dataSource, setDataSource] = useState([]);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isFetching, setFetching] = useState(false);\n  const [groupSelected, setGroupSelected] = useState(null);\n\n  const column = [\n    {\n      key: '2',\n      title: t('property.group'),\n      dataIndex: 'group',\n      render: (group, row) => group?.translation?.title || '-',\n    },\n    {\n      key: '4',\n      title: t('property.value'),\n      dataIndex: 'value',\n      render: (value, row) => value?.value || '-',\n    },\n    {\n      key: '5',\n      title: t('options'),\n      render: (record) => {\n        return (\n          <Space>\n            <DeleteButton\n              type='primary'\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => onDeleteProduct(record)}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (dataSource.length && uuid) {\n      const properties = dataSource;\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: { ...activeMenu.data, properties },\n        })\n      );\n    }\n  }, [dataSource]);\n\n  const addProperties = (data) => {\n    productService\n      .properties(uuid, { properties: data })\n      .then(() => {\n        message.success(t('product.properties.saved'));\n        getPropduct(uuid);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onDeleteProduct = (record) => {\n    Modal.confirm({\n      title: t('delete.product'),\n      okText: t('yes'),\n      okType: 'danger',\n      onOk: () => {\n        const data = dataSource\n          ?.filter((item) => item.id !== record.id)\n          ?.map((item) => item?.value?.id);\n        addProperties(data);\n      },\n    });\n  };\n\n  const getPropduct = (id) => {\n    setFetching(true);\n    productService\n      .getById(id)\n      .then(({ data }) => {\n        setDataSource(data?.properties?.filter((item) => item?.value));\n        form.resetFields();\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        setFetching(false);\n      });\n  };\n  useEffect(() => {\n    if (uuid) {\n      getPropduct(uuid);\n    }\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const valuesProperties = values.propertyValue.map((item) => item.value);\n    const oldIds = dataSource?.map((item) => item?.value?.id);\n    const set = new Set([...valuesProperties, ...oldIds]);\n    const setArray = Array.from(set);\n    addProperties({ ...setArray });\n  };\n\n  async function fetchPropertyValueList(search) {\n    const params = { perPage: 10, active: 1, search };\n    return propertyService.getAllValues(params).then((res) =>\n      res?.data?.map((item) => ({\n        value: item?.id,\n        label: item?.value,\n        key: item?.id,\n      }))\n    );\n  }\n\n  const fetchPropertyGroup = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    return propertyService.getAllGroups(params).then((res) =>\n      res.data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      }))\n    );\n  };\n  const fetchPropertyValue = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      group_id: groupSelected?.value,\n    };\n\n    return propertyService.getAllValues(params).then((res) =>\n      res.data.map((item) => ({\n        label: item?.value,\n        value: item?.id,\n        key: item?.id,\n      }))\n    );\n  };\n\n  return (\n    <Card>\n      <Form\n        name='property-form'\n        layout='vertical'\n        form={form}\n        onFinish={onFinish}\n      >\n        <Row\n          gutter={24}\n          className='mb-3'\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <Col span={10}>\n            <Form.Item\n              name={'propertyGroup'}\n              label={t('property.group')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchPropertyGroup}\n                placeholder={t('select.group')}\n                onSelect={(item) => {\n                  setGroupSelected(item);\n                  form.setFieldsValue({ propertyValue: [] });\n                }}\n                onClear={() => {\n                  setGroupSelected(null);\n                  form.setFieldsValue({ propertyValue: [] });\n                }}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={10}>\n            <Form.Item\n              name={'propertyValue'}\n              label={t('property.value')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchPropertyValue}\n                placeholder={t('select.value')}\n                refetchOptions={true}\n                disabled={!groupSelected}\n                mode='multiple'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={4}>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <Table\n        scroll={{ x: true }}\n        columns={column}\n        dataSource={dataSource}\n        pagination={false}\n        rowKey={(record) => record.id}\n        loading={isFetching}\n      />\n      <Space className='mt-4'>\n        <Button onClick={prev}>{t('prev')}</Button>\n        <Button type='primary' onClick={next}>\n          {t('next')}\n        </Button>\n      </Space>\n    </Card>\n  );\n};\n\nexport default ProductProperty;\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/getLanguageFields.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/infinite-select.js",["6302"],[],"import React, { useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Select, Spin } from 'antd';\n\nexport const InfiniteSelect = ({\n  fetchOptions,\n  debounceTimeout = 400,\n  hasMore,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [search, setSearch] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (value) => {\n      setOptions([]);\n      setSearch(value);\n      setFetching(true);\n      fetchOptions({ search: value })\n        .then((newOptions) => {\n          setOptions(newOptions);\n          setCurrentPage(2);\n          setFetching(false);\n        })\n        .finally(() => setLoading(false));\n    };\n    return debounce(loadOptions, debounceTimeout);\n  }, [fetchOptions, debounceTimeout, currentPage]);\n\n  const fetchOnFocus = () => {\n    if (!options.length) {\n      debounceFetcher('');\n    }\n  };\n\n  const onScroll = async (event) => {\n    const target = event.target;\n    if (\n      !loading &&\n      target.scrollTop + target.offsetHeight === target.scrollHeight\n    ) {\n      if (hasMore) {\n        setLoading(true);\n        target.scrollTo(0, target.scrollHeight);\n        fetchOptions({ search: search, page: currentPage })\n          .then((item) => {\n            setCurrentPage((i) => i + 1);\n            setOptions([...options, ...item]);\n          })\n          .finally(() => setLoading(false));\n      }\n    }\n  };\n\n  return (\n    <Select\n      showSearch\n      allowClear\n      onPopupScroll={onScroll}\n      labelInValue={true}\n      filterOption={false}\n      onSearch={debounceFetcher}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      onFocus={fetchOnFocus}\n      {...props}\n    >\n      {options.map((item, index) => (\n        <Select.Option key={index} value={item.value}>\n          {item.label}\n        </Select.Option>\n      ))}\n      {loading && (\n        <Select.Option>\n          <Spin size='small' />\n        </Select.Option>\n      )}\n    </Select>\n  );\n};\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-finish.js",["6303"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Descriptions, Row, Space, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { removeFromMenu } from '../../redux/slices/menu';\nimport { fetchProducts } from '../../redux/slices/product';\nimport { useTranslation } from 'react-i18next';\nimport productService from '../../services/product';\nimport { IMG_URL } from '../../configs/app-global';\nimport { toast } from 'react-toastify';\nimport requestAdminModelsService from 'services/request-models';\n\nconst ProductFinish = ({ prev, isRequest }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(null);\n  const { uuid } = useParams();\n  const [isButtonLoading, setButtonLoading] = useState(false);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        setData(data);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  function finish() {\n    const body = {\n      status: undefined,\n    };\n    const nextUrl = 'catalog/products';\n    if (isRequest && activeMenu.data) {\n      setButtonLoading(true);\n      const requestBody = {\n        id: activeMenu.data.model_id,\n        type: 'product',\n        data: activeMenu.data,\n      };\n      requestAdminModelsService\n        .requestChangeUpdate(activeMenu.data.request_id, requestBody)\n        .then(() => {\n          navigate(`/${nextUrl}`, { state: { tab: 'request' } });\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        })\n        .finally(() => {\n          setButtonLoading(false);\n        });\n      return;\n    }\n    dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    dispatch(fetchProducts(body));\n    navigate(`/${nextUrl}`);\n  }\n\n  useEffect(() => {\n    if (!isRequest) {\n      fetchProduct(uuid);\n    }\n  }, [isRequest]);\n\n  const changedInfo = activeMenu.data;\n  const originalInfo = isRequest ? activeMenu.data.model : data;\n  return !loading ? (\n    <Card>\n      {isRequest && (\n        <>\n          <Descriptions bordered title={t('changed.info')}>\n            <Descriptions.Item\n              label={`${t('title')} (${defaultLang})`}\n              span={3}\n            >\n              {changedInfo[`title[${defaultLang}]`]}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={`${t('description')} (${defaultLang})`}\n              span={3}\n            >\n              {changedInfo[`description[${defaultLang}]`]}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('shop')} span={1.5}>\n              {changedInfo?.shop?.translation.title}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('category')} span={1.5}>\n              {changedInfo?.category?.label}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('brand')} span={1.5}>\n              {changedInfo?.brand?.label}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('unit')} span={1.5}>\n              {changedInfo?.unit?.label}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('images')} span={3}>\n              <Row gutter={12}>\n                {changedInfo?.images\n                  ?.filter((item) => !item.isVideo)\n                  .map((item, idx) => (\n                    <Col key={'image' + idx}>\n                      <img width={80} alt='product' src={item.url} />\n                    </Col>\n                  ))}\n              </Row>\n            </Descriptions.Item>\n            <Descriptions.Item label={t('tax')}>\n              {changedInfo?.tax || 0}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('min.quantity')}>\n              {changedInfo?.min_qty}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('max.quantity')}>\n              {changedInfo?.max_qty}\n            </Descriptions.Item>\n          </Descriptions>\n          {changedInfo?.stocks.map((item, idx) => {\n            if (!item) {\n              return '';\n            }\n            return (\n              <Descriptions key={'desc' + idx} bordered className='mt-4'>\n                <Descriptions.Item label={t('price')} span={2}>\n                  {item.price}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('quantity')} span={2}>\n                  {item.quantity}\n                </Descriptions.Item>\n                {item?.ids?.map((extra, idx) => (\n                  <Descriptions.Item\n                    key={'extra' + idx}\n                    label={changedInfo?.extras[idx].label}\n                  >\n                    {extra?.label}\n                  </Descriptions.Item>\n                ))}\n              </Descriptions>\n            );\n          })}\n        </>\n      )}\n      <Descriptions bordered className='mt-4' title={t('original.info')}>\n        <Descriptions.Item\n          label={`${t('title')} (${defaultLang})`}\n          span={3}\n          column={3}\n        >\n          {originalInfo.translation?.title ||\n            originalInfo[`title[${defaultLang}]`]}\n        </Descriptions.Item>\n        <Descriptions.Item\n          label={`${t('description')} (${defaultLang})`}\n          span={3}\n          column={3}\n        >\n          {originalInfo?.translation?.description ||\n            originalInfo[`description[${defaultLang}]`]}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('shop')} span={1.5} column={1.5}>\n          {originalInfo.shop?.translation.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('category')} span={1.5} column={1.5}>\n          {originalInfo.category?.translation.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('brand')} span={1.5} column={1.5}>\n          {originalInfo.brand?.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('unit')} span={1.5} column={1.5}>\n          {originalInfo.unit?.translation.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('images')} span={3} column={3}>\n          <Row gutter={12}>\n            {originalInfo?.galleries\n              ?.filter((item) => !item.preview)\n              .map((item, idx) => (\n                <Col key={'image' + idx}>\n                  <img width={80} alt='product' src={IMG_URL + item.path} />\n                </Col>\n              ))}\n          </Row>\n        </Descriptions.Item>\n        <Descriptions.Item span={3} column={3} label={t('tax')}>\n          {originalInfo.tax || 0}\n        </Descriptions.Item>\n        <Descriptions.Item span={3} column={3} label={t('min.quantity')}>\n          {originalInfo.min_qty}\n        </Descriptions.Item>\n        <Descriptions.Item span={3} column={3} label={t('max.quantity')}>\n          {originalInfo.max_qty}\n        </Descriptions.Item>\n      </Descriptions>\n      {originalInfo.stocks?.map((item, idx) => {\n        if (!item) {\n          return '';\n        }\n        return (\n          <Descriptions key={'desc' + idx} bordered className='mt-4'>\n            <Descriptions.Item label={t('price')} span={2} column={2}>\n              {item.price}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('quantity')} span={2} column={2}>\n              {item.quantity}\n            </Descriptions.Item>\n            {item.extras.map((extra, idx) => (\n              <Descriptions.Item\n                key={'extra' + idx}\n                label={extra?.group?.translation?.title}\n                span={2}\n                column={2}\n              >\n                {extra?.value?.value}\n              </Descriptions.Item>\n            ))}\n          </Descriptions>\n        );\n      })}\n      <div className='d-flex justify-content-end mt-4'>\n        <Space>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button loading={isButtonLoading} type='primary' onClick={finish}>\n            {t('finish')}\n          </Button>\n        </Space>\n      </div>\n    </Card>\n  ) : (\n    <div className='d-flex justify-content-center align-items-center'>\n      <Spin size='large' className='py-5' />\n    </div>\n  );\n};\n\nexport default ProductFinish;\n","/home/mostafa/Magde/new/frontadminreact/src/components/tracking-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/product-extras.js",["6304","6305"],[],"import React, { useState } from 'react';\nimport { Form, Button, Space, Card } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport ExtraSelectModal from './extra-select-modal';\nimport ExtraValueSelectModal from './extra-value-select-modal';\n\nconst ProductExtras = ({ next, prev, isRequest }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { uuid, id } = useParams();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [extraSelectModalOpen, setExtraSelectModalOpen] = useState(false);\n  const [selectedExtras, setSelectedExtras] = useState(\n    activeMenu.data?.extras || [],\n  );\n  const [currentExtra, setCurrentExtra] = useState(null);\n  const [isChanged, setIsChanged] = useState(false);\n\n  const onFinish = () => {\n    if (\n      selectedExtras.some(\n        (selectedExtra) =>\n          selectedExtra.values?.length === 0 || !selectedExtra.values,\n      )\n    ) {\n      toast.error(t('please.select.at.least.1.extra.value.for.each.extra'));\n      return;\n    }\n    const extras = selectedExtras.map((selectedExtra) => selectedExtra.value);\n    extras.sort((a, b) => a - b);\n    if (isRequest) {\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: { ...activeMenu.data, extras: selectedExtras },\n        }),\n      );\n      navigate(`/product-request/${id}?step=2`, {\n        state: { generate: isChanged },\n      });\n      return;\n    }\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, extras: selectedExtras },\n      }),\n    );\n    next();\n  };\n\n  const handleDeleteSelectedExtra = (extra) => {\n    setIsChanged(true);\n    setSelectedExtras((oldExtras) =>\n      oldExtras.filter((oldExtra) => oldExtra.id !== extra.id),\n    );\n  };\n\n  const handleSelectExtraValue = (extraId, values) => {\n    setIsChanged(true);\n    setSelectedExtras((oldExtras) =>\n      oldExtras.map((oldExtra) => {\n        if (oldExtra.value === extraId) {\n          const tempValues = values.map((value) => {\n            const prevExtras = activeMenu.data?.extras\n              ?.flatMap((extra) => extra.values)\n              .find((extra) => extra.value === value.value);\n            return { ...value, stock_id: prevExtras?.stock_id };\n          });\n          return { ...oldExtra, values: tempValues };\n        }\n        return oldExtra;\n      }),\n    );\n  };\n\n  const handleDeleteSelectedExtraValue = (extraId, value) => {\n    setIsChanged(true);\n    setSelectedExtras((oldExtras) => {\n      return oldExtras.map((oldExtra) => {\n        if (oldExtra.value === extraId) {\n          return {\n            ...oldExtra,\n            values:\n              oldExtra?.values.filter((oldValue) => oldValue.value !== value) ||\n              [],\n          };\n        }\n        return oldExtra;\n      });\n    });\n  };\n\n  return (\n    <Card>\n      <Form\n        layout='vertical'\n        initialValues={{ ...activeMenu.data }}\n        onFinish={onFinish}\n      >\n        <ExtraSelectModal\n          open={extraSelectModalOpen}\n          onClose={() => setExtraSelectModalOpen(false)}\n          selectedExtras={selectedExtras}\n          onSelect={(item) => {\n            setIsChanged(true);\n            setSelectedExtras((oldExtras) => [...oldExtras, item]);\n            setExtraSelectModalOpen(false);\n          }}\n        />\n        <ExtraValueSelectModal\n          extra={currentExtra}\n          onClose={() => setCurrentExtra(null)}\n          onSelect={handleSelectExtraValue}\n        />\n        <Space className='w-100' size='middle' direction='vertical'>\n          {selectedExtras.map((selectedExtra) => (\n            <Space\n              key={selectedExtra.id}\n              className='w-100'\n              direction='vertical'\n            >\n              <Space className='w-100' wrap>\n                <Button\n                  onClick={() => setCurrentExtra(selectedExtra)}\n                  ghost\n                  type='primary'\n                >\n                  {selectedExtra?.label}\n                </Button>\n                {selectedExtra?.values?.map((item) => (\n                  <div className='extra-value' key={item.value}>\n                    {item?.label}{' '}\n                    <button\n                      onClick={() =>\n                        handleDeleteSelectedExtraValue(\n                          selectedExtra.value,\n                          item.value,\n                        )\n                      }\n                      type='button'\n                      className='extra-clear'\n                    >\n                      <IoCloseOutline />\n                    </button>\n                  </div>\n                ))}\n              </Space>\n              <Space className='w-100' style={{ justifyContent: 'flex-end' }}>\n                <Button\n                  danger\n                  onClick={() => handleDeleteSelectedExtra(selectedExtra)}\n                  type='text'\n                >\n                  {t('delete')}\n                </Button>\n              </Space>\n            </Space>\n          ))}\n        </Space>\n        <Button\n          onClick={() => setExtraSelectModalOpen(true)}\n          className='w-100 my-3'\n          type='dashed'\n        >\n          {t('add.extra')}\n        </Button>\n        <Space className='mt-3'>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('next')}\n          </Button>\n        </Space>\n      </Form>\n    </Card>\n  );\n};\nexport default ProductExtras;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/products-index.js",["6306","6307","6308","6309","6310"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { DebounceSelect } from 'components/search';\nimport shopService from 'services/restaurant';\nimport brandService from 'services/brand';\nimport categoryService from 'services/category';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport productService from 'services/product';\nimport { addMenu, replaceMenu, setMenuData } from 'redux/slices/menu';\nimport unitService from 'services/unit';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { RefetchSearch } from 'components/refetch-search';\nimport { PlusOutlined, DeploymentUnitOutlined } from '@ant-design/icons';\nimport { AsyncTreeSelect } from 'components/async-tree-select-category';\nimport VideoUploaderWithModal from 'components/video-uploader';\nimport generateRandomNumbers from 'helpers/generateRandomNumbers';\n\nconst ProductsIndex = ({ next, action_type = '', isRequest }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const [mediaList, setMediaList] = useState(\n    activeMenu?.data?.initialMediaFile || { images: [], previews: [] },\n  );\n  const [fileList, setFileList] = useState(\n    activeMenu.data?.images?.filter((item) => !item.isVideo) || [],\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const randomNumbersLength = 6;\n\n  useEffect(() => {\n    const data = form.getFieldsValue(true);\n    dispatch(\n      setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } }),\n    );\n  }, []);\n\n  async function fetchUserShopList(search) {\n    const params = { search, active: 1 };\n    return shopService.get(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation ? item.translation.title : 'no name',\n        value: item.id,\n        key: item.id,\n      })),\n    );\n  }\n\n  async function fetchUserBrandList(search) {\n    const params = { perPage: 10, type: 'main', search, active: 1 };\n    return brandService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.title,\n        value: item.id,\n        key: item.id,\n      })),\n    );\n  }\n\n  async function fetchUserCategoryList(search) {\n    const params = { perPage: 100, type: 'main', search };\n    return categoryService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n        key: item.id,\n        type: 'main',\n        disabled: item.children?.length,\n        children: item.children?.map((el) => ({\n          label: el.translation?.title,\n          value: el.id,\n          key: el.id,\n          type: 'sub_main',\n          disabled: el.children?.length,\n          children: el.children?.map((three) => ({\n            label: three.translation?.title,\n            value: three.id,\n            key: three.id,\n            type: 'child',\n          })),\n        })),\n      })),\n    );\n  }\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const params = {\n      ...values,\n      digital: values.digital ? 1 : 0,\n      active: Number(values.active),\n      brand_id: values.brand?.value,\n      category_id: values.category?.value || values.category,\n      shop_id: values.shop?.value,\n      unit_id: values.unit?.value,\n      images: undefined,\n      brand: undefined,\n      category: undefined,\n      shop: undefined,\n      unit: undefined,\n      tax: values.tax || 0,\n      ...Object.assign(\n        {},\n        ...[...mediaList?.images, ...fileList].map((item, index) => ({\n          [`images[${index}]`]: item.name,\n        })),\n      ),\n      ...Object.assign(\n        {},\n        ...mediaList?.previews?.map((item, index) => ({\n          [`previews[${index}]`]: item.name,\n        })),\n      ),\n    };\n\n    if (isRequest) {\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: {\n            ...activeMenu.data,\n            ...params,\n            images: fileList,\n            brand: values.brand,\n            category: values.category,\n            shop: values.shop,\n            unit: values.unit,\n            tax: values.tax || 0,\n            title: {\n              ...Object.assign(\n                {},\n                ...languages.map((lang) => ({\n                  [lang.locale]: values[`title[${lang.locale}]`],\n                })),\n              ),\n            },\n            description: {\n              ...Object.assign(\n                {},\n                ...languages.map((lang) => ({\n                  [lang.locale]: values[`description[${lang.locale}]`],\n                })),\n              ),\n            },\n          },\n        }),\n      );\n      next();\n      return;\n    }\n\n    if (action_type === 'edit') {\n      productUpdate(values, params);\n    } else {\n      productCreate(values, params);\n    }\n  };\n\n  const createMediaFile = (items) => {\n    const mediaObject = { images: [], previews: [] };\n    const previews = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.preview,\n        url: item.preview,\n      }));\n    const videos = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.path,\n        url: item.path,\n        isVideo: true,\n      }));\n    mediaObject.previews = previews;\n    mediaObject.images = videos;\n\n    return mediaObject;\n  };\n\n  function productCreate(values, params) {\n    productService\n      .create(params)\n      .then(({ data }) => {\n        dispatch(\n          replaceMenu({\n            id: `product-${data.uuid}`,\n            url: `product/${data.uuid}`,\n            name: t('add.product'),\n            data: {\n              ...values,\n              ...data,\n              initialMediaFile: createMediaFile(data.galleries),\n            },\n            refetch: false,\n          }),\n        );\n        navigate(`/product/${data.uuid}/?step=1`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function productUpdate(values, params) {\n    productService\n      .update(uuid, params)\n      .then(() => {\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: {\n              ...values,\n              ...activeMenu?.data,\n              digital: Boolean(params?.digital),\n            },\n          }),\n        );\n        next();\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function fetchUnits(search) {\n    const params = {\n      perPage: 10,\n      page: 1,\n      active: 1,\n      search,\n    };\n    return unitService.getAll(params).then(({ data }) => {\n      return data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  }\n\n  useEffect(() => {\n    fetchUnits();\n\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } }),\n      );\n    };\n  }, []);\n\n  const goToAddCategory = () => {\n    dispatch(\n      addMenu({\n        id: 'category-add',\n        url: 'category/add',\n        name: t('add.category'),\n      }),\n    );\n    navigate('/category/add');\n  };\n  const goToUnit = () => {\n    dispatch(\n      addMenu({\n        id: 'unit-add',\n        url: 'unit/add',\n        name: t('add.unit'),\n      }),\n    );\n    navigate('/unit/add');\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      initialValues={{\n        active: true,\n        vegetarian: true,\n        min_qty: 1,\n        max_qty: 1,\n        tax: 0,\n        interval: 1,\n        age_limit: 12,\n        digital: false,\n        ...activeMenu.data,\n      }}\n      onFinish={onFinish}\n    >\n      <Row gutter={12}>\n        <Col span={16}>\n          <Row>\n            <Col span={24}>\n              <Card title={t('basic.info')}>\n                <Row>\n                  <Col span={24}>\n                    {languages.map((item) => (\n                      <Form.Item\n                        key={'name' + item.id}\n                        label={t('name')}\n                        name={`title[${item.locale}]`}\n                        rules={[\n                          {\n                            validator(_, value) {\n                              if (!value && item?.locale === defaultLang) {\n                                return Promise.reject(new Error(t('required')));\n                              } else if (value && value?.trim() === '') {\n                                return Promise.reject(\n                                  new Error(t('no.empty.space')),\n                                );\n                              } else if (value && value?.trim().length < 2) {\n                                return Promise.reject(\n                                  new Error(t('must.be.at.least.2')),\n                                );\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                        hidden={item.locale !== defaultLang}\n                      >\n                        <Input />\n                      </Form.Item>\n                    ))}\n                  </Col>\n                  <Col span={24}>\n                    {languages.map((item) => (\n                      <Form.Item\n                        key={'description' + item.id}\n                        label={t('description')}\n                        name={`description[${item.locale}]`}\n                        rules={[\n                          {\n                            validator(_, value) {\n                              if (!value && item?.locale === defaultLang) {\n                                return Promise.reject(new Error(t('required')));\n                              } else if (value && value?.trim() === '') {\n                                return Promise.reject(\n                                  new Error(t('no.empty.space')),\n                                );\n                              } else if (value && value?.trim().length < 5) {\n                                return Promise.reject(\n                                  new Error(t('must.be.at.least.5')),\n                                );\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                        hidden={item.locale !== defaultLang}\n                      >\n                        <TextArea rows={3} />\n                      </Form.Item>\n                    ))}\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('pricing')}>\n                <Row gutter={12}>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('min.qty')}\n                      name='min_qty'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <InputNumber min={1} className='w-100' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('max.qty')}\n                      name='max_qty'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <InputNumber min={1} className='w-100' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('tax')}\n                      name='tax'\n                      rules={[\n                        {\n                          validator(_, value) {\n                            if (value && (value < 0 || value > 100)) {\n                              return Promise.reject(\n                                new Error(t('must.be.between.0.and.100')),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                    >\n                      <InputNumber className='w-100' addonAfter='%' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('interval.unit')}\n                      name='interval'\n                      rules={[\n                        { required: true, message: t('required') },\n                        {\n                          type: 'number',\n                          min: 0,\n                          message: t('must.be.positive'),\n                        },\n                      ]}\n                      help={error?.interval ? error.interval[0] : null}\n                      validateStatus={error?.interval ? 'error' : 'success'}\n                    >\n                      <InputNumber className='w-100' />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('additions')}>\n                <Row gutter={12}>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('age.limit')}\n                      name='age_limit'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <InputNumber min={0} className='w-100' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('active')}\n                      name='active'\n                      valuePropName='checked'\n                    >\n                      <Switch />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('digital')}\n                      name='digital'\n                      valuePropName='checked'\n                    >\n                      <Switch />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('video')}>\n                <VideoUploaderWithModal\n                  form={form}\n                  mediaList={mediaList}\n                  setMediaList={setMediaList}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={8}>\n          <Row>\n            <Col span={24}>\n              <Card title={t('organization')}>\n                <Row>\n                  {!isRequest && (\n                    <Col span={24}>\n                      <Form.Item\n                        label={t('shop/restaurant')}\n                        name='shop'\n                        rules={[{ required: true, message: t('required') }]}\n                      >\n                        <RefetchSearch\n                          fetchOptions={fetchUserShopList}\n                          onChange={() =>\n                            form.setFieldsValue({ category: undefined })\n                          }\n                          // disabled={action_type === 'edit'}\n                        />\n                      </Form.Item>\n                    </Col>\n                  )}\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('category')}\n                      name='category'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <AsyncTreeSelect\n                        refetch\n                        fetchOptions={fetchUserCategoryList}\n                        dropdownRender={(menu) => (\n                          <>\n                            {menu}\n                            <div className='p-1'>\n                              <Button\n                                icon={<PlusOutlined />}\n                                className='w-100'\n                                onClick={goToAddCategory}\n                              >\n                                {t('add.category')}\n                              </Button>\n                            </div>\n                          </>\n                        )}\n                        allowClear\n                      />\n                    </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                    <Form.Item label={t('brand')} name='brand'>\n                      <DebounceSelect fetchOptions={fetchUserBrandList} />\n                    </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('unit')}\n                      name='unit'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <DebounceSelect\n                        fetchOptions={fetchUnits}\n                        dropdownRender={(menu) => (\n                          <>\n                            {menu}\n                            <div className='p-1'>\n                              <Button\n                                icon={<PlusOutlined />}\n                                className='w-100'\n                                onClick={goToUnit}\n                              >\n                                {t('add.unit')}\n                              </Button>\n                            </div>\n                          </>\n                        )}\n                      />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('media')}>\n                <Row>\n                  <Col span={24}>\n                    <Form.Item\n                      name='images'\n                      rules={[\n                        {\n                          validator() {\n                            if (fileList?.length === 0) {\n                              return Promise.reject(new Error(t('required')));\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                    >\n                      <MediaUpload\n                        type='products'\n                        imageList={fileList}\n                        setImageList={setFileList}\n                        form={form}\n                        multiple={true}\n                      />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n\n      <Button type='primary' htmlType='submit' loading={loadingBtn}>\n        {t('next')}\n      </Button>\n    </Form>\n  );\n};\n\nexport default ProductsIndex;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-digital.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/product-stock.js",["6311"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Space,\n} from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { DeleteOutlined, DeploymentUnitOutlined } from '@ant-design/icons';\nimport productService from 'services/product';\nimport extraService from 'services/extra';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation, useParams } from 'react-router-dom';\nimport Loading from 'components/loading';\nimport cartesian from 'helpers/cartesian';\nimport { useDispatch } from 'react-redux';\nimport { setMenuData } from 'redux/slices/menu';\nimport { AsyncSelect } from 'components/async-select';\nimport generateRandomNumbers from 'helpers/generateRandomNumbers';\n\nconst ProductStock = ({ prev, next, isRequest }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { uuid } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loadingBtn, setLoadingBtn] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [stockIds, setStockIds] = useState([]);\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const randomNumbersLength = 6;\n\n  const onFinish = (values) => {\n    const { stocks } = values;\n\n    const delete_ids = stockIds.filter(\n      (stockId, index) =>\n        !!stocks[index]?.stock_id &&\n        !stocks.some((stock) => stock?.stock_id === stockId),\n    );\n    let extras;\n    const isProductWithExtras = !!activeMenu.data?.extras?.length;\n\n    if (isProductWithExtras) {\n      extras = stocks.map((item) => ({\n        galleries: item.galleries,\n        price: item.price,\n        quantity: item.quantity,\n        sku: item.sku,\n        ids: isRequest\n          ? activeMenu.data?.extras.map((_, idx) => item[`extras[${idx}]`])\n          : activeMenu.data?.extras.map(\n              (_, idx) => item[`extras[${idx}]`].value,\n            ),\n        addons: item.addons\n          ? isRequest\n            ? item.addons?.map((i) => i)\n            : item.addons?.map((i) => i.value)\n          : [],\n        stock_id: item.stock_id,\n      }));\n    } else {\n      extras = [\n        {\n          price: stocks?.[0]?.price,\n          quantity: stocks?.[0]?.quantity,\n          addons: stocks?.[0]?.addons\n            ? isRequest\n              ? stocks?.[0]?.addons.map((i) => i)\n              : stocks?.[0]?.addons.map((i) => i?.value)\n            : [],\n          stock_id: stocks?.[0]?.stock_id,\n          sku: stocks?.[0]?.sku,\n          ids: [],\n        },\n      ];\n    }\n\n    if (isRequest) {\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: {\n            ...activeMenu.data,\n            stocks: extras,\n            delete_ids,\n          },\n        }),\n      );\n      next();\n      return;\n    }\n\n    setLoadingBtn(true);\n    productService\n      .stocks(uuid, { extras, delete_ids })\n      .then(({ data: { stocks } }) => {\n        const newExtras = stocks?.flatMap((item) => item.extras);\n        const extraValues = newExtras.map((item) => ({\n          ...item.value,\n          stock_id: item.stock_id,\n          group_type: item.group.type,\n        }));\n        const extraGroup = newExtras?.find(\n          (item) => item.group.type === 'color',\n        );\n        const extrasCustom = {};\n        stocks.forEach((stock) => {\n          stock.extras.forEach((extra) => {\n            if (extra.extra_group_id in extrasCustom) {\n              if (\n                !extrasCustom[extra.extra_group_id].values?.some(\n                  (item) => item.value === extra.value?.id,\n                )\n              ) {\n                extrasCustom[extra.extra_group_id].values?.push({\n                  value: extra.value.id,\n                  label: extra.value?.value,\n                  stock_id: stock.id,\n                });\n              }\n            } else {\n              extrasCustom[extra.extra_group_id] = {\n                group: extra.group,\n                label: extra.group.translation?.title,\n                value: extra.extra_group_id,\n                id: extra.extra_group_id,\n                stock_id: stock.id,\n                values: [\n                  {\n                    value: extra.value.id,\n                    label: extra.value?.value,\n                    stock_id: stock.id,\n                  },\n                ],\n              };\n            }\n          });\n        });\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: {\n              ...activeMenu.data,\n              newExtras: [{ group: extraGroup?.group, values: extraValues }],\n              delete_ids,\n              stocks,\n              stocksData: stocks,\n              extras: Object.values(extrasCustom),\n            },\n          }),\n        );\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const additionalStocks = activeMenu?.data?.extras\n          ? cartesian(\n              activeMenu?.data?.extras?.map((extra) => extra?.values || []),\n            )\n          : [];\n        const parsedAdditionalStocks = additionalStocks.map(\n          (additionalStock) => {\n            if (\n              additionalStock.every(\n                (itemValue) => typeof itemValue.stock_id !== 'undefined',\n              )\n            ) {\n              const selectedStock = res.data.stocks.find((stock) => {\n                return stock.extras.every((extra) => {\n                  return additionalStock.some(\n                    (addStock) => addStock.value === extra?.value?.id,\n                  );\n                });\n              });\n\n              return {\n                galleries: selectedStock?.galleries || [],\n                price: selectedStock?.price || 0,\n                quantity: selectedStock?.quantity || 0,\n                sku: activeMenu.data?.sku ?? selectedStock?.sku,\n                stock_id: selectedStock?.id,\n                tax: activeMenu?.data.tax || 0,\n                addons:\n                  selectedStock?.addons?.map((item) => ({\n                    label: item?.product?.translation?.title || item?.label,\n                    value: item?.product?.id || item?.value,\n                  })) || [],\n                ...Object.assign(\n                  {},\n                  ...additionalStock.map((extra, idx) => ({\n                    [`extras[${idx}]`]: {\n                      label: extra.label,\n                      value: extra.value,\n                    },\n                  })),\n                ),\n              };\n            }\n\n            return {\n              price: 0,\n              quantity: 0,\n              sku: activeMenu.data?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: [],\n              ...Object.assign(\n                {},\n                ...additionalStock.map((extra, idx) => ({\n                  [`extras[${idx}]`]: {\n                    label: extra.label,\n                    value: extra.value,\n                  },\n                })),\n              ),\n            };\n          },\n        );\n\n        let defaultStock = [];\n        if (additionalStocks.length === 0 && res.data.stocks?.length !== 0) {\n          const stockWithoutExtras = res.data.stocks?.at(0);\n          defaultStock = [\n            {\n              price: stockWithoutExtras?.price || 0,\n              quantity: stockWithoutExtras?.quantity || 0,\n              sku: activeMenu.data?.sku ?? stockWithoutExtras?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: stockWithoutExtras\n                ? stockWithoutExtras.addons?.map((item) => ({\n                    label: item?.product?.translation?.title || item?.label,\n                    value: item?.product?.id || item?.value,\n                  }))\n                : [],\n            },\n          ];\n        }\n        if (additionalStocks.length === 0 && res.data.stocks?.length === 0) {\n          defaultStock = [\n            {\n              price: undefined,\n              quantity: 0,\n              sku: activeMenu.data?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: [],\n            },\n          ];\n        }\n        const stocks = defaultStock.concat(parsedAdditionalStocks);\n\n        setStockIds(res.data.stocks.map((item) => item.id));\n        form.setFieldsValue({\n          stocks,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    if (isRequest) {\n      if (location.state?.generate) {\n        const additionalStocks = !!activeMenu?.data.extras\n          ? cartesian(\n              activeMenu?.data.extras?.map((extra) => extra.values || []),\n            )\n          : [];\n\n        const parsedAdditionalStocks = additionalStocks.map((item) => {\n          if (\n            item.every((itemValue) => typeof itemValue.stock_id !== 'undefined')\n          ) {\n            const selectedStock = activeMenu.data?.actualStocks?.find(\n              (stock) => {\n                return stock.extras.every((extra) => {\n                  return item.some(\n                    (addStock) => addStock.value === extra?.value?.id,\n                  );\n                });\n              },\n            );\n            return {\n              galleries: selectedStock?.galleries || [],\n              price: selectedStock?.price || 0,\n              quantity: selectedStock?.quantity || 0,\n              stock_id: selectedStock?.id,\n              tax: activeMenu?.data.tax || 0,\n              addons:\n                selectedStock?.addons?.map((item) => ({\n                  label: item?.product?.translation?.title || item?.label,\n                  value: item?.product?.id || item?.value,\n                })) || [],\n              ...Object.assign(\n                {},\n                ...item.map((extra, idx) => ({\n                  [`extras[${idx}]`]: {\n                    label: extra.label,\n                    value: extra.value,\n                    group: activeMenu.data.extras[idx].label,\n                  },\n                })),\n              ),\n            };\n          }\n\n          return {\n            price: 0,\n            quantity: 0,\n            tax: activeMenu.data?.tax || 0,\n            sku: activeMenu?.data?.sku,\n            addons: [],\n            ...Object.assign(\n              {},\n              ...item.map((extra, idx) => ({\n                [`extras[${idx}]`]: {\n                  label: extra.label,\n                  value: extra.value,\n                },\n              })),\n            ),\n          };\n        });\n        let defaultStock = [];\n        if (\n          additionalStocks.length === 0 &&\n          activeMenu.data?.actualStocks?.length !== 0\n        ) {\n          const stockWithoutExtras = activeMenu.data.actualStocks?.at(0);\n          defaultStock = [\n            {\n              price: stockWithoutExtras?.price || 0,\n              quantity: stockWithoutExtras?.quantity || 0,\n              sku: stockWithoutExtras?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: stockWithoutExtras\n                ? stockWithoutExtras.addons?.map((item) => ({\n                    label: item?.product?.translation?.title || item?.label,\n                    value: item?.product?.id || item?.value,\n                  }))\n                : [],\n            },\n          ];\n        }\n        if (\n          additionalStocks.length === 0 &&\n          activeMenu?.data?.actualStocks?.length === 0\n        ) {\n          defaultStock = [\n            {\n              price: undefined,\n              quantity: 0,\n              sku: activeMenu?.data.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: [],\n            },\n          ];\n        }\n        const stocks = defaultStock.concat(parsedAdditionalStocks);\n        setStockIds(activeMenu.data.actualStocks.map((item) => item.id));\n\n        form.setFieldsValue({\n          stocks,\n        });\n      } else {\n        const stocks = activeMenu.data.stocks?.map((stock) => ({\n          galleries: stock?.galleries || [],\n          price: stock.price,\n          quantity: stock.quantity,\n          tax: activeMenu.data.tax,\n          stock_id: stock.stock_id,\n          sku: stock.sku,\n          ...Object.assign(\n            {},\n            ...stock.ids.map((extra, idx) => ({\n              [`extras[${idx}]`]: {\n                label: extra.label,\n                value: extra.value,\n                group: extra.group,\n              },\n            })),\n          ),\n          addons: stock.addons,\n        }));\n        setStockIds(activeMenu.data?.delete_ids || []);\n\n        form.setFieldsValue({\n          stocks,\n        });\n      }\n    } else {\n      fetchProduct(uuid);\n    }\n  }, [isRequest, location.state?.generate]);\n\n  function fetchExtra(id) {\n    return extraService.getGroupById(id).then((res) =>\n      res.data.extra_values.map((item) => ({\n        label: item?.value,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  function handleSetAllPrice(value) {\n    const { stocks } = form.getFieldsValue();\n    form.setFieldsValue({ stocks: assignObject(stocks, 'price', value) });\n  }\n\n  function handleSetAllQuantity(value) {\n    const { stocks } = form.getFieldsValue();\n    form.setFieldsValue({ stocks: assignObject(stocks, 'quantity', value) });\n  }\n\n  const assignObject = (obj, key, value) =>\n    obj.map((item) => Object.assign(item, { [key]: value }));\n\n  const handleSetAllSku = (generateRandom, value) => {\n    const skuValue = generateRandom\n      ? generateRandomNumbers(randomNumbersLength)\n      : value;\n    const { stocks } = form.getFieldsValue();\n    form.setFieldsValue({\n      'set.all.sku': skuValue,\n      stock: assignObject(stocks, 'sku', skuValue),\n    });\n  };\n\n  return (\n    <Card\n      title={`${t('product.name')}: ${\n        activeMenu.data[`title[${defaultLang}]`]\n          ? `\"${activeMenu.data[`title[${defaultLang}]`]}\"`\n          : ''\n      }`}\n    >\n      {loading ? (\n        <Loading />\n      ) : (\n        <Form layout='vertical' form={form} onFinish={onFinish}>\n          <Divider />\n          <h2>{t('set.all.values')}</h2>\n          <Row gutter={12} align='middle'>\n            <Col span={5} style={{ marginRight: '10px' }}>\n              <Form.Item label={t('sku')} name='set.all.sku'>\n                <Input\n                  className='w-100'\n                  onChange={(e) => handleSetAllSku(false, e.target.value)}\n                />\n              </Form.Item>\n            </Col>\n            <Col>\n              <Form.Item label={' '} name='sku'>\n                <Button\n                  icon={<DeploymentUnitOutlined />}\n                  onClick={() => handleSetAllSku(true)}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('price')}\n                name={'set.all.price'}\n                rules={[\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('must.be.positive.number'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' onChange={handleSetAllPrice} />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('quantity')}\n                name={'set.all.quantity'}\n                rules={[\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('must.be.positive.number'),\n                  },\n                ]}\n              >\n                <InputNumber\n                  className='w-100'\n                  onChange={handleSetAllQuantity}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Divider />\n          <h2>{t('values')}</h2>\n          <Form.List name='stocks'>\n            {(fields, { add, remove }) => {\n              return (\n                <div>\n                  {fields.map((field, index) => {\n                    return (\n                      <Row\n                        key={field.key}\n                        gutter={12}\n                        align='middle'\n                        style={{ flexWrap: 'nowrap', overflowX: 'auto' }}\n                        hidden={!activeMenu.data?.extras?.length && field.key}\n                      >\n                        {activeMenu.data?.extras?.map((item, idx) => (\n                          <Col key={'extra' + item.value}>\n                            <Form.Item\n                              label={item?.label}\n                              name={[index, `extras[${idx}]`]}\n                              rules={[\n                                { required: true, message: t('required') },\n                              ]}\n                            >\n                              <AsyncSelect\n                                fetchOptions={() => fetchExtra(item.value)}\n                                className='w-100'\n                                disabled\n                                style={{ minWidth: 200 }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        ))}\n                        <Col>\n                          <Form.Item label={t('sku')} name={[index, 'sku']}>\n                            <Input\n                              className='w-100'\n                              style={{ minWidth: 200 }}\n                            />\n                          </Form.Item>\n                        </Col>\n\n                        <Col>\n                          <Form.Item\n                            label={t('quantity')}\n                            name={[index, 'quantity']}\n                            rules={[{ required: true, message: t('required') }]}\n                          >\n                            <InputNumber\n                              min={0}\n                              className='w-100'\n                              style={{ minWidth: 200 }}\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          <Form.Item\n                            label={`${t('price')} (${defaultCurrency?.symbol})`}\n                            name={[index, 'price']}\n                            rules={[{ required: true, message: t('requried') }]}\n                          >\n                            <InputNumber\n                              min={0}\n                              className='w-100'\n                              style={{ minWidth: 200 }}\n                            />\n                          </Form.Item>\n                          <Form.Item\n                            hidden\n                            label={t('id')}\n                            name={[index, 'stock_id']}\n                          >\n                            <InputNumber\n                              min={1}\n                              className='w-100'\n                              disabled\n                              style={{ minWidth: 200 }}\n                              addonAfter='%'\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          <Form.Item label={t('tax')} name={[index, 'tax']}>\n                            <InputNumber\n                              className='w-100'\n                              disabled\n                              style={{ minWidth: 200 }}\n                              addonAfter='%'\n                            />\n                          </Form.Item>\n                          <Form.Item\n                            label={t('tax')}\n                            name={[index, 'galleries']}\n                            hidden\n                          >\n                            <InputNumber\n                              className='w-100'\n                              disabled\n                              style={{ minWidth: 200 }}\n                              addonAfter='%'\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, nextValues) =>\n                              prevValues.stocks[field.name]?.price !==\n                              nextValues.stocks[field.name]?.price\n                            }\n                          >\n                            {({ getFieldValue }) => {\n                              const tax =\n                                getFieldValue(['stocks', field.name, 'tax']) ||\n                                0;\n\n                              const price = getFieldValue([\n                                'stocks',\n                                field.name,\n                                'price',\n                              ]);\n                              const totalPrice =\n                                tax === 0\n                                  ? price?.toFixed(2)\n                                  : ((price * tax) / 100 + price).toFixed(2);\n                              return (\n                                <Form.Item\n                                  label={`${t('total.price')} (${\n                                    defaultCurrency?.symbol\n                                  })`}\n                                >\n                                  <InputNumber\n                                    min={1}\n                                    disabled\n                                    value={totalPrice}\n                                    className='w-100'\n                                    style={{ minWidth: 200 }}\n                                  />\n                                </Form.Item>\n                              );\n                            }}\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          {fields?.length > 1 ? (\n                            <Button\n                              type='primary'\n                              className='mt-2'\n                              danger\n                              icon={<DeleteOutlined />}\n                              onClick={() => {\n                                remove(field.name);\n                              }}\n                            />\n                          ) : (\n                            ''\n                          )}\n                        </Col>\n                      </Row>\n                    );\n                  })}\n                </div>\n              );\n            }}\n          </Form.List>\n          <Space className='mt-4'>\n            <Button onClick={prev}>{t('prev')}</Button>\n            <Button type='primary' htmlType='submit' loading={!!loadingBtn}>\n              {t('next')}\n            </Button>\n          </Space>\n        </Form>\n      )}\n    </Card>\n  );\n};\n\nexport default ProductStock;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-gallery.js",["6312"],[],"import React, { useEffect, useMemo, useState } from 'react';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { t } from 'i18next';\nimport { Badge, Button, Card, Col, Divider, Row, Space, Tooltip } from 'antd';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport MediaUploadExtrasImage from 'components/upload/upload-extras-image';\nimport productService from 'services/product';\nconst text = 'In the process of internal desktop applications development';\n\nconst ProductGallery = ({ prev, next }) => {\n  const [fileList, setFileList] = useState([]);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { newExtras } = activeMenu?.data || {};\n  const filteredExtras = useMemo(\n    () => newExtras?.find((item) => item?.group?.type === 'color'),\n    [newExtras]\n  );\n  const uniqueData = Array.from(\n    new Set(filteredExtras?.values?.map((item) => item.value))\n  ).map((value) => {\n    return filteredExtras?.values?.find((item) => item.value === value);\n  });\n  const colorItems = uniqueData.filter((item) => item.group_type === 'color');\n\n  const createImage = (file) => {\n    return {\n      uid: file.path,\n      name: file.path,\n      status: 'done', // done, uploading, error\n      url: file.path,\n      created: true,\n    };\n  };\n  const setInitialState = () => {\n    const newArray = activeMenu.data.stocks.map(({ id, galleries }) => ({\n      id,\n      images: galleries?.map(createImage) || [],\n    }));\n    setFileList(newArray);\n  };\n\n  const updateStocks = () => {\n    if (!fileList.length) {\n      next();\n      return;\n    }\n    const array = fileList.map((item) => {\n      return {\n        ...item,\n        images: item.images.map((img) => img.name),\n      };\n    });\n    productService\n      .updateStocks({ data: array })\n      .then(() => {\n        next();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    setInitialState();\n  }, [activeMenu.data]);\n\n  return (\n    <Card\n      title={\n        <Tooltip placement='topLeft' title={text}>\n          <Space>\n            {t('add.media.file')}\n            <QuestionCircleOutlined\n              style={{ fontSize: 16, cursor: 'pointer' }}\n            />\n          </Space>\n        </Tooltip>\n      }\n    >\n      <Row gutter={[24, 24]}>\n        {colorItems?.map(({ label, stock_id, value }) => (\n          <>\n            <Col span={24}>\n              <Space className='mb-4'>\n                <Badge\n                  color={label || value}\n                  className='extras-color-badge'\n                  text={`${label || value} - ${GetColorName(label || value)}`}\n                />\n              </Space>\n              <MediaUploadExtrasImage\n                id={stock_id}\n                fileList={fileList}\n                setFileList={setFileList}\n                type='stocks'\n              />\n            </Col>\n            <Divider />\n          </>\n        ))}\n      </Row>\n      <Space className='mt-4'>\n        <Button onClick={prev}>{t('prev')}</Button>\n        <Button type='primary' htmlType='submit' onClick={updateStocks}>\n          {t('next')}\n        </Button>\n      </Space>\n    </Card>\n  );\n};\n\nexport default ProductGallery;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/wholesale.js",["6313"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Collapse,\n  Form,\n  InputNumber,\n  Row,\n  Space,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport productService from 'services/product';\nimport { useParams } from 'react-router-dom';\nimport RiveResult from 'components/rive-result';\n\nconst { Panel } = Collapse;\n\nconst panelHeaderHTML = (stock) => {\n  return (\n    <div>\n      <p hidden={!stock?.extras?.length}>\n        {stock?.extras?.map((extra) =>\n          extra?.group?.type === 'color' ? (\n            <div\n              key={extra?.id}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                columnGap: '5px',\n              }}\n            >\n              {extra.group?.translation?.title}:{' '}\n              {GetColorName(extra?.value?.value)} (\n              <span\n                style={{\n                  display: 'block',\n                  width: '15px',\n                  height: '15px',\n                  backgroundColor: `${extra?.value?.value}`,\n                  borderRadius: '50%',\n                  border: '1px solid #ccc',\n                }}\n              />\n              )\n            </div>\n          ) : (\n            <div key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </div>\n          ),\n        )}\n      </p>\n    </div>\n  );\n};\n\nfunction Wholesale({ prev, next }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { uuid } = useParams();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const hasAnyExtras = activeMenu?.data?.stocksData?.some(\n    (stock) => !!stock?.extras?.length,\n  );\n\n  const stocks = activeMenu.data?.stocksData || [];\n  const minQuantity = !!activeMenu.data?.min_qty ? activeMenu.data?.min_qty : 1;\n  const maxQuantity = !!activeMenu.data?.max_qty ? activeMenu.data?.max_qty : 1;\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const fetchProduct = () => {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const extras = res?.data?.stocks?.map((item) => ({\n          [item?.id]: item?.whole_sale_prices,\n        }));\n\n        form.setFieldsValue(Object.assign({}, ...extras));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchProduct();\n  }, []);\n\n  const onFinish = (values) => {\n    if (!hasAnyExtras) return next();\n\n    setLoadingBtn(true);\n    const extras = stocks?.map((stock) => {\n      const whole_sales = values?.[stock?.id] || [];\n\n      return {\n        ids: stock?.extras?.map((extra) => extra?.extra_value_id),\n        galleries: stock?.galleries,\n        price: stock?.price,\n        quantity: stock?.quantity,\n        stock_id: stock?.id,\n        whole_sales,\n      };\n    });\n\n    productService\n      .stocks(uuid, { extras })\n      .then(() => next())\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card loading={loading}>\n      <Form form={form} layout='vertical' onFinish={onFinish}>\n        {hasAnyExtras ? (\n          <Collapse>\n            {stocks.map((stock) => {\n              const formListName = stock?.id;\n\n              return (\n                <Panel header={panelHeaderHTML(stock)} key={stock?.id}>\n                  <Form.List name={formListName} key={stock?.id}>\n                    {(fields, { add, remove }) => (\n                      <>\n                        {fields.map(({ key, name, ...restField }, index) => {\n                          const prevMaxQuantity = form.getFieldValue([\n                            formListName,\n                            fields[index - 1]?.name,\n                            'max_quantity',\n                          ]);\n\n                          return (\n                            <Row gutter={12} key={index}>\n                              <Col span={7}>\n                                <Form.Item\n                                  {...restField}\n                                  label={t('min.quantity')}\n                                  name={[name, 'min_quantity']}\n                                  rules={[\n                                    { required: true, message: t('required') },\n                                    {\n                                      validator(_, value) {\n                                        if (\n                                          !!value &&\n                                          (value <= prevMaxQuantity ||\n                                            value > maxQuantity ||\n                                            value <= 0)\n                                        ) {\n                                          return Promise.reject(\n                                            new Error(\n                                              `${t('must.be.between')} ${\n                                                prevMaxQuantity || minQuantity\n                                              } ${t('and')} ${maxQuantity}`,\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <InputNumber\n                                    className='w-100'\n                                    step={activeMenu.data?.interval || 1}\n                                    // min={minQuantity}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col span={7}>\n                                <Form.Item\n                                  {...restField}\n                                  label={t('max.quantity')}\n                                  name={[name, 'max_quantity']}\n                                  rules={[\n                                    { required: true, message: t('required') },\n                                    {\n                                      validator(_, value) {\n                                        const minQuantityInput =\n                                          form.getFieldValue([\n                                            formListName,\n                                            name,\n                                            'min_quantity',\n                                          ]);\n\n                                        if (\n                                          !!value &&\n                                          (value <= minQuantityInput ||\n                                            value > maxQuantity ||\n                                            value <= 0)\n                                        ) {\n                                          return Promise.reject(\n                                            new Error(\n                                              `${t('must.be.between')} ${\n                                                minQuantityInput || minQuantity\n                                              } ${t('and')} ${maxQuantity}`,\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <InputNumber\n                                    className='w-100'\n                                    step={activeMenu.data?.interval || 1}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col span={8}>\n                                <Form.Item\n                                  {...restField}\n                                  label={t('price')}\n                                  name={[name, 'price']}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: t('required'),\n                                    },\n                                    {\n                                      type: 'number',\n                                      min: 0,\n                                      message: t('must.be.positive.number'),\n                                    },\n                                    {\n                                      type: 'number',\n                                      max: 999999999999999,\n                                      message: t('max.15.digits'),\n                                    },\n                                  ]}\n                                >\n                                  <InputNumber\n                                    className='w-100'\n                                    parser={(value) => parseInt(value, 10)}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col\n                                span={2}\n                                style={{\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  justifyContent: 'end',\n                                }}\n                              >\n                                <Button\n                                  onClick={() => {\n                                    remove(name);\n                                  }}\n                                  danger\n                                  type='primary'\n                                  icon={<DeleteOutlined />}\n                                  disabled={fields?.length !== index + 1}\n                                />\n                              </Col>\n                            </Row>\n                          );\n                        })}\n                        <Form.Item>\n                          <Button\n                            onClick={() => {\n                              add();\n                            }}\n                            type='dashed'\n                            icon={<PlusOutlined />}\n                            block\n                          >\n                            {t('add')}\n                          </Button>\n                        </Form.Item>\n                      </>\n                    )}\n                  </Form.List>\n                </Panel>\n              );\n            })}\n          </Collapse>\n        ) : (\n          <RiveResult />\n        )}\n        <Space className='mt-4'>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('next')}\n          </Button>\n        </Space>\n      </Form>\n    </Card>\n  );\n}\n\nexport default Wholesale;\n","/home/mostafa/Magde/new/frontadminreact/src/views/message-subscribers/textEditor.js",["6314"],[],"import React from 'react';\nimport { Form } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { IMG_URL } from '../../configs/app-global';\nimport galleryService from '../../services/gallery';\n\nexport default function TextEditor({ form, lang, languages }) {\n  const { t } = useTranslation();\n\n  function uploadAdapter(loader) {\n    return {\n      upload: () => {\n        return new Promise((resolve, reject) => {\n          const formData = new FormData();\n          loader.file.then((file) => {\n            formData.append('image', file);\n            formData.append('type', 'blogs');\n            galleryService\n              .upload(formData)\n              .then(({ data }) => {\n                resolve({\n                  default: `${IMG_URL + data.title}`,\n                });\n              })\n              .catch((err) => {\n                reject(err);\n              });\n          });\n        });\n      },\n    };\n  }\n\n  function uploadPlugin(editor) {\n    editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\n      return uploadAdapter(loader);\n    };\n  }\n\n  const handleChange = (e, editor) => {\n    const data = editor.getData();\n  };\n\n  return (\n    <div className='textEditor'>\n      <Form.Item\n        label={t('newsletter.content')}\n        name={'body'}\n        valuePropName='data'\n        getValueFromEvent={(event, editor) => {\n          const data = editor.getData();\n          return data;\n        }}\n        rules={[\n          {\n            required: true,\n            message: t('required'),\n          },\n        ]}\n        className='description-editor'\n      >\n        <CKEditor\n          editor={ClassicEditor}\n          config={{\n            extraPlugins: [uploadPlugin],\n          }}\n          onChange={handleChange}\n          onBlur={(event, editor) => {\n            const data = editor.getData();\n            form.setFieldsValue({\n              body: data,\n            });\n          }}\n        />\n      </Form.Item>\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/product-cards.js",["6315"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Col, Row, Space, Spin } from 'antd';\nimport RiveResult from 'components/rive-result';\nimport getImage from 'helpers/getImage';\nimport Meta from 'antd/es/card/Meta';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { fetchRestProducts } from 'redux/slices/product';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { DebounceSelect } from 'components/search';\nimport shopService from 'services/shop';\nimport categoryService from 'services/category';\nimport brandService from 'services/brand';\nimport SearchInput from 'components/search-input';\nimport ProductModal from './product-modal';\n\nexport default function ProductCards() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { products, loading } = useSelector(\n    (state) => state.product,\n    shallowEqual,\n  );\n\n  const [search, setSearch] = useState(null);\n  const [shop, setShop] = useState(null);\n  const [brand, setBrand] = useState(null);\n  const [category, setCategory] = useState(null);\n  const [productModal, setProductModal] = useState(null);\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  async function fetchCategories(search) {\n    const params = { search, type: 'main' };\n    return categoryService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  async function fetchBrands(search) {\n    return brandService.search(search).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.title ?? '--',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  useEffect(() => {\n    const params = {\n      perPage: 10,\n      page: 1,\n      brand_id: brand?.value,\n      category_id: category?.value,\n      search,\n      shop_id: shop?.value,\n      active: 1,\n    };\n    dispatch(fetchRestProducts(params));\n  }, [brand, category, search, shop]);\n\n  return (\n    <>\n      <Card title={t('products')} className={'order-add'}>\n        <Space wrap className={'mb-4'}>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(value) => setSearch(value)}\n            defaultValue={search}\n          />\n          <DebounceSelect\n            placeholder={t('select.shop')}\n            fetchOptions={fetchShops}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setShop(value)}\n            value={shop}\n          />\n          <DebounceSelect\n            placeholder={t('select.category')}\n            fetchOptions={fetchCategories}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setCategory(value)}\n            value={category}\n          />\n          <DebounceSelect\n            placeholder={t('select.brand')}\n            fetchOptions={fetchBrands}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setBrand(value)}\n            value={brand}\n          />\n        </Space>\n        {products.length === 0 ? (\n          <Col span={24}>\n            <RiveResult id='nosell' />\n          </Col>\n        ) : (\n          <div className='products-row order-items'>\n            {products.length ? (\n              products.map((item) => (\n                <Card\n                  className='products-col'\n                  key={item.id}\n                  cover={\n                    <img\n                      alt={item?.translation?.title}\n                      src={getImage(item?.img)}\n                    />\n                  }\n                  onClick={() => setProductModal(item)}\n                >\n                  <Meta title={item?.translation?.title} />\n                  <div className='preview'>\n                    <PlusOutlined />\n                  </div>\n                </Card>\n              ))\n            ) : (\n              <Row>\n                <Col span={24}>\n                  <RiveResult id='nosell' />\n                </Col>\n              </Row>\n            )}\n            {loading && (\n              <div className='loader'>\n                <Spin />\n              </div>\n            )}\n          </div>\n        )}\n      </Card>\n      {productModal && (\n        <ProductModal\n          productData={productModal}\n          setProductData={setProductModal}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/new-product.js",["6316","6317"],[],"import React from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { Card, Row, Col, Image, Space, Tag } from 'antd';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { useTranslation } from 'react-i18next';\n\nexport default function NewProduct() {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  return (\n    <Card title={t('new.product')}>\n      <Row gutter={12}>\n        <Col span={4} style={{ width: '100px', height: '250px' }}>\n          <div\n            style={{\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              objectFit: 'contain',\n              overflow: 'hidden',\n              borderRadius: '15px',\n            }}\n          >\n            <img\n              src={activeMenu.data?.newProduct?.img}\n              placeholder\n              style={{ width: '100%', height: '100%', objectFit: 'contain' }}\n            />\n          </div>\n        </Col>\n        <Col span={20}>\n          <h4>{activeMenu.data?.newProduct?.translation?.title}</h4>\n          <Space>\n            <p>{t('quantity')}: </p>\n            <p>{activeMenu.data?.newProduct?.quantity}</p>\n          </Space>\n          <br />\n          <Space>\n            <p>{t('price')}: </p>\n            <p>\n              {numberToPrice(\n                activeMenu.data?.newProduct?.price,\n                defaultCurrency?.symbol,\n              )}\n            </p>\n          </Space>\n          <br />\n          <Space wrap>\n            {activeMenu.data?.newProduct?.stock?.extras?.map((extra) => {\n              if (extra?.group?.type === 'color') {\n                return (\n                  <span\n                    key={extra?.id}\n                    style={{\n                      display: 'block',\n                      width: '30px',\n                      height: '30px',\n                      backgroundColor: extra?.value?.value,\n                      border: '2px solid #909091',\n                      borderRadius: '50%',\n                    }}\n                  />\n                );\n              } else {\n                return <Tag key={extra?.id}>{extra?.value?.value}</Tag>;\n              }\n            })}\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/note-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/user-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/delivery-info.js",["6318","6319","6320","6321"],[],"import React, { useEffect } from 'react';\nimport { Card, Col, DatePicker, Form, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setOrderData } from '../../redux/slices/order';\nimport { getCurrentShop } from '../../redux/selectors/orderSelector';\nimport moment from 'moment';\nimport shopService from '../../services/restaurant';\nimport { setMenuData } from '../../redux/slices/menu';\n\nconst weeks = [\n  {\n    title: 'sunday',\n  },\n  { title: 'monday' },\n  {\n    title: 'tuesday',\n  },\n  {\n    title: 'wednesday',\n  },\n  {\n    title: 'thursday',\n  },\n  {\n    title: 'friday',\n  },\n  {\n    title: 'saturday',\n  },\n];\n\nconst DeliveryInfo = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { data } = useSelector((state) => state.order, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const date = new Date(data?.delivery_date);\n  const shopTime = activeMenu.data?.CurrentShop?.shop_working_days\n    ?.filter((item) => item.disabled !== true)\n    .find((item) => item?.day === weeks[date.getDay()]?.title);\n\n  const filter = activeMenu.data?.CurrentShop?.shop_closed_date?.map(\n    (date) => date.day,\n  );\n\n  function disabledDate(current) {\n    const a = filter?.find(\n      (date) => date === moment(current).format('YYYY-MM-DD'),\n    );\n    const b = moment().add(-1, 'days') >= current;\n    if (a) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n\n  const range = (start, end) => {\n    const x = parseInt(start);\n    const y = parseInt(end);\n    const number = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n      21, 22, 23, 24,\n    ];\n    for (let i = x; i <= y; i++) {\n      delete number[i];\n    }\n    return number;\n  };\n\n  const middle = (start, end) => {\n    const result = [];\n    for (let i = start; i < end; i++) {\n      result.push(i);\n    }\n    return result;\n  };\n\n  const disabledDateTime = () => ({\n    disabledHours: () =>\n      range(\n        shopTime?.from.substring(0, 2) >= moment(new Date()).format('HH')\n          ? shopTime?.from.substring(0, 2)\n          : moment(new Date()).format('HH'),\n        shopTime?.to.substring(0, 2),\n      ),\n    disabledMinutes: () => middle(0, 60),\n    disabledSeconds: () => middle(0, 60),\n  });\n\n  const fetchShop = (uuid) => {\n    shopService.getById(uuid).then((data) => {\n      const currency_shop = data?.data;\n      dispatch(setOrderData({ currency_shop }));\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: {\n            ...activeMenu?.data,\n            CurrentShop: data?.data,\n          },\n        }),\n      );\n    });\n  };\n\n  const setDeliveryPrice = (delivery) =>\n    dispatch(setOrderData({ delivery_fee: delivery?.value }));\n\n  useEffect(() => {\n    if (data?.shop?.value) {\n      fetchShop(data?.shop?.value);\n    }\n  }, [data?.shop]);\n\n  return (\n    <Card title={t('shipping.info')}>\n      <Row gutter={12}>\n        <Col span={24}>\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                name='delivery_date'\n                label={t('delivery.date')}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DatePicker\n                  placeholder={t('delivery.date')}\n                  className='w-100'\n                  format='YYYY-MM-DD'\n                  disabledDate={disabledDate}\n                  onChange={(e) => {\n                    const delivery_date = moment(e).format('YYYY-MM-DD');\n                    dispatch(setOrderData({ delivery_date }));\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={`${t('delivery.time')} (${t('up.to')})`}\n                name='delivery_time'\n                rules={[\n                  {\n                    required: false,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DatePicker\n                  disabled={!data?.delivery_date}\n                  picker='time'\n                  placeholder={t('start.time')}\n                  className='w-100'\n                  format={'HH:mm:ss'}\n                  showNow={false}\n                  disabledTime={disabledDateTime}\n                  onChange={(e) => {\n                    const delivery_time = moment(e).format('HH:mm:ss');\n                    dispatch(setOrderData({ delivery_time }));\n                  }}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n\nexport default DeliveryInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/product-info.js",["6322"],[],"import React, { useState, useEffect } from 'react';\nimport { Card, Col, Row, Space, Spin } from 'antd';\nimport brandService from 'services/brand';\nimport categoryService from 'services/category';\nimport Meta from 'antd/lib/card/Meta';\nimport getImage from 'helpers/getImage';\nimport { PlusOutlined } from '@ant-design/icons';\nimport OrderItems from './orderItems';\nimport { DebounceSelect } from 'components/search';\nimport SearchInput from 'components/search-input';\nimport ExtrasModal from './extrasModal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { fetchRestProducts } from '../../redux/slices/product';\nimport { useTranslation } from 'react-i18next';\nimport shopService from 'services/shop';\nimport { clearOrderItems, setCurrentShop } from 'redux/slices/order';\nimport { useParams } from 'react-router-dom';\nimport { BsFillGiftFill } from 'react-icons/bs';\nimport RiveResult from 'components/rive-result';\n\nconst ProductInfo = ({ form }) => {\n  const { t } = useTranslation();\n  const [brand, setBrand] = useState(null);\n  const [category, setCategory] = useState(null);\n  const [search, setSearch] = useState(null);\n  const [extrasModal, setExtrasModal] = useState(null);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { data } = useSelector((state) => state.order, shallowEqual);\n  const { products, loading } = useSelector(\n    (state) => state.product,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    const params = {\n      perPage: 10,\n      page: 1,\n      brand_id: brand?.value,\n      category_id: category?.value,\n      search,\n      shop_id: data.shop?.value,\n      active: 1,\n    };\n    dispatch(fetchRestProducts(params));\n  }, [brand, category, search, data.shop]);\n\n  async function fetchBrands(search) {\n    return brandService.search(search).then(({ data }) =>\n      data.map((item) => ({\n        label: item.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  async function fetchCategories(search) {\n    const params = { search, type: 'main' };\n    return categoryService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  const addProductToCart = (item) => {\n    if (!data.currency) {\n      toast.warning(t('please.select.currency'));\n      return;\n    }\n    if (!data.address) {\n      toast.warning(t('please.select.address'));\n      return;\n    }\n    if (!data.deliveries) {\n      toast.warning(t('please.select.delivery'));\n      return;\n    }\n    setExtrasModal(item);\n  };\n\n  async function fetchShops(search) {\n    const params = { search, status: 'approved' };\n    return shopService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  const selectShop = (value) => {\n    dispatch(setCurrentShop(value));\n    dispatch(clearOrderItems());\n    form.setFieldsValue({\n      delivery: null,\n      delivery_date: null,\n      delivery_time: null,\n    });\n  };\n\n  return (\n    <Card\n      title={t('order.details')}\n      extra={\n        <Space wrap>\n          <DebounceSelect\n            placeholder={t('select.shop')}\n            fetchOptions={fetchShops}\n            style={{ minWidth: 150 }}\n            onChange={selectShop}\n            allowClear={false}\n            value={data?.shop}\n            disabled={id}\n          />\n          <DebounceSelect\n            placeholder={t('select.category')}\n            fetchOptions={fetchCategories}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setCategory(value)}\n            value={category}\n          />\n          <DebounceSelect\n            placeholder={t('select.brand')}\n            fetchOptions={fetchBrands}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setBrand(value)}\n            value={brand}\n          />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-end mb-4'>\n        <SearchInput\n          placeholder={t('search')}\n          handleChange={setSearch}\n          defaultValue={search?.search}\n        />\n      </div>\n      <div className='products-row order-items'>\n        {products.length ? (\n          products.map((item) => (\n            <Card\n              className='products-col'\n              key={item.id}\n              cover={\n                <img\n                  alt={item.product?.translation?.title}\n                  src={getImage(item?.img)}\n                />\n              }\n              onClick={() => addProductToCart(item)}\n            >\n              <Meta title={item?.product?.translation?.title} />\n              <div className='preview'>\n                <PlusOutlined />\n              </div>\n              {item.stocks.map((it, idx) => (\n                <span className={it.bonus ? 'show-bonus' : 'd-none'} key={idx}>\n                  <BsFillGiftFill /> {it.bonus?.value}\n                  {'+'}\n                  {it.bonus?.bonus_quantity}\n                </span>\n              ))}\n            </Card>\n          ))\n        ) : (\n          <Row>\n            <Col span={24}>\n              <RiveResult id='nosell' />\n            </Col>\n          </Row>\n        )}\n        {loading && (\n          <div className='loader'>\n            <Spin />\n          </div>\n        )}\n      </div>\n      {extrasModal && (\n        <ExtrasModal\n          extrasModal={extrasModal}\n          setExtrasModal={setExtrasModal}\n        />\n      )}\n\n      <OrderItems form={form} />\n    </Card>\n  );\n};\n\nexport default ProductInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/transaction-details.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/preview-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/transaction-status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/order-type-switcher.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-value-modal.js",["6323"],[],"import { Button, Form, Input, Modal } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { SketchPicker } from 'react-color';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ImageUploadSingle from 'components/image-upload-single';\nimport createImage from 'helpers/createImage';\nimport { fetchExtraValues } from 'redux/slices/extraValue';\nimport extraService from 'services/extra';\nimport { DebounceSelect } from 'components/search';\n\nexport default function ExtraValueModal({\n  modal,\n  handleCancel,\n  isVisible,\n  paramsData,\n}) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [type, setType] = useState('text');\n  const [image, setImage] = useState(null);\n  const [color, setColor] = useState('');\n\n  const fetchExtraGroups = (search) => {\n    const paramsData = {\n      perPage: 10,\n      page: 1,\n      search: search,\n    };\n\n    return extraService.getAllGroups(paramsData).then((res) =>\n      res.data.map((group) => ({\n        label: group?.translation?.title,\n        value: group?.id,\n        key: `${group?.type},${group?.id}`,\n      })),\n    );\n  };\n\n  useEffect(() => {\n    if (modal?.id) {\n      setType(modal.group.type);\n      switch (modal.group.type) {\n        case 'color':\n          setColor(modal.value);\n          break;\n\n        case 'image':\n          setImage(createImage(modal.value));\n          break;\n\n        default:\n          break;\n      }\n      form.setFieldsValue(modal);\n    }\n  }, [modal]);\n\n  const updateExtra = (id, body) => {\n    setLoadingBtn(true);\n    extraService\n      .updateValue(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        handleCancel();\n        dispatch(fetchExtraValues(paramsData));\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n        form.resetFields();\n      });\n  };\n\n  const createExtra = (body) => {\n    setLoadingBtn(true);\n    extraService\n      .createValue(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchExtraValues(paramsData));\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n        form.resetFields();\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      extra_group_id: values.extra_group_id.value ?? values.extra_group_id,\n      value: getValue(type, values.value) ?? values.value,\n    };\n    if (modal?.id) {\n      updateExtra(modal?.id, body);\n    } else {\n      createExtra(body);\n    }\n  };\n\n  function getValue(type, value) {\n    switch (type) {\n      case 'color':\n        return value.hex;\n      case 'text':\n        return value;\n      case 'image':\n        return value.name;\n      default:\n        return '';\n    }\n  }\n\n  const renderExtraValue = (type) => {\n    switch (type) {\n      case 'color':\n        return (\n          <SketchPicker\n            onChangeComplete={(color) => setColor(color.hex)}\n            color={color}\n            disableAlpha={true}\n          />\n        );\n      case 'text':\n        return <Input placeholder={t('enter.extra.value')} />;\n\n      case 'image':\n        return (\n          <ImageUploadSingle\n            type='extras'\n            image={image}\n            setImage={setImage}\n            form={form}\n            name='value'\n          />\n        );\n\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.extra') : t('add.extra')}\n      visible={isVisible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        name='extra-form'\n        layout='vertical'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{\n          extra_group_id: modal?.group\n            ? {\n                label: modal?.group?.translation?.title,\n                value: modal?.group?.id,\n                key: modal?.group?.id,\n              }\n            : [],\n        }}\n      >\n        <Form.Item\n          name='extra_group_id'\n          label={t('extra.group')}\n          rules={[{ required: true, message: 'required' }]}\n        >\n          <DebounceSelect\n            fetchOptions={fetchExtraGroups}\n            placeholder={t('select.extra.group')}\n            allowClear\n            onChange={(e) => {\n              setType(e?.key?.split(',')[0]);\n              form.setFieldsValue({ value: '' });\n            }}\n          />\n        </Form.Item>\n        <Form.Item\n          name='value'\n          label={t('value')}\n          rules={[{ required: true, message: 'required' }]}\n        >\n          {renderExtraValue(type)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-group-modal.js",["6324"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Input, Modal, Select } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport extraService from '../../../services/extra';\nimport { toast } from 'react-toastify';\nimport { fetchExtraGroups } from '../../../redux/slices/extraGroup';\nimport getTranslationFields from '../../../helpers/getTranslationFields';\nimport Loading from '../../../components/loading';\n\nexport default function ExtraGroupModal({ modal, handleCancel, onSuccess }) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  function fetchExtraGroup(id) {\n    setLoading(true);\n    extraService\n      .getGroupById(id)\n      .then((res) => {\n        const data = res.data;\n        form.setFieldsValue({ ...data, ...getLanguageFields(data) });\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (modal?.id) {\n      fetchExtraGroup(modal.id);\n    }\n  }, [modal]);\n\n  function createExtraGroup(body) {\n    setLoadingBtn(true);\n    extraService\n      .createGroup(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchExtraGroups());\n        !!onSuccess && onSuccess();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values),\n      type: values?.type,\n    };\n    if (modal?.id) {\n      updateExtraGroup(modal?.id, body);\n    } else {\n      createExtraGroup(body);\n    }\n  };\n\n  function updateExtraGroup(id, body) {\n    setLoadingBtn(true);\n    extraService\n      .updateGroup(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchExtraGroups());\n        handleCancel();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.extra.group') : t('add.extra.group')}\n      visible={!!modal}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-button-group'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button-group' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <div className='d-flex justify-content-end'>\n            <LanguageList />\n          </div>\n          <Form\n            layout='vertical'\n            name='extra-group'\n            form={form}\n            onFinish={onFinish}\n          >\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                name={`title[${item.locale}]`}\n                label={t('title')}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('title')} />\n              </Form.Item>\n            ))}\n            <Form.Item\n              name='type'\n              label={t('type')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select\n                style={{ width: '100%' }}\n                placeholder={t('select.extra.type')}\n              >\n                <Select.Option value='color'>{t('color')}</Select.Option>\n                <Select.Option value='text'>{t('text')}</Select.Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/Extras/extra-group-show-modal.js",["6325"],[],"import { Descriptions, Modal, Image, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loading from '../../../components/loading';\nimport { IMG_URL } from '../../../configs/app-global';\nimport extraService from '../../../services/extra';\n\nexport default function ExtraGroupShowModal({ open, handleClose }) {\n  const { t } = useTranslation();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchExtraValue = () => {\n    setLoading(true);\n    extraService\n      .getGroupById(open)\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchExtraValue();\n  }, []);\n\n  return (\n    <Modal\n      closable={false}\n      visible={open}\n      footer={null}\n      centered\n      onCancel={handleClose}\n    >\n      {!loading ? (\n        <Descriptions title={`${t('extra.group.value')}`} bordered>\n          {data.extra_values?.map((item, index) => (\n            <Descriptions.Item\n              key={index}\n              label={data.translation.title}\n              span={3}\n            >\n              {data.type === 'text' ? (\n                item.value\n              ) : data.type === 'image' ? (\n                <Image\n                  src={IMG_URL + item.value}\n                  alt='images'\n                  width={100}\n                  height={80}\n                />\n              ) : (\n                <Space>\n                  <div\n                    className='extra-color-wrapper-contain'\n                    style={{ backgroundColor: item.value }}\n                  />\n                  {item.value}\n                </Space>\n              )}\n            </Descriptions.Item>\n          ))}\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/pages/type-list.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/refund/status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/user.js",["6326"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Row, Space } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport userService from '../../services/user';\nimport { toast } from 'react-toastify';\nimport { removeFromMenu } from '../../redux/slices/menu';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport Loading from '../../components/loading';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function UserEdit({ prev }) {\n  const { isDemo } = useDemo();\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  console.log(isDemo);\n\n  const showUserData = (uuid) => {\n    setLoading(true);\n    userService\n      .getById(uuid)\n      .then((res) => {\n        const data = res.data;\n        form.setFieldsValue({\n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: data.email,\n          phone: data.phone,\n          password_confirmation: data.password_confirmation,\n          password: data.password,\n        });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      firstname: values.firstname,\n      lastname: values.lastname,\n      email: values.email,\n      phone: values.phone,\n      password_confirmation: values.password_confirmation,\n      password: values.password,\n    };\n    const nextUrl = 'restaurants';\n    userService\n      .update(activeMenu?.data?.seller?.uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu?.data) {\n      showUserData(activeMenu?.data?.seller?.uuid);\n    }\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <Form\n          form={form}\n          layout='vertical'\n          initialValues={{\n            gender: 'male',\n            role: 'admin',\n            ...activeMenu.data,\n            birthday: activeMenu.data?.birthday\n              ? moment(activeMenu.data.birthday)\n              : null,\n          }}\n          onFinish={onFinish}\n          className='py-4'\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('firstname')}\n                name='firstname'\n                help={error?.firstname ? error.firstname[0] : null}\n                validateStatus={error?.firstname ? 'error' : 'success'}\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <Input className='w-100' />\n              </Form.Item>\n            </Col>\n\n            <Col span={12}>\n              <Form.Item\n                label={t('lastname')}\n                name='lastname'\n                help={error?.lastname ? error.lastname[0] : null}\n                validateStatus={error?.lastname ? 'error' : 'success'}\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <Input className='w-100' />\n              </Form.Item>\n            </Col>\n\n            {isDemo || (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('phone')}\n                    name='phone'\n                    help={error?.phone ? error.phone[0] : null}\n                    validateStatus={error?.phone ? 'error' : 'success'}\n                    rules={[{ required: false, message: t('required') }]}\n                  >\n                    <InputNumber min={0} className='w-100' />\n                  </Form.Item>\n                </Col>\n\n                <Col span={12}>\n                  <Form.Item\n                    label={t('email')}\n                    name='email'\n                    help={error?.email ? error.email[0] : null}\n                    validateStatus={error?.email ? 'error' : 'success'}\n                    rules={[{ required: true, message: t('required') }]}\n                  >\n                    <Input type='email' className='w-100' />\n                  </Form.Item>\n                </Col>\n\n                <Col span={12}>\n                  <Form.Item\n                    label={t('password')}\n                    name='password'\n                    help={error?.password ? error.password[0] : null}\n                    validateStatus={error?.password ? 'error' : 'success'}\n                    rules={[{ required: false, message: t('required') }]}\n                  >\n                    <Input.Password\n                      type='password'\n                      className='w-100'\n                      autoComplete='off'\n                    />\n                  </Form.Item>\n                </Col>\n\n                <Col span={12}>\n                  <Form.Item\n                    label={t('password.confirmation')}\n                    help={\n                      error?.password_confirmation\n                        ? error.password_confirmation[0]\n                        : null\n                    }\n                    validateStatus={\n                      error?.password_confirmation ? 'error' : 'success'\n                    }\n                    name='password_confirmation'\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                      {\n                        required: false,\n                        message: t('required'),\n                      },\n                      ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                          if (!value || getFieldValue('password') === value) {\n                            return Promise.resolve();\n                          }\n                          return Promise.reject(t('passwords.do.not.match'));\n                        },\n                      }),\n                    ]}\n                  >\n                    <Input.Password\n                      type='password'\n                      className='w-100'\n                      autoComplete='off'\n                    />\n                  </Form.Item>\n                </Col>\n              </>\n            )}\n\n            <Col span={24}>\n              <Space>\n                <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                  {t('save')}\n                </Button>\n                <Button htmlType='submit' onClick={() => prev()}>\n                  {t('prev')}\n                </Button>\n              </Space>\n            </Col>\n          </Row>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/main.js",["6327"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Space } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport RestaurantAddData from './restaurant-add-data';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { replaceMenu, setMenuData } from '../../redux/slices/menu';\nimport restaurantService from '../../services/restaurant';\nimport { useTranslation } from 'react-i18next';\nimport getDefaultLocation from '../../helpers/getDefaultLocation';\n\nconst RestaurantMain = ({ next, action_type = '', user }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [logoImage, setLogoImage] = useState(\n    activeMenu.data?.logo_img ? [activeMenu.data?.logo_img] : []\n  );\n  const [backImage, setBackImage] = useState(\n    activeMenu.data?.background_img ? [activeMenu.data?.background_img] : []\n  );\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual\n  );\n  const [location, setLocation] = useState(\n    activeMenu?.data?.location\n      ? {\n          lat: parseFloat(activeMenu?.data?.location?.latitude),\n          lng: parseFloat(activeMenu?.data?.location?.longitude),\n        }\n      : getDefaultLocation(settings)\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.open_time = JSON.stringify(data?.open_time);\n      data.close_time = JSON.stringify(data?.close_time);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      'images[0]': logoImage[0]?.name,\n      'images[1]': backImage[0]?.name,\n      delivery_time_type: values.delivery_time_type,\n      delivery_time_to: values.delivery_time_to,\n      delivery_time_from: values.delivery_time_from,\n      categories: values.categories.map((e) => e.value),\n      tags: values?.tags?.map((e) => e.value),\n      user_id: values.user.value,\n      open: undefined,\n      'location[latitude]': location.lat,\n      'location[longitude]': location.lng,\n      user: undefined,\n      delivery_time: 0,\n      type: 'restaurant',\n    };\n    if (action_type === 'edit') {\n      restaurantUpdate(values, body);\n    } else {\n      restaurantCreate(values, body);\n    }\n  };\n\n  function restaurantCreate(values, params) {\n    restaurantService\n      .create(params)\n      .then(({ data }) => {\n        dispatch(\n          replaceMenu({\n            id: `restaurant-${data.uuid}`,\n            url: `restaurant/${data.uuid}`,\n            name: t('add.restaurant'),\n            data: {\n              ...data,\n              background_img: { name: data?.background_img },\n              logo_img: { name: data?.logo_img },\n              ...values,\n            },\n            refetch: false,\n          })\n        );\n        navigate(`/restaurant/${data.uuid}?step=1`);\n      })\n      .catch((err) => console.error(err))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function restaurantUpdate(values, params) {\n    restaurantService\n      .update(uuid, params)\n      .then(() => {\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: values,\n          })\n        );\n        next();\n      })\n      .catch((err) => console.error(err))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  return (\n    <>\n      <Form\n        form={form}\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          open: false,\n          status: 'new',\n          ...activeMenu.data,\n        }}\n      >\n        <RestaurantAddData\n          logoImage={logoImage}\n          setLogoImage={setLogoImage}\n          backImage={backImage}\n          setBackImage={setBackImage}\n          form={form}\n          location={location}\n          setLocation={setLocation}\n          user={user}\n        />\n        <Space>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('next')}\n          </Button>\n        </Space>\n      </Form>\n    </>\n  );\n};\nexport default RestaurantMain;\n","/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurantDelivery.js",["6328"],[],"import { Form } from 'antd';\n\nimport React, { useState, useEffect } from 'react';\nimport Loading from '../../components/loading';\nimport moment from 'moment';\nimport workingDays from '../../services/workingDays';\nimport closeDates from '../../services/closedDays';\nimport { useParams } from 'react-router-dom';\nimport { weeks } from '../../components/shop/weeks';\nimport ShopDeliveryForm from 'components/forms/shop-delivery-form';\n\nconst RestaurantDelivery = ({ next, prev }) => {\n  const [form] = Form.useForm();\n  const [days, setDays] = useState([]);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { uuid } = useParams();\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH-mm'),\n        to: moment(item.to ? item.to : '00').format('HH-mm'),\n        disabled: item.disabled,\n      })),\n    };\n\n    closeDates\n      .update(uuid, closeDatesBody)\n      .then(() => {\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n\n    if (values.working_days.length !== 0) {\n      workingDays\n        .update(uuid, workingDaysBody)\n        .then(() => {\n          next();\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  const getDays = () => {\n    setLoading(true);\n    closeDates.getById(uuid).then((res) => {\n      setDays(\n        res.data.closed_dates\n          .filter((date) => date.day > moment(new Date()).format('YYYY-MM-DD'))\n          .map((itm) => new Date(itm.day))\n      );\n    });\n\n    workingDays\n      .getById(uuid)\n      .then((res) => {\n        setLines(\n          res.data.dates.length !== 0\n            ? res.data.dates.map((item) => item.disabled)\n            : []\n        );\n\n        res.data.dates.length !== 0 &&\n          form.setFieldsValue({\n            working_days: res.data.dates.map((item) => ({\n              title: item.day,\n              from: moment(item.from, 'HH:mm:ss'),\n              to: moment(item.to, 'HH:mm:ss'),\n              disabled: Boolean(item.disabled),\n            })),\n          });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n    if (uuid) {\n      getDays();\n    }\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <ShopDeliveryForm\n          onFinish={onFinish}\n          prev={prev}\n          form={form}\n          lines={lines}\n          loadingBtn={loadingBtn}\n          days={days}\n          setDays={setDays}\n          setLines={setLines}\n          weeks={weeks}\n        />\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default RestaurantDelivery;\n","/home/mostafa/Magde/new/frontadminreact/src/views/reviews/parcelReviewShow.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/global-container.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/referral.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/reviews/orderReviewShow.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/reviews/productReviewShow.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/shop/map.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/privacy.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/card-responsive.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/product-list.js",["6329"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  ClearOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  FileAddOutlined,\n  MessageOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Table,\n  Image,\n  Card,\n  Space,\n  Switch,\n  Tag,\n  Tabs,\n  Modal,\n} from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { export_url, IMG_URL } from '../../configs/app-global';\nimport { Context } from '../../context/context';\nimport CustomModal from '../../components/modal';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addMenu, disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport productService from '../../services/product';\nimport { fetchProducts } from '../../redux/slices/product';\nimport useDidUpdate from '../../helpers/useDidUpdate';\nimport brandService from '../../services/brand';\nimport categoryService from '../../services/category';\nimport shopService from '../../services/restaurant';\nimport SearchInput from '../../components/search-input';\nimport formatSortType from '../../helpers/formatSortType';\nimport { useTranslation } from 'react-i18next';\nimport DeleteButton from '../../components/delete-button';\nimport ProductStatusModal from './productStatusModal';\nimport FilterColumns from '../../components/filter-column';\nimport RiveResult from '../../components/rive-result';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport DigitalProductModal from './digital-product';\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\nconst roles = ['all', 'pending', 'published', 'unpublished'];\nconst { TabPane } = Tabs;\n\nconst ProductCategories = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [productDetails, setProductDetails] = useState(null);\n  const [active, setActive] = useState(null);\n  const [text, setText] = useState(null);\n  const [role, setRole] = useState('all');\n  const [links, setLinks] = useState(null);\n  const [product_id, setProductId] = useState(null);\n  const [isVisibleMsgModal, setIsVisibleMsgModal] = useState(false);\n  const [modalText, setModalText] = useState('');\n\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      }),\n    );\n  };\n\n  const goToEdit = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `product-edit`,\n        url: `product/${uuid}`,\n        name: t('edit.product'),\n      }),\n    );\n    clearData();\n    navigate(`/product/${uuid}`);\n  };\n\n  const goToClone = (uuid) => {\n    dispatch(\n      addMenu({\n        id: `product-clone`,\n        url: `product-clone/${uuid}`,\n        name: t('clone.product'),\n      }),\n    );\n    clearData();\n    navigate(`/product-clone/${uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            width={100}\n            height={100}\n            src={IMG_URL + img}\n            placeholder\n            style={{ borderRadius: 4, objectFit: 'cover' }}\n          />\n        );\n      },\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      is_show: true,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop_id',\n      is_show: true,\n      render: (_, row) => {\n        return row.shop?.translation?.title;\n      },\n    },\n    {\n      title: t('category'),\n      dataIndex: 'category_name',\n      is_show: true,\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => {\n        return (\n          <div>\n            {status === 'pending' ? (\n              <Tag color='blue'>{t(status)}</Tag>\n            ) : status === 'unpublished' ? (\n              <Tag color='error'>{t(status)}</Tag>\n            ) : (\n              <Tag color='cyan'>{t(status)}</Tag>\n            )}\n            <EditOutlined onClick={() => setProductDetails(row)} />\n          </div>\n        );\n      },\n    },\n    {\n      title: t('digital.file'),\n      is_show: true,\n      dataIndex: 'digital_file',\n      key: 'digital.file',\n      render: (digital_file, row) => {\n        return row?.digital ? (\n          <div>\n            {!digital_file ? (\n              <Button\n                icon={<FileAddOutlined onClick={() => setProductId(row.id)} />}\n              />\n            ) : (\n              <Space>\n                <Button\n                  icon={<EditOutlined />}\n                  onClick={() => setProductId(row.id)}\n                />\n              </Space>\n            )}\n          </div>\n        ) : (\n          <Tag color='blue'>{t('no.digital')}</Tag>\n        );\n      },\n    },\n\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row.uuid)}\n            />\n\n            {row?.status === 'unpublished' && row?.status_note && (\n              <Button\n                onClick={() => {\n                  setIsVisibleMsgModal(true);\n                  setModalText(row.status_note);\n                }}\n                icon={<MessageOutlined />}\n              />\n            )}\n            <Button\n              icon={<CopyOutlined />}\n              onClick={() => goToClone(row.uuid)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([row.id]);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const [id, setId] = useState(null);\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { products, meta, loading, params } = useSelector(\n    (state) => state.product,\n    shallowEqual,\n  );\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    brand_id: data?.selectedBrand?.value,\n    category_id: data?.selectedCategory?.value,\n    shop_id: data?.selectedShop?.value,\n    sort: data?.sort,\n    status: immutable === 'all' ? undefined : immutable,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        id: 'product-import',\n        url: `catalog/product/import`,\n        name: t('product.import'),\n      }),\n    );\n    navigate(`/catalog/product/import`);\n  };\n\n  const productDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    productService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchProducts(paramsData));\n        setText(null);\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    productService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchProducts(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchProducts(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchProducts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const excelExport = () => {\n    setDownloading(true);\n    productService\n      .export(paramsData)\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const goToAddProduct = () => {\n    dispatch(\n      addMenu({\n        id: 'product-add',\n        url: `product/add`,\n        name: t('add.product'),\n      }),\n    );\n    clearData();\n    navigate(`/product/add`);\n  };\n\n  async function fetchBrands({ search, page }) {\n    const params = {\n      search: search?.length === 0 ? undefined : search,\n      page: page,\n    };\n    return brandService.search(params).then((res) => {\n      setLinks(res.links);\n      return res.data.map((item) => ({\n        label: item.title,\n        value: item.id,\n      }));\n    });\n  }\n\n  async function fetchCategories({ search, page }) {\n    const params = {\n      search: search?.length === 0 ? undefined : search,\n      type: 'main',\n      page: page,\n    };\n    return categoryService.search(params).then((res) => {\n      setLinks(res.links);\n      return res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }));\n    });\n  }\n\n  async function fetchUserShop({ search, page }) {\n    const params = {\n      search: search?.length === 0 ? undefined : search,\n      status: 'approved',\n      page: page,\n    };\n    return shopService.search(params).then((res) => {\n      setLinks(res.links);\n      return res.data.map((item) => ({\n        label: item.translation !== null ? item.translation.title : 'no name',\n        value: item.id,\n      }));\n    });\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      }),\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Card className='p-0'>\n        <Space wrap size={[14, 20]}>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            style={{ minWidth: 300 }}\n          />\n          <InfiniteSelect\n            placeholder={t('select.shop')}\n            hasMore={links?.next}\n            loading={loading}\n            fetchOptions={fetchUserShop}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ selectedShop: e })}\n            value={activeMenu.data?.selectedShop}\n          />\n\n          <InfiniteSelect\n            placeholder={t('select.category')}\n            fetchOptions={fetchCategories}\n            hasMore={links?.next}\n            loading={loading}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ selectedCategory: e })}\n            value={activeMenu.data?.selectedCategory}\n          />\n          <InfiniteSelect\n            placeholder={t('select.brand')}\n            fetchOptions={fetchBrands}\n            hasMore={links?.next}\n            loading={loading}\n            style={{ minWidth: 180 }}\n            onChange={(e) => handleFilter({ selectedBrand: e })}\n            value={activeMenu.data?.selectedBrand}\n          />\n\n          <Button onClick={goToImport}>\n            <CgImport className='mr-2' />\n            {t('import')}\n          </Button>\n          <Button loading={downloading} onClick={excelExport}>\n            <CgExport className='mr-2' />\n            {t('export')}\n          </Button>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n          <Button\n            icon={<PlusCircleOutlined />}\n            type='primary'\n            onClick={goToAddProduct}\n          >\n            {t('add.product')}\n          </Button>\n          <DeleteButton size='' onClick={allDelete}>\n            {t('delete.selected')}\n          </DeleteButton>\n\n          <Button\n            icon={<ClearOutlined />}\n            onClick={handleClear}\n            disabled={!activeMenu.data}\n            style={{ minWidth: 150 }}\n          />\n        </Space>\n      </Card>\n\n      <Card title={t('product')}>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n        <Table\n          locale={{\n            emptyText: <RiveResult />,\n          }}\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          loading={loading}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={products}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          onChange={onChangePagination}\n          rowKey={(record) => record.id}\n        />\n      </Card>\n      {productDetails && (\n        <ProductStatusModal\n          orderDetails={productDetails}\n          handleCancel={() => setProductDetails(null)}\n          paramsData={paramsData}\n        />\n      )}\n      <DigitalProductModal\n        product_id={product_id}\n        handleCancel={() => setProductId(null)}\n        handleRefetch={() => {\n          batch(() => {\n            dispatch(fetchProducts(paramsData));\n            dispatch(disableRefetch(activeMenu));\n          });\n        }}\n      />\n      <CustomModal\n        click={active ? handleActive : productDelete}\n        text={\n          active\n            ? t('set.active.product')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setActive}\n      />\n      <Modal\n        title='Reject message'\n        closable={false}\n        visible={isVisibleMsgModal}\n        footer={null}\n        centered\n      >\n        <p>{modalText}</p>\n        <div className='d-flex justify-content-end'>\n          <Button\n            type='primary'\n            className='mr-2'\n            onClick={() => setIsVisibleMsgModal(false)}\n          >\n            {t('close')}\n          </Button>\n        </div>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ProductCategories;\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/product-request-list.js",["6330"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Card, Image, Table, Button, Space, Tag, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport { EditOutlined, EyeOutlined, MessageOutlined } from '@ant-design/icons';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { useNavigate } from 'react-router-dom';\nimport FilterColumns from 'components/filter-column';\nimport formatSortType from 'helpers/formatSortType';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchRequestModels } from 'redux/slices/request-models';\nimport { HiArrowNarrowRight } from 'react-icons/hi';\nimport requestAdminModelsService from 'services/request-models';\nimport moment from 'moment';\nimport ProductStatusModal from './productStatusModal';\n\nconst body = {\n  type: 'product',\n};\n\nexport default function ProductRequestList({ parentId, type = 'main' }) {\n  const { t } = useTranslation();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isVisibleMsgModal, setIsVisibleMsgModal] = useState(false);\n  const [modalText, setModalText] = useState('');\n  const [id, setId] = useState(null);\n  const [productDetails, setProductDetails] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    data: requests,\n    meta,\n    loading,\n    params,\n  } = useSelector((state) => state.requestModels, shallowEqual);\n  const data = activeMenu.data;\n\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    parent_id: parentId,\n    type: 'product',\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `product-request/${row.id}`,\n        id: 'product_request_edit',\n        name: t('product.request.edit'),\n      })\n    );\n    navigate(`/product-request/${row.id}`);\n  };\n\n  const goToShow = (row) => {\n    dispatch(\n      addMenu({\n        url: `product-request-details/${row.id}`,\n        id: 'product_request_details',\n        name: t('product.request.details'),\n      })\n    );\n    navigate(`/product-request-details/${row.id}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('created.by'),\n      dataIndex: 'createdBy',\n      key: 'createdBy',\n      is_show: true,\n      render: (createdBy) => (\n        <span>\n          {createdBy.firstname} {createdBy?.lastname}{' '}\n          <a href={`tel:${createdBy?.phone}`}>{createdBy?.phone}</a>\n        </span>\n      ),\n    },\n    {\n      title: t('created.at'),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      is_show: true,\n      render: (createdAt) => moment(createdAt).format('YYYY-MM-DD HH:mm'),\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          {row.model.translation?.title} <HiArrowNarrowRight />{' '}\n          {row.data[`title[${row.model.translation.locale}]`]}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Image\n              src={getImage(row.model.img)}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n            <HiArrowNarrowRight />\n            <Image\n              src={getImage(\n                row.data.images?.at(0).url || row.data.images?.at(0)\n              )}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EditOutlined />} onClick={() => goToEdit(row)} />\n            {row?.status === 'cancelled' && row?.status_note && (\n              <Button\n                icon={<MessageOutlined />}\n                onClick={() => {\n                  setIsVisibleMsgModal(true);\n                  setModalText(row.status_note);\n                }}\n              />\n            )}\n            <Button\n              icon={<EyeOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                goToShow(row);\n              }}\n            />\n            <Button onClick={() => setProductDetails(row)}>\n              {t('change.status')}\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  useEffect(() => {\n    dispatch(fetchRequestModels(paramsData));\n    dispatch(disableRefetch(activeMenu));\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchRequestModels(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const requestStatusChange = () => {\n    setLoadingBtn(true);\n    const params = {\n      status: id?.at(0).status,\n    };\n    requestAdminModelsService\n      .changeStatus(id?.at(0).id, params)\n      .then(() => {\n        toast.success(t('successfully.changed'));\n        dispatch(fetchRequestModels(body));\n        setIsModalVisible(false);\n        setId(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  return (\n    <Card\n      title={t('requests')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={requests}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.key}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {productDetails && (\n        <ProductStatusModal\n          orderDetails={productDetails}\n          handleCancel={() => setProductDetails(null)}\n          paramsData={paramsData}\n          listType='request'\n        />\n      )}\n      <CustomModal\n        click={requestStatusChange}\n        text={t('change.status')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      <Modal\n        title='Reject message'\n        closable={false}\n        visible={isVisibleMsgModal}\n        footer={null}\n        centered\n      >\n        <p>{modalText}</p>\n        <div className='d-flex justify-content-end'>\n          <Button\n            type='primary'\n            className='mr-2'\n            onClick={() => setIsVisibleMsgModal(false)}\n          >\n            {t('close')}\n          </Button>\n        </div>\n      </Modal>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/CustomDrower.js",["6331"],[],"import { Button, Col, Drawer, Form, Row, Select, Space } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual, useSelector } from 'react-redux';\n\nconst CustomDrower = ({ handleClose, openDrower, setMenuData }) => {\n  const { t } = useTranslation();\n  const { direction } = useSelector((state) => state.theme.theme, shallowEqual);\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const onFinish = (values) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, filter: values },\n      })\n    );\n    handleClose();\n  };\n\n  const handleClear = () => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, filter: undefined },\n      })\n    );\n    handleClose();\n  };\n\n  return (\n    <Drawer\n      title={t('filter')}\n      placement={direction === 'rtl' ? 'left' : 'right'}\n      closable={true}\n      onClose={handleClose}\n      visible={openDrower}\n      key={'left'}\n      footer={\n        <Row gutter={12}>\n          <Col span={12}>\n            <Button\n              className='w-100'\n              type='primary'\n              onClick={() => form.submit()}\n            >\n              {t('result')}\n            </Button>\n          </Col>\n          <Col span={12}>\n            <Button className='w-100' onClick={() => handleClear()}>\n              {t('clear')}\n            </Button>\n          </Col>\n        </Row>\n      }\n    >\n      <Form\n        form={form}\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          ...activeMenu.data?.filter,\n        }}\n      >\n        <Form.Item\n          label={t('language')}\n          rules={[{ required: true, message: t('required') }]}\n          name='equal'\n        >\n          <Select>\n            <Select.Option value={'equal'}>{t('equal')}</Select.Option>\n            <Select.Option value={'not_equal'}>{t('not.equal')}</Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item\n          label={t('locale')}\n          rules={[{ required: true, message: t('required') }]}\n          name='lang'\n        >\n          <Select>\n            {languages.map((item, idx) => (\n              <Select.Option key={item.locale + idx} value={item.locale}>\n                {item.title}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n      </Form>\n    </Drawer>\n  );\n};\n\nexport default CustomDrower;\n","/home/mostafa/Magde/new/frontadminreact/src/services/translation.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-status-modal.js",["6332"],[],"import React, { useState } from 'react';\nimport { Button, Col, Form, Modal, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setRefetch } from '../../redux/slices/menu';\nimport restaurantService from '../../services/restaurant';\nimport useDemo from '../../helpers/useDemo';\nimport { fetchRestourant } from '../../redux/slices/restourant';\n\nconst statuses = ['new', 'approved', 'rejected'];\n\nexport default function RestaurantStatusModal({\n  data,\n  handleCancel,\n  paramsData,\n}) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const { isDemo, demoShop } = useDemo();\n\n  const onFinish = (values) => {\n    setLoading(true);\n    const params = { ...values };\n    restaurantService\n      .statusChange(data.uuid, params)\n      .then(() => {\n        handleCancel();\n        dispatch(fetchRestourant(paramsData));\n        dispatch(setRefetch(activeMenu));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Modal\n      visible={!!data}\n      title={t(data.name)}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loading}\n          disabled={isDemo && data.id == demoShop} // do not touch\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{ status: data.status }}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <Form.Item\n              label={t('status')}\n              name='status'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select>\n                {statuses.map((item, idx) => (\n                  <Select.Option key={item + idx} value={item}>\n                    {t(item)}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/recipe-categories/categoryStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/update.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/subscriptions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shops/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shops/main.js",["6333"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Space } from 'antd';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { replaceMenu, setMenuData } from 'redux/slices/menu';\nimport shopService from 'services/shop';\nimport { useTranslation } from 'react-i18next';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport ShopFormData from 'components/forms/shop-form';\nimport { ShopTypes } from 'constants/shop-types';\nimport { deliveryTimeTypes } from './delivery-time-types';\n\nconst ShopMain = ({ next, action_type = '', user }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n\n  const [location, setLocation] = useState(\n    activeMenu?.data?.location\n      ? {\n          lat: parseFloat(activeMenu?.data?.location?.latitude),\n          lng: parseFloat(activeMenu?.data?.location?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [logoImage, setLogoImage] = useState(\n    activeMenu.data?.logo_img ? [activeMenu.data?.logo_img] : [],\n  );\n  const [backImage, setBackImage] = useState(\n    activeMenu.data?.background_img ? [activeMenu.data?.background_img] : [],\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.open_time = JSON.stringify(data?.open_time);\n      data.close_time = JSON.stringify(data?.close_time);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } }),\n      );\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      delivery_type: values?.delivery_type?.value || values?.delivery_type,\n      'images[0]': logoImage[0]?.name,\n      'images[1]': backImage[0]?.name,\n      delivery_time_type: values.delivery_time_type,\n      delivery_time_to: values.delivery_time_to || 0,\n      delivery_time_from: values.delivery_time_from || 0,\n      tags: values?.tags?.map((e) => e.value),\n      user_id: values.user.value,\n      open: undefined,\n      'location[latitude]': location.lat,\n      'location[longitude]': location.lng,\n      user: undefined,\n      delivery_time: 0,\n    };\n    delete body?.background_img;\n    delete body?.logo_img;\n    if (action_type === 'edit') {\n      shopUpdate(values, body);\n    } else {\n      shopCreate(values, body);\n    }\n  };\n\n  function shopCreate(values, params) {\n    shopService\n      .create(params)\n      .then(({ data }) => {\n        dispatch(\n          replaceMenu({\n            id: `shop-${data.uuid}`,\n            url: `shop/${data.uuid}`,\n            name: t('add.shop'),\n            data: { ...values, id: data?.id, seller: data?.seller },\n            refetch: false,\n          }),\n        );\n        navigate(`/shop/${data.uuid}?step=1`);\n      })\n      .catch((err) => console.error(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function shopUpdate(values, params) {\n    shopService\n      .update(uuid, params)\n      .then(() => {\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: values,\n          }),\n        );\n        next();\n      })\n      .catch((err) => console.error(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  return (\n    <>\n      <Form\n        form={form}\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          open: false,\n          status: 'new',\n          delivery_time_type: deliveryTimeTypes[0],\n          ...activeMenu.data,\n          delivery_type: activeMenu.data?.delivery_type ?? ShopTypes[0],\n          delivery_time_from: activeMenu.data?.delivery_time?.from\n            ? Number(activeMenu.data?.delivery_time?.from)\n            : 0,\n          delivery_time_to: activeMenu.data?.delivery_time?.to\n            ? Number(activeMenu.data?.delivery_time?.to)\n            : 0,\n          phone: activeMenu.data?.phone ? Number(activeMenu.data?.phone) : 0,\n        }}\n      >\n        <ShopFormData\n          form={form}\n          user={user}\n          backImage={backImage}\n          setBackImage={setBackImage}\n          logoImage={logoImage}\n          setLogoImage={setLogoImage}\n          location={location}\n          setLocation={setLocation}\n        />\n        <Space>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('next')}\n          </Button>\n        </Space>\n      </Form>\n    </>\n  );\n};\nexport default ShopMain;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shops/user.js",["6334","6335","6336","6337","6338","6339","6340"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Row, Space } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport userService from '../../services/user';\nimport { toast } from 'react-toastify';\nimport { removeFromMenu } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport Loading from '../../components/loading';\nimport ShopUserForm from 'components/forms/shop-user-form';\nimport { fetchShops } from '../../redux/slices/shop';\n\nexport default function UserEdit({ prev }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n\n  const showUserData = (uuid) => {\n    setLoading(true);\n    userService\n      .getById(uuid)\n      .then((res) => {\n        const data = res.data;\n        form.setFieldsValue({\n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: data.email,\n          phone: data.phone,\n          password_confirmation: data.password_confirmation,\n          password: data.password,\n        });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      firstname: values.firstname,\n      lastname: values.lastname,\n      email: values.email,\n      phone: values.phone,\n      password_confirmation: values.password_confirmation,\n      password: values.password,\n    };\n    const nextUrl = 'shops';\n    userService\n      .update(activeMenu?.data?.seller?.uuid, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchShops({ perPage: 10, page: 1 }));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu?.data.seller) {\n      showUserData(activeMenu?.data?.seller?.uuid);\n    }\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <Form\n          form={form}\n          layout='vertical'\n          initialValues={{\n            ...activeMenu.data,\n          }}\n          onFinish={onFinish}\n          className='py-4'\n        >\n          <ShopUserForm error={error} loadingBtn={loadingBtn} />\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/shops/shopDelivery.js",["6341"],[],"import React, { useState, useEffect } from 'react';\nimport Loading from '../../components/loading';\nimport moment from 'moment';\nimport workingDays from '../../services/workingDays';\nimport closeDates from '../../services/closedDays';\nimport { useParams } from 'react-router-dom';\nimport { weeks } from '../../components/shop/weeks';\nimport ShopDeliveryForm from 'components/forms/shop-delivery-form';\nimport { Form } from 'antd';\n\nconst ShopDelivery = ({ next, prev }) => {\n  const [form] = Form.useForm();\n  const [days, setDays] = useState([]);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { uuid } = useParams();\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH:mm'),\n        to: moment(item.to ? item.to : '00').format('HH:mm'),\n        disabled: item.disabled,\n      })),\n    };\n\n    closeDates\n      .update(uuid, closeDatesBody)\n      .then(() => {\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n\n    if (values.working_days.length !== 0) {\n      workingDays\n        .update(uuid, workingDaysBody)\n        .then(() => {\n          next();\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  const getDays = () => {\n    setLoading(true);\n    closeDates.getById(uuid).then((res) => {\n      setDays(\n        res.data.closed_dates\n          .filter((date) => date.day > moment(new Date()).format('YYYY-MM-DD'))\n          .map((itm) => new Date(itm.day))\n      );\n    });\n\n    workingDays\n      .getById(uuid)\n      .then((res) => {\n        setLines(\n          res.data.dates.length !== 0\n            ? res.data.dates.map((item) => item.disabled)\n            : []\n        );\n\n        res.data.dates.length !== 0 &&\n          form.setFieldsValue({\n            working_days: res.data.dates.map((item) => ({\n              title: item.day,\n              from: moment(item.from, 'HH:mm:ss'),\n              to: moment(item.to, 'HH:mm:ss'),\n              disabled: Boolean(item.disabled),\n            })),\n          });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n    if (uuid) getDays();\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <ShopDeliveryForm\n          onFinish={onFinish}\n          prev={prev}\n          form={form}\n          lines={lines}\n          loadingBtn={loadingBtn}\n          days={days}\n          setDays={setDays}\n          setLines={setLines}\n          weeks={weeks}\n        />\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default ShopDelivery;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shops/social.js",["6342","6343"],[],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Form, Row, Col, Card, Select, Input, Button, Space } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { useTranslation } from 'react-i18next';\nimport shopSocialService from 'services/shop-social';\nimport Loading from 'components/loading';\nimport { useParams } from 'react-router-dom';\nimport shopService from '../../services/shop';\n\nconst defaultSocialMediaOptions = [\n  { label: 'Facebook', value: 'facebook' },\n  { label: 'Instagram', value: 'instagram' },\n  { label: 'Telegram', value: 'telegram' },\n  { label: 'Youtube', value: 'youtube' },\n  { label: 'LinkedIn', value: 'linkedin' },\n  { label: 'Snapchat', value: 'snapchat' },\n  { label: 'WeChat', value: 'wechat' },\n  { label: 'WhatsApp', value: 'whatsapp' },\n  { label: 'Twitch', value: 'twitch' },\n  { label: 'Discord', value: 'discord' },\n  { label: 'Pinterest', value: 'pinterest' },\n  { label: 'Steam', value: 'steam' },\n  { label: 'Spotify', value: 'spotify' },\n  { label: 'Reddit', value: 'reddit' },\n  { label: 'Skype', value: 'skype' },\n  { label: 'Twitter', value: 'twitter' },\n];\n\nconst generateShortUUID = (length = 8) => {\n  const chars =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * chars.length);\n    result += chars[randomIndex];\n  }\n  return result;\n};\n\nexport default function ShopSocial({ prev, next }) {\n  const { t } = useTranslation();\n  const { uuid } = useParams();\n\n  const [shop, setShop] = useState(null);\n  const [socialMediaOptions, setSocialMediaOptions] = useState(\n    defaultSocialMediaOptions,\n  );\n  const [socialList, setSocialList] = useState([\n    { type: '', content: '', id: generateShortUUID() },\n  ]);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const addSocialMedia = () => {\n    setSocialList([\n      ...socialList,\n      { type: '', content: '', id: generateShortUUID() },\n    ]);\n  };\n\n  const removeSocialMedia = (remove) => {\n    setSocialList(socialList.filter((item) => item.id !== remove.id));\n  };\n\n  const handleChange = (type, changeId, value) => {\n    setSocialList(\n      socialList.flatMap((item) =>\n        item.id === changeId ? { ...item, [type]: value } : item,\n      ),\n    );\n  };\n\n  const fetchShopSocial = () => {\n    setLoading(true);\n\n    const paramsData = {\n      shop_id: shop?.id,\n    };\n\n    shopSocialService\n      .getAll(paramsData)\n      .then((res) => {\n        if (res.data?.length) {\n          setSocialList(\n            res.data.map((item) => ({\n              type: item.type,\n              content: item.content,\n              id: generateShortUUID(),\n            })),\n          );\n        }\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const fetchShop = () => {\n    setLoading(true);\n    shopService.getById(uuid).then((res) => setShop(res.data));\n  };\n\n  useEffect(() => {\n    if (!shop) {\n      fetchShop();\n      return;\n    }\n    fetchShopSocial();\n  }, [shop?.id]);\n\n  const onFinish = () => {\n    setLoadingBtn(true);\n\n    const body = {\n      shop_id: shop?.id,\n      data: socialList\n        .map((item) => {\n          if (!item.type || !item.content) return null;\n          return {\n            type: item.type,\n            content: item.content,\n          };\n        })\n        .filter((item) => !!item),\n    };\n\n    return shopSocialService\n      .create(body)\n      .then(() => next())\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Fragment>\n      {!loading ? (\n        <Form onFinish={onFinish} layout='vertical'>\n          <Card>\n            {socialList.map((socialItem, index) => (\n              <Row gutter={12} key={index}>\n                <Col span={9}>\n                  <Form.Item label={t('type')}>\n                    <Select\n                      showSearch={true}\n                      options={socialMediaOptions}\n                      value={socialItem.type}\n                      onChange={(value) =>\n                        handleChange('type', socialItem.id, value)\n                      }\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item label={t('url')}>\n                    <Input\n                      value={socialItem.content}\n                      onChange={(value) =>\n                        handleChange(\n                          'content',\n                          socialItem.id,\n                          value.target.value,\n                        )\n                      }\n                    />\n                  </Form.Item>\n                </Col>\n                {socialList.length > 1 && (\n                  <Col\n                    span={3}\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <Button\n                      type='primary'\n                      danger\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeSocialMedia(socialItem)}\n                    />\n                  </Col>\n                )}\n              </Row>\n            ))}\n            <Button\n              className='w-100 my-3'\n              type='dashed'\n              onClick={addSocialMedia}\n            >\n              {t('add.social')}\n            </Button>\n          </Card>\n\n          <Space className='mt-4'>\n            <Button onClick={prev}>{t('prev')}</Button>\n            <Button type='primary' htmlType='submit' loading={!!loadingBtn}>\n              {t('next')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/shop/shop-locations.js",["6344"],[],"import { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Col, Image, Modal, Space, Table } from 'antd';\nimport { useContext, useEffect, useState } from 'react';\nimport { fetchShopLocations } from '../../redux/slices/shop-locations';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport LocationSelect from './location-select';\nimport shopLocationsService from 'services/shop-locations';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\n\nconst ShopLocations = ({ next, prev }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const { locations, loading } = useSelector((state) => state.shopLocations);\n  const [ids, setIds] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isLocationSelectModalOpen, setIsLocationSelectModalOpen] =\n    useState(false);\n  const { setIsModalVisible } = useContext(Context);\n\n  const columns = [\n    {\n      title: t('location'),\n      dataIndex: 'location',\n      key: 'location',\n      render: (_, row) => (\n        <span>\n          {row.country?.translation?.title}\n          {row.city ? ',' : ''} {row.city?.translation?.title}\n        </span>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'country',\n      key: 'image',\n      render: (country) => (\n        <Image\n          src={country.img}\n          alt={country?.translation?.title}\n          width={60}\n          height={40}\n        />\n      ),\n    },\n\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      key: 'options',\n      render: (_, row) => (\n        <Space>\n          <Button\n            onClick={() => {\n              setIds([row.id]);\n              setIsModalVisible(true);\n            }}\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n          />\n        </Space>\n      ),\n    },\n  ];\n\n  const params = {\n    shop_id: activeMenu?.data?.id,\n  };\n  const locationDelete = () => {\n    setLoadingBtn(true);\n    const paramsData = {\n      ...Object.assign(\n        {},\n        ...ids.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    shopLocationsService\n      .delete(paramsData)\n      .then(() => {\n        dispatch(fetchShopLocations(params));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIds(null);\n        setLoadingBtn(false);\n        setIsModalVisible(false);\n      });\n  };\n\n  const handleAddLocation = (values) => {\n    const country = values.country.value.split(',')[0];\n    const region = values.country.value.split(',')[1];\n    const body = {\n      country_id: country,\n      region_id: region,\n      shop_id: activeMenu?.data?.id,\n    };\n    if (values.city.value !== 'all') {\n      body.city_id = values.city?.value;\n    }\n    setLoadingBtn(true);\n    shopLocationsService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        dispatch(fetchShopLocations(params));\n        setIsLocationSelectModalOpen(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu?.data?.id) {\n      dispatch(fetchShopLocations(params));\n    }\n  }, [activeMenu?.data?.id]);\n\n  return (\n    <>\n      <Space className='justify-content-end w-100'>\n        <Button\n          onClick={() => setIsLocationSelectModalOpen(true)}\n          type='primary'\n        >\n          {t('add')}\n        </Button>\n      </Space>\n      <Table loading={loading} dataSource={locations} columns={columns} />\n      <Modal\n        footer={null}\n        visible={isLocationSelectModalOpen}\n        destroyOnClose\n        onCancel={() => setIsLocationSelectModalOpen(false)}\n      >\n        <LocationSelect\n          onClose={() => setIsLocationSelectModalOpen(false)}\n          onSubmit={handleAddLocation}\n          isButtonLoading={loadingBtn}\n        />\n      </Modal>\n      <CustomModal\n        click={locationDelete}\n        text={t('delete.location')}\n        setText={setIds}\n        loading={loadingBtn}\n      />\n      <Col span={24}>\n        <Space>\n          <Button type='primary' htmlType='button' onClick={() => next()}>\n            {t('next')}\n          </Button>\n          <Button htmlType='button' onClick={() => prev()}>\n            {t('prev')}\n          </Button>\n        </Space>\n      </Col>\n    </>\n  );\n};\n\nexport default ShopLocations;\n","/home/mostafa/Magde/new/frontadminreact/src/views/payments/paymentEditModal.js",["6345"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Input, Modal, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setRefetch } from '../../redux/slices/menu';\nimport paymentService from '../../services/payment';\nimport Loading from '../../components/loading';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport getLanguageFields from '../../helpers/getLanguageFields';\n\nexport default function PaymentEditModal({ modal, handleCancel }) {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  function fetchPayment(id) {\n    setLoading(true);\n    paymentService\n      .getById(id)\n      .then(({ data }) => {\n        const fields = ['title', 'client_title', 'secret_title'];\n        const translations = getLanguageFields(languages, data, fields);\n        form.setFieldsValue({ ...data, ...translations });\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (modal) {\n      fetchPayment(modal.id);\n    }\n  }, [modal]);\n\n  const onFinish = (values) => {\n    const params = {\n      client_id: values.client_id,\n      secret_id: values.secret_id,\n      title: getTranslationFields(languages, values, 'title'),\n      client_title: getTranslationFields(languages, values, 'client_title'),\n      secret_title: getTranslationFields(languages, values, 'secret_title'),\n    };\n    setLoadingBtn(true);\n    paymentService\n      .update(modal.id, params)\n      .then(() => {\n        handleCancel();\n        dispatch(setRefetch(activeMenu));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Modal\n      visible={!!modal}\n      title={t('edit.payment')}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n          key='save-btn'\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel} key='cancel-btn'>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <div className='d-flex justify-content-end'>\n            <LanguageList />\n          </div>\n          <Form form={form} layout='vertical' onFinish={onFinish}>\n            <Row gutter={12}>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    label={t('title')}\n                    name={`title[${item.locale}]`}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('required'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    label={t('client.title')}\n                    name={`client_title[${item.locale}]`}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('required'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    label={t('secret.title')}\n                    name={`secret_title[${item.locale}]`}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('requried'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={24}>\n                <Form.Item\n                  label={t('client.id')}\n                  name='client_id'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={24}>\n                <Form.Item\n                  label={t('secret.id')}\n                  name='secret_id'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/translations/translationCreateModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/user-top-products.js",[],["6346"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/user-refunds.js",[],["6347"],"/home/mostafa/Magde/new/frontadminreact/src/views/user/userShowModal.js",["6348"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Descriptions, Image, Modal, Row } from 'antd';\nimport userService from '../../services/user';\nimport getImage from '../../helpers/getImage';\nimport { useTranslation } from 'react-i18next';\nimport Loading from '../../components/loading';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport useDemo from '../../helpers/useDemo';\nimport hideEmail from '../../components/hideEmail';\nimport hideNumber from 'components/hideNumber';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nexport default function UserShowModal({ uuid, handleCancel }) {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { t } = useTranslation();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { isDemo } = useDemo();\n\n  function fetchUser(uuid) {\n    setLoading(true);\n    userService\n      .getById(uuid)\n      .then((res) => setData(res.data))\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchUser(uuid);\n  }, [uuid]);\n\n  return (\n    <Modal\n      visible={!!uuid}\n      title={t('user')}\n      onCancel={handleCancel}\n      footer={[\n        <Button key='cancel' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n      className={data.shop ? 'large-modal' : ''}\n    >\n      {!loading ? (\n        <Row gutter={24}>\n          <Col span={data.shop ? 12 : 24}>\n            <Descriptions bordered>\n              <Descriptions.Item span={3} label={t('avatar')}>\n                <Image\n                  src={getImage(data.img)}\n                  alt={data.firstname}\n                  width={80}\n                  className='rounded'\n                />\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('user.id')}>\n                {data.id}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('name')}>\n                {data.firstname} {data.lastname || ''}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('gender')}>\n                {data.gender}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('birthday')}>\n                {data.birthday}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('email')}>\n                {ReactAppIsDemo ? hideEmail(data?.email) : data?.email}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('phone')}>\n                {data?.phone\n                  ? ReactAppIsDemo\n                    ? hideNumber(data?.phone)\n                    : data?.phone\n                  : t('no.phone')}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('role')}>\n                {data.role}\n              </Descriptions.Item>\n              <Descriptions.Item span={3} label={t('wallet')}>\n                {numberToPrice(data.wallet?.price, defaultCurrency?.symbol)}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n          {data.shop ? (\n            <Col span={12}>\n              <Descriptions bordered>\n                <Descriptions.Item span={3} label={t('shop.id')}>\n                  {data.shop.id}\n                </Descriptions.Item>\n                <Descriptions.Item span={3} label={t('shop.name')}>\n                  {data.shop.translation?.title}\n                </Descriptions.Item>\n                <Descriptions.Item span={3} label={t('shop.logo')}>\n                  <img\n                    src={getImage(data.shop.logo_img)}\n                    alt={data.shop.translation?.title}\n                    width={100}\n                    className='rounded'\n                  />\n                </Descriptions.Item>\n                <Descriptions.Item span={3} label={t('shop.phone')}>\n                  {data.shop.phone}\n                </Descriptions.Item>\n                <Descriptions.Item span={3} label={t('shop.open_close.time')}>\n                  {data.shop.open_time} - {data.shop.close_time}\n                </Descriptions.Item>\n                <Descriptions.Item span={3} label={t('delivery.range')}>\n                  {data.shop.delivery_range}\n                </Descriptions.Item>\n              </Descriptions>\n            </Col>\n          ) : (\n            ''\n          )}\n        </Row>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/user/userRoleModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shops/shop-status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-sender.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-receiver.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-details.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shop-reviews/shopReviewShow.js",["6349"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Descriptions, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport Loading from 'components/loading';\nimport reviewService from 'services/review';\nimport moment from 'moment';\n\nexport default function OrderReviewShowModal({ id, handleCancel }) {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { t } = useTranslation();\n\n  const comment = data?.comment?.split(',');\n  const name = data?.user?.lastname + data?.user?.firstname;\n  const phone = data?.user?.phone ?? t('not given');\n  const description = data?.comment;\n\n  function fetchReviews(id) {\n    setLoading(true);\n    reviewService\n      .getById(id)\n      .then((res) => setData(res.data))\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchReviews(id);\n  }, [id]);\n\n  return (\n    <Modal\n      visible={!!id}\n      title={t('shop.review')}\n      onCancel={handleCancel}\n      footer={\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>\n      }\n    >\n      {!loading ? (\n        <Descriptions bordered>\n          <Descriptions.Item span={3} label={t('id')}>\n            {data.id}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('user')}>\n            {name}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('rating')}>\n            {data.rating}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('phone.number')}>\n            {phone}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('comment')}>\n            {description}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('created.at')}>\n            {moment(data.created_at).format('DD.MM.YYYY HH:mm')}\n          </Descriptions.Item>\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/nFormatter.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/subscriptions/subscriptions-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-options/option-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/advert/advert-form.js",["6350","6351"],[],"import React, { useEffect, useMemo, useState } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  Spin,\n  Switch,\n} from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport advertService from 'services/advert';\nimport { toast } from 'react-toastify';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport LanguageList from 'components/language-list';\nimport { disableRefetch, setMenuData, removeFromMenu } from 'redux/slices/menu';\nimport { t } from 'i18next';\nimport MediaUpload from 'components/upload';\nimport VideoUploaderWithModal from 'components/video-uploader';\nconst type = [\n  {\n    value: 'main',\n    label: t('main'),\n  },\n  { value: 'standard', label: t('standard') },\n  { value: 'main_top_banner', label: t('main_top_banner') },\n  { value: 'main_banner', label: t('main_banner') },\n  { value: 'main_left_banner', label: t('main_left_banner') },\n  { value: 'standard_top_banner', label: t('standard_top_banner') },\n];\nconst AdvertForm = ({ id }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [image, setImage] = useState(\n    activeMenu.data?.img?.filter((item) => !item?.isVideo) || [],\n  );\n  const [mediaList, setMediaList] = useState(\n    activeMenu?.data?.initialMediaFile || { images: [], previews: [] },\n  );\n\n  const timeOptions = useMemo(\n    () => [\n      { value: 'minute', label: t('minute') },\n      {\n        value: 'hour',\n        label: t('hour'),\n      },\n      {\n        value: 'day',\n        label: t('day'),\n      },\n      {\n        value: 'month',\n        label: t('month'),\n      },\n      {\n        value: 'year',\n        label: t('year'),\n      },\n    ],\n    [],\n  );\n  const [loading, setLoading] = useState(false);\n  const [isFetching, setFetching] = useState(false);\n\n  const onFinish = (values) => {\n    const videos = mediaList.images.map((item) => item.name);\n    const previews = mediaList.previews.map((item) => item.name);\n\n    const params = {\n      ...values,\n      images: [...videos, ...image.map((image) => image?.name)],\n      previews,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      active: Number(values.active),\n      time_type: values.time_type.value,\n      type: values.type?.value || values.type,\n    };\n    if (!id) {\n      advertCreate(params);\n    } else {\n      advertUpdate(params);\n    }\n  };\n\n  const advertCreate = (params) => {\n    setLoading(true);\n    const nextUrl = 'catalog/advert';\n    advertService\n      .create(params)\n      .then((res) => {\n        navigate(`/${nextUrl}`);\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const advertUpdate = (params) => {\n    setLoading(true);\n    const nextUrl = 'catalog/advert';\n    advertService\n      .update(id, params)\n      .then((res) => {\n        navigate('/catalog/advert');\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n      isVideo: Boolean(item.preview),\n    }));\n\n  const createMediaFile = (items) => {\n    const mediaObject = { images: [], previews: [] };\n    const previews = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.preview,\n        url: item.preview,\n      }));\n    const videos = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.path,\n        url: item.path,\n        isVideo: true,\n      }));\n    mediaObject.previews = previews;\n    mediaObject.images = videos;\n\n    return mediaObject;\n  };\n\n  const getAd = (alias) => {\n    setFetching(true);\n    advertService\n      .getById(alias)\n      .then((res) => {\n        let ad = res.data;\n        const data = {\n          ...ad,\n          time_type: { value: ad.time_type, label: t(ad.time_type) },\n          img: createImages(ad.galleries),\n          initialMediaFile: createMediaFile(res.data.galleries),\n          ...getLanguageFields(ad),\n        };\n        setImage(createImages(ad.galleries).filter((item) => !item.isVideo));\n        setMediaList(createMediaFile(res.data.galleries));\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setFetching(false);\n      });\n  };\n\n  useEffect(() => {\n    if (!!id) {\n      getAd(id);\n    }\n  }, [id]);\n\n  if (isFetching) {\n    return (\n      <Card title={t('edit.ad')}>\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card\n        title={!!id ? t('edit.ad') : t('add.ad')}\n        extra={<LanguageList />}\n      />\n      <Form\n        layout='vertical'\n        form={form}\n        initialValues={{ active: true }}\n        onFinish={onFinish}\n      >\n        <Row gutter={[24, 24]}>\n          <Col span={12}>\n            <Card title={t('basic.info')} className='h-100'>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.id}\n                  label={t('name')}\n                  name={`title[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.length < 2) {\n                          return Promise.reject(new Error(t('min.2.letters')));\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n              {languages.map((item) => (\n                <Form.Item\n                  key={'description' + item.locale}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  rules={[\n                    {\n                      required: item.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator(_, value) {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 5) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.5')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                  hidden={item.locale !== defaultLang}\n                >\n                  <Input maxLength={150} />\n                </Form.Item>\n              ))}\n              <Form.Item\n                label={t('type')}\n                name='type'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  labelInValue={true}\n                  filterOption={false}\n                  options={type}\n                />\n              </Form.Item>\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card title={t('time.and.price')} className='h-100'>\n              <Form.Item\n                label={t('time.type')}\n                name='time_type'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  labelInValue={true}\n                  filterOption={false}\n                  options={timeOptions}\n                />\n              </Form.Item>\n              <Form.Item\n                label={t('time')}\n                name='time'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('must.be.positive'),\n                  },\n                  {\n                    type: 'number',\n                    max: 32000,\n                    message: t('must.be.less.than.32000'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n              <Form.Item\n                label={t('price')}\n                name='price'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                  {\n                    type: 'number',\n                    max: 99999999999999999999,\n                    message: t('max.length.20'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' min={0} />\n              </Form.Item>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Card>\n          </Col>\n          <Col span={16}>\n            <Card title={t('video')} className='h-100'>\n              <VideoUploaderWithModal\n                form={form}\n                name='other'\n                mediaList={mediaList}\n                setMediaList={setMediaList}\n              />\n            </Card>\n          </Col>\n          <Col span={8}>\n            <Card title={t('media')} className='h-100'>\n              <Form.Item\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n                name='images'\n              >\n                <MediaUpload\n                  type='other'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Card>\n          </Col>\n          <Col span={24} className='d-flex justify-content-end'>\n            <Button type='primary' htmlType='submit' loading={loading}>\n              {t('submit')}\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n\nexport default AdvertForm;\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/shop-ads-form.js",["6352","6353"],[],"import React, { useEffect, useState } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, Col, Form, Row, Select, Spin, Switch } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport shopAdsService from 'services/shop-ads';\nimport { toast } from 'react-toastify';\nimport LanguageList from 'components/language-list';\nimport { DebounceSelect } from 'components/search';\nimport { setMenuData, removeFromMenu, disableRefetch } from 'redux/slices/menu';\nimport advertService from 'services/advert';\n\nconst ShopAdsForm = ({ id }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [loading, setLoading] = useState(false);\n  const [isFetching, setFetching] = useState(false);\n  const [ads_package_id, setAdsPackageId] = useState(null);\n\n  const allStatuses = ['new', 'approved', 'canceled'];\n\n  const onFinish = (values) => {\n    const params = {\n      ...values,\n      banner_id: values?.banner_id?.value,\n      active: Number(values?.active),\n      ads_package_id: ads_package_id,\n    };\n    shopAdsUpdate(params);\n  };\n\n  const shopAdsUpdate = (params) => {\n    setLoading(true);\n    const nextUrl = 'catalog/shop-ads';\n    shopAdsService\n      .update(id, params)\n      .then(() => {\n        navigate(`/${nextUrl}`);\n        toast.success(t('successfully.updated'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  async function fetchAdsPackage(search) {\n    const params = {\n      search,\n      perPage: 10,\n      active: 1,\n    };\n    return advertService\n      .getAll(params)\n      .then((res) => formatDataSelect(res.data));\n  }\n\n  function formatDataSelect(data) {\n    return data.map((item) => ({\n      label: item?.translation.title,\n      value: item.id,\n      self: item,\n      key: item.id,\n    }));\n  }\n\n  const getShopAds = (alias) => {\n    setFetching(true);\n    shopAdsService\n      .getById(alias)\n      .then((res) => {\n        setFetching(false);\n        const shopAd = res.data;\n        const ads_package = shopAd?.ads_package;\n\n        setAdsPackageId(shopAd.ads_package_id);\n\n        const data = {\n          ...shopAd,\n          ads_package_id: {\n            label: ads_package?.translation?.title,\n            value: ads_package?.id,\n            key: ads_package?.id,\n          },\n          status: shopAd?.status,\n          active: shopAd?.active,\n        };\n\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {});\n  };\n\n  useEffect(() => {\n    if (!!id) {\n      getShopAds(id);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getShopAds(id);\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  if (isFetching) {\n    return (\n      <Card title={t('edit.ad')}>\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      initialValues={{ active: true, ...activeMenu?.data }}\n      onFinish={onFinish}\n    >\n      <Card\n        title={!!id ? t('edit.shop.ads') : t('add.shop.ads')}\n        extra={<LanguageList />}\n      >\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('ads.package')}\n              name={'ads_package_id'}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchAdsPackage}\n                debounceTimeout={200}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('status')}\n              name={'status'}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select>\n                {allStatuses.map((item) => (\n                  <Select.Option key={item}>{t(item)}</Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={6}>\n            <Form.Item\n              label={t('active')}\n              name='active'\n              valuePropName='checked'\n            >\n              <Switch />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Card>\n      <Button type='primary' htmlType='submit' loading={loading}>\n        {t('submit')}\n      </Button>\n    </Form>\n  );\n};\n\nexport default ShopAdsForm;\n","/home/mostafa/Magde/new/frontadminreact/src/views/payment-to-partners/payment-type.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/point-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/chart-widget.js",[],["6354"],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/working-date.js",["6355"],[],"import React, { useState, useEffect, useMemo } from 'react';\nimport Loading from 'components/loading';\nimport moment from 'moment';\nimport workingDays from 'services/deliverypointWorkingDays';\nimport closeDates from 'services/deliverypointClosedDays';\nimport { weeks } from 'components/shop/weeks';\nimport { Form } from 'antd';\nimport WorkingDays from './date-form';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { fetchDeliveryPoint } from 'redux/slices/delivery-point';\nimport { removeFromMenu } from 'redux/slices/menu';\n\nconst WorkingDate = ({ prev }) => {\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [days, setDays] = useState([]);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const uuid = useMemo(() => activeMenu?.data?.id, [activeMenu?.data]);\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      delivery_point_id: uuid,\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      delivery_point_id: uuid,\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH:mm'),\n        to: moment(item.to ? item.to : '00').format('HH:mm'),\n        disabled: item.disabled,\n      })),\n    };\n\n    if (values.working_days.length !== 0) {\n      workingDays\n        .update(uuid, workingDaysBody)\n        .then(() => {})\n        .finally(() => setLoadingBtn(false));\n    }\n    closeDates\n      .update(uuid, closeDatesBody)\n      .then(() => {\n        const nextUrl = 'delivery-point';\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchDeliveryPoint());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const getDays = () => {\n    setLoading(true);\n    closeDates.getById(uuid).then((res) => {\n      setDays(\n        res.data.closed_dates\n          .filter((date) => date.day > moment(new Date()).format('YYYY-MM-DD'))\n          .map((itm) => new Date(itm.day))\n      );\n    });\n\n    workingDays\n      .getById(uuid)\n      .then((res) => {\n        setLines(\n          res.data.dates.length !== 0\n            ? res.data.dates.map((item) => item.disabled)\n            : []\n        );\n\n        res.data.dates.length !== 0 &&\n          form.setFieldsValue({\n            working_days: res.data.dates.map((item) => ({\n              title: item.day,\n              from: moment(item.from, 'HH:mm:ss'),\n              to: moment(item.to, 'HH:mm:ss'),\n              disabled: Boolean(item.disabled),\n            })),\n          });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n    if (uuid) getDays();\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <WorkingDays\n          onFinish={onFinish}\n          prev={prev}\n          form={form}\n          lines={lines}\n          loadingBtn={loadingBtn}\n          days={days}\n          setDays={setDays}\n          setLines={setLines}\n          weeks={weeks}\n        />\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default WorkingDate;\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/dnd/Incorporate/index.js",["6356","6357","6358"],[],"import List from '../List/index';\nimport { DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { useState } from 'react';\nimport { Spin } from 'antd';\nimport OrderCard from 'components/order-card';\nimport Scrollbars from 'react-custom-scrollbars';\nimport orderService from 'services/order';\nimport { clearCurrentOrders, clearItems, setItems } from 'redux/slices/orders';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { useEffect } from 'react';\nimport { mockOrderList } from '../../../../constants';\nimport OrderCardLoader from 'components/order-card-loader';\nimport { toast } from 'react-toastify';\nimport Loading from 'components/loading';\nimport OrderNoteModal from 'views/order/orderNoteModal';\n\nconst Incorporate = ({\n  goToEdit,\n  goToShow,\n  fetchOrderAllItem,\n  fetchOrders,\n  setLocationsMap,\n  setId,\n  setIsModalVisible,\n  setText,\n  setDowloadModal,\n  type,\n  setTabType,\n}) => {\n  const dispatch = useDispatch();\n  const { statusList, loading } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const statuses = statusList?.map((status) => {\n    return status?.name;\n  });\n  const { items } = useSelector((state) => state.orders, shallowEqual);\n  const orders = useSelector((state) => state.orders, shallowEqual);\n  const [key, setKey] = useState('');\n  const [current, setCurrent] = useState({});\n  const [result, setResult] = useState({});\n  const [currentCId, setCurrentCId] = useState({});\n  const [statusChangedOrder, setStatusChangedOrder] = useState(null);\n  const [modalNoteType, setModalNoteType] = useState('');\n  const removeFromList = (list, index) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(index, 1);\n    return [removed, result];\n  };\n\n  const addToList = (list, index, element) => {\n    const result = Array.from(list);\n    result.splice(index, 0, element);\n    return result;\n  };\n\n  const changeStatus = (id, params) => {\n    orderService.updateStatus(id, params).then(() => {\n      toast.success(`#${id} order status changed`);\n    });\n  };\n\n  const onDragStart = (task) => {\n    const id = statuses.findIndex((item) => item === task.source.droppableId);\n    setCurrent(task);\n    setCurrentCId(id);\n  };\n  const changeColumnData = (result) => {\n    const listCopy = { ...items };\n    const sourceList = listCopy[result.source.droppableId];\n    const [removedElement, newSourceList] = removeFromList(\n      sourceList,\n      result.source.index,\n    );\n    listCopy[result.source.droppableId] = newSourceList;\n    const destinationList = listCopy[result.destination.droppableId];\n    listCopy[result.destination.droppableId] = addToList(\n      destinationList,\n      result.destination.index,\n      removedElement,\n    );\n    dispatch(setItems(listCopy));\n    setCurrentCId(null);\n  };\n  const onDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n    setResult(result);\n    // if (result.destination.droppableId === 'canceled') {\n    //   setModalNoteType('canceled');\n    //   setStatusChangedOrder(result.draggableId);\n    // } else if (result.destination.droppableId === 'pause') {\n    //   setModalNoteType('pause');\n    //   setStatusChangedOrder(result.draggableId);\n    // } else if (\n    //   result.destination &&\n    //   current.source.droppableId !== result.destination.droppableId\n    // ) {\n    changeStatus(result.draggableId, {\n      status: result.destination.droppableId,\n    });\n    changeColumnData(result);\n    // }\n  };\n\n  const handleScroll = (event, key) => {\n    const lastProductLoaded = event.target.lastChild;\n    const pageOffset = event.target.clientHeight + event.target.scrollTop;\n    if (lastProductLoaded) {\n      const lastProductLoadedOffset =\n        lastProductLoaded.offsetTop + lastProductLoaded.clientHeight + 19.9;\n      if (pageOffset > lastProductLoadedOffset) {\n        if (\n          orders[key].meta.last_page > orders[key].meta.current_page &&\n          !orders[key]?.loading\n        ) {\n          setKey(key);\n          fetchOrders({\n            page: orders[key].meta.current_page + 1,\n            perPage: 5,\n            status: key,\n          });\n        }\n      }\n    }\n  };\n\n  const checkDisable = (index) => {\n    if (index === 0 && currentCId === statuses.length - 1) return false;\n    return Boolean(currentCId > index);\n  };\n\n  useEffect(() => {\n    dispatch(clearItems());\n    // if (checkIsEmpty()) {\n    fetchOrderAllItem();\n    // }\n  }, [type]);\n\n  const reloadOrder = (item) => {\n    dispatch(clearCurrentOrders(item));\n    fetchOrders({ status: item });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <div>\n          <Loading />\n        </div>\n      ) : (\n        <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n          <div className='order-board'>\n            {statuses?.map((item, index) => (\n              <div key={item} className='dnd-column'>\n                <List\n                  title={item}\n                  onDragEnd={onDragEnd}\n                  name={item}\n                  isDropDisabled={checkDisable(index)}\n                  total={items[item]?.length}\n                  loading={orders[item]?.loading}\n                  reloadOrder={() => reloadOrder(item)}\n                >\n                  <Scrollbars\n                    onScroll={(e) => handleScroll(e, item)}\n                    autoHeight\n                    autoHeightMin={'75vh'}\n                    autoHeightMax={'75vh'}\n                    autoHide\n                    id={item}\n                  >\n                    {!Boolean(orders[item]?.loading && !items[item]?.length)\n                      ? items[item]?.map((data, index) => (\n                          <>\n                            <Draggable\n                              key={data.id}\n                              draggableId={data.id.toString()}\n                              index={index}\n                            >\n                              {(provided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  <OrderCard\n                                    data={data}\n                                    goToEdit={goToEdit}\n                                    goToShow={goToShow}\n                                    setLocationsMap={setLocationsMap}\n                                    setId={setId}\n                                    setIsModalVisible={setIsModalVisible}\n                                    setText={setText}\n                                    setDowloadModal={setDowloadModal}\n                                    setTabType={setTabType}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          </>\n                        ))\n                      : mockOrderList[item]?.map(() => (\n                          <OrderCardLoader loading={true} />\n                        ))}\n                    {orders[item]?.loading && item === key && (\n                      <Spin\n                        indicator={\n                          <LoadingOutlined\n                            style={{\n                              fontSize: 24,\n                            }}\n                            spin\n                          />\n                        }\n                      />\n                    )}\n                  </Scrollbars>\n                </List>\n              </div>\n            ))}\n          </div>\n        </DragDropContext>\n      )}\n      {statusChangedOrder && (\n        <OrderNoteModal\n          result={result}\n          changeColumnData={changeColumnData}\n          statusChangedOrder={statusChangedOrder}\n          setStatusChangedOrder={setStatusChangedOrder}\n          modalNoteType={modalNoteType}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Incorporate;\n","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/statisticNumberWidget.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-price/price-form.js",["6359","6360"],[],"import React, { useEffect, useState } from 'react';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, Col, Form, InputNumber, Row } from 'antd';\nimport { RefetchSearch } from 'components/refetch-search';\nimport { DebounceSelect } from 'components/search';\nimport regionService from 'services/deliveryzone/region';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nimport areaService from 'services/deliveryzone/area';\nimport shopService from 'services/shop';\nimport { setMenuData, disableRefetch } from 'redux/slices/menu';\nimport deliveryPriceService from 'services/delivery-price';\nimport Loading from 'components/loading';\n\nexport default function PriceForm({ form, handleSubmit }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [formData, setFormData] = useState({});\n  const { country, region, city } = formData;\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      getDeliveryPrice(id);\n    }\n  }, [activeMenu.refetch]);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  // fetch functions\n  const getDeliveryPrice = () => {\n    setLoading(true);\n    deliveryPriceService\n      .getById(id)\n      .then(({ data }) => {\n        const { city, country, region, area, ...rest } = data;\n        const fieldName = `address[${defaultLang}]`;\n\n        const deliveryzone = {\n          area: { label: area?.translation?.title, value: area?.id },\n          city: { label: city?.translation?.title, value: city?.id },\n          country: { label: country?.translation?.title, value: country?.id },\n          region: { label: region?.translation?.title, value: region?.id },\n        };\n\n        const formData = {\n          ...getLanguageFields(data),\n          ...deliveryzone,\n          ...rest,\n          [fieldName]: data.address?.[defaultLang],\n          shop_id: {\n            label: data?.shop?.translation?.title,\n            value: data?.shop?.id,\n            key: data?.shop?.id,\n          },\n        };\n\n        form.setFieldsValue(formData);\n        setFormData(deliveryzone);\n      })\n      .catch((error) => {\n        console.error(error);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n  async function fetchRegion(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n    };\n    return regionService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n  async function fetchCountry(search) {\n    const params = { search, status: 1, perPage: 10, region_id: region?.value };\n    return countryService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n  async function fetchCity(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      country_id: country?.value,\n    };\n    return cityService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n  async function fetchArea(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      city_id: city?.value,\n    };\n    return areaService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  const fetchShops = (search = '') => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    if (search.trim() === '') {\n      delete params.search;\n    }\n\n    return shopService.getAll(params).then((res) => {\n      return res?.data?.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  };\n\n  // onFinish\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    handleSubmit(values).finally(() => setLoadingBtn(false));\n  };\n\n  return loading ? (\n    <Loading />\n  ) : (\n    <Form\n      form={form}\n      name={!!id ? t('edit.delivery.price') : t('add.delivery.price')}\n      layout='vertical'\n      initialValues={{ clickable: true, ...activeMenu.data }}\n      onFinish={onFinish}\n    >\n      <Row gutter={[24, 24]}>\n        <Col span={12}>\n          <Card title={t('deliveryzone')} className='h-100'>\n            <Col span={24}>\n              <Form.Item\n                label={t('region')}\n                name='region'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchRegion}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, region: value }));\n                    form.resetFields(['city', 'area', 'country']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('country')}\n                name='country'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCountry}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, country: value }));\n                    form.resetFields(['city', 'area']);\n                  }}\n                  disabled={!Boolean(region?.value)}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('city')}\n                name='city'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCity}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(country?.value)}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, city: value }));\n                    form.resetFields(['area']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('area')}\n                name='area'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchArea}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(city?.value)}\n                />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t('pricing')} className='h-100'>\n            <Col span={24}>\n              <Form.Item\n                label={`${t('price')} (${defaultCurrency?.symbol})`}\n                name='price'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t('others')} className='h-100'>\n            <Col span={24}>\n              <Form.Item label={t('shop')} name='shop_id'>\n                <DebounceSelect fetchOptions={fetchShops} />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n      </Row>\n      <br />\n      <div className='flex-grow-1 d-flex justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/looks/form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/point-edit.js",["6361"],[],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Switch,\n  message,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport LanguageList from 'components/language-list';\nimport MediaUpload from 'components/upload';\nimport deliveryPointService from 'services/delivery-point';\nimport { RefetchSearch } from 'components/refetch-search';\nimport regionService from 'services/deliveryzone/region';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nimport Map from 'components/map';\nimport areaService from 'services/deliveryzone/area';\nimport AddressForm from 'components/forms/address-form';\n\nconst EditDeliveryPoint = ({ next }) => {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const [image, setImage] = useState([]);\n  const [loading, setLoading] = useState([]);\n  const [location, setLocation] = useState('');\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [formData, setFormData] = useState({});\n  const [value, setValue] = useState('');\n  const { country, region, city } = formData;\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getDeliveryPoint = () => {\n    setLoading(true);\n    deliveryPointService\n      .getById(id)\n      .then(({ data }) => {\n        const { city, country, region, area, ...rest } = data;\n        const fieldName = `address[${defaultLang}]`;\n\n        const deliveryzone = {\n          area: { label: area?.translation?.title, value: area?.id },\n          city: { label: city?.translation?.title, value: city?.id },\n          country: { label: country?.translation?.title, value: country?.id },\n          region: { label: region?.translation?.title, value: region?.id },\n        };\n\n        const formData = {\n          ...getLanguageFields(data),\n          ...deliveryzone,\n          ...rest,\n          [fieldName]: data.address?.[defaultLang],\n        };\n\n        form.setFieldsValue(formData);\n        setImage([{ name: data.img }]);\n        setFormData(deliveryzone);\n        setLocation({\n          lat: data.location?.latitude,\n          lng: data.location?.longitude,\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    if (id) getDeliveryPoint();\n  }, [id]);\n\n  const onFinish = (values) => {\n    const { area, city, country, region, price, fitting_rooms, active } =\n      values;\n    const body = {\n      price,\n      fitting_rooms,\n      location: {\n        latitude: location?.lat,\n        longitude: location?.lng,\n      },\n      active: active ? 1 : 0,\n      area_id: area?.value,\n      city_id: city?.value,\n      country_id: country?.value,\n      region_id: region?.value,\n      images: image.map((image) => image.name),\n      title: getTranslationFields(languages, values, 'title'),\n      address: getTranslationFields(languages, values, 'address'),\n    };\n    setLoadingBtn(true);\n    deliveryPointService\n      .update(id, body)\n      .then(() => {\n        message.success(t('successfully.created'));\n        const formFieldsValue = form.getFieldsValue(true);\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { ...formFieldsValue, id },\n          }),\n        );\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  async function fetchRegion(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n    };\n    return regionService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  async function fetchCountry(search) {\n    const params = { search, status: 1, perPage: 10, region_id: region?.value };\n    return countryService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  async function fetchCity(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      country_id: country?.value,\n    };\n    return cityService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  async function fetchArea(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      city_id: city?.value,\n    };\n    return areaService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n\n  return (\n    <Form\n      name='add.delivery.point'\n      layout='vertical'\n      onFinish={onFinish}\n      form={form}\n      initialValues={{ clickable: true, ...activeMenu.data }}\n    >\n      <Row gutter={[24, 24]}>\n        <Col span={12}>\n          <Card title={t('deliveryzone')} className='h-100' loading={loading}>\n            <Col span={24}>\n              <Form.Item\n                label={t('region')}\n                name='region'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchRegion}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, region: value }));\n                    form.resetFields(['city', 'area', 'country']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('country')}\n                name='country'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCountry}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, country: value }));\n                    form.resetFields(['city', 'area']);\n                  }}\n                  disabled={!Boolean(region?.value)}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('city')}\n                name='city'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCity}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(country?.value)}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, city: value }));\n                    form.resetFields(['area']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('area')}\n                name='area'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchArea}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(city?.value)}\n                />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t('pricing')} className='h-100' loading={loading}>\n            <Col span={24}>\n              <Form.Item\n                label={t('price')}\n                name='price'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('fitting_rooms')}\n                name='fitting_rooms'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Row gutter={24}>\n                <Col span={12}>\n                  <Form.Item\n                    rules={[\n                      {\n                        required: false,\n                        message: t('required'),\n                      },\n                    ]}\n                    label={t('image')}\n                    name='images'\n                  >\n                    <MediaUpload\n                      type='products'\n                      imageList={image}\n                      setImageList={setImage}\n                      form={form}\n                      length='1'\n                      multiple={false}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('active')}\n                    name='active'\n                    valuePropName='checked'\n                  >\n                    <Switch />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={24}>\n          <Card title={t('address')} loading={loading} extra={<LanguageList />}>\n            <Row gutter={12}>\n              <Col span={12}>\n                <AddressForm\n                  setLocation={setLocation}\n                  value={value}\n                  setValue={setValue}\n                />\n              </Col>\n              <Col span={12}>\n                {languages.map((item, idx) => (\n                  <Form.Item\n                    key={'title' + idx}\n                    label={t('title')}\n                    name={`title[${item.locale}]`}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('required'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={24}>\n                <Map\n                  location={location}\n                  setLocation={setLocation}\n                  setAddress={(value) =>\n                    form.setFieldsValue({\n                      [`address[${defaultLang}]`]: value,\n                    })\n                  }\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n};\n\nexport default EditDeliveryPoint;\n","/home/mostafa/Magde/new/frontadminreact/src/components/report/chart.js",["6362"],[],"import { Card, Col, Row, Space, Typography, Divider, Select } from 'antd';\nimport React, { useMemo } from 'react';\nimport { LineChartOutlined, BarChartOutlined } from '@ant-design/icons';\nimport ChartWidget from '../chart-widget';\nimport { COLORS } from '../../constants/ChartConstant';\nimport { useTranslation } from 'react-i18next';\nimport { useContext } from 'react';\nimport { ReportContext } from '../../context/report';\nconst { Title } = Typography;\n\nconst ReportChart = ({ reportData = {} }) => {\n  const { by_time, options, handleByTime, chart_type, setChartType } =\n    useContext(ReportContext);\n  const { t } = useTranslation();\n  const categories = useMemo(\n    () => reportData?.chart?.map((item) => item.time),\n    [reportData?.chart]\n  );\n\n  const chartData = useMemo(() => {\n    if (Boolean(reportData.charts)) {\n      return reportData.charts.map((item) => {\n        return {\n          name: item.translation.title,\n          data: item.stocks?.map(\n            (item) =>\n              item.total_order_quantity ||\n              item.avg_quantity ||\n              item.quantity ||\n              item.count ||\n              item.price ||\n              item.order_details_sum_quantity ||\n              0\n          ) || [],\n        };\n      });\n    } else\n      return [\n        {\n          name: t('orders'),\n          data: reportData?.chart?.map(\n            (item) => \n              parseInt(item.count ||\n              item.total_price ||\n              item.quantity ||\n              item.price ||\n              item.products_count ||\n              item.order_details_avg_quantity ||\n              item.order_details_avg_total_price ||\n              item.order_details_sum_quantity ||\n              item.avg_price ||\n              item.avg_quantity ||\n              0, 10)\n          ) || [],\n        },\n      ];\n  }, [reportData?.chart]);\n\n  return (\n    <Row gutter={24}>\n      <Col span={24}>\n        <Card>\n          <Row gutter={24} className='w-100'>\n            <div className='d-flex justify-content-between w-100'>\n              <Space size='large' className='d-flex'>\n                <Title level={3} className='mb-0'>\n                  {t('item.sold')}\n                </Title>\n              </Space>\n\n              <div className='d-flex'>\n                <Select\n                  style={{ width: 100 }}\n                  onChange={handleByTime}\n                  options={options}\n                  defaultValue={by_time}\n                />\n\n                <Divider type='vertical' style={{ height: '100%' }} />\n                <Space>\n                  <LineChartOutlined\n                    style={{\n                      fontSize: '22px',\n                      cursor: 'pointer',\n                      color: chart_type === 'area' ? 'green' : '',\n                    }}\n                    onClick={() => setChartType('area')}\n                  />\n                  <BarChartOutlined\n                    style={{\n                      fontSize: '22px',\n                      cursor: 'pointer',\n                      color: chart_type === 'bar' ? 'green' : '',\n                    }}\n                    onClick={() => setChartType('bar')}\n                  />\n                </Space>\n              </div>\n            </div>\n          </Row>\n          <Divider />\n          <ChartWidget\n            type={chart_type || \"area\"}\n            card={false}\n            series={chartData}\n            xAxis={categories}\n            height={280}\n            customOptions={{\n              colors: [\n                COLORS[1],\n                COLORS[2],\n                COLORS[3],\n                COLORS[4],\n                COLORS[5],\n                COLORS[6],\n                COLORS[0],\n              ],\n              legend: {\n                show: false,\n              },\n              stroke: {\n                width: 2.5,\n                curve: 'smooth',\n              },\n            }}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default ReportChart;\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-status.js",["6363"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Modal, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport parcelOrderService from 'services/parcelOrder';\nimport { setRefetch } from 'redux/slices/menu';\n\nexport default function ParcelStatus({\n  orderDetails: data,\n  handleCancel,\n  status,\n}) {\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [statuses, setStatuses] = useState(status);\n\n  useEffect(() => {\n    const statusIndex = status.findIndex((item) => item.name === data.status);\n    let newStatuses = [\n      status[statusIndex],\n      status[statusIndex + 1],\n      { name: 'canceled', id: 8, active: true },\n    ];\n    if (statusIndex < 0) {\n      newStatuses = [status[statusIndex + 1], 'canceled'];\n    }\n    setStatuses(newStatuses);\n  }, [data]);\n\n  const onFinish = (values) => {\n    setLoading(true);\n    const payload = { ...values };\n    parcelOrderService\n      .updateStatus(data.id, payload)\n      .then(() => {\n        handleCancel();\n        dispatch(setRefetch(activeMenu));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Modal\n      visible={!!data}\n      title={data.title}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-form'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loading}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cansel-modal' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{ status: data.status }}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <Form.Item\n              label={t('status')}\n              name='status'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select>\n                {statuses?.map((item) => (\n                  <Select.Option key={item?.name} value={item?.name}>\n                    {t(item?.name)}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/show-locations-map.js",["6364","6365"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Modal, Row, Steps, Tag } from 'antd';\nimport GoogleMapReact from 'google-map-react';\nimport { useTranslation } from 'react-i18next';\nimport parcelOrderService from 'services/parcelOrder';\nimport Loading from 'components/loading';\nimport { BsCalendar2Day, BsCheckLg, BsTruck } from 'react-icons/bs';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MAP_API_KEY } from 'configs/app-global';\nimport FaUser from 'assets/images/user.jpg';\nimport FaStore from 'assets/images/shop.png';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { FileDoneOutlined, ShoppingCartOutlined } from '@ant-design/icons';\nimport { IoCheckmarkDoneSharp } from 'react-icons/io5';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport getFullDateTime from 'helpers/getFullDateTime';\nimport getFullDate from 'helpers/getFullDate';\nconst { Step } = Steps;\nconst User = () => (\n  <div\n    style={{\n      position: 'absolute',\n      transform: 'translate(-50%, -100%)',\n    }}\n  >\n    <img src={FaUser} width='50' alt='Pin' />\n  </div>\n);\nconst Store = () => (\n  <div\n    style={{\n      position: 'absolute',\n      transform: 'translate(-50%, -100%)',\n    }}\n  >\n    <img src={FaStore} width='50' alt='Pin' />\n  </div>\n);\n\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst ShowLocationsMap = ({ id, handleCancel }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n  const [status, setStatus] = useState(null);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const center = getDefaultLocation(settings);\n  const [current, setCurrent] = useState(0);\n  const [shop, setShop] = useState(getDefaultLocation(settings));\n  const [user, setUser] = useState(getDefaultLocation(settings));\n  const [steps, setSteps] = useState([\n    { id: 0, name: 'new', icon: <ShoppingCartOutlined /> },\n    { id: 1, name: 'accepted', icon: <FileDoneOutlined /> },\n    { id: 3, name: 'ready', icon: <BsCheckLg /> },\n    { id: 4, name: 'on_a_way', icon: <BsTruck /> },\n    { id: 5, name: 'delivered', icon: <IoCheckmarkDoneSharp /> },\n  ]);\n\n  function fetchOrder() {\n    setLoading(true);\n    parcelOrderService\n      .getById(id)\n      .then(({ data }) => {\n        setSteps(\n          data.status === 'canceled'\n            ? [\n                { id: 1, name: 'new', icon: <ShoppingCartOutlined /> },\n                { id: 5, name: 'canceled', icon: <AiOutlineCloseCircle /> },\n              ]\n            : steps,\n        );\n        setCurrent(\n          data.status === 'canceled'\n            ? 1\n            : steps.find((item) => item.name === data.status)?.id,\n        );\n\n        setStatus(data.status === 'canceled' ? 'error' : 'success');\n        setData(data);\n        setUser({\n          lat: data.address_from.latitude,\n          lng: data.address_from.longitude,\n        });\n        setShop({\n          lat: data.address_to.latitude,\n          lng: data.address_to.longitude,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    fetchOrder();\n  }, []);\n\n  const handleLoadMap = ({ map, maps }) => {\n    const markers = [shop, user].map((item) => ({\n      lat: Number(item.lat || '0'),\n      lng: Number(item.lng || '0'),\n    }));\n\n    let bounds = new maps.LatLngBounds();\n    for (var i = 0; i < markers.length; i++) {\n      bounds.extend(markers[i]);\n    }\n    map.fitBounds(bounds);\n  };\n\n  return (\n    <>\n      <Modal\n        visible={!!id}\n        title={t('show.locations')}\n        onCancel={() => handleCancel()}\n        style={{ minWidth: '80vw' }}\n        footer={[\n          <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {loading ? (\n          <Loading />\n        ) : (\n          <Card>\n            <Steps current={current} status={status} className='mb-5'>\n              {steps?.map((item, index) => (\n                <Step\n                  title={t(item.name)}\n                  key={item.id + index}\n                  icon={item?.icon}\n                />\n              ))}\n            </Steps>\n            <Row gutter={12}>\n              <Col span={12}>\n                <h3>\n                  {t('order.id')} #{data?.id}\n                </h3>\n                <p>\n                  <BsCalendar2Day /> {getFullDateTime(data?.created_at)}\n                </p>\n                <p>\n                  {t('delivery.time')}: {getFullDateTime(data?.delivery_date)}\n                </p>\n                <span>\n                  <strong>{data?.shop?.translation?.title}</strong>{' '}\n                  {data?.details?.map((details, index) => (\n                    <Tag color={colors[index]}>\n                      {details?.stock?.product.translation.title}\n                    </Tag>\n                  ))}\n                </span>\n              </Col>\n              <Col span={12}>\n                <p>\n                  {t('status')}\n                  {': '}\n                  {data?.status === 'new' ? (\n                    <Tag color='blue'>{t(data?.status)}</Tag>\n                  ) : data?.status === 'canceled' ? (\n                    <Tag color='error'>{t(data?.status)}</Tag>\n                  ) : (\n                    <Tag color='cyan'>{t(data?.status)}</Tag>\n                  )}\n                </p>\n                <p>\n                  {t('order.type')}: <strong>{t('parcel')}</strong>\n                </p>\n                <p>\n                  {t('payment.method')}\n                  {': '}\n                  <strong>{data?.transaction?.payment_system?.tag}</strong>\n                </p>\n                <p>\n                  {t('payment.status')}\n                  {': '}\n                  <strong>{data?.transaction?.status}</strong>\n                </p>\n              </Col>\n\n              <Col span={24} className='mt-5'>\n                <h4>{t('map')}</h4>\n                <div\n                  className='map-container'\n                  style={{ height: 400, width: '100%' }}\n                >\n                  <GoogleMapReact\n                    bootstrapURLKeys={{\n                      key: MAP_API_KEY || google_map_key,\n                    }}\n                    defaultZoom={15}\n                    center={center}\n                    yesIWantToUseGoogleMapApiInternals\n                    options={{\n                      fullscreenControl: false,\n                    }}\n                    onGoogleApiLoaded={handleLoadMap}\n                  >\n                    <Store lat={shop?.lat} lng={shop?.lng} />\n                    <User lat={user?.lat} lng={user?.lng} />\n                  </GoogleMapReact>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default ShowLocationsMap;\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/show-parcel-details.js",["6366","6367","6368","6369"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Descriptions, Modal, Row, Tag } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport parcelOrderService from 'services/parcelOrder';\nimport Loading from 'components/loading';\nimport getFullDateTime from 'helpers/getFullDateTime';\nimport numberToPrice from 'helpers/numberToPrice';\nimport moment from 'moment';\nimport { EditOutlined } from '@ant-design/icons';\nimport TransactionStatusModal from './transaction-status-modal';\n\nconst ShowParcelDetails = ({ id, handleCancel }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n  const [transactionStatusModal, setTransactionStatusModal] = useState(false);\n\n  function fetchParcelDetails() {\n    setLoading(true);\n    parcelOrderService\n      .getById(id)\n      .then(({ data }) => {\n        setData(data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    fetchParcelDetails();\n  }, []);\n\n  return (\n    <>\n      <Modal\n        visible={!!id}\n        title={`${t('parcel.id')} #${id}`}\n        onCancel={() => handleCancel()}\n        footer={[\n          <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n            {t('cancel')}\n          </Button>,\n        ]}\n        className='large-modal'\n      >\n        {!loading ? (\n          <>\n            <Row gutter={24}>\n              <Col span={12}>\n                <Descriptions title={t('sender.details')} bordered>\n                  <Descriptions.Item label={t('username')} span={3}>\n                    {data?.username_from}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('phone')} span={3}>\n                    {data?.phone_from}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('address')} span={3}>\n                    {data?.address_from?.address}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('house')} span={3}>\n                    {data?.address_from?.house}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('stage')} span={3}>\n                    {data?.address_from?.stage}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('room')} span={3}>\n                    {data?.address_from?.room}\n                  </Descriptions.Item>\n                </Descriptions>\n              </Col>\n              <Col span={12}>\n                <Descriptions title={t('receiver.details')} bordered>\n                  <Descriptions.Item label={t('username')} span={3}>\n                    {data?.username_to}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('phone')} span={3}>\n                    {data?.phone_to}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('address')} span={3}>\n                    {data?.address_to?.address}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('house')} span={3}>\n                    {data?.address_to?.house}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('stage')} span={3}>\n                    {data?.address_to?.stage}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('room')} span={3}>\n                    {data?.address_to?.room}\n                  </Descriptions.Item>\n                </Descriptions>\n              </Col>\n              <Col span={24}>\n                <Descriptions bordered className='mt-4'>\n                  <Descriptions.Item label={t('client')} span={3}>\n                    {data?.user?.firstname} {data?.user?.lastname}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('delivery.date.&.time')} span={3}>\n                    {data?.delivery_date}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('price')} span={3}>\n                    {numberToPrice(data?.total_price)}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('created.at')} span={3}>\n                    {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('note')} span={3}>\n                    {data?.note ?? '---'}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={t('transaction')} span={3}>\n                    <span\n                      style={{ cursor: 'pointer' }}\n                      onClick={() => setTransactionStatusModal(true)}\n                    >\n                      {data?.transaction?.status} <EditOutlined />\n                    </span>\n                  </Descriptions.Item>\n                </Descriptions>\n              </Col>\n            </Row>\n            {transactionStatusModal && (\n              <TransactionStatusModal\n                handleCancel={() => setTransactionStatusModal(false)}\n                data={data}\n                fetchParcelDetails={fetchParcelDetails}\n              />\n            )}\n          </>\n        ) : (\n          <Loading />\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default ShowParcelDetails;\n","/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/parcel-deliveryman.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/warehouse-add.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/warehouse-edit-new.js",["6370"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, Row, Switch, message } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport LanguageList from 'components/language-list';\nimport MediaUpload from 'components/upload';\nimport warehouseService from 'services/warehouse';\nimport { RefetchSearch } from 'components/refetch-search';\nimport regionService from 'services/deliveryzone/region';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nimport Map from 'components/map';\nimport areaService from 'services/deliveryzone/area';\nimport AddressForm from 'components/forms/address-form';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\n\nconst EditDeliveryPoint = ({ next }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n\n  const [image, setImage] = useState([]);\n  const [id, setId] = useState(null);\n  const [loading, setLoading] = useState([]);\n  const [location, setLocation] = useState(getDefaultLocation(settings));\n  const [value, setValue] = useState('');\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [formData, setFormData] = useState({});\n  const { country, region, city } = formData;\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getDeliveryPoint = () => {\n    setLoading(true);\n    warehouseService\n      .get()\n      .then(({ data }) => {\n        const {\n          city,\n          country,\n          region,\n          area,\n          location,\n          address,\n          img,\n          translation,\n          id,\n          ...rest\n        } = data?.[0] || {};\n        const fieldName = `address[${defaultLang}]`;\n        const titleName = `title[${defaultLang}]`;\n\n        const deliveryzone = {\n          area: { label: area?.translation?.title, value: area?.id },\n          city: { label: city?.translation?.title, value: city?.id },\n          country: { label: country?.translation?.title, value: country?.id },\n          region: { label: region?.translation?.title, value: region?.id },\n        };\n\n        const formData = {\n          ...getLanguageFields(data?.[0]),\n          ...deliveryzone,\n          ...rest,\n          [fieldName]: address?.[defaultLang],\n          [titleName]: translation?.title,\n        };\n\n        setId(id);\n        form.setFieldsValue(formData);\n        setFormData(deliveryzone);\n        if (location)\n          setLocation({\n            lat: location?.latitude,\n            lng: location?.longitude,\n          });\n        if (img) setImage([{ name: img }]);\n      })\n      .catch((error) => {\n        console.error(error);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    getDeliveryPoint();\n  }, []);\n\n  const createWarehouse = (body) => {\n    warehouseService\n      .create(body)\n      .then(({ data }) => {\n        message.success(t('successfully.created'));\n        const formFieldsValue = form.getFieldsValue(true);\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { ...formFieldsValue, id: data.id },\n          }),\n        );\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n  const updateWarehouse = (id, body) => {\n    warehouseService\n      .update(id, body)\n      .then(() => {\n        message.success(t('successfully'));\n        const formFieldsValue = form.getFieldsValue(true);\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { ...formFieldsValue, id },\n          }),\n        );\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const { area, city, country, region, active } = values;\n    const body = {\n      location: {\n        latitude: location?.lat,\n        longitude: location?.lng,\n      },\n      active: active ? 1 : 0,\n      area_id: area?.value,\n      city_id: city?.value,\n      country_id: country?.value,\n      region_id: region?.value,\n      images: image.map((image) => image.name),\n      title: getTranslationFields(languages, values, 'title'),\n      address: getTranslationFields(languages, values, 'address'),\n    };\n\n    if (id) updateWarehouse(id, body);\n    else createWarehouse(body);\n  };\n\n  async function fetchRegion(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n    };\n    return regionService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  async function fetchCountry(search) {\n    const params = { search, status: 1, perPage: 10, region_id: region?.value };\n    return countryService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  async function fetchCity(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      country_id: country?.value,\n    };\n    return cityService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  async function fetchArea(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      city_id: city?.value,\n    };\n    return areaService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation.title || 'no name',\n        value: item.id,\n      })),\n    );\n  }\n  return (\n    <Form\n      name='add.delivery.point'\n      layout='vertical'\n      onFinish={onFinish}\n      form={form}\n      initialValues={{ clickable: true, ...activeMenu.data }}\n    >\n      <Row gutter={[24, 24]}>\n        <Col span={12}>\n          <Card title={t('deliveryzone')} className='h-100' loading={loading}>\n            <Col span={24}>\n              <Form.Item\n                label={t('region')}\n                name='region'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchRegion}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, region: value }));\n                    form.resetFields(['city', 'area', 'country']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('country')}\n                name='country'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCountry}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, country: value }));\n                    form.resetFields(['city', 'area']);\n                  }}\n                  disabled={!Boolean(region?.value)}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('city')}\n                name='city'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCity}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(country?.value)}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, city: value }));\n                    form.resetFields(['area']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('area')}\n                name='area'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchArea}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(city?.value)}\n                />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t('media')} className='h-100' loading={loading}>\n            <Col span={24}>\n              <Row gutter={24}>\n                <Col span={12}>\n                  <Form.Item\n                    rules={[\n                      {\n                        required: false,\n                        message: t('required'),\n                      },\n                    ]}\n                    label={t('image')}\n                    name='images'\n                  >\n                    <MediaUpload\n                      type='products'\n                      imageList={image}\n                      setImageList={setImage}\n                      form={form}\n                      length='1'\n                      multiple={false}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('active')}\n                    name='active'\n                    valuePropName='checked'\n                  >\n                    <Switch />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={24}>\n          <Card title={t('address')} loading={loading} extra={<LanguageList />}>\n            <Row gutter={12}>\n              <Col span={12}>\n                <AddressForm\n                  setLocation={setLocation}\n                  value={value}\n                  setValue={setValue}\n                />\n              </Col>\n              <Col span={12}>\n                {languages.map((item, idx) => (\n                  <Form.Item\n                    key={'title' + idx}\n                    label={t('title')}\n                    name={`title[${item.locale}]`}\n                    rules={[\n                      {\n                        required: item.locale === defaultLang,\n                        message: t('required'),\n                      },\n                    ]}\n                    hidden={item.locale !== defaultLang}\n                  >\n                    <Input />\n                  </Form.Item>\n                ))}\n              </Col>\n              <Col span={24}>\n                <Map\n                  location={location}\n                  setLocation={setLocation}\n                  setAddress={(value) =>\n                    form.setFieldsValue({\n                      [`address[${defaultLang}]`]: value,\n                    })\n                  }\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n};\n\nexport default EditDeliveryPoint;\n","/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/working-date.js",["6371","6372","6373","6374"],[],"import React, { useState, useEffect, useMemo } from 'react';\nimport Loading from 'components/loading';\nimport moment from 'moment';\nimport workingDays from 'services/warehouseWorkingDays';\nimport closeDates from 'services/warehouseClosedDays';\nimport { weeks } from 'components/shop/weeks';\nimport { Form } from 'antd';\nimport WorkingDays from './date-form';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { fetchWarehouses } from 'redux/slices/warehouse';\nimport { removeFromMenu } from 'redux/slices/menu';\n\nconst WorkingDate = ({ prev }) => {\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [days, setDays] = useState([]);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const uuid = useMemo(() => activeMenu?.data?.id, [activeMenu?.data]);\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      warehouse_id: uuid,\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      warehouse_id: uuid,\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH:mm'),\n        to: moment(item.to ? item.to : '00').format('HH:mm'),\n        disabled: item.disabled,\n      })),\n    };\n\n    if (values.working_days.length !== 0) {\n      workingDays\n        .update(uuid, workingDaysBody)\n        .then(() => {})\n        .finally(() => setLoadingBtn(false));\n    }\n    closeDates\n      .update(uuid, closeDatesBody)\n      .then(() => {\n        const nextUrl = 'warehouse';\n        // dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        // dispatch(fetchWarehouses());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const getDays = () => {\n    setLoading(true);\n    closeDates.getById(uuid).then((res) => {\n      setDays(\n        res.data.closed_dates\n          .filter((date) => date.day > moment(new Date()).format('YYYY-MM-DD'))\n          .map((itm) => new Date(itm.day))\n      );\n    });\n\n    workingDays\n      .getById(uuid)\n      .then((res) => {\n        setLines(\n          res.data.dates.length !== 0\n            ? res.data.dates.map((item) => item.disabled)\n            : []\n        );\n\n        res.data.dates.length !== 0 &&\n          form.setFieldsValue({\n            working_days: res.data.dates.map((item) => ({\n              title: item.day,\n              from: moment(item.from, 'HH:mm:ss'),\n              to: moment(item.to, 'HH:mm:ss'),\n              disabled: Boolean(item.disabled),\n            })),\n          });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n    if (uuid) getDays();\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <WorkingDays\n          onFinish={onFinish}\n          prev={prev}\n          form={form}\n          lines={lines}\n          loadingBtn={loadingBtn}\n          days={days}\n          setDays={setDays}\n          setLines={setLines}\n          weeks={weeks}\n        />\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default WorkingDate;\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/setting.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/locations.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/footer.js",["6375"],[],"import { Button, Card, Col, Form, Input, Row } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { setMenuData } from '../../../redux/slices/menu';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\n\nconst Footer = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => updateSettings(values);\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{\n        ...activeMenu.data,\n      }}\n    >\n      <Card title={t('footer')}>\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('phone')}\n              name='phone'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('address')}\n              name='address'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('footer.text')}\n              name='footer_text'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>\n      </Card>\n    </Form>\n  );\n};\n\nexport default Footer;\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/reservation.js",[],["6376"],"/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/permission.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/auth.js",["6377"],[],"import { Button, Card, Col, Form, InputNumber, Row } from 'antd';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\n\nconst Auth = ({ loading }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => updateSettings(values);\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{\n        ...activeMenu.data,\n      }}\n    >\n      <Card title={t('auth.settings')}>\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('otp.expire.time') + ' ' + `( ${t('minut')} )`}\n              name='otp_expire_time'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <InputNumber addonAfter={t('minut')} className='w-100' min={0} />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>\n      </Card>\n    </Form>\n  );\n};\n\nexport default Auth;\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/ui-type.js",["6378"],["6379"],"import { Card, Col, Form, Modal, Radio, Row } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { setMenuData } from '../../../redux/slices/menu';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\nimport { InputCard } from 'components/radio-card';\nimport '../../../assets/scss/components/radio-card.scss';\nimport { ExclamationCircleFilled } from '@ant-design/icons';\n\nconst { confirm } = Modal;\nconst uiTypes = [\n  {\n    title: 'View 1',\n    value: 1,\n    img: '/img/ui-type1.png',\n  },\n  {\n    title: 'View 2',\n    value: 2,\n    img: '/img/ui-type2.png',\n  },\n  {\n    title: 'View 3',\n    value: 3,\n    img: '/img/ui-type3.png',\n  },\n  {\n    title: 'View 4',\n    value: 4,\n    img: '/img/ui-type4.png',\n  },\n];\nconst productuiTypes = [\n  {\n    title: 'View 1',\n    value: 1,\n    img: '/img/product-ui-1.png',\n  },\n  {\n    title: 'View 2',\n    value: 2,\n    img: '/img/product-ui-2.png',\n  },\n];\nconst cartuiTypes = [\n  {\n    title: 'View 1',\n    value: 1,\n    img: '/img/cart-ui-1.png',\n  },\n  {\n    title: 'View 2',\n    value: 2,\n    img: '/img/cart-ui-2.png',\n  }\n]\nconst UiType = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\n    activeMenu.data?.ui_type || uiTypes[0].value,\n  );\n  const [valueProductUi, setValueProductUi] = useState(\n    activeMenu.data?.product_ui_type || productuiTypes[0].value,\n  );\n  const [valueCartUi, setValueCartUi] = useState(activeMenu.data?.cart_ui_type || cartuiTypes[0].value);\n  const showConfirm = (type) => {\n    confirm({\n      title: t('do_you_want_to_change_ui_type'),\n      centered: true,\n      icon: <ExclamationCircleFilled />,\n      onOk() {\n        setValue(type);\n        updateSettings({ ui_type: type });\n      },\n    });\n  };\n  const showConfirmProductUi = (type) => {\n    confirm({\n      title: t('do_you_want_to_change_product_ui_type'),\n      centered: true,\n      icon: <ExclamationCircleFilled />,\n      onOk() {\n        setValueProductUi(type);\n        updateSettings({ product_ui_type: type });\n      },\n    });\n  };\n  const showConfirmCartUi = (type) => {\n    confirm({\n      title: t('do_you_want_to_change_cart_ui_type'),\n      centered: true,\n      icon: <ExclamationCircleFilled />,\n      onOk() {\n        setValueCartUi(type);\n        updateSettings({ cart_ui_type: type });\n      },\n    });\n  }\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateSettings(data) {\n    settingService.update(data).then(() => {\n      toast.success(t('successfully.updated'));\n      dispatch(getSettings());\n    });\n  }\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      initialValues={{\n        ui_type: Number(value),\n      }}\n    >\n      <Card title={t('cart.ui')}>\n        <Row gutter={12}>\n          {cartuiTypes.map((type) => (\n              <Col key={type.value} span={12}>\n                <InputCard\n                    title={type.title}\n                    onClick={() => showConfirmCartUi(type.value)}\n                    checked={Number(valueCartUi) === type.value}\n                    imgPath={type.img}\n                />\n              </Col>\n          ))}\n        </Row>\n      </Card>\n      <Card title={t('product.ui')}>\n        <Row gutter={12}>\n          {productuiTypes.map((type) => (\n            <Col key={type.value} span={12}>\n              <InputCard\n                title={type.title}\n                onClick={() => showConfirmProductUi(type.value)}\n                checked={Number(valueProductUi) === type.value}\n                imgPath={type.img}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Card>\n      <Card title={t('ui')}>\n        <Row gutter={12}>\n          {uiTypes.map((type) => (\n            <Col key={type.value} span={12}>\n              <InputCard\n                title={type.title}\n                onClick={() => showConfirm(type.value)}\n                checked={Number(value) === type.value}\n                imgPath={type.img}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Card>\n    </Form>\n  );\n};\n\nexport default UiType;\n","/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/qr-code.js",[],["6380"],"/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-delete-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-value-modal.js",["6381"],[],"import { Button, Form, Input, Modal } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { SketchPicker } from 'react-color';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ImageUploadSingle from 'components/image-upload-single';\nimport createImage from 'helpers/createImage';\nimport { fetchPropertyValues } from 'redux/slices/propertyValue';\nimport propertyService from 'services/property';\nimport { DebounceSelect } from 'components/search';\n\nexport default function PropertyValueModal({\n  modal,\n  handleCancel,\n  onSuccess,\n  groupId,\n}) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [type, setType] = useState('text');\n  const [image, setImage] = useState(null);\n  const [color, setColor] = useState('');\n\n  useEffect(() => {\n    if (modal?.id) {\n      setType(modal.group.type);\n      const body = {\n        ...modal,\n        property_group_id: {\n          label: modal?.group?.translation?.title,\n          value: modal?.group?.id,\n        },\n        value: modal.value,\n      };\n      switch (modal.group.type) {\n        case 'color':\n          setColor(modal.value);\n          break;\n\n        case 'image':\n          setImage(createImage(modal.value));\n          break;\n\n        default:\n          break;\n      }\n      form.setFieldsValue(body);\n    }\n    if (groupId) {\n      form.setFieldsValue({\n        property_group_id: {\n          value: groupId,\n        },\n      });\n    }\n  }, [modal, groupId]);\n\n  const updateExtra = (id, body) => {\n    setLoadingBtn(true);\n    propertyService\n      .updateValue(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        handleCancel();\n        dispatch(fetchPropertyValues());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const createExtra = (body) => {\n    setLoadingBtn(true);\n    propertyService\n      .createValue(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchPropertyValues());\n        !!onSuccess && onSuccess();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      property_group_id: values?.property_group_id?.value,\n      value: getValue(type, values.value),\n    };\n\n    if (modal?.id) {\n      updateExtra(modal.id, body);\n    } else {\n      createExtra(body);\n    }\n  };\n\n  function getValue(type, value) {\n    switch (type) {\n      case 'color':\n        return value.hex;\n      case 'text':\n        return value;\n      case 'image':\n        return value.name;\n      default:\n        return '';\n    }\n  }\n\n  const renderPropertyValue = (type) => {\n    switch (type) {\n      case 'color':\n        return (\n          <SketchPicker\n            onChangeComplete={(color) => setColor(color.hex)}\n            color={color}\n            disableAlpha={true}\n          />\n        );\n      case 'text':\n        return <Input placeholder={t('enter.extra.value')} />;\n\n      case 'image':\n        return (\n          <ImageUploadSingle\n            type='property'\n            image={image}\n            setImage={setImage}\n            form={form}\n            name='value'\n          />\n        );\n\n      default:\n        return '';\n    }\n  };\n\n  async function fetchPropertyGroupList(search) {\n    const params = { perPage: 10, active: 1, search };\n    return propertyService.getAllGroups(params).then((res) =>\n      res?.data?.map((item) => ({\n        value: item?.id,\n        label: item?.translation?.title,\n        key: item?.id,\n      }))\n    );\n  }\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.property') : t('add.property')}\n      visible={!!modal}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        name='property-form'\n        layout='vertical'\n        form={form}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name='property_group_id'\n          label={t('property.group')}\n          hidden={!!groupId}\n          rules={[{ required: true, message: '' }]}\n        >\n          <DebounceSelect fetchOptions={fetchPropertyGroupList} />\n        </Form.Item>\n        <Form.Item\n          name='value'\n          label={t('value')}\n          rules={[{ required: true, message: '' }]}\n        >\n          {renderPropertyValue(type)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/shop-ads-status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-group-modal.js",["6382"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Input, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport propertyService from 'services/property';\nimport { toast } from 'react-toastify';\nimport { fetchPropertyGroups } from 'redux/slices/propertyGroup';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport Loading from 'components/loading';\n\nexport default function PropertyGroupModal({ modal, handleCancel, onSuccess }) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  function fetchGroup(id) {\n    setLoading(true);\n    propertyService\n      .getGroupById(id)\n      .then((res) => {\n        const data = res.data;\n        form.setFieldsValue({ ...data, ...getLanguageFields(data) });\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (modal?.id) {\n      fetchGroup(modal.id);\n    }\n  }, [modal]);\n\n  function createPropertyGroup(body) {\n    setLoadingBtn(true);\n    propertyService\n      .createGroup(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchPropertyGroups());\n        !!onSuccess && onSuccess();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values),\n      type: 'text',\n    };\n    if (modal?.id) {\n      updatePropertyGroup(modal?.id, body);\n    } else {\n      createPropertyGroup(body);\n    }\n  };\n\n  function updatePropertyGroup(id, body) {\n    setLoadingBtn(true);\n    propertyService\n      .updateGroup(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchPropertyGroups());\n        handleCancel();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.property.group') : t('add.property.group')}\n      visible={!!modal}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-button-group'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button-group' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <div className='d-flex justify-content-end'>\n            <LanguageList />\n          </div>\n          <Form\n            layout='vertical'\n            name='property-group'\n            form={form}\n            onFinish={onFinish}\n          >\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                name={`title[${item.locale}]`}\n                label={t('title')}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('title')} />\n              </Form.Item>\n            ))}\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/products/properties/property-group-show-modal.js",["6383"],[],"import { Descriptions, Modal, Image, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loading from 'components/loading';\nimport { IMG_URL } from 'configs/app-global';\nimport propertyService from 'services/property';\n\nexport default function PropertyGroupShowModal({ open, handleClose }) {\n  const { t } = useTranslation();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const fetchPropertyValue = () => {\n    setLoading(true);\n    propertyService\n      .getGroupById(open)\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchPropertyValue();\n  }, []);\n  return (\n    <Modal\n      closable={false}\n      visible={open}\n      footer={null}\n      centered\n      onCancel={handleClose}\n    >\n      {!loading ? (\n        <Descriptions title={`${t('property.group.value')}`} bordered>\n          {data?.values?.map((item, index) => (\n            <Descriptions.Item\n              key={index}\n              label={data.translation.title}\n              span={3}\n            >\n              {data.type === 'text' ? (\n                item.value\n              ) : data.type === 'image' ? (\n                <Image\n                  src={IMG_URL + item.value}\n                  alt='images'\n                  width={100}\n                  height={80}\n                />\n              ) : (\n                <Space>\n                  <div\n                    className='extra-color-wrapper-contain'\n                    style={{ backgroundColor: item.value }}\n                  />\n                  {item.value}\n                </Space>\n              )}\n            </Descriptions.Item>\n          ))}\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/shop-ads/transactionStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/shop/seller-shop-locations.js",["6384"],[],"import { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Col, Image, Modal, Space, Table } from 'antd';\nimport { useContext, useEffect, useState } from 'react';\nimport { fetchSellerShopLocations } from 'redux/slices/shop-locations';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport LocationSelect from './location-select';\nimport shopLocationsService from 'services/seller/shop-locations';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\n\nconst ShopLocations = ({ next, prev }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const { locations, loading } = useSelector((state) => state.shopLocations);\n  const [ids, setIds] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isLocationSelectModalOpen, setIsLocationSelectModalOpen] =\n    useState(false);\n  const { setIsModalVisible } = useContext(Context);\n\n  const columns = [\n    {\n      title: t('location'),\n      dataIndex: 'location',\n      key: 'location',\n      render: (_, row) => (\n        <span>\n          {row.country?.translation?.title}\n          {row.city ? ',' : ''} {row.city?.translation?.title}\n        </span>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'country',\n      key: 'image',\n      render: (country) => (\n        <Image\n          src={country.img}\n          alt={country?.translation?.title}\n          width={60}\n          height={40}\n        />\n      ),\n    },\n\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      key: 'options',\n      render: (_, row) => (\n        <Space>\n          <Button\n            onClick={() => {\n              setIds([row.id]);\n              setIsModalVisible(true);\n            }}\n            type='primary'\n            danger\n            icon={<DeleteOutlined />}\n          />\n        </Space>\n      ),\n    },\n  ];\n\n  const params = {\n    shop_id: activeMenu?.data?.id,\n  };\n  const locationDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...ids.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    shopLocationsService\n      .delete(params)\n      .then(() => {\n        dispatch(fetchSellerShopLocations(params));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n        setIds(null);\n        setIsModalVisible(false);\n      });\n  };\n\n  const handleAddLocation = (values) => {\n    const country = values.country.value.split(',')[0];\n    const region = values.country.value.split(',')[1];\n    const body = {\n      country_id: country,\n      region_id: region,\n      shop_id: activeMenu?.data?.id,\n    };\n    if (values.city.value !== 'all') {\n      body.city_id = values.city?.value;\n    }\n    setLoadingBtn(true);\n    shopLocationsService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        dispatch(fetchSellerShopLocations(params));\n        setIsLocationSelectModalOpen(false);\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu?.data?.id) {\n      dispatch(fetchSellerShopLocations(params));\n    }\n  }, [activeMenu?.data?.id]);\n\n  return (\n    <>\n      <Space className='justify-content-end w-100'>\n        <Button\n          onClick={() => setIsLocationSelectModalOpen(true)}\n          type='primary'\n        >\n          {t('add')}\n        </Button>\n      </Space>\n      <Table loading={loading} dataSource={locations} columns={columns} />\n      <Modal\n        footer={null}\n        visible={isLocationSelectModalOpen}\n        destroyOnClose\n        onCancel={() => setIsLocationSelectModalOpen(false)}\n      >\n        <LocationSelect\n          onClose={() => setIsLocationSelectModalOpen(false)}\n          onSubmit={handleAddLocation}\n          isButtonLoading={loadingBtn}\n        />\n      </Modal>\n      <CustomModal\n        click={locationDelete}\n        text={t('delete.location')}\n        setText={setIds}\n        loading={loadingBtn}\n      />\n      <Col span={24}>\n        <Space>\n          <Button type='primary' htmlType='button' onClick={() => next()}>\n            {t('next')}\n          </Button>\n          <Button htmlType='button' onClick={() => prev()}>\n            {t('prev')}\n          </Button>\n        </Space>\n      </Col>\n    </>\n  );\n};\n\nexport default ShopLocations;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-stock.js",["6385"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Row, Space } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport productService from '../../../services/seller/product';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { setRefetch } from '../../../redux/slices/menu';\n\nconst ProductStock = ({ prev, next, current }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { uuid } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loadingBtn, setLoadingBtn] = useState(null);\n  const dispatch = useDispatch();\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    let extras;\n\n    extras = [\n      {\n        price: values.price,\n        quantity: values.quantity,\n        sku: values.sku,\n      },\n    ];\n\n    productService\n      .stocks(uuid, { extras })\n      .then(() => next())\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    dispatch(setRefetch(activeMenu));\n    form.setFieldsValue({\n      price: activeMenu.data?.stocks?.length\n        ? activeMenu.data.stocks[0].price\n        : null,\n      quantity: activeMenu.data?.stocks?.length\n        ? activeMenu.data.stocks[0].quantity\n        : null,\n      sku: activeMenu.data?.stocks?.length\n        ? activeMenu.data.stocks[0].sku\n        : null,\n    });\n  }, []);\n\n  return (\n    <Form layout='vertical' form={form} onFinish={onFinish}>\n      <Row\n        gutter={12}\n        align='middle'\n        style={{ flexWrap: 'nowrap', overflowX: 'auto' }}\n      >\n        <Col>\n          <Form.Item\n            label={t('price')}\n            name={'price'}\n            rules={[\n              { required: true, message: t('required') },\n              {\n                type: 'number',\n                min: 1,\n                message: t('must.be.at.least.1'),\n              },\n            ]}\n          >\n            <InputNumber className='w-100' style={{ minWidth: 200 }} />\n          </Form.Item>\n        </Col>\n        <Col>\n          <Form.Item\n            label={t('quantity')}\n            name={'quantity'}\n            rules={[\n              { required: true, message: t('required') },\n              {\n                type: 'number',\n                min: 1,\n                message: t('must.be.at.least.1'),\n              },\n            ]}\n          >\n            <InputNumber className='w-100' style={{ minWidth: 200 }} />\n          </Form.Item>\n        </Col>\n        <Col>\n          <Form.Item\n            label={t('sku')}\n            name={'sku'}\n          >\n            <Input style={{ minWidth: 200 }} />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Space className='mt-4'>\n        <Button onClick={prev}>{t('prev')}</Button>\n        <Button type='primary' htmlType='submit' loading={!!loadingBtn}>\n          {t('next')}\n        </Button>\n      </Space>\n    </Form>\n  );\n};\n\nexport default ProductStock;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-index.js",["6386","6387"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport productService from '../../../services/seller/product';\nimport { replaceMenu, setMenuData } from '../../../redux/slices/menu';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport unitService from '../../../services/seller/unit';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { AsyncSelect } from '../../../components/async-select';\n\nconst ProductsIndex = ({ next, action_type = '' }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const params = {\n      ...values,\n      active: Number(values.active),\n      shop_id: shop.id,\n      unit_id: values.unit?.value,\n      shop: undefined,\n      addon: Number(1),\n    };\n\n    if (action_type === 'edit') {\n      productUpdate(values, params);\n    } else {\n      productCreate(values, params);\n    }\n  };\n\n  function productCreate(values, params) {\n    productService\n      .create(params)\n      .then(({ data }) => {\n        dispatch(\n          replaceMenu({\n            id: `addons-${data.uuid}`,\n            url: `seller/addon/${data.uuid}`,\n            name: t('add.addons'),\n            data: values,\n            refetch: false,\n          })\n        );\n        navigate(`/seller/addon/${data.uuid}?step=1`);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function productUpdate(values, params) {\n    productService\n      .update(uuid, params)\n      .then(() => {\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: values,\n          })\n        );\n        next();\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function fetchUnits(search) {\n    const params = {\n      search,\n      active: 1,\n    };\n    return unitService.getAll(params).then(({ data }) => formatUnits(data));\n  }\n\n  function formatUnits(data) {\n    return data.map((item) => ({\n      label: item.translation?.title,\n      value: item.id,\n    }));\n  }\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      initialValues={{ active: true, ...activeMenu.data }}\n      onFinish={onFinish}\n      className={'addon-menu'}\n    >\n      <Row gutter={12}>\n        <Col xs={24} sm={24} md={16}>\n          <Card title={t('basic.info')}>\n            {languages.map((item) => (\n              <Form.Item\n                key={'name' + item.id}\n                label={t('name')}\n                name={`title[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input />\n              </Form.Item>\n            ))}\n            {languages.map((item) => (\n              <Form.Item\n                key={'description' + item.id}\n                label={t('description')}\n                name={`description[${item.locale}]`}\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value && item?.locale === defaultLang) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 5) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.5'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n                hidden={item.locale !== defaultLang}\n              >\n                <TextArea rows={4} span={4} />\n              </Form.Item>\n            ))}\n          </Card>\n          <Card title={t('price')}>\n            <Row gutter={12}>\n              <Col span={12}>\n                <Form.Item\n                  label={t('min.qty')}\n                  name='min_qty'\n                  rules={[\n                    { required: true, message: t('required') },\n                    {\n                      type: 'number',\n                      min: 0,\n                      message: t('must.be.positive'),\n                    },\n                  ]}\n                >\n                  <InputNumber className='w-100' />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('max.qty')}\n                  name='max_qty'\n                  rules={[\n                    { required: true, message: t('required') },\n                    {\n                      type: 'number',\n                      min: 0,\n                      message: t('must.be.positive'),\n                    },\n                  ]}\n                >\n                  <InputNumber className='w-100' />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label={t('tax')}\n                  name='tax'\n                  rules={[\n                    { required: true, message: t('required') },\n                    {\n                      type: 'number',\n                      min: 0,\n                      max: 100,\n                      message: t('must.be.between.0.and.100'),\n                    },\n                  ]}\n                >\n                  <InputNumber className='w-100' addonAfter='%' />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item\n                  label={t('active')}\n                  name='active'\n                  valuePropName='checked'\n                >\n                  <Switch />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={24} sm={24} md={8}>\n          <Card title={t('addition')}>\n            <Form.Item\n              label={t('unit')}\n              name='unit'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <AsyncSelect\n                style={{ width: '100%' }}\n                fetchOptions={fetchUnits}\n              />\n            </Form.Item>\n\n          </Card>\n        </Col>\n      </Row>\n\n      <Button type='primary' htmlType='submit' loading={loadingBtn}>\n        {t('next')}\n      </Button>\n    </Form>\n  );\n};\n\nexport default ProductsIndex;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/refund/status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/addons/addons-finish.js",["6388"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Descriptions, Space, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { removeFromMenu, disableRefetch } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport productService from '../../../services/seller/product';\nimport { fetchSellerfetchAddons } from '../../../redux/slices/addons';\n\nconst ProductFinish = ({ prev }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(null);\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.addons, shallowEqual);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const data = {\n          ...res.data,\n          ...getLanguageFields(res.data),\n          properties: res.data.properties.map((item, index) => ({\n            id: index,\n            [`key[${item.locale}]`]: item.key,\n            [`value[${item.locale}]`]: item.value,\n          })),\n          translation: undefined,\n          translations: undefined,\n        };\n        setData(data);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  function finish() {\n    const body = {\n      ...params,\n    };\n    const nextUrl = 'seller/addons';\n    navigate(`/${nextUrl}`);\n    dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    dispatch(fetchSellerfetchAddons(body));\n    dispatch(disableRefetch(activeMenu));\n  }\n\n  useEffect(() => {\n    fetchProduct(uuid);\n  }, []);\n\n  return !loading ? (\n    <>\n      <Descriptions title={t('product.info')} bordered>\n        <Descriptions.Item label={`${t('title')} (${defaultLang})`} span={3}>\n          {data[`title[${defaultLang}]`]}\n        </Descriptions.Item>\n        <Descriptions.Item\n          label={`${t('description')} (${defaultLang})`}\n          span={3}\n        >\n          {data[`description[${defaultLang}]`]}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('shop')} span={1.5}>\n          {data.shop?.translation.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('unit')} span={1.5}>\n          {data.unit?.translation.title}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('tax')}>{data.tax}</Descriptions.Item>\n        <Descriptions.Item label={t('min.quantity')}>\n          {data.min_qty}\n        </Descriptions.Item>\n        <Descriptions.Item label={t('max.quantity')}>\n          {data.max_qty}\n        </Descriptions.Item>\n      </Descriptions>\n      {data.stocks?.map((item, idx) => {\n        if (!item) {\n          return '';\n        }\n        return (\n          <Descriptions key={'desc' + idx} bordered className='mt-4'>\n            <Descriptions.Item label={t('price')} span={2}>\n              {item.price}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('quantity')} span={2}>\n              {item.quantity}\n            </Descriptions.Item>\n            {item.extras.map((extra, idx) => (\n              <Descriptions.Item\n                key={'extra' + idx}\n                label={extra?.group?.translation?.title}\n              >\n                {extra?.value}\n              </Descriptions.Item>\n            ))}\n          </Descriptions>\n        );\n      })}\n      <div className='d-flex justify-content-end mt-4'>\n        <Space>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button type='primary' onClick={finish}>\n            {t('finish')}\n          </Button>\n        </Space>\n      </div>\n    </>\n  ) : (\n    <div className='d-flex justify-content-center align-items-center'>\n      <Spin size='large' className='py-5' />\n    </div>\n  );\n};\n\nexport default ProductFinish;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/user/userShowModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/main.js",["6389"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Space } from 'antd';\nimport ShopAddData from './shop-add-data';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setMenuData } from 'redux/slices/menu';\nimport shopService from 'services/seller/shop';\nimport { useTranslation } from 'react-i18next';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { fetchMyShop } from 'redux/slices/myShop';\nimport { ShopTypes } from 'constants/shop-types';\n\nconst ShopMain = ({ next }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n\n  const [location, setLocation] = useState(\n    activeMenu?.data?.location\n      ? {\n          lat: parseFloat(activeMenu?.data?.location?.latitude),\n          lng: parseFloat(activeMenu?.data?.location?.longitude),\n        }\n      : getDefaultLocation(settings),\n  );\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const [logoImage, setLogoImage] = useState(\n    activeMenu.data?.logo_img ? [activeMenu.data?.logo_img] : [],\n  );\n  const [backImage, setBackImage] = useState(\n    activeMenu.data?.background_img ? [activeMenu.data?.background_img] : [],\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.open_time = JSON.stringify(data?.open_time);\n      data.close_time = JSON.stringify(data?.close_time);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } }),\n      );\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      delivery_type: values?.delivery_type?.value || values?.delivery_type,\n      'images[0]': logoImage[0]?.name,\n      'images[1]': backImage[0]?.name,\n      delivery_time_type: values.delivery_time_type,\n      delivery_time_to: values.delivery_time_to || 0,\n      delivery_time_from: values.delivery_time_from || 0,\n      user_id: values.user.value,\n      visibility: Number(values.visibility),\n      'location[latitude]': location.lat,\n      'location[longitude]': location.lng,\n      user: undefined,\n      delivery_time: 0,\n      type: myShop.type === 'shop' ? 'shop' : 'restaurant',\n      tags: values.tags.map((e) => e.value),\n    };\n    delete body?.background_img;\n    delete body?.logo_img;\n    shopUpdate(values, body);\n  };\n\n  function shopUpdate(values, params) {\n    shopService\n      .update(params)\n      .then(() => {\n        batch(() => {\n          dispatch(\n            setMenuData({\n              activeMenu,\n              data: values,\n            }),\n          );\n          dispatch(fetchMyShop({}));\n        });\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  return (\n    <>\n      <Form\n        form={form}\n        name='basic'\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{\n          visibility: true,\n          status: 'new',\n          ...activeMenu.data,\n          delivery_type: activeMenu.data?.delivery_type ?? ShopTypes[0],\n        }}\n      >\n        <ShopAddData\n          logoImage={logoImage}\n          setLogoImage={setLogoImage}\n          backImage={backImage}\n          setBackImage={setBackImage}\n          form={form}\n          location={location}\n          setLocation={setLocation}\n        />\n        <Space>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('next')}\n          </Button>\n        </Space>\n      </Form>\n    </>\n  );\n};\nexport default ShopMain;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/shopDelivery.js",["6390"],[],"import {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  Row,\n  Space,\n  Switch,\n  Tag,\n} from 'antd';\n\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loading from 'components/loading';\nimport moment from 'moment';\nimport workingDays from 'services/seller/workingDays';\nimport closeDates from 'services/seller/closedDays';\nimport { useNavigate } from 'react-router-dom';\nimport { weeks } from 'components/shop/weeks';\nimport { DayPicker } from 'react-day-picker';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu } from 'redux/slices/menu';\nimport { fetchMyShop } from 'redux/slices/myShop';\nimport { BsChevronCompactDown, BsChevronCompactUp } from 'react-icons/bs';\n\nconst Delivery = ({ next, prev }) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const [days, setDays] = useState([]);\n  const [lines, setLines] = useState(new Array(7).fill(false));\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const disabledDays = [\n    { from: new Date(1900, 4, 18), to: new Date(moment().subtract(1, 'days')) },\n  ];\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [list, setList] = useState(true);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const closeDatesBody = {\n      dates: days\n        ? days.map((item) => moment(item).format('YYYY-MM-DD'))\n        : undefined,\n    };\n\n    const workingDaysBody = {\n      dates: values.working_days.map((item) => ({\n        day: item.title,\n        from: moment(item.from ? item.from : '00').format('HH:mm'),\n        to: moment(item.to ? item.to : '00').format('HH:mm'),\n        disabled: item.disabled,\n      })),\n    };\n    const nextUrl = 'my-shop';\n\n    closeDates\n      .update(shop.uuid, closeDatesBody)\n      .then(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchMyShop());\n      })\n      .finally(() => setLoadingBtn(false));\n\n    if (values.working_days.length !== 0) {\n      workingDays\n        .update(shop.uuid, workingDaysBody)\n        .then(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n          dispatch(fetchMyShop());\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  const getDays = () => {\n    setLoading(true);\n    closeDates.getById(shop.uuid).then((res) => {\n      setDays(\n        res.data.closed_dates\n          .filter((date) => date.day > moment(new Date()).format('YYYY-MM-DD'))\n          .map((itm) => new Date(itm.day)),\n      );\n    });\n\n    workingDays\n      .getById(shop.uuid)\n      .then((res) => {\n        setLines(\n          res.data.dates.length !== 0\n            ? res.data.dates.map((item) => item.disabled)\n            : [],\n        );\n\n        res.data.dates.length !== 0 &&\n          form.setFieldsValue({\n            working_days: res.data.dates.map((item) => ({\n              title: item.day,\n              from: moment(item.from, 'HH:mm:ss'),\n              to: moment(item.to, 'HH:mm:ss'),\n              disabled: Boolean(item.disabled),\n            })),\n          });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      working_days: weeks,\n    });\n    if (shop.uuid) {\n      getDays();\n    }\n  }, []);\n\n  const deleteDay = (e) => setDays(days.filter((item) => item !== e));\n\n  const footer =\n    days && days.length > 0 ? (\n      <Row>\n        <Tag\n          style={{\n            fontSize: 14,\n            padding: '4px 10px',\n            width: '100%',\n            marginTop: '10px',\n          }}\n        >\n          {t('Your.existing.vacations')}\n        </Tag>\n        <Col span={24} className='mt-2'>\n          {days.slice(0, list ? 1 : days.length).map((item, index) => (\n            <Space\n              key={index}\n              className='d-flex justify-content-between'\n              style={{ borderBottom: '1px solid #4D5B75' }}\n            >\n              <Col span={24} style={{ fontSize: 14, marginTop: '8px' }}>\n                {moment(item).format('YYYY-MM-DD')}\n              </Col>\n              <Col span={24}>\n                <Tag\n                  color='red'\n                  className='cursor-pointer mt-3 mb-2'\n                  style={{ fontSize: 14 }}\n                  onClick={() => deleteDay(item)}\n                >\n                  {t('remove')}\n                </Tag>\n              </Col>\n            </Space>\n          ))}\n          <Button\n            className='mt-3 w-100'\n            onClick={() => {\n              setList(!list);\n            }}\n          >\n            {list ? <BsChevronCompactDown /> : <BsChevronCompactUp />}\n          </Button>\n        </Col>\n      </Row>\n    ) : (\n      <Tag style={{ fontSize: 14, padding: '4px 10px', width: '100%' }}>\n        Please pick one or more days.\n      </Tag>\n    );\n\n  const handleChange = (idx) => {\n    const newLines = [...lines];\n    newLines[idx] = !lines[idx];\n    setLines(newLines);\n  };\n\n  const middle = (start, end) => {\n    const result = [];\n    for (let i = start; i < end; i++) {\n      result.push(i);\n    }\n    return result;\n  };\n\n  const disabledDateTime = () => ({\n    disabledHours: () => middle(0, 1),\n    disabledMinutes: () => middle(0, 0),\n    disabledSeconds: () => middle(0, 60),\n  });\n\n  return (\n    <>\n      {!loading ? (\n        <Form form={form} layout='vertical' onFinish={onFinish}>\n          <Row>\n            <Col span={13}>\n              <Card title={t('restaurant.working.days')}>\n                <Row gutter={8}>\n                  <Col span={24}>\n                    <Form.List name='working_days'>\n                      {(fields) => {\n                        return (\n                          <div>\n                            {fields.map((field, index) => (\n                              <Row key={field.key} gutter={12} align='center'>\n                                <Col span={7}>\n                                  <Form.Item name={[index, 'day']}>\n                                    <span>{t(weeks[index].title)}</span>\n                                  </Form.Item>\n                                </Col>\n                                {lines[field.key] ? (\n                                  <Col span={13} className='mt-2'>\n                                    <span>{t('shop.closed')}</span>\n                                  </Col>\n                                ) : (\n                                  <>\n                                    <Col span={7}>\n                                      <Form.Item\n                                        rules={[\n                                          {\n                                            required:\n                                              lines[field.key] === false,\n                                          },\n                                        ]}\n                                        name={[index, 'from']}\n                                      >\n                                        <DatePicker\n                                          disabledTime={disabledDateTime}\n                                          picker='time'\n                                          placeholder={t('start.time')}\n                                        />\n                                      </Form.Item>\n                                    </Col>\n                                    <Col span={6}>\n                                      <Form.Item\n                                        rules={[\n                                          {\n                                            required:\n                                              lines[field.key] === false,\n                                          },\n                                        ]}\n                                        name={[index, 'to']}\n                                      >\n                                        <DatePicker\n                                          disabledTime={disabledDateTime}\n                                          picker='time'\n                                          placeholder={t('end.time')}\n                                        />\n                                      </Form.Item>\n                                    </Col>\n                                  </>\n                                )}\n                                <Col span={4}>\n                                  <Form.Item\n                                    name={[index, 'disabled']}\n                                    valuePropName='checked'\n                                  >\n                                    <Switch\n                                      checkedChildren={<CheckOutlined />}\n                                      unCheckedChildren={<CloseOutlined />}\n                                      checked={lines[field.key]}\n                                      onChange={() => handleChange(field.key)}\n                                    />\n                                  </Form.Item>\n                                </Col>\n                              </Row>\n                            ))}\n                          </div>\n                        );\n                      }}\n                    </Form.List>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={11}>\n              <Card title={t('restaurant.closed.days')}>\n                <p>\n                  If you can't answer the buyer's questions in time and want to\n                  share this information with your buyers, you can add the dates\n                  here.\n                </p>\n                <Form.Item\n                  rules={[{ required: false, message: t('required') }]}\n                >\n                  <DayPicker\n                    className='datepicker'\n                    mode='multiple'\n                    disabled={disabledDays}\n                    min={1}\n                    selected={days}\n                    onSelect={setDays}\n                    footer={footer}\n                    showOutsideDays\n                  />\n                </Form.Item>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Space>\n                <Button type='primary' htmlType='submit' loading={loadingBtn}>\n                  {t('submit')}\n                </Button>\n                <Button htmlType='submit' onClick={() => prev()}>\n                  {t('prev')}\n                </Button>\n              </Space>\n            </Col>\n          </Row>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default Delivery;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/social.js",["6391"],[],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Form, Row, Col, Card, Select, Input, Button, Space } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { useTranslation } from 'react-i18next';\nimport sellerShopSocialService from 'services/seller/shop-social';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport Loading from 'components/loading';\nimport useDidUpdate from 'helpers/useDidUpdate';\n\nconst defaultSocialMediaOptions = [\n  { label: 'Facebook', value: 'facebook' },\n  { label: 'Instagram', value: 'instagram' },\n  { label: 'Telegram', value: 'telegram' },\n  { label: 'Youtube', value: 'youtube' },\n  { label: 'LinkedIn', value: 'linkedin' },\n  { label: 'Snapchat', value: 'snapchat' },\n  { label: 'WeChat', value: 'wechat' },\n  { label: 'WhatsApp', value: 'whatsapp' },\n  { label: 'Twitch', value: 'twitch' },\n  { label: 'Discord', value: 'discord' },\n  { label: 'Pinterest', value: 'pinterest' },\n  { label: 'Steam', value: 'steam' },\n  { label: 'Spotify', value: 'spotify' },\n  { label: 'Reddit', value: 'reddit' },\n  { label: 'Skype', value: 'skype' },\n  { label: 'Twitter', value: 'twitter' },\n];\n\nexport default function ShopSocial({ prev, next }) {\n  const { t } = useTranslation();\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const [socialMediaOptions, setSocialMediaOptions] = useState(\n    defaultSocialMediaOptions,\n  );\n  const [socialList, setSocialList] = useState([\n    { type: '', content: '', id: generateShortUUID() },\n  ]);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  function generateShortUUID(length = 8) {\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * chars.length);\n      result += chars[randomIndex];\n    }\n    return result;\n  }\n\n  const addSocialMedia = () => {\n    setSocialList([\n      ...socialList,\n      { type: '', content: '', id: generateShortUUID() },\n    ]);\n  };\n\n  const removeSocialMedia = (remove) => {\n    setSocialList(socialList.filter((item) => item.id !== remove.id));\n  };\n\n  const handleChange = (type, changeId, value) => {\n    setSocialList(\n      socialList.flatMap((item) =>\n        item.id === changeId ? { ...item, [type]: value } : item,\n      ),\n    );\n  };\n\n  useEffect(() => {\n    setLoading(true);\n\n    const paramsData = {\n      shop_id: myShop.id,\n    };\n\n    sellerShopSocialService\n      .getAll(paramsData)\n      .then((res) => {\n        if (res.data?.length) {\n          setSocialList(\n            res.data.map((item) => ({\n              type: item.type,\n              content: item.content,\n              id: generateShortUUID(),\n            })),\n          );\n        }\n      })\n      .finally(() => setLoading(false));\n  }, [myShop.id]);\n\n  useDidUpdate(() => {});\n\n  const onFinish = () => {\n    setLoadingBtn(true);\n\n    const body = {\n      data: socialList\n        .map((item) => {\n          if (!item.type || !item.content) return null;\n          return {\n            type: item.type,\n            content: item.content,\n          };\n        })\n        .filter((item) => !!item),\n    };\n\n    return sellerShopSocialService\n      .create(body)\n      .then(() => next())\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Fragment>\n      {!loading ? (\n        <Form onFinish={onFinish} layout='vertical'>\n          <Card>\n            {socialList.map((socialItem, index) => (\n              <Row gutter={12} key={index}>\n                <Col span={9}>\n                  <Form.Item label={t('type')}>\n                    <Select\n                      showSearch={true}\n                      options={socialMediaOptions}\n                      value={socialItem.type}\n                      onChange={(value) =>\n                        handleChange('type', socialItem.id, value)\n                      }\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item label={t('url')}>\n                    <Input\n                      value={socialItem.content}\n                      onChange={(value) =>\n                        handleChange(\n                          'content',\n                          socialItem.id,\n                          value.target.value,\n                        )\n                      }\n                    />\n                  </Form.Item>\n                </Col>\n                {socialList.length > 1 && (\n                  <Col\n                    span={3}\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <Button\n                      type='primary'\n                      danger\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeSocialMedia(socialItem)}\n                    />\n                  </Col>\n                )}\n              </Row>\n            ))}\n            <Button\n              className='w-100 my-3'\n              type='dashed'\n              onClick={addSocialMedia}\n            >\n              {t('add.social')}\n            </Button>\n          </Card>\n\n          <Space className='mt-4'>\n            <Button onClick={prev}>{t('prev')}</Button>\n            <Button type='primary' htmlType='submit' loading={!!loadingBtn}>\n              {t('next')}\n            </Button>\n          </Space>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/city/city-form.js",["6392"],[],"import React, { useState } from 'react';\nimport { Form, Row, Col, Input, Button, Switch, Modal, Spin } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport countryService from 'services/deliveryzone/country';\nimport { useEffect } from 'react';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport cityService from 'services/deliveryzone/city';\nimport regionService from 'services/deliveryzone/region';\nimport { fetchCity } from 'redux/slices/deliveryzone/city';\n\nexport default function CityForm({ visible, setVisible, id, setId }) {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n\n  const handleClose = () => {\n    setData(null);\n    setVisible(false);\n    form.resetFields();\n    setId(null);\n  };\n\n  const addCountry = (values) => {\n    cityService\n      .create(values)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        batch(() => {\n          dispatch(fetchCity({}));\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const updateCountry = (values) => {\n    cityService\n      .update(data.id, values)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(fetchCity({}));\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const paramsData = {\n      country_id: values?.country_id?.value,\n      region_id: values?.region_id?.value,\n      active: values.active,\n      title: {\n        ...Object.assign(\n          {},\n          ...languages.map((lang) => ({\n            [lang.locale]: values[`title[${lang.locale}]`],\n          })),\n        ),\n      },\n    };\n    if (data?.id) updateCountry(paramsData);\n    else addCountry(paramsData);\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchCountry = ({ search, page }) => {\n    return countryService.get({ search, page, has_price: true }).then((res) => {\n      return res.data.map((country) => ({\n        label: country?.translation?.title,\n        value: country.id,\n      }));\n    });\n  };\n  const fetchRegion = ({ search, page }) => {\n    return regionService.get({ search, page, has_price: true }).then((res) => {\n      return res.data.map((region) => ({\n        label: region?.translation?.title,\n        value: region.id,\n      }));\n    });\n  };\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      cityService\n        .show(id)\n        .then(({ data }) => {\n          setData(data);\n          form.setFieldsValue({\n            active: data?.active,\n            country_id: {\n              label: data.country.translation.title,\n              value: data.country.id,\n            },\n            region_id: {\n              label: data.region.translation.title,\n              value: data.region.id,\n            },\n            ...getLanguageFields(data),\n          });\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  return (\n    <Modal\n      visible={visible}\n      onCancel={handleClose}\n      onOk={handleClose}\n      footer={null}\n      loading={loading}\n      title={t('add.country')}\n    >\n      <Form\n        form={form}\n        onFinish={onFinish}\n        layout='vertical'\n        initialValues={{ active: true }}\n      >\n        <Spin spinning={loading}>\n          <Row gutter={24}>\n            <Col span={24}>\n              <LanguageList />\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.id}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  hidden={item.locale !== defaultLang}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                name='region_id'\n                label={t('region_id')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InfiniteSelect fetchOptions={fetchRegion} />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                name='country_id'\n                label={t('country_id')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InfiniteSelect fetchOptions={fetchCountry} />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch defaultChecked />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Spin>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/region/region-form.js",["6393"],[],"import React, { useState } from 'react';\nimport { Form, Row, Col, Input, Button, Switch, Modal, Spin } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { fetchRegion } from 'redux/slices/deliveryzone/region';\nimport regionService from 'services/deliveryzone/region';\nimport { useEffect } from 'react';\n\nexport default function RegionForm({ visible, setVisible, id, setId }) {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n\n  const handleClose = () => {\n    setData(null);\n    setVisible(false);\n    form.resetFields();\n    setId(null);\n  };\n\n  const addRegion = (values) => {\n    regionService\n      .create({\n        active: values.active,\n        title: {\n          ...Object.assign(\n            {},\n            ...languages.map((lang) => ({\n              [lang.locale]: values[`title[${lang.locale}]`],\n            })),\n          ),\n        },\n      })\n      .then(() => {\n        toast.success(t('successfully.added'));\n        batch(() => {\n          dispatch(fetchRegion({}));\n        });\n        setVisible(false);\n        form.resetFields();\n        setData(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const updateRegion = (values) => {\n    regionService\n      .update(data.id, {\n        active: values.active,\n        title: {\n          ...Object.assign(\n            {},\n            ...languages.map((lang) => ({\n              [lang.locale]: values[`title[${lang.locale}]`],\n            })),\n          ),\n        },\n      })\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(fetchRegion({}));\n        });\n        setVisible(false);\n        form.resetFields();\n        setData(null);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    if (data?.id) updateRegion(values);\n    else addRegion(values);\n  };\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      regionService\n        .show(id)\n        .then(({ data }) => {\n          setData(data);\n          form.setFieldsValue({\n            active: data?.active,\n            ...getLanguageFields(data),\n          });\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  return (\n    <Modal\n      visible={visible}\n      onCancel={handleClose}\n      onOk={handleClose}\n      footer={null}\n      loading={loading}\n      title={t('add.region')}\n    >\n      <Form\n        form={form}\n        onFinish={onFinish}\n        layout='vertical'\n        initialValues={{ active: true }}\n      >\n        <Spin spinning={loading}>\n          <Row gutter={24}>\n            <Col span={24}>\n              <LanguageList />\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.id}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  hidden={item.locale !== defaultLang}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch defaultChecked />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Spin>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/country/country-form.js",["6394"],[],"import React, { useState } from 'react';\nimport { Form, Row, Col, Input, Button, Switch, Modal, Spin } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { fetchCountry } from 'redux/slices/deliveryzone/country';\nimport countryService from 'services/deliveryzone/country';\nimport { useEffect } from 'react';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport regionService from 'services/deliveryzone/region';\n\nexport default function CountryForm({ visible, setVisible, id, setId }) {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n\n  const handleClose = () => {\n    setData(null);\n    setVisible(false);\n    form.resetFields();\n    setId(null);\n  };\n\n  const addCountry = (values) => {\n    countryService\n      .create({\n        active: values.active,\n        code: values.code,\n        region_id: values?.region_id?.value,\n        title: {\n          ...Object.assign(\n            {},\n            ...languages.map((lang) => ({\n              [lang.locale]: values[`title[${lang.locale}]`],\n            })),\n          ),\n        },\n      })\n      .then(() => {\n        toast.success(t('successfully.added'));\n        batch(() => {\n          dispatch(fetchCountry({}));\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const updateCountry = (values) => {\n    countryService\n      .update(data.id, {\n        region_id: values?.region_id?.value,\n        active: values.active,\n        code: values.code,\n        title: {\n          ...Object.assign(\n            {},\n            ...languages.map((lang) => ({\n              [lang.locale]: values[`title[${lang.locale}]`],\n            })),\n          ),\n        },\n      })\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(fetchCountry({}));\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    if (data?.id) updateCountry(values);\n    else addCountry(values);\n  };\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchRegion = ({ search, page }) => {\n    return regionService.get({ search, page, has_price: true }).then((res) => {\n      return res.data.map((region) => ({\n        label: region?.translation?.title,\n        value: region.id,\n      }));\n    });\n  };\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      countryService\n        .show(id)\n        .then(({ data }) => {\n          setData(data);\n          form.setFieldsValue({\n            active: data?.active,\n            code: data?.code,\n            region_id: {\n              label: data.region.translation.title,\n              value: data.region.id,\n            },\n            ...getLanguageFields(data),\n          });\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  return (\n    <Modal\n      visible={visible}\n      onCancel={handleClose}\n      onOk={handleClose}\n      footer={null}\n      loading={loading}\n      title={t('add.country')}\n    >\n      <Form\n        form={form}\n        onFinish={onFinish}\n        layout='vertical'\n        initialValues={{ active: true }}\n      >\n        <Spin spinning={loading}>\n          <Row gutter={24}>\n            <Col span={24}>\n              <LanguageList />\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.id}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  hidden={item.locale !== defaultLang}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                name='region_id'\n                label={t('region_id')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InfiniteSelect fetchOptions={fetchRegion} />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item label={t('code')} name='code'>\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch defaultChecked />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Spin>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/product-bonus/product-bonus-form.js",["6395","6396"],[],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { Button, Col, DatePicker, Form, InputNumber, Row, Switch } from 'antd';\nimport { DebounceSelect } from 'components/search';\nimport productService from 'services/seller/product';\nimport { setMenuData } from 'redux/slices/menu';\nimport moment from 'moment/moment';\n\nexport default function ProductBonusForm({ form, handleSubmit }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const fetchProductsStock = (search) => {\n    const params = {\n      search,\n      page: 1,\n      perPage: 20,\n    };\n\n    return productService.getStock(params).then(({ data }) =>\n      data?.map((item) => ({\n        label:\n          item?.product?.translation?.title +\n          `${\n            item?.extras?.length > 0\n              ? `: ${item?.extras?.map((ext) => ext?.value?.value).join(', ')}`\n              : ''\n          }`,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const getInitialTimes = () => {\n    if (!activeMenu.data?.expired_at) {\n      return {};\n    }\n    const data = JSON.parse(activeMenu.data?.expired_at);\n    return {\n      expired_at: moment(data, 'YYYY-MM-DD'),\n    };\n  };\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      const dataString = {\n        ...data,\n        expired_at: data?.expired_at,\n      };\n\n      dispatch(setMenuData({ activeMenu, data: dataString }));\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n\n    const body = {\n      stock_id: values.stock?.value,\n      value: values.stock_quantity,\n      bonus_stock_id: values.bonus_stock?.value,\n      bonus_quantity: values.bonus_stock_quantity,\n      expired_at: moment(values.expired_at).format('YYYY-MM-DD'),\n      status: values.status,\n      type: 'count',\n    };\n\n    handleSubmit(body).finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Form\n      form={form}\n      name={'product_bonus_form'}\n      layout={'vertical'}\n      onFinish={onFinish}\n      initialValues={{\n        status: true,\n        ...activeMenu.data,\n        // ...getInitialTimes(),\n      }}\n    >\n      <Row gutter={12}>\n        <Col span={12}>\n          <Form.Item\n            label={t('products.stock')}\n            name={'stock'}\n            rules={[{ required: true, message: t('required') }]}\n          >\n            <DebounceSelect\n              fetchOptions={fetchProductsStock}\n              placeholder={t('select.product.stock')}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label={t('product.stock.quantity')}\n            name={'stock_quantity'}\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n              {\n                type: 'number',\n                min: 0,\n                message: t('must.be.greater.than.0'),\n              },\n            ]}\n          >\n            <InputNumber\n              className='w-100'\n              placeholder={t('input.product.stock.quantity')}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label={t('bonus.product.stock')}\n            name={'bonus_stock'}\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n          >\n            <DebounceSelect\n              fetchOptions={fetchProductsStock}\n              placeholder={t('select.product.stock')}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label={t('bonus.product.stock.quantity')}\n            name={'bonus_stock_quantity'}\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n              {\n                type: 'number',\n                min: 0,\n                message: t('must.be.greater.than.0'),\n              },\n            ]}\n          >\n            <InputNumber\n              className='w-100'\n              placeholder={t('input.bonus.product.stock.quantity')}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label={t('expired.at')}\n            name='expired_at'\n            rules={[{ required: true, message: t('required') }]}\n          >\n            <DatePicker\n              className='w-100'\n              placeholder={t('select.expired.at')}\n              disabledDate={(current) => moment().add(-1, 'days') >= current}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label={t('active')} name='status' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/shop-reviews/shopReviewShow.js",["6397","6398","6399"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Descriptions, Modal, Rate } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport Loading from 'components/loading';\nimport reviewService from 'services/seller/review';\nimport moment from 'moment';\n\nexport default function OrderReviewShowModal({ id, handleCancel }) {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { t } = useTranslation();\n\n  const comment = data?.comment?.split(',');\n  const name = comment?.at(0);\n  const phone = comment?.at(1);\n  const description = comment?.at(2);\n\n  function fetchReviews(id) {\n    setLoading(true);\n    reviewService\n      .getById(id)\n      .then((res) => setData(res.data))\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchReviews(id);\n  }, [id]);\n\n  return (\n    <Modal\n      visible={!!id}\n      title={t('shop.review')}\n      onCancel={handleCancel}\n      footer={\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>\n      }\n    >\n      {!loading ? (\n        <Descriptions bordered>\n          <Descriptions.Item span={3} label={t('id')}>\n            {data.id}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('user')}>\n            {data?.user?.firstname + data?.user?.lastname}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('rating')}>\n            <Rate disabled defaultValue={data?.rating ?? 0} />\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('phone.number')}>\n            {data?.user?.phone}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('comment')}>\n            {data?.comment}\n          </Descriptions.Item>\n          <Descriptions.Item span={3} label={t('created.at')}>\n            {moment(data.created_at).format('YYYY-MM-DD HH:mm')}\n          </Descriptions.Item>\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/filter.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/deliveryzone/area/area-form.js",["6400"],[],"import React, { useState } from 'react';\nimport { Form, Row, Col, Input, Button, Switch, Modal, Spin } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport countryService from 'services/deliveryzone/country';\nimport { useEffect } from 'react';\nimport { InfiniteSelect } from 'components/infinite-select';\nimport cityService from 'services/deliveryzone/city';\nimport regionService from 'services/deliveryzone/region';\nimport { fetchArea } from 'redux/slices/deliveryzone/area';\nimport areaService from 'services/deliveryzone/area';\n\nexport default function AreaForm({ visible, setVisible, id, setId }) {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n\n  const handleClose = () => {\n    setData(null);\n    setVisible(false);\n    form.resetFields();\n    setId(null);\n  };\n\n  const addCountry = (values) => {\n    areaService\n      .create(values)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        batch(() => {\n          dispatch(fetchArea({}));\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const updateCountry = (values) => {\n    areaService\n      .update(data.id, values)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        batch(() => {\n          dispatch(fetchArea({}));\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const paramsData = {\n      country_id: values?.country_id?.value,\n      region_id: values?.region_id?.value,\n      city_id: values?.city_id?.value,\n      active: values.active,\n      title: {\n        ...Object.assign(\n          {},\n          ...languages.map((lang) => ({\n            [lang.locale]: values[`title[${lang.locale}]`],\n          })),\n        ),\n      },\n    };\n    if (data?.id) updateCountry(paramsData);\n    else addCountry(paramsData);\n  };\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchCountry = ({ search, page }) => {\n    return countryService.get({ search, page, has_price: true }).then((res) => {\n      return res.data.map((country) => ({\n        label: country?.translation?.title,\n        value: country.id,\n      }));\n    });\n  };\n  const fetchRegion = ({ search, page }) => {\n    return regionService.get({ search, page, has_price: true }).then((res) => {\n      return res.data.map((region) => ({\n        label: region?.translation?.title,\n        value: region.id,\n      }));\n    });\n  };\n  const fetchCity = ({ search, page }) => {\n    return cityService.get({ search, page, has_price: true }).then((res) => {\n      return res.data.map((city) => ({\n        label: city?.translation?.title,\n        value: city.id,\n      }));\n    });\n  };\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      areaService\n        .show(id)\n        .then(({ data }) => {\n          setData(data);\n          form.setFieldsValue({\n            active: data?.active,\n            country_id: {\n              label: data.country.translation.title,\n              value: data.country.id,\n            },\n            region_id: {\n              label: data.region.translation.title,\n              value: data.region.id,\n            },\n            city_id: {\n              label: data.city.translation.title,\n              value: data.city.id,\n            },\n            ...getLanguageFields(data),\n          });\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  return (\n    <Modal\n      visible={visible}\n      onCancel={handleClose}\n      onOk={handleClose}\n      footer={null}\n      loading={loading}\n      title={t('add.country')}\n    >\n      <Form\n        form={form}\n        onFinish={onFinish}\n        layout='vertical'\n        initialValues={{ active: true }}\n      >\n        <Spin spinning={loading}>\n          <Row gutter={24}>\n            <Col span={24}>\n              <LanguageList />\n            </Col>\n            <Col span={24}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.id}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  hidden={item.locale !== defaultLang}\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (!value && item?.locale === defaultLang) {\n                          return Promise.reject(new Error(t('required')));\n                        } else if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                name='region_id'\n                label={t('region_id')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InfiniteSelect fetchOptions={fetchRegion} />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                name='country_id'\n                label={t('country_id')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InfiniteSelect fetchOptions={fetchCountry} />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                name='city_id'\n                label={t('city_id')}\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InfiniteSelect fetchOptions={fetchCity} />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch defaultChecked />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Spin>\n        <Button type='primary' htmlType='submit' loading={loadingBtn}>\n          {t('submit')}\n        </Button>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-main.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-tabs.js",["6401","6402"],[],"import React, { useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Empty,\n  Form,\n  Pagination,\n  Spin,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchBookingZone, setCurrentZone } from 'redux/slices/booking-zone';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport { fetchSellerBookingList } from 'redux/slices/booking-list';\nimport { setMenuData } from 'redux/slices/menu';\n\nexport default function OrderTabs() {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { current_zone, zone, loading } = useSelector(\n    (state) => state.bookingZone,\n    shallowEqual\n  );\n  const {\n    booking,\n    loading: bookingListLoading,\n    meta,\n  } = useSelector((state) => state.bookingList, shallowEqual);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchBookingZone());\n    }\n  }, [activeMenu.refetch]);\n\n  useEffect(() => {\n    if (!!current_zone) {\n      dispatch(\n        fetchSellerBookingList({\n          shop_section_id: current_zone?.id,\n          page: activeMenu?.data?.page || 1,\n        })\n      );\n    }\n  }, [current_zone, activeMenu?.data?.page]);\n\n  const handleChange = (item) => dispatch(setCurrentZone(item));\n\n  function onChangePagination(page) {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu?.data,  page },\n      })\n    );\n  }\n\n  return (\n    <Card style={{ height: '100vh' }}>\n      <Form layout='vertical' name='booking-form' form={form}>\n        <div className='booking_tabs'>\n          {loading ? (\n            <Spin />\n          ) : (\n            zone.map((item) => (\n              <Button\n                type={\n                  current_zone?.translation?.title === item.translation?.title\n                    ? 'primary'\n                    : 'text'\n                }\n                key={item?.id}\n                onClick={() => handleChange(item)}\n              >\n                {item.translation?.title}\n              </Button>\n            ))\n          )}\n        </div>\n        <div style={{fontSize: '16px', margin: '8px 0'}}>{t('user.bookings')}</div>\n        <div style={{ overflowY: 'auto', height: '80vh' }}>\n          <Spin spinning={bookingListLoading}>\n            {booking && booking.length > 0 ? (\n              booking?.map((booking) => (\n                <Card bordered key={booking.id}>\n                  <Descriptions column={1}>\n                    <Descriptions.Item label={t('start.date')}>\n                      {moment(booking.start_date).format('YYYY-MM-DD HH:MM')}\n                    </Descriptions.Item>\n                    <Descriptions.Item label={t('table')}>\n                      {booking.table?.name}\n                    </Descriptions.Item>\n                    <Descriptions.Item label={t('user')}>\n                      {booking?.user?.firstname} {booking?.user?.lastname}\n                      {' tel: '}\n                      <a href={`tel:${booking?.user?.phone}`}>\n                        {' '}\n                        {booking?.user?.phone}\n                      </a>\n                    </Descriptions.Item>\n                    <Descriptions.Item label={t('guests')}>\n                      {booking.guest}\n                    </Descriptions.Item>\n                  </Descriptions>\n                </Card>\n              ))\n            ) : (\n              <Empty />\n            )}\n          </Spin>\n        </div>\n          {booking && booking.length > 0 && (\n            <div className='pt-3'>\n            <Pagination\n              total={meta.total}\n              current={meta.current_page}\n              pageSize={10}\n              onChange={onChangePagination}\n            />\n\n            </div>\n          )}\n      </Form>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/invites/invite-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/filter.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/product-card.js",["6403"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Col, Pagination, Row, Spin } from 'antd';\nimport Meta from 'antd/es/card/Meta';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport getImage from 'helpers/getImage';\nimport { fetchRestProducts } from 'redux/slices/product';\nimport { toast } from 'react-toastify';\nimport ProductModal from './product-modal';\nimport { useTranslation } from 'react-i18next';\nimport { BsFillGiftFill } from 'react-icons/bs';\nimport { getCartData } from 'redux/selectors/cartSelector';\nimport RiveResult from 'components/rive-result';\n\nexport default function ProductCard() {\n  const colLg = {\n    lg: 8,\n    xl: 6,\n    xxl: 6,\n  };\n  const { t } = useTranslation();\n  const [extrasModal, setExtrasModal] = useState(null);\n  const dispatch = useDispatch();\n  const { products, loading, meta, params } = useSelector(\n    (state) => state.product,\n    shallowEqual,\n  );\n  const currentData = useSelector((state) => getCartData(state.cart));\n  const { currency } = useSelector((state) => state.cart, shallowEqual);\n  const { before_order_phone_required } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const paramsData = {\n    perPage: 12,\n    page: 1,\n    status: 'published',\n    active: 1,\n    shop_id: myShop?.id,\n  };\n\n  function onChangePagination(page) {\n    dispatch(\n      fetchRestProducts({\n        ...paramsData,\n        page,\n      }),\n    );\n  }\n\n  useEffect(() => {\n    dispatch(fetchRestProducts(paramsData));\n  }, [myShop?.id]);\n\n  const addProductToCart = (item) => {\n    if (!currency) {\n      toast.warning(t('please.select.currency'));\n      return;\n    }\n    if (currentData?.user?.length === 0) {\n      toast.warning(t('please.select.user'));\n      return;\n    }\n    if (!currentData?.phone && before_order_phone_required === '1') {\n      toast.warning(t('please.enter.phone'));\n      return;\n    }\n    if (Number(currentData?.phone) < 0) {\n      toast.warning(t('invalid.phone.number'));\n      return;\n    }\n    if (!currentData.address && currentData?.delivery_type === 'delivery') {\n      toast.warning(t('please.select.address'));\n      return;\n    }\n    if (!currentData.delivery_point && currentData?.delivery_type === 'point') {\n      toast.warning(t('please.select.delivery.point'));\n      return;\n    }\n    if (!currentData?.paymentType) {\n      toast.warning(t('please.select.payment.type'));\n      return;\n    }\n    if (!currentData.deliveries) {\n      toast.warning(t('please.select.delivery'));\n      return;\n    }\n    if (!currentData?.delivery_date) {\n      toast.warning(t('please.select.delivery.date'));\n      return;\n    }\n    if (currentData?.delivery_time === null) {\n      toast.warning(t('please.select.delivery.time'));\n      return;\n    }\n    setExtrasModal(item);\n  };\n\n  return (\n    <div className='px-2'>\n      {loading ? (\n        <Spin className='d-flex justify-content-center my-5' />\n      ) : (\n        <Row gutter={12} className='mt-4 product-card'>\n          {products.length === 0 ? (\n            <Col span={24}>\n              <RiveResult id='nosell' />\n            </Col>\n          ) : (\n            products.map((item, index) => (\n              <Col {...colLg} key={index}>\n                <Card\n                  className='products-col'\n                  key={item.id}\n                  cover={<img alt={item.name} src={getImage(item.img)} />}\n                  onClick={() => addProductToCart(item)}\n                >\n                  <Meta title={item?.translation?.title} />\n                  <div className='preview'>\n                    <PlusOutlined />\n                  </div>\n                  {item.stocks.map((it) => (\n                    <span className={it.bonus ? 'show-bonus' : 'd-none'}>\n                      <BsFillGiftFill /> {it.bonus?.value}\n                      {'+'}\n                      {it.bonus?.bonus_quantity}\n                    </span>\n                  ))}\n                </Card>\n              </Col>\n            ))\n          )}\n        </Row>\n      )}\n      {extrasModal && (\n        <ProductModal\n          extrasModal={extrasModal}\n          setExtrasModal={setExtrasModal}\n        />\n      )}\n      <div className='d-flex justify-content-end my-5'>\n        <Pagination\n          total={meta.total}\n          current={params.page}\n          pageSize={12}\n          showSizeChanger={false}\n          onChange={onChangePagination}\n          active={1}\n        />\n      </div>\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/order-tabs.js",["6404","6405"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Row,\n  Select,\n  Space,\n  Spin,\n  InputNumber,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { DebounceSelect } from 'components/search';\nimport {\n  CloseOutlined,\n  PlusOutlined,\n  ShoppingCartOutlined,\n  UserAddOutlined,\n} from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport userService from 'services/seller/user';\nimport { isArray } from 'lodash';\nimport {\n  addBag,\n  removeBag,\n  setCartData,\n  setCurrency,\n  setCurrentBag,\n} from 'redux/slices/cart';\nimport { AsyncSelect } from 'components/async-select';\nimport { getCartData } from 'redux/selectors/cartSelector';\nimport UserAddModal from './user-add-modal';\nimport restPaymentService from 'services/rest/payment';\nimport DeliveryInfo from './delivery-info';\nimport { useLocation } from 'react-router-dom';\nimport moment from 'moment';\n\nexport default function OrderTabs() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { currencies, loading } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { currentBag, bags, currency } = useSelector(\n    (state) => state.cart,\n    shallowEqual,\n  );\n  const { before_order_phone_required } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n  const locat = useLocation();\n  const delivery_type = locat?.state?.delivery_type;\n\n  const data = useSelector((state) => getCartData(state.cart));\n  const [users, setUsers] = useState([]);\n  const [userModal, setUserModal] = useState(null);\n  const [userPhoneNumber, setUserPhoneNumber] = useState(null);\n\n  async function getUsers(search) {\n    const params = {\n      search,\n      perPage: 10,\n    };\n    return userService.getAll(params).then(({ data }) => {\n      setUsers(data);\n      return formatUser(data);\n    });\n  }\n\n  function formatUser(data) {\n    if (!data) return;\n    if (isArray(data)) {\n      return data.map((item) => ({\n        label: `${item?.firstname || ''} ${item?.lastname || ''}`,\n        value: item?.id,\n        key: item?.id,\n      }));\n    } else {\n      return {\n        label: `${data?.firstname || ''} ${data?.lastname || ''}`,\n        value: data?.id,\n        key: data?.id,\n      };\n    }\n  }\n\n  function selectUser(userObj) {\n    const user = users.find((item) => item.id === userObj.value);\n    dispatch(\n      setCartData({\n        user: userObj,\n        userUuid: user.uuid,\n        bag_id: currentBag,\n        phone: user?.phone,\n      }),\n    );\n    setUserPhoneNumber(user?.phone);\n    form.setFieldsValue({ address: null, phone: user?.phone });\n  }\n\n  const goToAddClient = () => {\n    setUserModal(true);\n  };\n\n  const closeTab = (event, item) => {\n    event.preventDefault();\n    event.stopPropagation();\n    dispatch(removeBag(item));\n  };\n\n  function selectCurrency(item) {\n    const data = currencies.find((el) => el.id === item.value);\n    dispatch(setCurrency(data));\n  }\n\n  useEffect(() => {\n    if (!currency) {\n      const currentCurrency = currencies.find((item) => item.default);\n      const formCurrency = {\n        label: `${currentCurrency?.title} (${currentCurrency?.symbol})`,\n        value: currentCurrency?.id,\n        key: currentCurrency?.id,\n      };\n      dispatch(\n        setCartData({\n          currentCurrency,\n          bag_id: currentBag,\n        }),\n      );\n      dispatch(setCurrency(currentCurrency));\n      form.setFieldsValue({\n        currency: formCurrency,\n      });\n    } else {\n      const formCurrency = {\n        label: `${currency?.title} (${currency?.symbol})`,\n        value: currency?.id,\n        key: currency?.id,\n      };\n      dispatch(\n        setCartData({\n          formCurrency,\n          bag_id: currentBag,\n        }),\n      );\n      form.setFieldsValue({\n        currency: formCurrency,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      user: data.user || null,\n      payment_type: data.paymentType || null,\n      address: data.address\n        ? {\n            value: data.address.value,\n            label: data.address.label,\n          }\n        : null,\n      delivery: data.deliveries || null,\n      delivery_time: data?.delivery_time\n        ? moment(`${data?.delivery_date} ${data?.delivery_time}`)\n        : null,\n      delivery_date: data?.delivery_date ? moment(data?.delivery_date) : null,\n      delivery_point: data?.delivery_point || null,\n      country: data?.country || null,\n      city: data?.city || null,\n      phone: data?.phone || null,\n      home_number: data?.street_house_number || null,\n      zip_code: data?.zip_code || null,\n    });\n  }, [currentBag, data]);\n\n  async function fetchPaymentList() {\n    return restPaymentService.getAll().then(({ data }) =>\n      data\n        .filter((el) => el.tag === 'cash' || el.tag === 'wallet')\n        .map((item) => ({\n          label: t(item?.tag) || t('no.name'),\n          value: item?.id,\n          key: item?.id,\n        })),\n    );\n  }\n\n  return (\n    <div className='order-tabs'>\n      <div className='tabs-container'>\n        <div className='tabs'>\n          {bags.map((item) => (\n            <div\n              key={'tab' + item}\n              className={item === currentBag ? 'tab active' : 'tab'}\n              onClick={() => dispatch(setCurrentBag(item))}\n            >\n              <Space>\n                <ShoppingCartOutlined />\n                <span>\n                  {t('bag')} - {item + 1}\n                </span>\n                {item && item === currentBag ? (\n                  <CloseOutlined\n                    onClick={(event) => closeTab(event, item)}\n                    className='close-button'\n                    size={12}\n                  />\n                ) : (\n                  ''\n                )}\n              </Space>\n            </div>\n          ))}\n        </div>\n        <Button\n          size='small'\n          type='primary'\n          shape='circle'\n          icon={<PlusOutlined />}\n          className='tab-add-button'\n          onClick={() => dispatch(addBag())}\n        />\n      </div>\n      <Form layout='vertical' name='pos-form' form={form}>\n        <Card className={!!currentBag ? '' : 'tab-card'}>\n          {loading && (\n            <div className='loader'>\n              <Spin />\n            </div>\n          )}\n          {/* remove when delivery type dine in */}\n          <Row gutter={6} style={{ marginBottom: 15 }}>\n            <Col span={21}>\n              <Form.Item\n                name='user'\n                rules={[{ required: true, message: '' }]}\n                className='w-100'\n              >\n                <DebounceSelect\n                  placeholder={t('select.client')}\n                  fetchOptions={getUsers}\n                  onSelect={selectUser}\n                  onClear={() => {\n                    form.setFieldsValue({ phone: null, user: null });\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={3}>\n              <Form.Item>\n                <Button icon={<UserAddOutlined />} onClick={goToAddClient} />\n              </Form.Item>\n            </Col>\n            {before_order_phone_required === '1' && (\n              <Col span={12}>\n                <Form.Item\n                  name='phone'\n                  rules={[\n                    { required: true, message: t('required') },\n                    {\n                      validator(_, value) {\n                        if (value < 0) {\n                          return Promise.reject(\n                            new Error(t('must.be.positive')),\n                          );\n                        }\n                      },\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    className='w-100'\n                    placeholder={t('phone.number')}\n                    disabled={userPhoneNumber}\n                    onChange={(phone) =>\n                      dispatch(\n                        setCartData({ phone: phone, bag_id: currentBag }),\n                      )\n                    }\n                  />\n                </Form.Item>\n              </Col>\n            )}\n            <Col span={12}>\n              <Form.Item\n                name='currency'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select\n                  placeholder={t('select.currency')}\n                  onSelect={selectCurrency}\n                  labelInValue\n                  disabled\n                >\n                  {currencies?.map((item, index) => (\n                    <Select.Option key={index} value={item?.id}>\n                      {`${item?.title} (${item?.symbol})`}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                name='payment_type'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <AsyncSelect\n                  fetchOptions={fetchPaymentList}\n                  className='w-100'\n                  placeholder={t('select.payment.type')}\n                  onSelect={(paymentType) => {\n                    dispatch(setCartData({ paymentType, bag_id: currentBag }));\n                  }}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n        {/* remove when delivery type is dine in */}\n        {!delivery_type && <DeliveryInfo />}\n        {/*  */}\n      </Form>\n      {userModal && (\n        <UserAddModal\n          visible={userModal}\n          handleCancel={() => setUserModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/order-cart.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/stock.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/subscriptions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking-table/table-qrcode.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/transactions/transactionShowModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/transactions/status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/subscriptions/subscriptionModal.js",["6406"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Modal, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport subscriptionService from 'services/seller/subscriptions';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchRestPayments } from 'redux/slices/payment';\nimport Loading from 'components/loading';\nimport { toast } from 'react-toastify';\nimport { fetchMyShop } from 'redux/slices/myShop';\nimport Paystack from 'assets/images/paystack.svg';\nimport { FaPaypal } from 'react-icons/fa';\nimport { SiStripe, SiRazorpay } from 'react-icons/si';\nimport { AiOutlineWallet } from 'react-icons/ai';\nconst acceptedPayments = ['wallet'];\n\nexport default function SellerSubscriptionModal({ modal, handleCancel }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { seller } = useSelector((state) => state.myShop.myShop, shallowEqual);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [paymentType, setPaymentType] = useState({});\n\n  const { payments, loading } = useSelector(\n    (state) => state.payment,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    dispatch(fetchRestPayments({}));\n  }, []);\n\n  const handleSubmit = () => {\n    if (!paymentType.id) {\n      toast.warning(t('please.select.payment.type'));\n      return;\n    }\n    if (paymentType.tag === 'wallet' && seller?.wallet?.price < modal.price) {\n      toast.warning(t('insufficient.balance'));\n      return;\n    }\n    setLoadingBtn(true);\n    subscriptionService\n      .attach(modal.id)\n      .then(({ data }) => transactionCreate(data.id))\n      .error(() => setLoadingBtn(false));\n  };\n\n  function transactionCreate(id) {\n    const payload = {\n      payment_sys_id: paymentType.id,\n    };\n    subscriptionService\n      .transactionCreate(id, payload)\n      .then(() => {\n        handleCancel();\n        toast.success(t('successfully.purchased'));\n        dispatch(fetchMyShop({}));\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const selectPayment = (type) => {\n    if (!acceptedPayments.includes(type.tag)) {\n      toast.warning(t('cannot.work.demo'));\n      return;\n    }\n    setPaymentType(type);\n  };\n\n  const handleAddIcon = (data) => {\n    switch (data) {\n      case 'wallet':\n        return <AiOutlineWallet size={80} />;\n      case 'paypal':\n        return <FaPaypal size={80} />;\n      case 'stripe':\n        return <SiStripe size={80} />;\n      case 'razorpay':\n        return <SiRazorpay size={80} />;\n      case 'paystack':\n        return <img src={Paystack} alt='img' width='80' height='80' />;\n      default:\n        return <AiOutlineWallet size={80} />;\n    }\n  };\n\n  return (\n    <Modal\n      visible={!!modal}\n      title={t('purchase.subscription')}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={handleSubmit}\n          loading={loadingBtn}\n          key='save-btn'\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel} key='cancel-btn'>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <Row gutter={12}>\n          {payments\n            ?.filter((item) => item?.tag !== 'cash')\n            ?.map((item, index) => (\n              <Col span={8} key={index}>\n                <Card\n                  className={`payment-card ${\n                    paymentType?.tag === item.tag ? 'active' : ''\n                  }`}\n                  onClick={() => selectPayment(item)}\n                >\n                  <div className='payment-icon'>{handleAddIcon(item?.tag)}</div>\n                  <div className='font-weight-bold mt-2'>{t(item?.tag)}</div>\n                </Card>\n              </Col>\n            ))}\n        </Row>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payouts/payoutStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/map.js",["6407"],[],"import React, { useEffect, useState } from 'react';\nimport { GoogleApiWrapper, Map, Marker } from 'google-maps-react';\nimport { MAP_API_KEY } from '../configs/app-global';\nimport pinIcon from '../assets/images/pin.png';\nimport getAddressFromLocation from '../helpers/getAddressFromLocation';\nimport { BiCurrentLocation } from 'react-icons/bi';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\n\nfunction GoogleMap(props) {\n  const [loc, setLoc] = useState();\n  const { t } = useTranslation();\n\n  const onClickMap = async (t, map, coord) => {\n    const { latLng } = coord;\n    const location = {\n      lat: latLng.lat(),\n      lng: latLng.lng(),\n    };\n    props.setLocation(location);\n    const address = await getAddressFromLocation(location, MAP_API_KEY);\n    props.setAddress(address);\n  };\n\n  const handleSubmit = async (event) => {\n    const location = {\n      lat: event?.lat,\n      lng: event?.lng,\n    };\n    props.setLocation(location);\n    const address = await getAddressFromLocation(location, MAP_API_KEY);\n    props.setAddress(address);\n  };\n\n  const currentLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      function (position) {\n        const location = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        setLoc(location);\n      },\n      function (error) {\n        toast.warning(t('turn.on.gps'));\n      },\n    );\n  };\n\n  useEffect(() => {\n    currentLocation();\n  }, []);\n\n  const markers = [\n    {\n      lat: Number(props.location.lat) || 0,\n      lng: Number(props.location.lng) || 0,\n    },\n  ];\n\n  var bounds = new props.google.maps.LatLngBounds();\n  for (var i = 0; i < markers.length; i++) {\n    bounds.extend(markers[i]);\n  }\n  return (\n    <div className='map-container' style={{ height: 400, width: '100%' }}>\n      <button\n        className='map-button'\n        type='button'\n        onClick={() => {\n          currentLocation();\n          if (loc) {\n            handleSubmit(loc);\n          }\n        }}\n      >\n        <BiCurrentLocation />\n      </button>\n      <Map\n        cursor={'pointer'}\n        onClick={onClickMap}\n        google={props.google}\n        defaultZoom={12}\n        zoom={10}\n        className='clickable'\n        initialCenter={props.location}\n        center={props.location}\n        // bounds={bounds}\n      >\n        <Marker\n          position={props.location}\n          icon={{\n            url: pinIcon,\n            scaledSize: new props.google.maps.Size(32, 32),\n          }}\n          className='marker'\n        />\n      </Map>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: MAP_API_KEY,\n})(GoogleMap);\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/getImageFromStock.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/shop/weeks.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/bookingClosedDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/bookingWorkingDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/forms/booking-time-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/payouts/payoutRequest.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/subcategory-add.js",["6408"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Input, Row, Select, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport TextArea from 'antd/es/input/TextArea';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport categoryService from 'services/seller/category';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\n\nconst SubcategoryAdd = ({ parent = {}, setId, setIsRefetch }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    return () => {\n      form.resetFields();\n    };\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n\n    const body = {\n      ...values,\n      type: parent?.type === 'main' ? 'sub_main' : 'child',\n      active: values.active ? 1 : 0,\n      keywords: values.keywords.join(','),\n      parent_id: values.parent_id?.value,\n      'images[0]': image[0]?.name,\n    };\n    categoryService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        setId(null);\n        form.resetFields();\n        setIsRefetch(true);\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n  if (!parent?.id) return '';\n\n  return (\n    <Form\n      name='basic'\n      layout='vertical'\n      onFinish={onFinish}\n      initialValues={{\n        active: true,\n        ...parent,\n      }}\n      form={form}\n    >\n      <Row gutter={24}>\n        <Col span={24}>\n          <Form.Item\n            label={t('parent.category')}\n            name='parent_id'\n            rules={[{ required: false, message: t('required') }]}\n          >\n            <Select disabled />\n          </Form.Item>\n        </Col>\n        <Col span={24}>\n          {languages.map((item, index) => (\n            <Form.Item\n              key={item.title + index}\n              label={t('name')}\n              name={`title[${item.locale}]`}\n              help={\n                error\n                  ? error[`title.${defaultLang}`]\n                    ? error[`title.${defaultLang}`][0]\n                    : null\n                  : null\n              }\n              validateStatus={error ? 'error' : 'success'}\n              rules={[\n                {\n                  required: true,\n                  validator(_, value) {\n                    if (!value && item?.locale === defaultLang) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              hidden={item.locale !== defaultLang}\n            >\n              <Input placeholder={t('name')} />\n            </Form.Item>\n          ))}\n        </Col>\n\n        <Col span={24}>\n          {languages.map((item, index) => (\n            <Form.Item\n              key={item.locale + index}\n              label={t('description')}\n              name={`description[${item.locale}]`}\n              rules={[\n                {\n                  required: true,\n                  validator(_, value) {\n                    if (!value && item?.locale === defaultLang) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 5) {\n                      return Promise.reject(new Error(t('must.be.at.least.5')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              hidden={item.locale !== defaultLang}\n            >\n              <TextArea rows={4} />\n            </Form.Item>\n          ))}\n        </Col>\n\n        <Col span={24}>\n          <Form.Item\n            label={t('keywords')}\n            name='keywords'\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n          >\n            <Select mode='tags' style={{ width: '100%' }}></Select>\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            label={t('image')}\n            name='images'\n            rules={[\n              {\n                validator() {\n                  if (image?.length === 0) {\n                    return Promise.reject(new Error(t('required')));\n                  }\n                  return Promise.resolve();\n                },\n              },\n            ]}\n          >\n            <MediaUpload\n              type='categories'\n              imageList={image}\n              setImageList={setImage}\n              form={form}\n              multiple={false}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label={t('active')} name='active' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Button\n        type='primary'\n        htmlType='submit'\n        loading={loadingBtn}\n        className='w-100'\n      >\n        {t('submit')}\n      </Button>\n    </Form>\n  );\n};\nexport default SubcategoryAdd;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-property.js",["6409","6410"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  message,\n  Modal,\n  Row,\n  Space,\n  Table,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { setMenuData } from 'redux/slices/menu';\nimport productService from 'services/seller/product';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport DeleteButton from 'components/delete-button';\nimport propertyService from 'services/seller/property';\nimport { DebounceSelect } from 'components/search';\n\nconst ProductProperty = ({ next, prev }) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [dataSource, setDataSource] = useState([]);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isFetching, setFetching] = useState(false);\n  const [groupSelected, setGroupSelected] = useState(null);\n\n  const column = [\n    {\n      key: '2',\n      title: t('property.group'),\n      dataIndex: 'group',\n      render: (group) => group?.translation?.title || '-',\n    },\n    {\n      key: '4',\n      title: t('property.value'),\n      dataIndex: 'value',\n      render: (value) => value?.value || '-',\n    },\n    {\n      key: '5',\n      title: t('options'),\n      render: (record) => {\n        return (\n          <Space>\n            <DeleteButton\n              type='primary'\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => onDeleteProduct(record)}\n            />\n          </Space>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (dataSource.length && uuid) {\n      const properties = dataSource;\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: { ...activeMenu.data, properties },\n        }),\n      );\n    }\n  }, [dataSource]);\n\n  const addProperties = (data) => {\n    productService\n      .properties(uuid, { properties: data })\n      .then(() => {\n        message.success(t('product.properties.saved'));\n        getPropduct(uuid);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onDeleteProduct = (record) => {\n    Modal.confirm({\n      title: t('delete.product'),\n      okText: t('yes'),\n      okType: 'danger',\n      onOk: () => {\n        const data = dataSource\n          ?.filter((item) => item.id !== record.id)\n          ?.map((item) => item?.value?.id);\n        addProperties(data);\n      },\n    });\n  };\n\n  const getPropduct = (id) => {\n    setFetching(true);\n    productService\n      .getById(id)\n      .then(({ data }) => {\n        setDataSource(data?.properties?.filter((item) => item?.value));\n        form.resetFields();\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        setFetching(false);\n      });\n  };\n  useEffect(() => {\n    if (uuid) {\n      getPropduct(uuid);\n    }\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const valuesProperties = values.propertyValue.map((item) => item.value);\n    const oldIds = dataSource?.map((item) => item?.value?.id);\n    addProperties({ ...valuesProperties, ...oldIds });\n  };\n\n  const fetchPropertyGroup = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    return propertyService.getAllGroups(params).then((res) =>\n      res.data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchPropertyValue = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      group_id: groupSelected?.value,\n    };\n\n    return propertyService.getAllValues(params).then((res) =>\n      res.data.map((item) => ({\n        label: item?.value,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  return (\n    <Card>\n      <Form\n        name='property-form'\n        layout='vertical'\n        form={form}\n        onFinish={onFinish}\n      >\n        <Row\n          gutter={24}\n          className='mb-3'\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <Col span={10}>\n            <Form.Item\n              name={'propertyGroup'}\n              label={t('property.group')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchPropertyGroup}\n                placeholder={t('select.group')}\n                onSelect={(item) => {\n                  setGroupSelected(item);\n                  form.setFieldsValue({ propertyValue: [] });\n                }}\n                onClear={() => {\n                  setGroupSelected(null);\n                  form.setFieldsValue({ propertyValue: [] });\n                }}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={10}>\n            <Form.Item\n              name={'propertyValue'}\n              label={t('property.value')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchPropertyValue}\n                placeholder={t('select.value')}\n                refetchOptions={true}\n                disabled={!groupSelected}\n                mode='multiple'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={4}>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('save')}\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <Table\n        scroll={{ x: true }}\n        columns={column}\n        dataSource={dataSource}\n        pagination={false}\n        rowKey={(record) => record.id}\n        loading={isFetching}\n      />\n      <Space className='mt-4'>\n        <Button onClick={prev}>{t('prev')}</Button>\n        <Button type='primary' onClick={next}>\n          {t('next')}\n        </Button>\n      </Space>\n    </Card>\n  );\n};\n\nexport default ProductProperty;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-list.js",["6411","6412","6413","6414"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Card, Image, Space, Switch, Table, Tabs, Tag } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ClearOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport { fetchSellerCategory } from 'redux/slices/category';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport sellerCategory from 'services/seller/category';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport FilterColumns from 'components/filter-column';\nimport formatSortType from 'helpers/formatSortType';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport SearchInput from 'components/search-input';\nimport DeleteButton from 'components/delete-button';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport { export_url } from 'configs/app-global';\nimport { useLocation } from 'react-router-dom';\n\nconst { TabPane } = Tabs;\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst roles = ['all', 'pending', 'published', 'unpublished'];\n\nconst CategoryList = ({\n  parentId,\n  type = 'main',\n  parent_type,\n  isRefetch = false,\n  handleAddAction = () => {},\n  activeTab = 'list',\n}) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const location = useLocation();\n  console.log('location => ', location?.pathname);\n  const [role, setRole] = useState('all');\n  const immutable = activeMenu.data?.role || role;\n  const { uuid: parentUuid } = useParams();\n  const [active, setActive] = useState(null);\n\n  function goToEdit(row) {\n    dispatch(\n      addMenu({\n        url: `seller/category/${row.uuid}`,\n        id: parentId ? 'category_sub_edit' : 'category_edit',\n        name: parentId ? t('edit.sub.category') : t('edit.category'),\n      }),\n    );\n    navigate(`/seller/category/${row.uuid}`, {\n      state: { parentId, parentUuid },\n    });\n  }\n  function goToShow(row) {\n    dispatch(\n      addMenu({\n        url: `seller/category/show/${row.uuid}`,\n        id: 'category_show',\n        name: t('category.show'),\n      }),\n    );\n    navigate(`/seller/category/show/${row.uuid}`, {\n      state: { parentId, parentUuid },\n    });\n  }\n\n  const goToAddCategory = () => {\n    if (parentId) {\n      handleAddAction(parentId);\n    } else {\n      dispatch(\n        addMenu({\n          id: parentId ? 'sub-category-add' : 'category-add',\n          url: 'seller/category/add',\n          name: parentId ? t('add.sub.category') : t('add.category'),\n        }),\n      );\n      navigate('/seller/category/add', { state: { parentId, parentUuid } });\n    }\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        url: `catalog/categories/import`,\n        id: parentId ? 'sub_category_import' : 'category_import',\n        name: parentId ? t('import.sub.category') : t('import.category'),\n      }),\n    );\n    navigate(`/catalog/categories/import`, { state: { parentId, parentUuid } });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      key: 'id',\n      is_show: true,\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            src={img || 'https://via.placeholder.com/150'}\n            alt='img_gallery'\n            width={100}\n            className='rounded'\n            preview\n            placeholder\n            key={img + row.id}\n          />\n        );\n      },\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EyeOutlined />} onClick={() => goToShow(row)} />\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n                setText(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [id, setId] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n\n  const { categories, meta, loading } = useSelector(\n    (state) => state.category,\n    shallowEqual,\n  );\n\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    perPage: activeMenu?.data?.perPage || 10,\n    page: data?.page || 1,\n    status: immutable === 'all' ? undefined : immutable,\n    type: type,\n    parent_id: parentId,\n  };\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    sellerCategory\n      .delete(params)\n      .then(() => {\n        dispatch(fetchSellerCategory(paramsData));\n        toast.success(t('successfully.deleted'));\n      })\n      .finally(() => {\n        setIsModalVisible(false);\n        setLoadingBtn(false);\n        setText(null);\n        setId(null);\n      });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && activeTab === 'list') {\n      dispatch(fetchSellerCategory(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  // useEffect(() => {\n  //   if (isRefetch) dispatch(fetchSellerCategory(paramsData));\n  // }, [isRefetch]);\n\n  useEffect(() => {\n    if (\n      location?.pathname === '/seller/categories' &&\n      activeTab === 'list' &&\n      !activeMenu.refetch\n    ) {\n      dispatch(fetchSellerCategory(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.data, type, parentId, activeTab]);\n  // console.log('activeTab', activeTab, activeMenu.data);\n  //\n  // useDidUpdate(() => {\n  //   if (activeTab === 'list') {\n  //     dispatch(fetchSellerCategory(paramsData));\n  //   }\n  // }, [activeMenu.data, type, parentId, activeTab]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const excelExport = () => {\n    setDownloading(true);\n    sellerCategory\n      .export(paramsData)\n      .then((res) => {\n        window.location.href = export_url + res.data.file_name;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const handleClear = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: undefined,\n      }),\n    );\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    sellerCategory\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchSellerCategory(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <>\n      {!parentId && (\n        <Card className='p-0'>\n          <Space wrap size={[14, 20]}>\n            <SearchInput\n              placeholder={t('search')}\n              className='w-25'\n              handleChange={(e) => {\n                handleFilter({ search: e });\n              }}\n              defaultValue={activeMenu.data?.search}\n              resetSearch={!activeMenu.data?.search}\n              style={{ minWidth: 300 }}\n            />\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n\n            <Button style={{ minWidth: 150 }} onClick={goToImport}>\n              <CgImport className='mr-2' />\n              {t('import')}\n            </Button>\n            <Button\n              style={{ minWidth: 150 }}\n              loading={downloading}\n              onClick={excelExport}\n            >\n              <CgExport className='mr-2' />\n              {t('export')}\n            </Button>\n            {parent_type !== 'child' && (\n              <Button\n                type='primary'\n                icon={<PlusCircleOutlined />}\n                onClick={goToAddCategory}\n              >\n                {t('add.category')}\n              </Button>\n            )}\n            <Button\n              icon={<ClearOutlined />}\n              onClick={handleClear}\n              disabled={!activeMenu.data}\n              style={{ minWidth: 100 }}\n            />\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        </Card>\n      )}\n\n      <Card title={parentId ? t('sub.category') : t('categories')}>\n        {parentId && (\n          <Space wrap size={[14, 20]}>\n            <SearchInput\n              placeholder={t('search')}\n              className='w-25'\n              handleChange={(e) => {\n                handleFilter({ search: e });\n              }}\n              defaultValue={activeMenu.data?.search}\n              resetSearch={!activeMenu.data?.search}\n              style={{ minWidth: 300 }}\n            />\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n\n            <Button style={{ minWidth: 150 }} onClick={goToImport}>\n              <CgImport className='mr-2' />\n              {t('import')}\n            </Button>\n            <Button\n              style={{ minWidth: 150 }}\n              loading={downloading}\n              onClick={excelExport}\n            >\n              <CgExport className='mr-2' />\n              {t('export')}\n            </Button>\n            {parent_type !== 'child' && (\n              <Button\n                type='primary'\n                icon={<PlusCircleOutlined />}\n                onClick={goToAddCategory}\n              >\n                {t('add.category')}\n              </Button>\n            )}\n            <Button\n              icon={<ClearOutlined />}\n              onClick={handleClear}\n              disabled={!activeMenu.data}\n              style={{ minWidth: 100 }}\n            />\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        )}\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n\n        <Table\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={categories}\n          pagination={{\n            pageSize: activeMenu.data?.perPage || 10,\n            page: data?.page || 1,\n            total: meta.total,\n            defaultCurrent: data?.page,\n            current: activeMenu.data?.page,\n          }}\n          rowKey={(record) => record.id}\n          onChange={onChangePagination}\n          loading={loading}\n        />\n      </Card>\n\n      <CustomModal\n        click={active ? handleActive : categoryDelete}\n        text={\n          active\n            ? t('set.active.category')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        setText={setId}\n        loading={loadingBtn}\n      />\n    </>\n  );\n};\n\nexport default CategoryList;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-finish.js",["6415","6416"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Card, Col, Descriptions, Row, Space, Spin } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { removeFromMenu } from '../../../redux/slices/menu';\nimport { fetchSellerProducts } from '../../../redux/slices/product';\nimport { useTranslation } from 'react-i18next';\nimport productService from '../../../services/seller/product';\nimport { IMG_URL } from '../../../configs/app-global';\nimport requestModelsService from 'services/seller/request-models';\nimport { toast } from 'react-toastify';\n\nconst ProductFinish = ({ prev, isRequest, mode }) => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const dispatch = useDispatch();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(null);\n  const { uuid } = useParams();\n  const { params } = useSelector((state) => state.product, shallowEqual);\n  const [buttonLoadding, setButtonLoading] = useState(false);\n  const { settings } = useSelector((state) => state.globalSettings);\n\n  function finish() {\n    const nextUrl = 'seller/products';\n    const body = {\n      ...params,\n    };\n    if (isRequest && activeMenu.data) {\n      setButtonLoading(true);\n      const requestBody = {\n        id: activeMenu.data.model_id,\n        type: 'product',\n        data: activeMenu.data,\n      };\n      requestModelsService\n        .requestChangeUpdate(activeMenu.data.request_id, requestBody)\n        .then(() => {\n          navigate(`/${nextUrl}`, { state: { tab: 'request' } });\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchSellerProducts(body));\n        })\n        .finally(() => {\n          setButtonLoading(false);\n        });\n      return;\n    }\n    if (state && mode === 'edit' && settings?.product_auto_approve === '0') {\n      setButtonLoading(true);\n      const requestBody = {\n        type: 'product',\n        id: activeMenu.data.product_id,\n        data: state,\n      };\n      requestModelsService\n        .requestChange(requestBody)\n        .then(() => {\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchSellerProducts(body));\n          navigate(`/${nextUrl}`, { state: { tab: 'request' } });\n        })\n        .finally(() => {\n          setButtonLoading(false);\n        });\n      return;\n    }\n    dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n    dispatch(fetchSellerProducts(body));\n    navigate(`/${nextUrl}`);\n  }\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const fetchProduct = useCallback(\n    (uuid) => {\n      setLoading(true);\n      productService\n        .getById(uuid)\n        .then((res) => {\n          const data = {\n            ...res.data,\n            ...getLanguageFields(res.data),\n            properties: res.data.properties.map((item, index) => ({\n              id: index,\n              [`key[${item.locale}]`]: item.key,\n              [`value[${item.locale}]`]: item.value,\n            })),\n            translation: undefined,\n            translations: undefined,\n          };\n          setData(data);\n        })\n        .finally(() => setLoading(false));\n    },\n    [uuid]\n  );\n\n  useEffect(() => {\n    if (!isRequest) {\n      fetchProduct(uuid);\n    }\n  }, [isRequest, uuid]);\n\n  const productInfo = isRequest ? activeMenu.data : state;\n\n  return !loading ? (\n    <Card>\n      {state || isRequest ? (\n        <>\n          <Descriptions title={t('product.info')} bordered>\n            <Descriptions.Item\n              label={`${t('title')} (${defaultLang})`}\n              span={3}\n            >\n              {productInfo[`title[${defaultLang}]`]}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={`${t('description')} (${defaultLang})`}\n              span={3}\n            >\n              {productInfo[`description[${defaultLang}]`]}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('shop')} span={1.5}>\n              {productInfo?.shop?.translation.title}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('category')} span={1.5}>\n              {productInfo?.category?.label}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('brand')} span={1.5}>\n              {productInfo?.brand?.label}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('unit')} span={1.5}>\n              {productInfo?.unit?.label}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('images')} span={3}>\n              <Row gutter={12}>\n                {productInfo?.images\n                  ?.filter((item) => !item.isVideo)\n                  .map((item, idx) => (\n                    <Col key={'image' + idx}>\n                      <img width={80} alt='product' src={item.url} />\n                    </Col>\n                  ))}\n              </Row>\n            </Descriptions.Item>\n            <Descriptions.Item label={t('tax')}>\n              {productInfo?.tax}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('min.quantity')}>\n              {productInfo?.min_qty}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('max.quantity')}>\n              {productInfo?.max_qty}\n            </Descriptions.Item>\n          </Descriptions>\n          {productInfo?.stocks.map((item, idx) => {\n            if (!item) {\n              return '';\n            }\n            return (\n              <Descriptions key={'desc' + idx} bordered className='mt-4'>\n                <Descriptions.Item label={t('price')} span={2}>\n                  {item.price}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('quantity')} span={2}>\n                  {item.quantity}\n                </Descriptions.Item>\n                {item?.ids?.map((extra, idx) => (\n                  <Descriptions.Item\n                    key={'extra' + idx}\n                    label={productInfo?.extras[idx].label}\n                  >\n                    {extra?.label}\n                  </Descriptions.Item>\n                ))}\n              </Descriptions>\n            );\n          })}\n        </>\n      ) : (\n        <>\n          <Descriptions title={t('product.info')} bordered>\n            <Descriptions.Item\n              label={`${t('title')} (${defaultLang})`}\n              span={3}\n            >\n              {data[`title[${defaultLang}]`]}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label={`${t('description')} (${defaultLang})`}\n              span={3}\n            >\n              {data[`description[${defaultLang}]`]}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('shop')} span={1.5}>\n              {data.shop?.translation.title}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('category')} span={1.5}>\n              {data.category?.translation.title}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('brand')} span={1.5}>\n              {data.brand?.title}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('unit')} span={1.5}>\n              {data.unit?.translation.title}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('images')} span={3}>\n              <Row gutter={12}>\n                {data?.galleries\n                  ?.filter((item) => !item.preview)\n                  .map((item, idx) => (\n                    <Col key={'image' + idx}>\n                      <img width={80} alt='product' src={IMG_URL + item.path} />\n                    </Col>\n                  ))}\n              </Row>\n            </Descriptions.Item>\n            <Descriptions.Item label={t('tax')}>{data.tax}</Descriptions.Item>\n            <Descriptions.Item label={t('min.quantity')}>\n              {data.min_qty}\n            </Descriptions.Item>\n            <Descriptions.Item label={t('max.quantity')}>\n              {data.max_qty}\n            </Descriptions.Item>\n          </Descriptions>\n          {data.stocks?.map((item, idx) => {\n            if (!item) {\n              return '';\n            }\n            return (\n              <Descriptions key={'desc' + idx} bordered className='mt-4'>\n                <Descriptions.Item label={t('price')} span={2}>\n                  {item.price}\n                </Descriptions.Item>\n                <Descriptions.Item label={t('quantity')} span={2}>\n                  {item.quantity}\n                </Descriptions.Item>\n                {item.extras.map((extra, idx) => (\n                  <Descriptions.Item\n                    key={'extra' + idx}\n                    label={extra?.group?.translation?.title}\n                  >\n                    {extra?.value?.value}\n                  </Descriptions.Item>\n                ))}\n              </Descriptions>\n            );\n          })}\n        </>\n      )}\n      <div className='d-flex mt-4'>\n        <Space>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button loading={buttonLoadding} type='primary' onClick={finish}>\n            {t('finish')}\n          </Button>\n        </Space>\n      </div>\n    </Card>\n  ) : (\n    <div className='d-flex justify-content-center align-items-center'>\n      <Spin size='large' className='py-5' />\n    </div>\n  );\n};\n\nexport default ProductFinish;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-extras.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-stock.js",["6417","6418"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Space,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport extraService from 'services/seller/extras';\nimport productService from 'services/seller/product';\nimport { AsyncSelect } from 'components/async-select';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation, useParams } from 'react-router-dom';\nimport Loading from 'components/loading';\nimport cartesian from 'helpers/cartesian';\nimport { DeleteOutlined, DeploymentUnitOutlined } from '@ant-design/icons';\nimport { setMenuData } from 'redux/slices/menu';\nimport generateRandomNumbers from 'helpers/generateRandomNumbers';\n\nconst ProductStock = ({ prev, next, isRequest }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const [loading, setLoading] = useState(null);\n  const location = useLocation();\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const randomNumbersLength = 6;\n\n  const [loadingBtn, setLoadingBtn] = useState(null);\n  const [stockIds, setStockIds] = useState([]);\n\n  const onFinish = (values) => {\n    const { stocks } = values;\n\n    const delete_ids = stockIds.filter(\n      (stockId, index) =>\n        !!stocks[index]?.stock_id &&\n        !stocks.some((stock) => stock?.stock_id === stockId),\n    );\n    let extras;\n    const isProductWithExtras = !!activeMenu.data?.extras?.length;\n\n    if (isProductWithExtras) {\n      extras = stocks.map((item) => ({\n        galleries: item.galleries,\n        price: item.price,\n        quantity: item.quantity,\n        sku: item.sku,\n        ids: isRequest\n          ? activeMenu.data?.extras.map((_, idx) => item[`extras[${idx}]`])\n          : activeMenu.data?.extras.map(\n              (_, idx) => item[`extras[${idx}]`].value,\n            ),\n        addons: item.addons\n          ? isRequest\n            ? item.addons?.map((i) => i)\n            : item.addons?.map((i) => i.value)\n          : [],\n        stock_id: item.stock_id,\n      }));\n    } else {\n      extras = [\n        {\n          price: stocks[0].price,\n          quantity: stocks[0].quantity,\n          addons: stocks[0].addons\n            ? isRequest\n              ? stocks[0].addons.map((i) => i)\n              : stocks[0].addons.map((i) => i.value)\n            : [],\n          stock_id: stocks[0].stock_id,\n          sku: stocks[0].sku,\n          ids: [],\n        },\n      ];\n    }\n\n    if (isRequest) {\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: { ...activeMenu.data, stocks: extras, delete_ids },\n        }),\n      );\n      next();\n      return;\n    }\n\n    setLoadingBtn(true);\n    productService\n      .stocks(uuid, { extras, delete_ids })\n      .then(({ data: { stocks } }) => {\n        const newExtras = stocks?.flatMap((item) => item.extras);\n        const extraValues = newExtras.map((item) => ({\n          ...item.value,\n          stock_id: item.stock_id,\n          group_type: item.group.type,\n        }));\n        const extraGroup = newExtras?.find(\n          (item) => item.group.type === 'color',\n        );\n        const extrasCustom = {};\n        stocks.forEach((stock) => {\n          stock.extras.forEach((extra) => {\n            if (extra.extra_group_id in extrasCustom) {\n              if (\n                !extrasCustom[extra.extra_group_id].values?.some(\n                  (item) => item.value === extra.value?.id,\n                )\n              ) {\n                extrasCustom[extra.extra_group_id].values?.push({\n                  value: extra.value.id,\n                  label: extra.value?.value,\n                  stock_id: stock.id,\n                });\n              }\n            } else {\n              extrasCustom[extra.extra_group_id] = {\n                group: extra.group,\n                label: extra.group.translation?.title,\n                value: extra.extra_group_id,\n                id: extra.extra_group_id,\n                stock_id: stock.id,\n                values: [\n                  {\n                    value: extra.value.id,\n                    label: extra.value?.value,\n                    stock_id: stock.id,\n                  },\n                ],\n              };\n            }\n          });\n        });\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: {\n              ...activeMenu.data,\n              newExtras: [{ group: extraGroup?.group, values: extraValues }],\n              delete_ids,\n              stocks,\n              stocksData: stocks,\n              extras: Object.values(extrasCustom),\n            },\n          }),\n        );\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n  function fetchProduct(uuid) {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const additionalStocks = cartesian(\n          activeMenu?.data.extras?.map((extra) => extra.values || []),\n        );\n        const parsedAdditionalStocks = additionalStocks.map(\n          (additionalStock, i) => {\n            if (\n              additionalStock.every(\n                (itemValue) => typeof itemValue.stock_id !== 'undefined',\n              )\n            ) {\n              const selectedStock = res.data.stocks.find((stock) => {\n                return stock.extras.every((extra) => {\n                  return additionalStock.some(\n                    (addStock) => addStock.value === extra?.value?.id,\n                  );\n                });\n              });\n\n              return {\n                galleries: selectedStock?.galleries || [],\n                price: selectedStock?.price || 0,\n                quantity: selectedStock?.quantity || 0,\n                sku: activeMenu.data?.sku ?? selectedStock?.sku,\n                stock_id: selectedStock?.id,\n                tax: activeMenu?.data.tax || 0,\n                addons:\n                  selectedStock?.addons?.map((item) => ({\n                    label: item?.product?.translation?.title || item?.label,\n                    value: item?.product?.id || item?.value,\n                  })) || [],\n                ...Object.assign(\n                  {},\n                  ...additionalStock.map((extra, idx) => ({\n                    [`extras[${idx}]`]: {\n                      label: extra.label,\n                      value: extra.value,\n                    },\n                  })),\n                ),\n              };\n            }\n\n            return {\n              price: 0,\n              quantity: 0,\n              sku: activeMenu.data?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: [],\n              ...Object.assign(\n                {},\n                ...additionalStock.map((extra, idx) => ({\n                  [`extras[${idx}]`]: {\n                    label: extra.label,\n                    value: extra.value,\n                  },\n                })),\n              ),\n            };\n          },\n        );\n\n        let defaultStock = [];\n        if (additionalStocks.length === 0 && res.data.stocks?.length !== 0) {\n          const stockWithoutExtras = res.data.stocks?.at(0);\n          defaultStock = [\n            {\n              price: stockWithoutExtras?.price || 0,\n              quantity: stockWithoutExtras?.quantity || 0,\n              sku: activeMenu.data?.sku ?? stockWithoutExtras?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: stockWithoutExtras\n                ? stockWithoutExtras.addons?.map((item) => ({\n                    label: item?.product?.translation?.title || item?.label,\n                    value: item?.product?.id || item?.value,\n                  }))\n                : [],\n            },\n          ];\n        }\n        if (additionalStocks.length === 0 && res.data.stocks?.length === 0) {\n          defaultStock = [\n            {\n              price: undefined,\n              quantity: 0,\n              sku: activeMenu.data?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: [],\n            },\n          ];\n        }\n        const stocks = defaultStock.concat(parsedAdditionalStocks);\n        setStockIds(res.data.stocks.map((item) => item.id));\n        form.setFieldsValue({\n          stocks,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  function fetchExtra(id) {\n    return extraService.getGroupById(id).then((res) =>\n      res.data.extra_values.map((item) => ({\n        label: item.value,\n        value: item.id,\n      })),\n    );\n  }\n\n  const fetchAddons = (search) => {\n    const params = {\n      search,\n      addon: 1,\n      shop_id: myShop.id,\n    };\n    return productService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n      })),\n    );\n  };\n\n  useEffect(() => {\n    if (isRequest) {\n      if (location.state?.generate) {\n        const additionalStocks = cartesian(\n          activeMenu?.data.extras?.map((extra) => extra.values || []),\n        );\n\n        const parsedAdditionalStocks = additionalStocks.map((item) => {\n          if (\n            item.every((itemValue) => typeof itemValue.stock_id !== 'undefined')\n          ) {\n            const selectedStock = activeMenu.data?.actualStocks?.find(\n              (stock) => {\n                return stock.extras.every((extra) => {\n                  return item.some(\n                    (addStock) => addStock.value === extra?.value?.id,\n                  );\n                });\n              },\n            );\n            return {\n              galleries: selectedStock?.galleries || [],\n              price: selectedStock?.price || 0,\n              quantity: selectedStock?.quantity || 0,\n              stock_id: selectedStock?.id,\n              tax: activeMenu?.data.tax || 0,\n              addons:\n                selectedStock?.addons?.map((item) => ({\n                  label: item?.product?.translation?.title || item?.label,\n                  value: item?.product?.id || item?.value,\n                })) || [],\n              ...Object.assign(\n                {},\n                ...item.map((extra, idx) => ({\n                  [`extras[${idx}]`]: {\n                    label: extra.label,\n                    value: extra.value,\n                    group: activeMenu.data.extras[idx].label,\n                  },\n                })),\n              ),\n            };\n          }\n\n          return {\n            price: 0,\n            quantity: 0,\n            tax: activeMenu.data?.tax || 0,\n            sku: activeMenu?.data?.sku,\n            addons: [],\n            ...Object.assign(\n              {},\n              ...item.map((extra, idx) => ({\n                [`extras[${idx}]`]: {\n                  label: extra.label,\n                  value: extra.value,\n                },\n              })),\n            ),\n          };\n        });\n        let defaultStock = [];\n        if (\n          additionalStocks.length === 0 &&\n          activeMenu.data?.actualStocks?.length !== 0\n        ) {\n          const stockWithoutExtras = activeMenu.data.actualStocks?.at(0);\n          defaultStock = [\n            {\n              price: stockWithoutExtras?.price || 0,\n              quantity: stockWithoutExtras?.quantity || 0,\n              sku: stockWithoutExtras?.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: stockWithoutExtras\n                ? stockWithoutExtras.addons?.map((item) => ({\n                    label: item?.product?.translation?.title || item?.label,\n                    value: item?.product?.id || item?.value,\n                  }))\n                : [],\n            },\n          ];\n        }\n        if (\n          additionalStocks.length === 0 &&\n          activeMenu?.data?.actualStocks?.length === 0\n        ) {\n          defaultStock = [\n            {\n              price: undefined,\n              quantity: 0,\n              sku: activeMenu?.data.sku,\n              tax: activeMenu.data?.tax || 0,\n              addons: [],\n            },\n          ];\n        }\n        const stocks = defaultStock.concat(parsedAdditionalStocks);\n        setStockIds(activeMenu.data.actualStocks.map((item) => item.id));\n        form.setFieldsValue({\n          stocks,\n        });\n      } else {\n        const stocks = activeMenu.data.stocks?.map((stock) => ({\n          galleries: stock?.galleries || [],\n          price: stock.price,\n          quantity: stock.quantity,\n          tax: activeMenu.data.tax,\n          stock_id: stock.stock_id,\n          sku: stock.sku,\n          ...Object.assign(\n            {},\n            ...stock.ids.map((extra, idx) => ({\n              [`extras[${idx}]`]: {\n                label: extra.label,\n                value: extra.value,\n                group: extra.group,\n              },\n            })),\n          ),\n          addons: stock.addons,\n        }));\n        setStockIds(activeMenu.data?.delete_ids || []);\n\n        form.setFieldsValue({\n          stocks,\n        });\n      }\n    } else {\n      fetchProduct(uuid);\n    }\n  }, [isRequest, location.state?.generate]);\n\n  function handleSetAllPrice(value) {\n    const { stocks } = form.getFieldsValue();\n    form.setFieldsValue({ stocks: assignObject(stocks, 'price', value) });\n  }\n\n  function handleSetAllQuantity(value) {\n    const { stocks } = form.getFieldsValue();\n    form.setFieldsValue({ stocks: assignObject(stocks, 'quantity', value) });\n  }\n\n  const assignObject = (obj, key, value) =>\n    obj.map((item) => Object.assign(item, { [key]: value }));\n\n  const handleSetAllSku = (generateRandom, value) => {\n    const skuValue = generateRandom\n      ? generateRandomNumbers(randomNumbersLength)\n      : value;\n    const { stocks } = form.getFieldsValue();\n    form.setFieldsValue({\n      'set.all.sku': skuValue,\n      stock: assignObject(stocks, 'sku', skuValue),\n    });\n  };\n\n  return (\n    <Card\n      title={\n        activeMenu.data[`title[${defaultLang}]`]\n          ? `${activeMenu.data[`title[${defaultLang}]`]}`\n          : ''\n      }\n    >\n      {loading ? (\n        <Loading />\n      ) : (\n        <Form layout='vertical' form={form} onFinish={onFinish}>\n          <Divider />\n          <h2>{t('set.all.values')}</h2>\n          <Row gutter={12} align='middle'>\n            <Col span={5} style={{ marginRight: '10px' }}>\n              <Form.Item label={t('sku')} name='set.all.sku'>\n                <Input\n                  className='w-100'\n                  onChange={(e) => handleSetAllSku(false, e.target.value)}\n                />\n              </Form.Item>\n            </Col>\n            <Col>\n              <Form.Item label={' '} name='sku'>\n                <Button\n                  icon={<DeploymentUnitOutlined />}\n                  onClick={() => handleSetAllSku(true)}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('price')}\n                name={'set.all.price'}\n                rules={[\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('must.be.positive.number'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' onChange={handleSetAllPrice} />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('quantity')}\n                name={'set.all.quantity'}\n                rules={[\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('must.be.positive.number'),\n                  },\n                ]}\n              >\n                <InputNumber\n                  className='w-100'\n                  onChange={handleSetAllQuantity}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.List name='stocks'>\n            {(fields, { add, remove }) => {\n              return (\n                <div>\n                  {fields.map((field, index) => {\n                    return (\n                      <Row\n                        key={field.key}\n                        gutter={12}\n                        align='middle'\n                        style={{ flexWrap: 'nowrap', overflowX: 'auto' }}\n                        hidden={!activeMenu.data?.extras?.length && field.key}\n                      >\n                        {activeMenu.data?.extras?.map((item, idx) => (\n                          <Col key={'extra' + item.value}>\n                            <Form.Item\n                              label={item?.label}\n                              name={[index, `extras[${idx}]`]}\n                              rules={[\n                                { required: true, message: t('required') },\n                              ]}\n                            >\n                              <AsyncSelect\n                                fetchOptions={() => fetchExtra(item.value)}\n                                className='w-100'\n                                disabled\n                                style={{ minWidth: 200 }}\n                              />\n                            </Form.Item>\n                          </Col>\n                        ))}\n                        {/*<Col>*/}\n                        {/*  <Form.Item*/}\n                        {/*    label={t('addons')}*/}\n                        {/*    name={[index, 'addons']}*/}\n                        {/*    rules={[*/}\n                        {/*      { required: false, message: t('required') },*/}\n                        {/*    ]}*/}\n                        {/*  >*/}\n                        {/*    <DebounceSelect*/}\n                        {/*      mode='multiple'*/}\n                        {/*      style={{ minWidth: '300px' }}*/}\n                        {/*      fetchOptions={fetchAddons}*/}\n                        {/*      allowClear={true}*/}\n                        {/*    />*/}\n                        {/*  </Form.Item>*/}\n                        {/*</Col>*/}\n                        <Col>\n                          <Form.Item label={t('sku')} name={[index, 'sku']}>\n                            <Input\n                              className='w-100'\n                              style={{ minWidth: 200 }}\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          <Form.Item\n                            label={t('quantity')}\n                            name={[index, 'quantity']}\n                            rules={[{ required: true, message: t('required') }]}\n                          >\n                            <InputNumber\n                              min={0}\n                              className='w-100'\n                              style={{ minWidth: 200 }}\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          <Form.Item\n                            label={`${t('price')} (${defaultCurrency?.symbol})`}\n                            name={[index, 'price']}\n                            rules={[{ required: true, message: t('requried') }]}\n                          >\n                            <InputNumber\n                              min={0}\n                              className='w-100'\n                              style={{ minWidth: 200 }}\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          <Form.Item label={t('tax')} name={[index, 'tax']}>\n                            <InputNumber\n                              className='w-100'\n                              disabled\n                              style={{ minWidth: 200 }}\n                              addonAfter='%'\n                            />\n                          </Form.Item>\n                          <Form.Item\n                            hidden\n                            label={t('id')}\n                            name={[index, 'stock_id']}\n                          >\n                            <InputNumber\n                              className='w-100'\n                              disabled\n                              style={{ minWidth: 200 }}\n                              addonAfter='%'\n                            />\n                          </Form.Item>\n                        </Col>{' '}\n                        <Col>\n                          <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, nextValues) =>\n                              prevValues.stocks[field.name].price !==\n                              nextValues.stocks[field.name].price\n                            }\n                          >\n                            {({ getFieldValue }) => {\n                              const tax =\n                                getFieldValue(['stocks', field.name, 'tax']) ||\n                                0;\n\n                              const price = getFieldValue([\n                                'stocks',\n                                field.name,\n                                'price',\n                              ]);\n                              const totalPrice =\n                                tax === 0\n                                  ? price\n                                  : ((price * tax) / 100 + price).toFixed(2);\n                              return (\n                                <Form.Item\n                                  label={`${t('total.price')} (${\n                                    defaultCurrency?.symbol\n                                  })`}\n                                >\n                                  <InputNumber\n                                    min={1}\n                                    disabled\n                                    value={totalPrice}\n                                    className='w-100'\n                                    style={{ minWidth: 200 }}\n                                  />\n                                </Form.Item>\n                              );\n                            }}\n                          </Form.Item>\n                        </Col>\n                        <Col>\n                          {fields?.length > 1 ? (\n                            <Button\n                              type='primary'\n                              className='mt-2'\n                              danger\n                              icon={<DeleteOutlined />}\n                              onClick={() => {\n                                remove(field.name);\n                              }}\n                            />\n                          ) : (\n                            ''\n                          )}\n                        </Col>\n                      </Row>\n                    );\n                  })}\n                </div>\n              );\n            }}\n          </Form.List>\n          <Space className='mt-4'>\n            <Button onClick={prev}>{t('prev')}</Button>\n            <Button type='primary' htmlType='submit' loading={!!loadingBtn}>\n              {t('next')}\n            </Button>\n          </Space>\n        </Form>\n      )}\n    </Card>\n  );\n};\n\nexport default ProductStock;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-gallery.js",["6419"],[],"import React, { useEffect, useMemo, useState } from 'react';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { t } from 'i18next';\nimport { Badge, Button, Card, Col, Divider, Row, Space, Tooltip } from 'antd';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport MediaUploadExtrasImage from 'components/upload/upload-extras-image';\nimport productService from 'services/seller/product';\nconst text = 'In the process of internal desktop applications development';\n\nconst ProductGallery = ({ prev, next }) => {\n  const [fileList, setFileList] = useState([]);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { newExtras } = activeMenu?.data || {};\n  const filteredExtras = useMemo(\n    () => newExtras?.find((item) => item?.group?.type === 'color'),\n    [newExtras]\n  );\n\n  console.log(activeMenu?.data);\n  const uniqueData = Array.from(\n    new Set(filteredExtras?.values?.map((item) => item.value))\n  ).map((value) => {\n    return filteredExtras?.values?.find((item) => item.value === value);\n  });\n  const colorItems = uniqueData.filter((item) => item.group_type === 'color');\n\n  const createImage = (file) => {\n    return {\n      uid: file.path,\n      name: file.path,\n      status: 'done', // done, uploading, error\n      url: file.path,\n      created: true,\n    };\n  };\n  const setInitialState = () => {\n    const newArray = activeMenu.data.stocks.map(({ id, galleries }) => ({\n      id,\n      images: galleries?.map(createImage) || [],\n    }));\n    setFileList(newArray);\n  };\n\n  const updateStocks = () => {\n    if (!fileList.length) {\n      next();\n      return;\n    }\n    const array = fileList.map((item) => {\n      return {\n        ...item,\n        images: item.images.map((img) => img.name),\n      };\n    });\n    productService\n      .updateStocks({ data: array })\n      .then(() => {\n        next();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    setInitialState();\n  }, [activeMenu.data]);\n  console.log(uniqueData);\n  return (\n    <Card\n      title={\n        <Tooltip placement='topLeft' title={text}>\n          <Space>\n            {t('add.media.file')}\n            <QuestionCircleOutlined\n              style={{ fontSize: 16, cursor: 'pointer' }}\n            />\n          </Space>\n        </Tooltip>\n      }\n    >\n      <Row gutter={[24, 24]}>\n        {colorItems?.map(({ label, stock_id, value }) => (\n          <>\n            <Col span={24}>\n              <Space className='mb-4'>\n                <Badge\n                  color={label || value}\n                  className='extras-color-badge'\n                  text={`${label || value} - ${GetColorName(label || value)}`}\n                />\n              </Space>\n              <MediaUploadExtrasImage\n                id={stock_id}\n                fileList={fileList}\n                setFileList={setFileList}\n                type='stocks'\n              />\n            </Col>\n            <Divider />\n          </>\n        ))}\n      </Row>\n      <Space className='mt-4'>\n        <Button onClick={prev}>{t('prev')}</Button>\n        <Button type='primary' htmlType='submit' onClick={updateStocks}>\n          {t('next')}\n        </Button>\n      </Space>\n    </Card>\n  );\n};\n\nexport default ProductGallery;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/products-index.js",["6420","6421","6422","6423"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { DebounceSelect } from 'components/search';\nimport brandService from 'services/rest/brand';\nimport categoryService from 'services/rest/category';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport productService from 'services/seller/product';\nimport { addMenu, replaceMenu, setMenuData } from 'redux/slices/menu';\nimport unitService from 'services/seller/unit';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport MediaUpload from 'components/upload';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { DeploymentUnitOutlined, PlusOutlined } from '@ant-design/icons';\nimport { AsyncTreeSelect } from 'components/async-tree-select-category';\nimport VideoUploaderWithModal from 'components/video-uploader';\nimport generateRandomNumbers from 'helpers/generateRandomNumbers';\n\nconst ProductsIndex = ({ next, action_type = '', isRequest }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { uuid } = useParams();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [mediaList, setMediaList] = useState(\n    activeMenu?.data?.initialMediaFile || { images: [], previews: [] },\n  );\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const [fileList, setFileList] = useState(\n    activeMenu.data?.images?.filter((item) => !item.isVideo) || [],\n  );\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const randomNumbersLength = 6;\n\n  const { settings } = useSelector((state) => state.globalSettings);\n\n  function fetchUserBrandList(username) {\n    const params = {\n      search: username,\n    };\n    return brandService.getAll(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  function fetchUserCategoryList(username) {\n    const params = {\n      search: username ? username : null,\n      type: 'main',\n    };\n    return categoryService.paginateSelect(params).then((res) =>\n      res.data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n        key: item.id,\n        type: 'main',\n        disabled: item.children?.length,\n        children: item.children?.map((el) => ({\n          label: el.translation?.title,\n          value: el.id,\n          key: el.id,\n          type: 'sub_main',\n          disabled: el.children?.length,\n          children: el.children?.map((three) => ({\n            label: three.translation?.title,\n            value: three.id,\n            key: three.id,\n            type: 'child',\n          })),\n        })),\n      })),\n    );\n  }\n\n  function fetchUnits(search) {\n    const params = {\n      perPage: 10,\n      page: 1,\n      active: 1,\n      search,\n    };\n    return unitService.getAll(params).then(({ data }) => formatUnits(data));\n  }\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const params = {\n      ...values,\n      digital: values.digital ? 1 : 0,\n      active: Number(values.active),\n      brand_id: values.brand?.value,\n      category_id: values.category?.value || values.category,\n      shop_id: values.shop?.value,\n      unit_id: values.unit?.value,\n      images: undefined,\n      brand: values.brand,\n      category: values.category,\n      shop: values.shop,\n      unit: values.unit,\n      tax: values.tax || 0,\n      ...Object.assign(\n        {},\n        ...[...mediaList?.images, ...fileList].map((item, index) => ({\n          [`images[${index}]`]: item.name,\n        })),\n      ),\n      ...Object.assign(\n        {},\n        ...mediaList?.previews?.map((item, index) => ({\n          [`previews[${index}]`]: item.name,\n        })),\n      ),\n    };\n\n    if (isRequest) {\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: {\n            ...activeMenu.data,\n            ...values,\n            active: Number(values.active),\n            // vegetarian: Number(values.vegetarian),\n            brand_id: values.brand?.value,\n            category_id: values.category?.value || values.category,\n            shop_id: values.shop?.value,\n            unit_id: values.unit?.value,\n            // kcal: nutrition ? String(values.kcal) : undefined,\n            // carbs: nutrition ? String(values.carbs) : undefined,\n            // protein: nutrition ? String(values.protein) : undefined,\n            // fats: nutrition ? String(values.fats) : undefined,\n            tax: values.tax || 0,\n            title: {\n              ...Object.assign(\n                {},\n                ...languages.map((lang) => ({\n                  [lang.locale]: values[`title[${lang.locale}]`],\n                })),\n              ),\n            },\n            description: {\n              ...Object.assign(\n                {},\n                ...languages.map((lang) => ({\n                  [lang.locale]: values[`description[${lang.locale}]`],\n                })),\n              ),\n            },\n            ...Object.assign(\n              {},\n              ...fileList.map((item, index) => ({\n                [`images[${index}]`]: item.name,\n              })),\n            ),\n          },\n        }),\n      );\n      next();\n      return;\n    }\n\n    let isMainInfoChanged = false;\n    Object.entries(values).forEach(([key, value]) => {\n      if (key.startsWith('title') || key.startsWith('description')) {\n        if (activeMenu.data && activeMenu.data[key] !== value) {\n          isMainInfoChanged = true;\n        }\n      }\n      if (key === 'category') {\n        if (activeMenu.data?.category?.value !== value?.value) {\n          isMainInfoChanged = true;\n        }\n      }\n      if (key === 'brand') {\n        if (activeMenu.data?.brand?.value !== value?.value) {\n          isMainInfoChanged = true;\n        }\n      }\n      const changedFile = fileList?.find((file) => file.status === 'done');\n      if (\n        !!changedFile ||\n        fileList?.length !== activeMenu.data?.images?.length\n      ) {\n        isMainInfoChanged = true;\n      }\n    });\n    if (action_type === 'edit') {\n      const tempParams = { ...params };\n      tempParams.title = {\n        ...Object.assign(\n          {},\n          ...languages.map((lang) => ({\n            [lang.locale]: values[`title[${lang.locale}]`],\n          })),\n        ),\n      };\n      tempParams.description = {\n        ...Object.assign(\n          {},\n          ...languages.map((lang) => ({\n            [lang.locale]: values[`description[${lang.locale}]`],\n          })),\n        ),\n      };\n      setMenuData({\n        activeMenu,\n        data: tempParams,\n      });\n      if (isMainInfoChanged && settings?.product_auto_approve === '0') {\n        saveRequest(tempParams);\n        return;\n      }\n      productUpdate(values, params);\n    } else {\n      productCreate(values, params);\n    }\n  };\n\n  function saveRequest(values) {\n    navigate(`/seller/product/${uuid}?step=1`, { state: values });\n  }\n\n  const createMediaFile = (items) => {\n    const mediaObject = { images: [], previews: [] };\n    const previews = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.preview,\n        url: item.preview,\n      }));\n    const videos = items\n      .filter((item) => item.preview)\n      .map((item) => ({\n        uid: item.id,\n        name: item.path,\n        url: item.path,\n        isVideo: true,\n      }));\n    mediaObject.previews = previews;\n    mediaObject.images = videos;\n\n    return mediaObject;\n  };\n\n  function productCreate(values, params) {\n    productService\n      .create(params)\n      .then(({ data }) => {\n        dispatch(\n          replaceMenu({\n            id: `product-${data.uuid}`,\n            url: `seller/product/${data.uuid}`,\n            name: t('add.product'),\n            data: {\n              ...values,\n              initialMediaFile: createMediaFile(data.galleries),\n            },\n            refetch: false,\n          }),\n        );\n        navigate(`/seller/product/${data.uuid}?step=1`, {\n          state: { create: true },\n        });\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function productUpdate(values, params) {\n    params.product_id = activeMenu.data?.product_id;\n    productService\n      .update(uuid, params)\n      .then(() => {\n        dispatch(\n          setMenuData({\n            activeMenu,\n            data: { ...params, ...activeMenu?.data },\n          }),\n        );\n        next();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function formatUnits(data) {\n    return data.map((item) => ({\n      label: item?.translation?.title,\n      value: item?.id,\n      key: item?.id,\n    }));\n  }\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } }),\n      );\n    };\n  }, []);\n\n  const goToAddCategory = () => {\n    dispatch(\n      addMenu({\n        url: `seller/category/add`,\n        id: 'seller/category/add',\n        name: t('edit.category'),\n      }),\n    );\n    navigate(`/seller/category/add`);\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      initialValues={{\n        active: true,\n        vegetarian: true,\n        min_qty: 1,\n        max_qty: 1,\n        tax: 0,\n        interval: 1,\n        age_limit: 12,\n        digital: false,\n        ...activeMenu.data,\n      }}\n      onFinish={onFinish}\n    >\n      <Row gutter={12}>\n        <Col span={16}>\n          <Row>\n            <Col span={24}>\n              <Card title={t('basic.info')}>\n                <Row>\n                  <Col span={24}>\n                    {languages.map((item) => (\n                      <Form.Item\n                        key={'name' + item.id}\n                        label={t('name')}\n                        name={`title[${item.locale}]`}\n                        rules={[\n                          {\n                            required: item.locale === defaultLang,\n                            message: t('required'),\n                          },\n                        ]}\n                        hidden={item.locale !== defaultLang}\n                      >\n                        <Input />\n                      </Form.Item>\n                    ))}\n                  </Col>\n                  <Col span={24}>\n                    {languages.map((item) => (\n                      <Form.Item\n                        key={'description' + item.id}\n                        label={t('description')}\n                        name={`description[${item.locale}]`}\n                        rules={[\n                          {\n                            required: item.locale === defaultLang,\n                            message: t('required'),\n                          },\n                        ]}\n                        hidden={item.locale !== defaultLang}\n                      >\n                        <TextArea rows={3} />\n                      </Form.Item>\n                    ))}\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('pricing')}>\n                <Row gutter={12}>\n                  <Col span={8}>\n                    <Form.Item\n                      label={t('min.qty')}\n                      name='min_qty'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <InputNumber min={1} className='w-100' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={8}>\n                    <Form.Item\n                      label={t('max.qty')}\n                      name='max_qty'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <InputNumber min={1} className='w-100' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={8}>\n                    <Form.Item label={t('tax')} name='tax'>\n                      <InputNumber min={0} className='w-100' addonAfter='%' />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('additions')}>\n                <Row gutter={12}>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('age.limit')}\n                      name='age_limit'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <InputNumber min={1} className='w-100' />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('active')}\n                      name='active'\n                      valuePropName='checked'\n                    >\n                      <Switch />\n                    </Form.Item>\n                  </Col>\n                  <Col span={6}>\n                    <Form.Item\n                      label={t('digital')}\n                      name='digital'\n                      valuePropName='checked'\n                    >\n                      <Switch />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('video')}>\n                <VideoUploaderWithModal\n                  form={form}\n                  mediaList={mediaList}\n                  setMediaList={setMediaList}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={8}>\n          <Row>\n            <Col span={24}>\n              <Card title={t('organization')}>\n                <Row>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('category')}\n                      name='category'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <AsyncTreeSelect\n                        fetchOptions={fetchUserCategoryList}\n                        dropdownRender={(menu) => (\n                          <>\n                            {menu}\n                            <div className='p-1'>\n                              <Button\n                                icon={<PlusOutlined />}\n                                className='w-100'\n                                onClick={goToAddCategory}\n                              >\n                                {t('add.category')}\n                              </Button>\n                            </div>\n                          </>\n                        )}\n                      />\n                    </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('brand')}\n                      name='brand'\n                      rules={[\n                        {\n                          required: false,\n                          message: t('required'),\n                        },\n                      ]}\n                    >\n                      <DebounceSelect fetchOptions={fetchUserBrandList} />\n                    </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('unit')}\n                      name='unit'\n                      rules={[{ required: true, message: t('required') }]}\n                    >\n                      <DebounceSelect fetchOptions={fetchUnits} />\n                    </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                    <Form.Item\n                      label={t('interval')}\n                      name='interval'\n                      rules={[\n                        { required: true, message: t('required') },\n                        {\n                          type: 'number',\n                          min: 1,\n                          message: t('should.be.more.than.1'),\n                        },\n                      ]}\n                    >\n                      <InputNumber className='w-100' />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col span={24}>\n              <Card title={t('media')}>\n                <Row>\n                  <Col span={24}>\n                    <Form.Item name='images'>\n                      <MediaUpload\n                        type='products'\n                        imageList={fileList}\n                        setImageList={setFileList}\n                        form={form}\n                        multiple={true}\n                      />\n                    </Form.Item>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n\n      <Button type='primary' htmlType='submit' loading={loadingBtn}>\n        {t('next')}\n      </Button>\n    </Form>\n  );\n};\n\nexport default ProductsIndex;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/wholesale.js",["6424"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Collapse,\n  Form,\n  InputNumber,\n  Row,\n  Space,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport productService from 'services/seller/product';\nimport { useParams } from 'react-router-dom';\nimport RiveResult from 'components/rive-result';\n\nconst { Panel } = Collapse;\n\nconst panelHeaderHTML = (stock) => {\n  return (\n    <div>\n      <p hidden={!stock?.extras?.length}>\n        {stock?.extras?.map((extra) =>\n          extra?.group?.type === 'color' ? (\n            <div\n              key={extra?.id}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                columnGap: '5px',\n              }}\n            >\n              {extra.group?.translation?.title}:{' '}\n              {GetColorName(extra?.value?.value)} (\n              <span\n                style={{\n                  display: 'block',\n                  width: '15px',\n                  height: '15px',\n                  backgroundColor: `${extra?.value?.value}`,\n                  borderRadius: '50%',\n                  border: '1px solid #ccc',\n                }}\n              />\n              )\n            </div>\n          ) : (\n            <div key={extra?.id}>\n              {extra.group?.translation?.title}: {extra.value?.value}\n            </div>\n          ),\n        )}\n      </p>\n    </div>\n  );\n};\n\nfunction Wholesale({ prev, next }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { uuid } = useParams();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const hasAnyExtras = activeMenu?.data?.stocksData?.some(\n    (stock) => !!stock?.extras?.length,\n  );\n\n  const stocks = activeMenu.data?.stocksData || [];\n  const minQuantity = !!activeMenu.data?.min_qty ? activeMenu.data?.min_qty : 1;\n  const maxQuantity = !!activeMenu.data?.max_qty ? activeMenu.data?.max_qty : 1;\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  const fetchProduct = () => {\n    setLoading(true);\n    productService\n      .getById(uuid)\n      .then((res) => {\n        const extras = res?.data?.stocks?.map((item) => ({\n          [item?.id]: item?.whole_sale_prices,\n        }));\n\n        form.setFieldsValue(Object.assign({}, ...extras));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchProduct();\n  }, []);\n\n  const onFinish = (values) => {\n    if (!hasAnyExtras) return next();\n\n    setLoadingBtn(true);\n    const extras = stocks?.map((stock) => {\n      const whole_sales = values?.[stock?.id] || [];\n\n      return {\n        ids: stock?.extras?.map((extra) => extra?.extra_value_id),\n        galleries: stock?.galleries,\n        price: stock?.price,\n        quantity: stock?.quantity,\n        stock_id: stock?.id,\n        whole_sales,\n      };\n    });\n\n    productService\n      .stocks(uuid, { extras })\n      .then(() => next())\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Card loading={loading}>\n      <Form form={form} layout='vertical' onFinish={onFinish}>\n        {hasAnyExtras ? (\n          <Collapse>\n            {stocks.map((stock) => {\n              const formListName = stock?.id;\n\n              return (\n                <Panel header={panelHeaderHTML(stock)} key={stock?.id}>\n                  <Form.List name={formListName} key={stock?.id}>\n                    {(fields, { add, remove }) => (\n                      <>\n                        {fields.map(({ key, name, ...restField }, index) => {\n                          const prevMaxQuantity = form.getFieldValue([\n                            formListName,\n                            fields[index - 1]?.name,\n                            'max_quantity',\n                          ]);\n\n                          return (\n                            <Row gutter={12} key={index}>\n                              <Col span={7}>\n                                <Form.Item\n                                  {...restField}\n                                  label={t('min.quantity')}\n                                  name={[name, 'min_quantity']}\n                                  rules={[\n                                    { required: true, message: t('required') },\n                                    {\n                                      validator(_, value) {\n                                        if (\n                                          !!value &&\n                                          (value <= prevMaxQuantity ||\n                                            value > maxQuantity ||\n                                            value <= 0)\n                                        ) {\n                                          return Promise.reject(\n                                            new Error(\n                                              `${t('must.be.between')} ${\n                                                prevMaxQuantity || minQuantity\n                                              } ${t('and')} ${maxQuantity}`,\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <InputNumber\n                                    className='w-100'\n                                    step={activeMenu.data?.interval || 1}\n                                    // min={minQuantity}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col span={7}>\n                                <Form.Item\n                                  {...restField}\n                                  label={t('max.quantity')}\n                                  name={[name, 'max_quantity']}\n                                  rules={[\n                                    { required: true, message: t('required') },\n                                    {\n                                      validator(_, value) {\n                                        const minQuantityInput =\n                                          form.getFieldValue([\n                                            formListName,\n                                            name,\n                                            'min_quantity',\n                                          ]);\n\n                                        if (\n                                          !!value &&\n                                          (value <= minQuantityInput ||\n                                            value > maxQuantity ||\n                                            value <= 0)\n                                        ) {\n                                          return Promise.reject(\n                                            new Error(\n                                              `${t('must.be.between')} ${\n                                                minQuantityInput || minQuantity\n                                              } ${t('and')} ${maxQuantity}`,\n                                            ),\n                                          );\n                                        }\n                                        return Promise.resolve();\n                                      },\n                                    },\n                                  ]}\n                                >\n                                  <InputNumber\n                                    className='w-100'\n                                    step={activeMenu.data?.interval || 1}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col span={8}>\n                                <Form.Item\n                                  {...restField}\n                                  label={t('price')}\n                                  name={[name, 'price']}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: t('required'),\n                                    },\n                                    {\n                                      type: 'number',\n                                      min: 0,\n                                      message: t('must.be.positive.number'),\n                                    },\n                                    {\n                                      type: 'number',\n                                      max: 999999999999999,\n                                      message: t('max.15.digits'),\n                                    },\n                                  ]}\n                                >\n                                  <InputNumber\n                                    className='w-100'\n                                    parser={(value) => parseInt(value, 10)}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col\n                                span={2}\n                                style={{\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  justifyContent: 'end',\n                                }}\n                              >\n                                <Button\n                                  onClick={() => {\n                                    remove(name);\n                                  }}\n                                  danger\n                                  type='primary'\n                                  icon={<DeleteOutlined />}\n                                  disabled={fields?.length !== index + 1}\n                                />\n                              </Col>\n                            </Row>\n                          );\n                        })}\n                        <Form.Item>\n                          <Button\n                            onClick={() => {\n                              add();\n                            }}\n                            type='dashed'\n                            icon={<PlusOutlined />}\n                            block\n                          >\n                            {t('add')}\n                          </Button>\n                        </Form.Item>\n                      </>\n                    )}\n                  </Form.List>\n                </Panel>\n              );\n            })}\n          </Collapse>\n        ) : (\n          <RiveResult />\n        )}\n        <Space className='mt-4'>\n          <Button onClick={prev}>{t('prev')}</Button>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('next')}\n          </Button>\n        </Space>\n      </Form>\n    </Card>\n  );\n}\n\nexport default Wholesale;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-request.js",["6425"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Card, Image, Table, Button, Space, Tag, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport getImage from '../../../helpers/getImage';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  MessageOutlined,\n} from '@ant-design/icons';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport CustomModal from '../../../components/modal';\nimport { Context } from '../../../context/context';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport FilterColumns from '../../../components/filter-column';\nimport formatSortType from '../../../helpers/formatSortType';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport { fetchSellerRequestModels } from 'redux/slices/request-models';\nimport { HiArrowNarrowRight } from 'react-icons/hi';\nimport requestModelsService from 'services/seller/request-models';\n\nconst body = {\n  type: 'product',\n};\n\nexport default function SellerProductRequest({ parentId }) {\n  const { t } = useTranslation();\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isVisibleMsgModal, setIsVisibleMsgModal] = useState(false);\n  const [modalText, setModalText] = useState('');\n  const [id, setId] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    data: requests,\n    meta,\n    loading,\n    params,\n  } = useSelector((state) => state.requestModels, shallowEqual);\n  const data = activeMenu.data;\n  const { uuid: parentUuid } = useParams();\n\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    parent_id: parentId,\n    type: 'product',\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/product-request/${row.id}`,\n        id: 'product_request_edit',\n        name: t('product.request.edit'),\n      })\n    );\n    navigate(`/seller/product-request/${row.id}`, {\n      state: { parentId, parentUuid },\n    });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          {row.model?.translation.title} <HiArrowNarrowRight />{' '}\n          {row.data[`title[${row.model?.translation?.locale}]`]}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Image\n              src={getImage(row.model?.img)}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n            <HiArrowNarrowRight />\n            <Image\n              src={getImage(\n                row.data.images?.at(0)?.url || row.data.images?.at(0)\n              )}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, row) => (\n        <div>\n          {status === 'pending' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row?.status === 'canceled' && row?.status_note && (\n              <Button\n                icon={<MessageOutlined />}\n                onClick={() => {\n                  setIsVisibleMsgModal(true)\n                  setModalText(row.status_note);\n                }}\n              />\n            )}\n\n            <Button icon={<EditOutlined />} onClick={() => goToEdit(row)} />\n            <Button\n              danger\n              icon={<DeleteOutlined />}\n              type='primary'\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  useEffect(() => {\n    dispatch(fetchSellerRequestModels(paramsData));\n    dispatch(disableRefetch(activeMenu));\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerRequestModels(paramsData));\n  }, [activeMenu.data]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      })\n    );\n  }\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        }))\n      ),\n    };\n    requestModelsService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchSellerRequestModels(body));\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  return (\n    <Card\n      title={t('requests')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={requests}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.key}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n\n      <CustomModal\n        click={categoryDelete}\n        text={t('delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n\n      <Modal title=\"Reject message\" closable={false} visible={isVisibleMsgModal} footer={null} centered>\n        <p>{modalText}</p>\n        <div className='d-flex justify-content-end'>\n          <Button\n            type='primary'\n            className='mr-2'\n            onClick={() => setIsVisibleMsgModal(false)}\n          \n          >\n            Close\n          </Button>\n        </div>\n      </Modal>\n\n \n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/product-list.js",["6426"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  MessageOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport {\n  Button,\n  Table,\n  Image,\n  Card,\n  Space,\n  Tag,\n  Tabs,\n  Switch,\n  Modal,\n} from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { export_url, IMG_URL } from '../../../configs/app-global';\nimport { Context } from '../../../context/context';\nimport CustomModal from '../../../components/modal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addMenu,\n  disableRefetch,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport productService from '../../../services/seller/product';\nimport { fetchSellerProducts } from '../../../redux/slices/product';\nimport { useTranslation } from 'react-i18next';\nimport formatSortType from '../../../helpers/formatSortType';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport SearchInput from '../../../components/search-input';\nimport { DebounceSelect } from '../../../components/search';\nimport brandService from '../../../services/rest/brand';\nimport categoryService from '../../../services/rest/category';\nimport DeleteButton from '../../../components/delete-button';\nimport FilterColumns from '../../../components/filter-column';\nimport { CgExport, CgImport } from 'react-icons/cg';\nimport RiveResult from '../../../components/rive-result';\n\nconst { TabPane } = Tabs;\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\nconst roles = ['all', 'published', 'pending', 'unpublished'];\n\nconst ProductList = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [active, setActive] = useState(null);\n  const [role, setRole] = useState('all');\n  const [id, setId] = useState(null);\n  const [isVisibleMsgModal, setIsVisibleMsgModal] = useState(false);\n  const [modalText, setModalText] = useState('');\n  const clearData = () => {\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: null,\n      }),\n    );\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        id: 'product-edit',\n        url: `seller/product/${row.uuid}`,\n        name: t('edit.product'),\n      }),\n    );\n    clearData();\n    navigate(`/seller/product/${row.uuid}`);\n  };\n\n  const goToClone = (row) => {\n    dispatch(\n      addMenu({\n        id: `product-clone`,\n        url: `seller/product-clone/${row.uuid}`,\n        name: t('clone.product'),\n      }),\n    );\n    clearData();\n    navigate(`/seller/product-clone/${row.uuid}`);\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('id'),\n      dataIndex: 'id',\n      is_show: true,\n      sorter: (a, b) => a.id - b.id,\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      is_show: true,\n      render: (img, row) => {\n        return (\n          <Image\n            width={100}\n            src={IMG_URL + img}\n            placeholder\n            style={{ borderRadius: 4 }}\n          />\n        );\n      },\n    },\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      is_show: true,\n    },\n    {\n      title: t('status'),\n      is_show: true,\n      dataIndex: 'status',\n      key: 'status',\n      render: (status) => (\n        <div>\n          {status === 'published' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'unpublished' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('translations'),\n      dataIndex: 'locales',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row.locales?.map((item, index) => (\n              <Tag className='text-uppercase' color={[colors[index]]}>\n                {item}\n              </Tag>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('shop'),\n      dataIndex: 'shop_id',\n      is_show: true,\n      render: (_, row) => {\n        return row?.shop?.translation?.title;\n      },\n    },\n    {\n      title: t('category'),\n      dataIndex: 'category_name',\n      is_show: true,\n    },\n    {\n      title: t('active'),\n      dataIndex: 'active',\n      is_show: true,\n      render: (active, row) => {\n        return (\n          <Switch\n            onChange={() => {\n              setIsModalVisible(true);\n              setId(row.uuid);\n              setActive(true);\n            }}\n            checked={active}\n          />\n        );\n      },\n    },\n    {\n      title: t('options'),\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            {row?.status === 'unpublished' && row?.status_note && (\n              <Button\n                icon={<MessageOutlined />}\n                onClick={() => {\n                  setIsVisibleMsgModal(true);\n                  setModalText(row.status_note);\n                }}\n              />\n            )}\n            <Button\n              type='primary'\n              icon={<EditOutlined />}\n              onClick={() => goToEdit(row)}\n            />\n            <Button icon={<CopyOutlined />} onClick={() => goToClone(row)} />\n            <DeleteButton\n              icon={<DeleteOutlined />}\n              onClick={() => {\n                setIsModalVisible(true);\n                setId([row.id]);\n                setText(true);\n                setActive(false);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const [text, setText] = useState(null);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { products, meta, loading, params } = useSelector(\n    (state) => state.product,\n    shallowEqual,\n  );\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const immutable = activeMenu.data?.role || role;\n  const data = activeMenu.data;\n  const paramsData = {\n    search: data?.search,\n    brand_id: data?.brand?.value,\n    category_id: data?.category?.value,\n    status: immutable === 'all' ? undefined : immutable,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n  };\n\n  const productDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    productService\n      .delete(params)\n      .then(() => {\n        setIsModalVisible(false);\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchSellerProducts(params));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleActive = () => {\n    setLoadingBtn(true);\n    productService\n      .setActive(id)\n      .then(() => {\n        setIsModalVisible(false);\n        dispatch(fetchSellerProducts(paramsData));\n        toast.success(t('successfully.updated'));\n        setActive(true);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  useDidUpdate(() => {\n    dispatch(fetchSellerProducts(paramsData));\n  }, [activeMenu.data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      dispatch(fetchSellerProducts(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  const goToAddProduct = () => {\n    dispatch(\n      addMenu({\n        id: 'product-add',\n        url: 'seller/product/add',\n        name: t('add.product'),\n      }),\n    );\n    clearData();\n    navigate('/seller/product/add');\n  };\n\n  const goToImport = () => {\n    dispatch(\n      addMenu({\n        id: 'seller-product-import',\n        url: `seller/product/import`,\n        name: t('product.import'),\n      }),\n    );\n    navigate(`/seller/product/import`);\n  };\n\n  async function fetchBrands(search) {\n    const params = {\n      shop_id: myShop?.id,\n      search,\n    };\n    return brandService.getAll(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  async function fetchCategories(search) {\n    const params = {\n      // shop_id: myShop?.id,\n      search: search.length === 0 ? null : search,\n      type: 'main',\n      perPage: 5,\n    };\n    return categoryService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      })),\n    );\n  }\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  const excelExport = () => {\n    setDownloading(true);\n    const body = {\n      shop_id: myShop?.id,\n      category_id: activeMenu?.data?.category?.value,\n      brand_id: activeMenu?.data?.brand?.value,\n    };\n    productService\n      .export(body)\n      .then((res) => {\n        const body = export_url + res.data.file_name;\n        window.location.href = body;\n      })\n      .finally(() => setDownloading(false));\n  };\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const allDelete = () => {\n    if (id === null || id.length === 0) {\n      toast.warning(t('select.the.product'));\n    } else {\n      setIsModalVisible(true);\n      setText(false);\n    }\n  };\n  return (\n    <React.Fragment>\n      <Card\n        className='p-0'\n        title={t('product.list')}\n        extra={\n          <Space wrap>\n            <DebounceSelect\n              placeholder={t('select.category')}\n              fetchOptions={fetchCategories}\n              style={{ minWidth: 150 }}\n              onChange={(e) => handleFilter({ category: e })}\n              value={activeMenu.data?.category}\n            />\n            <DebounceSelect\n              placeholder={t('select.brand')}\n              fetchOptions={fetchBrands}\n              style={{ minWidth: 150 }}\n              onChange={(e) => handleFilter({ brand: e })}\n              value={activeMenu.data?.brand}\n            />\n            <Button\n              icon={<PlusCircleOutlined />}\n              type='primary'\n              onClick={goToAddProduct}\n            >\n              {t('add.product')}\n            </Button>\n            <FilterColumns columns={columns} setColumns={setColumns} />\n          </Space>\n        }\n      >\n        <div className='d-flex justify-content-between'>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(e) => handleFilter({ search: e })}\n            defaultValue={activeMenu.data?.search}\n            resetSearch={!activeMenu.data?.search}\n            className={'w-25'}\n          />\n\n          <Space wrap>\n            <Button onClick={goToImport}>\n              <CgImport className='mr-2' />\n              {t('import')}\n            </Button>\n            <Button loading={downloading} onClick={excelExport}>\n              <CgExport className='mr-2' />\n              {t('export')}\n            </Button>\n\n            <DeleteButton size='' onClick={allDelete}>\n              {t('delete.selected')}\n            </DeleteButton>\n          </Space>\n        </div>\n      </Card>\n      <Card>\n        <Tabs\n          className='mt-3'\n          activeKey={immutable}\n          onChange={(key) => {\n            handleFilter({ role: key, page: 1 });\n            setRole(key);\n          }}\n          type='card'\n        >\n          {roles.map((item) => (\n            <TabPane tab={t(item)} key={item} />\n          ))}\n        </Tabs>\n        <Table\n          locale={{\n            emptyText: <RiveResult />,\n          }}\n          scroll={{ x: true }}\n          rowSelection={rowSelection}\n          loading={loading}\n          columns={columns?.filter((item) => item.is_show)}\n          dataSource={products}\n          pagination={{\n            pageSize: params.perPage,\n            page: activeMenu.data?.page || 1,\n            total: meta.total,\n            defaultCurrent: activeMenu.data?.page,\n            current: activeMenu.data?.page,\n          }}\n          onChange={onChangePagination}\n          rowKey={(record) => record.id}\n        />\n      </Card>\n      <CustomModal\n        click={active ? handleActive : productDelete}\n        text={\n          active\n            ? t('set.active.product')\n            : text\n            ? t('delete')\n            : t('all.delete')\n        }\n        loading={loadingBtn}\n        setText={setId}\n        setActive={setActive}\n      />\n      <Modal\n        title='Reject message'\n        closable={false}\n        visible={isVisibleMsgModal}\n        footer={null}\n        centered\n      >\n        <p>{modalText}</p>\n        <div className='d-flex justify-content-end'>\n          <Button\n            type='primary'\n            className='mr-2'\n            onClick={() => setIsVisibleMsgModal(false)}\n          >\n            Close\n          </Button>\n        </div>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ProductList;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/new-product.js",["6427","6428"],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/product-cards.js",["6429","6430"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Col, Row, Space, Spin } from 'antd';\nimport RiveResult from 'components/rive-result';\nimport getImage from 'helpers/getImage';\nimport Meta from 'antd/es/card/Meta';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { fetchRestProducts } from 'redux/slices/product';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { DebounceSelect } from 'components/search';\nimport categoryService from 'services/category';\nimport SearchInput from 'components/search-input';\nimport ProductModal from './product-modal';\n\nexport default function ProductCards() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { products, loading } = useSelector(\n    (state) => state.product,\n    shallowEqual,\n  );\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const [search, setSearch] = useState(null);\n  const [brand, setBrand] = useState(null);\n  const [category, setCategory] = useState(null);\n  const [productModal, setProductModal] = useState(null);\n\n  async function fetchCategories(search) {\n    const params = { search, type: 'main', shop_id: myShop?.id };\n    return categoryService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  useEffect(() => {\n    const params = {\n      perPage: 10,\n      page: 1,\n      brand_id: brand?.value,\n      category_id: category?.value,\n      search,\n      shop_id: myShop?.id,\n      active: 1,\n    };\n    dispatch(fetchRestProducts(params));\n  }, [brand, category, search]);\n\n  return (\n    <>\n      <Card title={t('products')} className={'order-add'}>\n        <Space wrap className={'mb-4'}>\n          <SearchInput\n            placeholder={t('search')}\n            handleChange={(value) => setSearch(value)}\n            defaultValue={search}\n          />\n          <DebounceSelect\n            placeholder={t('select.category')}\n            fetchOptions={fetchCategories}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setCategory(value)}\n            value={category}\n          />\n        </Space>\n        {products.length === 0 ? (\n          <Col span={24}>\n            <RiveResult id='nosell' />\n          </Col>\n        ) : (\n          <div className='products-row order-items'>\n            {products.length ? (\n              products.map((item) => (\n                <Card\n                  className='products-col'\n                  key={item.id}\n                  cover={\n                    <img\n                      alt={item?.translation?.title}\n                      src={getImage(item?.img)}\n                    />\n                  }\n                  onClick={() => setProductModal(item)}\n                >\n                  <Meta title={item?.translation?.title} />\n                  <div className='preview'>\n                    <PlusOutlined />\n                  </div>\n                </Card>\n              ))\n            ) : (\n              <Row>\n                <Col span={24}>\n                  <RiveResult id='nosell' />\n                </Col>\n              </Row>\n            )}\n            {loading && (\n              <div className='loader'>\n                <Spin />\n              </div>\n            )}\n          </div>\n        )}\n      </Card>\n      {productModal && (\n        <ProductModal\n          productData={productModal}\n          setProductData={setProductModal}\n        />\n      )}\n    </>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/note-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/user-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/product-info.js",["6431"],[],"import React, { useState } from 'react';\nimport { Card, Col, Empty, Row, Space, Spin } from 'antd';\nimport brandService from '../../../services/rest/brand';\nimport categoryService from '../../../services/rest/category';\nimport Meta from 'antd/lib/card/Meta';\nimport getImage from '../../../helpers/getImage';\nimport { PlusOutlined } from '@ant-design/icons';\nimport OrderItems from './orderItems';\nimport { DebounceSelect } from '../../../components/search';\nimport SearchInput from '../../../components/search-input';\nimport ExtrasModal from './extrasModal';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { fetchSellerProducts } from '../../../redux/slices/product';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport RiveResult from '../../../components/rive-result';\n\nconst ProductInfo = ({ form }) => {\n  const [brand, setBrand] = useState(null);\n  const [category, setCategory] = useState(null);\n  const [search, setSearch] = useState(null);\n  const [extrasModal, setExtrasModal] = useState(null);\n\n  const dispatch = useDispatch();\n  const { data } = useSelector((state) => state.order, shallowEqual);\n  const { products, loading } = useSelector(\n    (state) => state.product,\n    shallowEqual\n  );\n\n  useDidUpdate(() => {\n    const params = {\n      perPage: 10,\n      page: 1,\n      brand_id: brand?.value,\n      category_id: category?.value,\n      search,\n    };\n    dispatch(fetchSellerProducts(params));\n  }, [brand, category, search]);\n\n  async function fetchBrands(search) {\n    return brandService.search(search).then(({ data }) =>\n      data.map((item) => ({\n        label: item.title,\n        value: item.id,\n      }))\n    );\n  }\n\n  async function fetchCategories(search) {\n    const params = { search };\n    return categoryService.search(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item.translation?.title,\n        value: item.id,\n      }))\n    );\n  }\n\n  const addProductToCart = (item) => {\n    if (!data.currency) {\n      toast.warning('Please, select currency');\n      return;\n    }\n    setExtrasModal(item);\n  };\n\n  return (\n    <Card\n      title='Order details'\n      extra={\n        <Space>\n          <DebounceSelect\n            placeholder='Select category'\n            fetchOptions={fetchCategories}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setCategory(value)}\n            value={category}\n          />\n          <DebounceSelect\n            placeholder='Select brand'\n            fetchOptions={fetchBrands}\n            style={{ minWidth: 150 }}\n            onChange={(value) => setBrand(value)}\n            value={brand}\n          />\n        </Space>\n      }\n    >\n      <div className='d-flex justify-content-end mb-4'>\n        <SearchInput placeholder='Search...' handleChange={setSearch} />\n      </div>\n      <div className='products-row order-items'>\n        {products.length ? (\n          products.map((item) => (\n            <Card\n              className='products-col'\n              key={item.id}\n              cover={\n                <img alt={item.translation?.title} src={getImage(item.img)} />\n              }\n              onClick={() => addProductToCart(item)}\n            >\n              <Meta\n                title={item.translation?.title}\n                description={item.stock?.price}\n              />\n              <div className='preview'>\n                <PlusOutlined />\n              </div>\n            </Card>\n          ))\n        ) : (\n          <Row>\n            <Col span={24}>\n              <RiveResult id='nosell' />\n            </Col>\n          </Row>\n        )}\n        {loading && (\n          <div className='loader'>\n            <Spin />\n          </div>\n        )}\n      </div>\n      {extrasModal && (\n        <ExtrasModal\n          extrasModal={extrasModal}\n          setExtrasModal={setExtrasModal}\n        />\n      )}\n\n      <OrderItems form={form} />\n    </Card>\n  );\n};\n\nexport default ProductInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/preview-info.js",["6432"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Modal, Spin, Table } from 'antd';\nimport orderService from '../../../services/seller/order';\nimport Column from 'antd/lib/table/Column';\nimport { PrinterOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { useTranslation } from 'react-i18next';\nimport hideEmail from 'components/hideEmail';\nimport hideNumber from 'components/hideNumber';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst PreviewInfo = ({ orderId, handleClose }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [list, setList] = useState([]);\n\n  function fetchOrderDetails() {\n    setLoading(true);\n    orderService\n      .getById(orderId)\n      .then((res) => {\n        setData(res.data);\n        console.log('res.data', res);\n        // const items = res.data.details.map((item) =>\n        //   item.order_stocks.map((el) => ({\n        //     ...el.stock,\n        //     ...el,\n        //     shop_id: item.shop_id,\n        //   })),\n        // );\n\n        const products = res.data.details;\n        setList(products);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (orderId) {\n      fetchOrderDetails();\n    }\n  }, [orderId]);\n\n  function calculateProductsPrice() {\n    return data?.details.reduce(\n      (total, item) => (total += item.total_price),\n      0,\n    );\n  }\n\n  function calculateTax() {\n    return data?.details.reduce((total, item) => (total += item.tax), 0);\n  }\n\n  function calculateCoupon() {\n    return data?.details.reduce(\n      (total, item) => (total += item.coupon?.price),\n      0,\n    );\n  }\n\n  function calculateDeliveryPrice() {\n    return data?.details.reduce(\n      (total, item) => (total += item.delivery_fee),\n      0,\n    );\n  }\n\n  return (\n    <Modal\n      visible={!!orderId}\n      title={`Order created successfully`}\n      onOk={handleClose}\n      onCancel={handleClose}\n      footer={[\n        <Button onClick={handleClose}>{t('back')}</Button>,\n        <Button type='primary' onClick={() => window.print()}>\n          <PrinterOutlined type='printer' />\n          <span className='ml-1'>{t('print')}</span>\n        </Button>,\n      ]}\n      style={{ minWidth: '80vw' }}\n    >\n      <div className='py-4'>\n        {loading ? (\n          <div className='w-100 text-center'>\n            <Spin />\n          </div>\n        ) : (\n          <Card>\n            <div className='d-flex justify-content-between mt-3'>\n              <div>\n                <h2 className='mb-1 font-weight-semibold'>\n                  {t('invoice')} #{data?.id}\n                </h2>\n                <p>{moment(data?.created_at).format('DD/M/YYYY')}</p>\n                <address>\n                  <p>\n                    <span>\n                      {t('delivery.type')}:{' '}\n                      {data?.details[0]?.delivery_type?.translation?.title}\n                    </span>\n                    <br />\n                    <span>\n                      {t('delivery.address')}:{' '}\n                      {data?.details[0]?.delivery_address?.address}\n                    </span>\n                    <br />\n                    <span>\n                      {t('delivery.date')}: {data?.details[0]?.delivery_date}{' '}\n                      {data?.details[0]?.delivery_time}\n                    </span>\n                    <br />\n                    <span>\n                      {t('note')}: {data?.note}\n                    </span>\n                  </p>\n                </address>\n              </div>\n              <address>\n                <p>\n                  <span className='font-weight-semibold text-dark font-size-md'>\n                    {data?.user?.firstname} {data?.user?.lastname}\n                  </span>\n                  <br />\n                  <span>\n                    {t('phone')}:{' '}\n                    {data?.user?.phone\n                      ? ReactAppIsDemo\n                        ? hideNumber(data?.user?.phone)\n                        : data?.user?.phone\n                      : t('no.phone')}\n                  </span>\n                  <br />\n                  <span>\n                    {t('email')}:{' '}\n                    {data?.user?.email\n                      ? ReactAppIsDemo\n                        ? hideEmail(data?.user?.email)\n                        : data?.user?.email\n                      : t('no.email')}\n                  </span>\n                </p>\n              </address>\n            </div>\n            <div className='mt-4'>\n              <Table\n                scroll={{ x: true }}\n                dataSource={list}\n                pagination={false}\n                className='mb-5'\n              >\n                <Column title='No.' dataIndex='id' key='id' />\n                <Column\n                  title='Product'\n                  dataIndex='product'\n                  key='product'\n                  render={(product, row) =>\n                    row?.stock?.product?.translation?.title\n                  }\n                />\n                <Column\n                  title={t('quantity')}\n                  dataIndex='quantity'\n                  key='quantity'\n                  render={(_, row) => (\n                    <span>\n                      {row.quantity * (row?.stock?.product?.interval || 1)}\n                      {row?.stock?.product?.unit?.translation?.title}\n                    </span>\n                  )}\n                />\n                <Column\n                  title={t('discount')}\n                  dataIndex='discount'\n                  key='discount'\n                  render={(discount) =>\n                    numberToPrice(discount, data?.currency?.symbol)\n                  }\n                />\n                <Column\n                  title={t('price')}\n                  dataIndex='total_price'\n                  key='total_price'\n                  render={(total_price) =>\n                    numberToPrice(total_price, data?.currency?.symbol)\n                  }\n                />\n              </Table>\n              <div className='d-flex justify-content-end'>\n                <div className='text-right '>\n                  <div className='border-bottom'>\n                    <p className='mb-2'>\n                      <span>{t('sub-total.amount')}: </span>\n                      {numberToPrice(\n                        calculateProductsPrice(),\n                        data?.currency?.symbol,\n                      )}\n                    </p>\n                    <p>\n                      {t('delivery.price')}:{' '}\n                      {numberToPrice(\n                        calculateDeliveryPrice(),\n                        data?.currency?.symbol,\n                      )}\n                    </p>\n                    <p>\n                      {t('tax')}:{' '}\n                      {numberToPrice(calculateTax(), data?.currency?.symbol)}\n                    </p>\n                    <p>\n                      {t('coupon')}:{' '}\n                      {numberToPrice(calculateCoupon(), data?.currency?.symbol)}\n                    </p>\n                  </div>\n                  <h2 className='font-weight-semibold mt-3'>\n                    <span className='mr-1'>{t('grand.total')}: </span>\n                    {numberToPrice(data?.total_price, data?.currency?.symbol)}\n                  </h2>\n                </div>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default PreviewInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orderDeliveryman.js",["6433","6434","6435"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Modal, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport orderService from '../../../services/seller/order';\nimport { setRefetch } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport { fetchSellerDeliverymans } from 'redux/slices/deliveryman';\nimport { DebounceSelect } from 'components/search';\nimport sellerDeliverymenService from 'services/seller/user';\n\nexport default function OrderDeliveryman({ orderDetails: data, handleCancel }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { deliverymans } = useSelector(\n    (state) => state.deliveryman,\n    shallowEqual\n  );\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = (values) => {\n    const params = { deliveryman: values.deliveryman.value };\n    setLoading(true);\n    orderService\n      .updateDelivery(data.id, params)\n      .then(() => {\n        handleCancel();\n        dispatch(setRefetch(activeMenu));\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    dispatch(fetchSellerDeliverymans());\n  }, []);\n\n  const fetchDeliverymen = (search) => {\n    const paramsData = {\n      perPage: 10,\n      page: 1,\n      search,\n    };\n    return sellerDeliverymenService.getDeliverymans(paramsData).then((res) => {\n      return res.data.map((delivery) => ({\n        label: delivery.firstname,\n        value: delivery.id,\n      }));\n    });\n  };\n\n  return (\n    <Modal\n      visible={!!data}\n      title={data.title}\n      onCancel={handleCancel}\n      footer={[\n        <Button type='primary' onClick={() => form.submit()} loading={loading}>\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{ deliveryman: data.deliveryman?.id }}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <Form.Item\n              label={t('deliveryman')}\n              name='deliveryman'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect fetchOptions={fetchDeliverymen} />\n              {/* <Select>\n                {deliverymans.map((item, idx) => (\n                  <Select.Option\n                    key={item.id}\n                    value={item.id}\n                    className='d-block'\n                  >\n                    {item.firstname} {item.lastname || ''}\n                  </Select.Option>\n                ))}\n              </Select> */}\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orderStatusModal.js",["6436","6437","6438"],[],"import React, { useEffect, useState, useRef } from 'react';\nimport {\n  Button,\n  Col,\n  Form,\n  Modal,\n  Row,\n  Select,\n  Input,\n  Collapse,\n  Divider,\n} from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport orderService from 'services/seller/order';\nimport Loading from 'components/loading';\nimport LanguageList from 'components/language-list';\nimport { EditOutlined, SendOutlined } from '@ant-design/icons';\nimport moment from 'moment';\n\nconst { Panel } = Collapse;\n\nexport default function OrderStatusModal({\n  orderId,\n  handleCancel,\n  refetchPage,\n}) {\n  const { statusList } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n\n  const changeInputRef = useRef(null);\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [statuses, setStatuses] = useState(\n    !!statusList?.length\n      ? statusList.map((item) => ({\n          value: item?.name,\n          label: t(item?.name),\n          key: item?.id,\n        }))\n      : [],\n  );\n  const [data, setData] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [changeNote, setChangeNote] = useState(null);\n  const [status, setStatus] = useState(null);\n\n  const fetchOrderById = () => {\n    setLoading(true);\n    orderService\n      .getById(orderId)\n      .then((res) => {\n        setData(res.data);\n        setNotes(res.data?.notes?.filter((item) => !!item?.notes?.length));\n        setStatus(res.data?.status);\n        form.setFieldsValue({ status: res?.data?.status });\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchOrderById();\n  }, [orderId]);\n\n  useEffect(() => {\n    if (data?.status === 'pause') {\n      setStatuses(\n        statusList?.map((item) => ({\n          value: item?.name,\n          label: t(item?.name),\n          key: item?.id,\n        })),\n      );\n      return;\n    }\n\n    const statusIndex = statusList.findIndex(\n      (item) => item.name === data?.status,\n    );\n\n    const newStatuses =\n      statusIndex >= 0\n        ? [\n            statusList[statusIndex],\n            statusIndex < statusList.length - 1\n              ? statusList[statusIndex + 1]?.name === 'pause'\n                ? statusList[statusIndex + 2]\n                : statusList[statusIndex + 1]\n              : null,\n          ]\n        : [\n            statusIndex < statusList.length - 1\n              ? statusList[statusIndex + 1]\n              : null,\n          ];\n\n    if (statusList[statusIndex]?.name === 'on_a_way') {\n      newStatuses.push(statusList[statusIndex + 3]);\n    }\n\n    if (statusList?.filter((item) => item?.name === 'pause' && item?.active)) {\n      newStatuses?.push(\n        statusList?.filter(\n          (item) => item?.name === 'pause' && item?.active,\n        )?.[0],\n      );\n    }\n\n    newStatuses.push({\n      name: 'canceled',\n      id: 8,\n      active: true,\n      sort: statusList?.length + 1,\n    });\n\n    setStatuses(\n      newStatuses.filter(Boolean).map((item) => ({\n        value: item?.name,\n        label: t(item?.name),\n        key: item?.id,\n      })),\n    ); // Remove null values\n  }, [data]);\n\n  const removeUndefinedValues = (obj) => {\n    const filteredEntries = Object.entries(obj).filter(([_, value]) => !!value);\n\n    if (filteredEntries?.length === 0) {\n      return;\n    }\n\n    return Object.fromEntries(filteredEntries);\n  };\n\n  const onFinish = (values) => {\n    let updatedNoteTitle = null;\n\n    setLoadingBtn(true);\n\n    if (!!changeNote && values?.status === data?.status) {\n      updatedNoteTitle = {\n        ...Object.assign(\n          {},\n          ...languages.map((lang) => ({\n            [lang.locale]: values[`title[${lang.locale}]`],\n          })),\n        ),\n      };\n      updatedNoteTitle = removeUndefinedValues(updatedNoteTitle);\n    }\n\n    const currentNotes = removeUndefinedValues({\n      ...Object.assign(\n        {},\n        ...languages.map((lang) => ({\n          [lang.locale]: values[`note[${lang.locale}]`],\n        })),\n      ),\n    });\n\n    const title = !!currentNotes ? { title: currentNotes } : null;\n\n    const previousNotes =\n      data?.status === values?.status\n        ? data?.notes\n            ?.filter((item) => item?.status === values?.status)\n            .flatMap((item) =>\n              item?.notes?.map((note, index) =>\n                index === changeNote?.index\n                  ? { ...note, title: { ...note?.title, ...updatedNoteTitle } }\n                  : note,\n              ),\n            )\n            .filter(Boolean)\n        : [];\n\n    const params = {\n      status: values?.status,\n      notes: [...previousNotes, title].filter(Boolean),\n    };\n\n    orderService\n      .updateStatus(data.id, params)\n      .then(() => {\n        handleCancel();\n        refetchPage();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [`title[${defaultLang || 'en'}]`]:\n        changeNote?.title?.[defaultLang || 'en'],\n    });\n  }, [defaultLang]);\n\n  return (\n    <Modal\n      visible={!!orderId}\n      title={[t('order.status')]}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-form'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cansel-modal' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <Form\n            form={form}\n            layout='vertical'\n            onFinish={onFinish}\n            name='order-status-change-form'\n          >\n            <Row gutter={12} style={{ marginBottom: '20px' }}>\n              <Col span={24}>\n                <LanguageList />\n              </Col>\n            </Row>\n\n            {!!data?.notes?.some((item) => !!item?.notes?.length) && (\n              <>\n                <Collapse>\n                  {notes?.map((item) => (\n                    <Panel header={t(item?.status)} key={item?.id}>\n                      {item?.notes?.map((note, index) => (\n                        <Row\n                          style={{\n                            marginBottom: '15px',\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                          }}\n                          gutter={12}\n                          key={index}\n                        >\n                          <Col\n                            span={\n                              item?.status === data?.status &&\n                              status === data?.status\n                                ? 22\n                                : 24\n                            }\n                          >\n                            <div style={{ display: 'flex', columnGap: '10px' }}>\n                              <span style={{ marginTop: '3px' }}>\n                                {index + 1}.{' '}\n                              </span>\n                              <div style={{ width: '100%' }}>\n                                <p\n                                  style={{\n                                    margin: 0,\n                                    fontSize: '15px',\n                                    wordBreak: 'break-all',\n                                  }}\n                                  hidden={\n                                    changeNote?.orderId === item?.id &&\n                                    changeNote?.index === index &&\n                                    data?.status === status\n                                  }\n                                >\n                                  {note?.title?.[defaultLang || 'en'] || '--'}\n                                </p>\n                                {\n                                  <Form.Item\n                                    name={`title[${defaultLang || 'en'}]`}\n                                    hidden={\n                                      changeNote?.orderId !== item?.id ||\n                                      changeNote?.index !== index ||\n                                      data?.status !== status\n                                    }\n                                  >\n                                    <Input.TextArea\n                                      maxLength={200}\n                                      key={index}\n                                      style={{\n                                        width: '100%',\n                                      }}\n                                      rows={\n                                        Math.floor(\n                                          note?.title?.[defaultLang || 'en']\n                                            ?.length / 41 || 0,\n                                        ) + 1\n                                      }\n                                      // defaultValue={\n                                      //   note.title?.[defaultLang || 'en']\n                                      // }\n                                      ref={changeInputRef}\n                                    />\n                                  </Form.Item>\n                                }\n                              </div>\n                            </div>\n                            <p\n                              style={{\n                                fontSize: '12px',\n                                margin: 0,\n                                float: 'right',\n                              }}\n                            >\n                              {moment(note?.created_at).format(\n                                'DD-MM-YYYY HH:mm',\n                              )}\n                            </p>\n                          </Col>\n                          {item?.status === data?.status &&\n                            data?.status === status && (\n                              <Col span={2}>\n                                {changeNote?.orderId === item?.id &&\n                                index === changeNote?.index ? (\n                                  <Button\n                                    type='primary'\n                                    icon={<SendOutlined />}\n                                    size={'small'}\n                                    onClick={() => form.submit()}\n                                    loading={loadingBtn}\n                                  />\n                                ) : (\n                                  item?.status === data?.status && (\n                                    <Button\n                                      icon={<EditOutlined />}\n                                      size='small'\n                                      onClick={() => {\n                                        changeInputRef.current.focus();\n                                        setChangeNote({\n                                          orderId: item?.id,\n                                          index: index,\n                                          title: note?.title,\n                                        });\n                                        form.setFieldsValue({\n                                          [`title[${defaultLang || 'en'}]`]:\n                                            note?.title?.[defaultLang || 'en'],\n                                        });\n                                      }}\n                                    />\n                                  )\n                                )}\n                              </Col>\n                            )}\n                        </Row>\n                      )) || '--'}\n                    </Panel>\n                  ))}\n                </Collapse>\n                <Divider />\n              </>\n            )}\n\n            <Row gutter={12}>\n              <Col span={24}>\n                <Form.Item\n                  label={t('status')}\n                  name='status'\n                  rules={[\n                    {\n                      required: true,\n                      message: t('required'),\n                    },\n                  ]}\n                >\n                  <Select\n                    options={statuses}\n                    onSelect={(item) => setStatus(item)}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={24}>\n                {languages.map((item) => (\n                  <Form.Item\n                    name={`note[${item?.locale}]`}\n                    key={`note_${item?.id}`}\n                    label={t('note')}\n                    hidden={item?.locale !== defaultLang}\n                  >\n                    <Input.TextArea maxLength={200} />\n                  </Form.Item>\n                ))}\n              </Col>\n            </Row>\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/transaction-status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/show-locations.map.js",["6439"],[],"import GoogleMapReact from 'google-map-react';\nimport { Button, Card, Col, Modal, Row, Steps, Tag } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport orderService from 'services/seller/order';\nimport Loading from 'components/loading';\nimport { BsCalendar2Day, BsCheckLg } from 'react-icons/bs';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MAP_API_KEY } from 'configs/app-global';\nimport FaUser from 'assets/images/user.jpg';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport { ShoppingCartOutlined } from '@ant-design/icons';\nimport { MdRestaurant } from 'react-icons/md';\nimport { IoBicycleSharp, IoCheckmarkDoneSharp } from 'react-icons/io5';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport moment from 'moment';\nconst { Step } = Steps;\nconst User = () => (\n  <div\n    style={{\n      position: 'absolute',\n      transform: 'translate(-50%, -100%)',\n    }}\n  >\n    <img src={FaUser} width='50' alt='Pin' />\n  </div>\n);\n\nconst ShowLocationsMap = ({ id, handleCancel }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n  const [status, setStatus] = useState(null);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const center = getDefaultLocation(settings);\n  const [current, setCurrent] = useState(0);\n  const [userLocation, setUserLocation] = useState({\n    lat: center?.lat,\n    lng: center?.lng,\n  });\n  const [steps, setSteps] = useState([\n    { id: 0, name: 'new', icon: <ShoppingCartOutlined /> },\n    { id: 1, name: 'accepted', icon: <BsCheckLg /> },\n    { id: 2, name: 'ready', icon: <MdRestaurant /> },\n    { id: 3, name: 'on_a_way', icon: <IoBicycleSharp /> },\n    { id: 4, name: 'delivered', icon: <IoCheckmarkDoneSharp /> },\n  ]);\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        setSteps(\n          data.status === 'canceled'\n            ? [\n                { id: 1, name: 'new', icon: <ShoppingCartOutlined /> },\n                { id: 5, name: 'canceled', icon: <AiOutlineCloseCircle /> },\n              ]\n            : steps,\n        );\n        setCurrent(\n          data.status === 'canceled'\n            ? 1\n            : steps.find((item) => item.name === data.status)?.id,\n        );\n\n        const address = data?.address?.location ??\n          data?.my_address?.location ??\n          data?.delivery_point?.location ?? {\n            latitude: center?.lat,\n            longitude: center?.lng,\n          };\n\n        setUserLocation({\n          lat: Number(address?.latitude),\n          lng: Number(address?.longitude),\n        });\n\n        setStatus(data.status === 'canceled' ? 'error' : 'success');\n        setData(data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    fetchOrder();\n  }, []);\n\n  return (\n    <>\n      <Modal\n        visible={!!id}\n        title={t('show.locations')}\n        closable={true}\n        onCancel={handleCancel}\n        style={{ minWidth: '80vw' }}\n        footer={[\n          <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {loading ? (\n          <Loading />\n        ) : (\n          <Card>\n            <Steps current={current} status={status} className='mb-5'>\n              {steps?.map((item, index) => (\n                <Step\n                  title={t(item.name)}\n                  key={item.id + index}\n                  icon={item?.icon}\n                />\n              ))}\n            </Steps>\n            <Row gutter={12}>\n              <Col span={12}>\n                <h3>\n                  {t('order.id')} #{data?.id}\n                </h3>\n                <p>\n                  <BsCalendar2Day />{' '}\n                  {moment(data?.created_at).format('YYYY-MM-DD HH:mm')}\n                </p>\n                <p>\n                  {t('scheduled.at')} {data?.delivery_date}\n                </p>\n              </Col>\n              <Col span={12}>\n                <p>\n                  {t('status')}{' '}\n                  {data?.status === 'new' ? (\n                    <Tag color='blue'>{t(data?.status)}</Tag>\n                  ) : data?.status === 'canceled' ? (\n                    <Tag color='error'>{t(data?.status)}</Tag>\n                  ) : (\n                    <Tag color='cyan'>{t(data?.status)}</Tag>\n                  )}\n                </p>\n                <p>\n                  {t('payment.method')}{' '}\n                  <strong>{data?.transaction?.payment_system?.tag}</strong>\n                </p>\n                <p>\n                  {t('order.type')} <strong>{data?.delivery_type}</strong>\n                </p>\n                <p>\n                  {t('payment.type')}{' '}\n                  <strong>{data?.transaction?.status}</strong>\n                </p>\n              </Col>\n\n              <Col span={24} className='mt-5'>\n                <h4>{t('map')}</h4>\n                <div\n                  className='map-container'\n                  style={{ height: 400, width: '100%' }}\n                >\n                  <GoogleMapReact\n                    bootstrapURLKeys={{\n                      key: !!google_map_key ? MAP_API_KEY : google_map_key,\n                    }}\n                    defaultZoom={10}\n                    center={userLocation ?? center}\n                    options={{\n                      fullscreenControl: false,\n                    }}\n                  >\n                    <User lat={userLocation?.lat} lng={userLocation?.lng} />\n                  </GoogleMapReact>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default ShowLocationsMap;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/order-type-switcher.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/steps.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/brands/createBrand.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/category-request.js",["6440","6441"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Card, Image, Table, Button, Space, Tag, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport CreateCategory from './createCategory';\nimport { EditOutlined, MessageOutlined } from '@ant-design/icons';\nimport { addMenu, disableRefetch, setMenuData } from 'redux/slices/menu';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport CustomModal from 'components/modal';\nimport { Context } from 'context/context';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport FilterColumns from 'components/filter-column';\nimport formatSortType from 'helpers/formatSortType';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { fetchSellerRequestModels } from 'redux/slices/request-models';\nimport { HiArrowNarrowRight } from 'react-icons/hi';\nimport DeleteButton from 'components/delete-button';\nimport requestModelsService from 'services/seller/request-models';\n\nconst body = {\n  type: 'category',\n};\n\nexport default function SellerCategoryRequests({\n  parentId,\n  activeTab = 'request',\n}) {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { setIsModalVisible } = useContext(Context);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [isVisibleMsgModal, setIsVisibleMsgModal] = useState(false);\n  const [modalText, setModalText] = useState('');\n  const [id, setId] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const {\n    data: requests,\n    meta,\n    loading,\n    params,\n  } = useSelector((state) => state.requestModels, shallowEqual);\n  const data = activeMenu.data;\n  const { uuid: parentUuid } = useParams();\n\n  const paramsData = {\n    search: data?.search,\n    sort: data?.sort,\n    column: data?.column,\n    perPage: data?.perPage,\n    page: data?.page,\n    parent_id: parentId,\n    type: 'category',\n  };\n\n  const goToEdit = (row) => {\n    dispatch(\n      addMenu({\n        url: `seller/category-request/${row.id}`,\n        id: 'request_edit',\n        name: t('request.edit'),\n      }),\n    );\n    navigate(`/seller/category-request/${row.id}`, {\n      state: { parentId, parentUuid },\n    });\n  };\n\n  const [columns, setColumns] = useState([\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      is_show: true,\n      render: (_, row) => (\n        <Space>\n          {row.model?.translation?.title} <HiArrowNarrowRight />{' '}\n          {row.data?.title[row?.model?.translation?.locale]}\n        </Space>\n      ),\n    },\n    {\n      title: t('image'),\n      dataIndex: 'img',\n      key: 'img',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Image\n              src={getImage(row?.model?.img)}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n            <HiArrowNarrowRight />\n            <Image\n              src={getImage(row?.data?.images.at(0))}\n              alt='img_gallery'\n              width={100}\n              className='rounded'\n              preview\n              placeholder\n            />\n          </Space>\n        );\n      },\n    },\n    {\n      title: t('status'),\n      dataIndex: 'status',\n      is_show: true,\n      render: (status) => (\n        <div>\n          {status === 'new' ? (\n            <Tag color='blue'>{t(status)}</Tag>\n          ) : status === 'canceled' ? (\n            <Tag color='error'>{t(status)}</Tag>\n          ) : (\n            <Tag color='cyan'>{t(status)}</Tag>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: t('options'),\n      key: 'options',\n      dataIndex: 'options',\n      is_show: true,\n      render: (_, row) => {\n        return (\n          <Space>\n            <Button icon={<EditOutlined />} onClick={() => goToEdit(row)} />\n            {row?.status === 'cancelled' && row?.status_note && (\n              <Button\n                icon={<MessageOutlined />}\n                onClick={() => {\n                  setIsVisibleMsgModal(true);\n                  setModalText(row.status_note);\n                }}\n              />\n            )}\n            <DeleteButton\n              danger\n              type='primary'\n              onClick={() => {\n                setId([row.id]);\n                setIsModalVisible(true);\n              }}\n            />\n          </Space>\n        );\n      },\n    },\n  ]);\n\n  useEffect(() => {\n    if (activeMenu.refetch && activeTab === 'request') {\n      dispatch(fetchSellerRequestModels(paramsData));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  useDidUpdate(() => {\n    if (activeTab === 'request') {\n      dispatch(fetchSellerRequestModels(paramsData));\n    }\n  }, [activeMenu.data, activeTab]);\n\n  function onChangePagination(pagination, filter, sorter) {\n    const { pageSize: perPage, current: page } = pagination;\n    const { field: column, order } = sorter;\n    const sort = formatSortType(order);\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...activeMenu.data, perPage, page, column, sort },\n      }),\n    );\n  }\n\n  const categoryDelete = () => {\n    setLoadingBtn(true);\n    const params = {\n      ...Object.assign(\n        {},\n        ...id.map((item, index) => ({\n          [`ids[${index}]`]: item,\n        })),\n      ),\n    };\n    requestModelsService\n      .delete(params)\n      .then(() => {\n        toast.success(t('successfully.deleted'));\n        dispatch(fetchSellerRequestModels(body));\n        setIsModalVisible(false);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleCancel = () => setIsModalOpen(false);\n\n  const rowSelection = {\n    selectedRowKeys: id,\n    onChange: (key) => {\n      setId(key);\n    },\n  };\n\n  const handleFilter = (items) => {\n    const data = activeMenu.data;\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: { ...data, ...items },\n      }),\n    );\n  };\n\n  return (\n    <Card\n      title={t('requests')}\n      extra={\n        <Space wrap>\n          <FilterColumns columns={columns} setColumns={setColumns} />\n        </Space>\n      }\n    >\n      <Table\n        scroll={{ x: true }}\n        rowSelection={rowSelection}\n        columns={columns?.filter((item) => item.is_show)}\n        dataSource={requests}\n        pagination={{\n          pageSize: params.perPage,\n          page: activeMenu.data?.page || 1,\n          total: meta.total,\n          defaultCurrent: activeMenu.data?.page,\n          current: activeMenu.data?.page,\n        }}\n        rowKey={(record) => record.key}\n        onChange={onChangePagination}\n        loading={loading}\n      />\n      {isModalOpen && (\n        <CreateCategory handleCancel={handleCancel} isModalOpen={isModalOpen} />\n      )}\n      <CustomModal\n        click={categoryDelete}\n        text={t('delete')}\n        setText={setId}\n        loading={loadingBtn}\n      />\n      <Modal\n        title='Reject message'\n        closable={false}\n        visible={isVisibleMsgModal}\n        footer={null}\n        centered\n      >\n        <p>{modalText}</p>\n        <div className='d-flex justify-content-end'>\n          <Button\n            type='primary'\n            className='mr-2'\n            onClick={() => setIsVisibleMsgModal(false)}\n          >\n            {t('close')}\n          </Button>\n        </div>\n      </Modal>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/orderReviewShow.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/reviews/productReviewShow.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/downloadModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/ad-detail.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/coupons/coupon-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/calculateTotalPrice.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-value-modal.js",["6442"],[],"import { Button, Form, Input, Modal } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { SketchPicker } from 'react-color';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ImageUploadSingle from 'components/image-upload-single';\nimport createImage from 'helpers/createImage';\nimport { fetchSellerExtraValue } from 'redux/slices/extraValue';\nimport extraService from 'services/seller/extras';\nimport { DebounceSelect } from 'components/search';\n\nexport default function ExtraValueModal({\n  modal,\n  handleCancel,\n  isVisible,\n  paramsData,\n}) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [type, setType] = useState('text');\n  const [image, setImage] = useState(null);\n  const [color, setColor] = useState('');\n\n  const fetchExtraGroups = (search) => {\n    const paramsData = {\n      perPage: 10,\n      page: 1,\n      search: search,\n    };\n\n    return extraService.getAllGroups(paramsData).then((res) =>\n      res.data.map((group) => ({\n        label: group?.translation?.title,\n        value: group?.id,\n        key: `${group?.type},${group?.id}`,\n      })),\n    );\n  };\n\n  useEffect(() => {\n    if (modal?.id) {\n      setType(modal.group.type);\n      switch (modal.group.type) {\n        case 'color':\n          setColor(modal.value);\n          break;\n\n        case 'image':\n          setImage(createImage(modal.value));\n          break;\n\n        default:\n          break;\n      }\n      form.setFieldsValue(modal);\n    }\n  }, [modal]);\n\n  const updateExtra = (id, body) => {\n    setLoadingBtn(true);\n    extraService\n      .updateValue(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        handleCancel();\n        dispatch(fetchSellerExtraValue(paramsData));\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n        form.resetFields();\n      });\n  };\n\n  const createExtra = (body) => {\n    setLoadingBtn(true);\n    extraService\n      .createValue(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchSellerExtraValue(paramsData));\n      })\n      .finally(() => {\n        setLoadingBtn(false);\n        form.resetFields();\n      });\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      extra_group_id: values.extra_group_id.value ?? values.extra_group_id,\n      value: getValue(type, values.value) ?? values.value,\n    };\n    if (modal?.id) {\n      updateExtra(modal.id, body);\n    } else {\n      createExtra(body);\n    }\n  };\n\n  function getValue(type, value) {\n    switch (type) {\n      case 'color':\n        return value.hex;\n      case 'text':\n        return value;\n      case 'image':\n        return value.name;\n      default:\n        return '';\n    }\n  }\n\n  const renderExtraValue = (type) => {\n    switch (type) {\n      case 'color':\n        return (\n          <SketchPicker\n            onChangeComplete={(color) => setColor(color.hex)}\n            color={color}\n            disableAlpha={true}\n          />\n        );\n      case 'text':\n        return <Input placeholder={t('enter.extra.value')} />;\n\n      case 'image':\n        return (\n          <ImageUploadSingle\n            type='extras'\n            image={image}\n            setImage={setImage}\n            form={form}\n            name='value'\n          />\n        );\n\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.extra') : t('add.extra')}\n      visible={isVisible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        name='extra-form'\n        layout='vertical'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{\n          extra_group_id: modal?.group\n            ? {\n                label: modal?.group?.translation?.title,\n                value: modal?.group?.id,\n                key: modal?.group?.id,\n              }\n            : [],\n        }}\n      >\n        <Form.Item\n          name='extra_group_id'\n          label={t('extra.group')}\n          rules={[{ required: true, message: 'required' }]}\n        >\n          <DebounceSelect\n            fetchOptions={fetchExtraGroups}\n            placeholder={t('select.extra.group')}\n            allowClear\n            onChange={(e) => {\n              setType(e?.key?.split(',')[0]);\n              form.setFieldsValue({ value: '' });\n            }}\n          />\n        </Form.Item>\n        <Form.Item\n          name='value'\n          label={t('value')}\n          rules={[{ required: true, message: 'required' }]}\n        >\n          {renderExtraValue(type)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-group-modal.js",["6443"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Input, Modal, Select } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport extraService from 'services/seller/extras';\nimport { toast } from 'react-toastify';\nimport { fetchSellerExtraGroups } from 'redux/slices/extraGroup';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport Loading from 'components/loading';\n\nexport default function ExtraGroupModal({ modal, handleCancel, onSuccess }) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  function fetchExtraGroup(id) {\n    setLoading(true);\n    extraService\n      .getGroupById(id)\n      .then((res) => {\n        const data = res.data;\n        form.setFieldsValue({ ...data, ...getLanguageFields(data) });\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (modal?.id) {\n      fetchExtraGroup(modal.id);\n    }\n    dispatch(fetchSellerExtraGroups());\n  }, [modal]);\n\n  function createExtraGroup(body) {\n    setLoadingBtn(true);\n    extraService\n      .createGroup(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchSellerExtraGroups());\n        !!onSuccess && onSuccess();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values),\n      type: values?.type,\n    };\n    if (modal?.id) {\n      updateExtraGroup(modal?.id, body);\n    } else {\n      createExtraGroup(body);\n    }\n  };\n\n  function updateExtraGroup(id, body) {\n    setLoadingBtn(true);\n    extraService\n      .updateGroup(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchSellerExtraGroups());\n        handleCancel();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.extra.group') : t('add.extra.group')}\n      visible={!!modal}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-button-group'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button-group' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <div className='d-flex justify-content-end'>\n            <LanguageList />\n          </div>\n          <Form\n            layout='vertical'\n            name='extra-group'\n            form={form}\n            onFinish={onFinish}\n          >\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                name={`title[${item.locale}]`}\n                label={t('title')}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('title')} />\n              </Form.Item>\n            ))}\n            <Form.Item\n              name='type'\n              label={t('type')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select\n                style={{ width: '100%' }}\n                placeholder={t('select.extra.type')}\n              >\n                <Select.Option value='color'>{t('color')}</Select.Option>\n                <Select.Option value='text'>{t('text')}</Select.Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/services/rest/table.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/Extras/extra-group-show-modal.js",["6444"],[],"import { Descriptions, Modal, Image, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loading from 'components/loading';\nimport { IMG_URL } from 'configs/app-global';\nimport extraService from 'services/seller/extras';\n\nexport default function ExtraGroupShowModal({ open, handleClose }) {\n  const { t } = useTranslation();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchExtraValue = () => {\n    setLoading(true);\n    extraService\n      .getGroupById(open)\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchExtraValue();\n  }, []);\n\n  return (\n    <Modal\n      closable={false}\n      visible={open}\n      footer={null}\n      centered\n      onCancel={handleClose}\n    >\n      {!loading ? (\n        <Descriptions title={`${t('extra.group.value')}`} bordered>\n          {data.extra_values?.map((item, index) => (\n            <Descriptions.Item\n              key={index}\n              label={data.translation.title}\n              span={3}\n            >\n              {data.type === 'text' ? (\n                item.value\n              ) : data.type === 'image' ? (\n                <Image\n                  src={IMG_URL + item.value}\n                  alt='images'\n                  width={100}\n                  height={80}\n                />\n              ) : (\n                <Space>\n                  <div\n                    className='extra-color-wrapper-contain'\n                    style={{ backgroundColor: item.value }}\n                  />\n                  {item.value}\n                </Space>\n              )}\n            </Descriptions.Item>\n          ))}\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-value-modal.js",["6445"],[],"import { Button, Form, Input, Modal } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { SketchPicker } from 'react-color';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ImageUploadSingle from 'components/image-upload-single';\nimport createImage from 'helpers/createImage';\nimport { fetchSellerPropertyValue } from 'redux/slices/propertyValue';\nimport propertyService from 'services/seller/property';\nimport { DebounceSelect } from 'components/search';\n\nexport default function PropertyValueModal({\n  modal,\n  handleCancel,\n  onSuccess,\n  groupId,\n}) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [type, setType] = useState('text');\n  const [image, setImage] = useState(null);\n  const [color, setColor] = useState('');\n\n  useEffect(() => {\n    if (modal?.id) {\n      setType(modal.group.type);\n      const body = {\n        ...modal,\n        property_group_id: {\n          label: modal?.group?.translation?.title,\n          value: modal?.group?.id,\n        },\n        value: modal.value,\n      };\n      switch (modal.group.type) {\n        case 'color':\n          setColor(modal.value);\n          break;\n\n        case 'image':\n          setImage(createImage(modal.value));\n          break;\n\n        default:\n          break;\n      }\n      form.setFieldsValue(body);\n    }\n    if (groupId) {\n      form.setFieldsValue({\n        property_group_id: {\n          value: groupId,\n        },\n      });\n    }\n  }, [modal, groupId]);\n\n  const updateProperty = (id, body) => {\n    setLoadingBtn(true);\n    propertyService\n      .updateValue(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        handleCancel();\n        dispatch(fetchSellerPropertyValue());\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const createProperty = (body) => {\n    setLoadingBtn(true);\n    propertyService\n      .createValue(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchSellerPropertyValue());\n        !!onSuccess && onSuccess();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const onFinish = (values) => {\n    const body = {\n      property_group_id: values?.property_group_id?.value,\n      value: getValue(type, values.value),\n    };\n\n    if (modal?.id) {\n      updateProperty(modal.id, body);\n    } else {\n      createProperty(body);\n    }\n  };\n\n  function getValue(type, value) {\n    switch (type) {\n      case 'color':\n        return value.hex;\n      case 'text':\n        return value;\n      case 'image':\n        return value.name;\n      default:\n        return '';\n    }\n  }\n\n  const renderPropertyValue = (type) => {\n    switch (type) {\n      case 'color':\n        return (\n          <SketchPicker\n            onChangeComplete={(color) => setColor(color.hex)}\n            color={color}\n            disableAlpha={true}\n          />\n        );\n      case 'text':\n        return <Input placeholder={t('enter.property.value')} />;\n\n      case 'image':\n        return (\n          <ImageUploadSingle\n            type='property'\n            image={image}\n            setImage={setImage}\n            form={form}\n            name='value'\n          />\n        );\n\n      default:\n        return '';\n    }\n  };\n\n  async function fetchPropertyGroupList(search) {\n    const params = { perPage: 10, active: 1, search };\n    return propertyService.getAllGroups(params).then((res) =>\n      res?.data?.map((item) => ({\n        value: item?.id,\n        label: item?.translation?.title,\n        key: item?.id,\n      }))\n    );\n  }\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.property') : t('add.property')}\n      visible={!!modal}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        name='property-form'\n        layout='vertical'\n        form={form}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name='property_group_id'\n          label={t('property.group')}\n          hidden={!!groupId}\n          rules={[{ required: true, message: '' }]}\n        >\n          <DebounceSelect fetchOptions={fetchPropertyGroupList} />\n        </Form.Item>\n        <Form.Item\n          name='value'\n          label={t('value')}\n          rules={[{ required: true, message: '' }]}\n        >\n          {renderPropertyValue(type)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/looks/form.js",["6446"],[],"import React, { Fragment, useState } from 'react';\nimport { Form, Card, Row, Col, Input, Button, Switch } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useSelector, useDispatch, batch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TextArea from 'antd/es/input/TextArea';\nimport { DebounceSelect } from 'components/search';\nimport productService from 'services/product';\nimport MediaUpload from 'components/upload';\nimport { removeFromMenu } from 'redux/slices/menu';\nimport { toast } from 'react-toastify';\nimport { sellerFetchLooks } from 'redux/slices/looks';\n\nexport default function LooksForm({ form, handleSubmit }) {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [image, setImage] = useState(activeMenu?.data?.image ?? []);\n\n  function handleValidation(value, item = null, length = 2) {\n    const condition = !!item ? !value && item?.locale === defaultLang : !value;\n\n    if (condition) {\n      return Promise.reject(new Error(t('required')));\n    } else if (value && value?.trim() === '') {\n      return Promise.reject(new Error(t('no.empty.space')));\n    } else if (value && value?.trim().length < length) {\n      return Promise.reject(new Error(t(`must.be.at.least.${length}`)));\n    }\n    return Promise.resolve();\n  }\n\n  const fetchProducts = (search) => {\n    const paramsData = {\n      page: 1,\n      perPage: 10,\n      active: 1,\n      status: 'published',\n      shop_id: myShop?.id,\n      search: !!search ? search : null,\n    };\n\n    return productService.getAll(paramsData).then((res) =>\n      res.data.map((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n\n    const nextUrl = 'seller/looks';\n\n    handleSubmit(values, image)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(sellerFetchLooks({}));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Fragment>\n      <Card title={t('add.look')} extra={<LanguageList />}>\n        <Form\n          form={form}\n          onFinish={onFinish}\n          layout='vertical'\n          initialValues={{ active: true, ...activeMenu?.data }}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'title' + item.id}\n                  label={t('title')}\n                  name={`title[${item.locale}]`}\n                  hidden={item.locale !== defaultLang}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator: (_, value) => {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <Input maxLength={50} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              {languages.map((item) => (\n                <Form.Item\n                  key={'description' + item.id}\n                  label={t('description')}\n                  name={`description[${item.locale}]`}\n                  hidden={item.locale !== defaultLang}\n                  rules={[\n                    {\n                      required: item?.locale === defaultLang,\n                      message: t('required'),\n                    },\n                    {\n                      validator: (_, value) => {\n                        if (value && value?.trim() === '') {\n                          return Promise.reject(new Error(t('no.empty.space')));\n                        } else if (value && value?.trim().length < 2) {\n                          return Promise.reject(\n                            new Error(t('must.be.at.least.2')),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                >\n                  <TextArea rows={3} maxLength={150} />\n                </Form.Item>\n              ))}\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('products')}\n                name={'products'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DebounceSelect mode='multiple' fetchOptions={fetchProducts} />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                name='images'\n                label={t('image')}\n                rules={[\n                  {\n                    required: !image?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='products'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={4}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch defaultChecked />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </Form>\n      </Card>\n    </Fragment>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/delivery-price/price-form.js",["6447","6448"],[],"import React, { useEffect, useState } from 'react';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, Col, Form, InputNumber, Row } from 'antd';\nimport { RefetchSearch } from 'components/refetch-search';\nimport regionService from 'services/deliveryzone/region';\nimport countryService from 'services/deliveryzone/country';\nimport cityService from 'services/deliveryzone/city';\nimport areaService from 'services/deliveryzone/area';\nimport { setMenuData, disableRefetch } from 'redux/slices/menu';\nimport deliveryPriceService from 'services/seller/delivery-price';\nimport Loading from 'components/loading';\n\nexport default function PriceForm({ form, handleSubmit }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { id } = useParams();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [formData, setFormData] = useState({});\n  const { country, region, city } = formData;\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      getDeliveryPrice(id);\n    }\n  }, [activeMenu.refetch]);\n\n  function getLanguageFields(data) {\n    if (!data?.translations) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`address[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.address,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  // fetch functions\n  const getDeliveryPrice = () => {\n    setLoading(true);\n    deliveryPriceService\n      .getById(id)\n      .then(({ data }) => {\n        const { city, country, region, area, ...rest } = data;\n        const fieldName = `address[${defaultLang}]`;\n\n        const deliveryzone = {\n          area: { label: area?.translation?.title, value: area?.id },\n          city: { label: city?.translation?.title, value: city?.id },\n          country: { label: country?.translation?.title, value: country?.id },\n          region: { label: region?.translation?.title, value: region?.id },\n        };\n\n        const formData = {\n          ...getLanguageFields(data),\n          ...deliveryzone,\n          ...rest,\n          [fieldName]: data.address?.[defaultLang],\n          shop_id: {\n            label: data?.shop?.translation?.title,\n            value: data?.shop?.id,\n            key: data?.shop?.id,\n          },\n        };\n\n        form.setFieldsValue(formData);\n        setFormData(deliveryzone);\n      })\n      .catch((error) => {\n        console.error(error);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n  async function fetchRegion(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n    };\n    return regionService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n  async function fetchCountry(search) {\n    const params = { search, status: 1, perPage: 10, region_id: region?.value };\n    return countryService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n  async function fetchCity(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      country_id: country?.value,\n    };\n    return cityService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n  async function fetchArea(search) {\n    const params = {\n      search,\n      status: 1,\n      perPage: 10,\n      city_id: city?.value,\n    };\n    return areaService.get(params).then(({ data }) =>\n      data.map((item) => ({\n        label: item?.translation?.title || 'no name',\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  // onFinish\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    handleSubmit(values).finally(() => setLoadingBtn(false));\n  };\n\n  return loading ? (\n    <Loading />\n  ) : (\n    <Form\n      form={form}\n      name={!!id ? t('edit.delivery.price') : t('add.delivery.price')}\n      layout='vertical'\n      initialValues={{ clickable: true, ...activeMenu.data }}\n      onFinish={onFinish}\n    >\n      <Row gutter={[24, 24]}>\n        <Col span={12}>\n          <Card title={t('deliveryzone')} className='h-100'>\n            <Col span={24}>\n              <Form.Item\n                label={t('region')}\n                name='region'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchRegion}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, region: value }));\n                    form.resetFields(['city', 'area', 'country']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('country')}\n                name='country'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCountry}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, country: value }));\n                    form.resetFields(['city', 'area']);\n                  }}\n                  disabled={!Boolean(region?.value)}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('city')}\n                name='city'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchCity}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(country?.value)}\n                  onChange={(value) => {\n                    setFormData((prev) => ({ ...prev, city: value }));\n                    form.resetFields(['area']);\n                  }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('area')}\n                name='area'\n                rules={[{ required: false, message: t('required') }]}\n              >\n                <RefetchSearch\n                  fetchOptions={fetchArea}\n                  dropdownRender={(menu) => <>{menu}</>}\n                  refetch={true}\n                  disabled={!Boolean(city?.value)}\n                />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t('pricing')} className='h-100'>\n            <Col span={24}>\n              <Form.Item\n                label={`${t('price')} (${defaultCurrency?.symbol})`}\n                name='price'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n          </Card>\n        </Col>\n      </Row>\n      <br />\n      <div className='flex-grow-1 d-flex justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/advert/assign-product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/status-change-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/user-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/delivery-info.js",["6449"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  InputNumber,\n  Row,\n  Select,\n  Spin,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport shopService from '../../../services/shop';\nimport useDidUpdate from '../../../helpers/useDidUpdate';\nimport { setMenuData } from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport RiveResult from '../../../components/rive-result';\n\nconst DeliveryInfo = ({ form }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { orderShops, data: orderData } = useSelector(\n    (state) => state.order,\n    shallowEqual\n  );\n  const activeMenu = useSelector(\n    (state) => state.menu.activeMenu,\n    shallowEqual\n  );\n  const { data } = activeMenu;\n  const [loading, setLoading] = useState(false);\n\n  function getOrderDeliveries(shops, deliveries) {\n    return shops.map((item) => {\n      const delivery = deliveries.find((el) => el.shop_id === item.id);\n      if (delivery) {\n        return {\n          shop_id: item.id,\n          delivery: delivery.delivery,\n          delivery_date: moment(delivery.delivery_date),\n          delivery_time: delivery.delivery_time,\n          delivery_fee: delivery.delivery_fee,\n        };\n      }\n      return {\n        shop_id: item.id,\n        delivery: '',\n        delivery_date: '',\n        delivery_time: '',\n        delivery_fee: '',\n      };\n    });\n  }\n\n  useEffect(() => {\n    if (data?.length) {\n      if (orderData.deliveries.length) {\n        form.setFieldsValue({\n          deliveries: getOrderDeliveries(data, orderData.deliveries),\n        });\n        return;\n      }\n      form.setFieldsValue({\n        deliveries: data.map((item) => ({\n          shop_id: item.id,\n          delivery: '',\n          delivery_date: '',\n          delivery_time: '',\n          delivery_fee: '',\n        })),\n      });\n    } else {\n      form.setFieldsValue({\n        deliveries: [],\n      });\n    }\n  }, [data]);\n\n  function getShopDeliveries(shops) {\n    setLoading(true);\n    const params = formatShopIds(shops);\n    shopService\n      .getShopDeliveries(params)\n      .then((res) => dispatch(setMenuData({ activeMenu, data: res.data })))\n      .finally(() => setLoading(false));\n  }\n\n  useDidUpdate(() => {\n    if (orderShops.length) {\n      getShopDeliveries(orderShops);\n    }\n  }, [orderShops]);\n\n  function formatShopIds(list) {\n    const result = list.map((item, index) => ({\n      [`shops[${index}]`]: item.id,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  function getHours(shop) {\n    if (!shop) return [];\n    let hours = [];\n    const timeFrom = moment(shop.open_time, 'HH:mm').hour();\n    const timeTo = moment(shop.close_time, 'HH:mm').hour();\n    for (let index = timeFrom + 1; index < timeTo; index++) {\n      const hour = {\n        label: moment(index, 'HH').format('HH:mm'),\n        value: moment(index, 'HH').format('HH:mm'),\n      };\n      hours.push(hour);\n    }\n    return hours;\n  }\n\n  function formatDeliveries(list) {\n    if (!list?.length) return [];\n    return list.map((item) => ({\n      label: item.translation?.title,\n      value: item.id,\n    }));\n  }\n\n  return (\n    <Card title={t('stores')}>\n      {loading && (\n        <div className='loader'>\n          <Spin />\n        </div>\n      )}\n      <Form.List name='deliveries'>\n        {(fields) => {\n          return (\n            <div>\n              {fields.length ? (\n                fields.map((field, index) => (\n                  <Card\n                    title={`${data[index]?.translation?.title} ${t('shop')}`}\n                    type='inner'\n                    size='small'\n                    key={field.key}\n                  >\n                    <Row gutter={12}>\n                      <Col span={24}>\n                        <Form.Item\n                          name={[index, 'delivery']}\n                          label={t('delivery')}\n                          rules={[\n                            { required: true, message: t('required.field') },\n                          ]}\n                        >\n                          <Select\n                            placeholder={t('select.delivery')}\n                            options={formatDeliveries(data[index]?.deliveries)}\n                            labelInValue\n                          />\n                        </Form.Item>\n                      </Col>\n\n                      <Col span={24}>\n                        <Row gutter={12}>\n                          <Col span={12}>\n                            <Form.Item\n                              name={[index, 'delivery_date']}\n                              label={t('delivery.date')}\n                              rules={[\n                                {\n                                  required: true,\n                                  message: t('required.field'),\n                                },\n                              ]}\n                            >\n                              <DatePicker className='w-100' />\n                            </Form.Item>\n                          </Col>\n                          <Col span={12}>\n                            <Form.Item\n                              label={`${t('delivery.time')} (${t('up.to')})`}\n                              name={[index, 'delivery_time']}\n                              rules={[\n                                {\n                                  required: true,\n                                  message: t('required.field'),\n                                },\n                              ]}\n                            >\n                              <Select options={getHours(data[index])} />\n                            </Form.Item>\n                          </Col>\n                          <Col span={12}>\n                            <Form.Item\n                              label={t('delivery.fee')}\n                              name={[index, 'delivery_fee']}\n                              hidden\n                            >\n                              <InputNumber min={0} className='w-100' />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      </Col>\n                    </Row>\n                  </Card>\n                ))\n              ) : (\n                <Row>\n                  <Col span={24}>\n                    <RiveResult id='nosell' />\n                  </Col>\n                </Row>\n              )}\n            </div>\n          );\n        }}\n      </Form.List>\n    </Card>\n  );\n};\n\nexport default DeliveryInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/product-info.js",["6450"],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/preview-info.js",["6451"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Modal, Spin, Table } from 'antd';\nimport orderService from '../../../services/waiter/order';\nimport Column from 'antd/lib/table/Column';\nimport { PrinterOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { useTranslation } from 'react-i18next';\nimport hideNumber from 'components/hideNumber';\nimport hideEmail from 'components/hideEmail';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst PreviewInfo = ({ orderId, handleClose }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [list, setList] = useState([]);\n\n  function fetchOrderDetails() {\n    setLoading(true);\n    orderService\n      .getById(orderId)\n      .then((res) => {\n        setData(res.data);\n        const items = res.data.details.map((item) =>\n          item.order_stocks.map((el) => ({\n            ...el.stock,\n            ...el,\n            shop_id: item.shop_id,\n          })),\n        );\n        const products = items.flat();\n        setList(products);\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (orderId) {\n      fetchOrderDetails();\n    }\n  }, [orderId]);\n\n  function calculateProductsPrice() {\n    return data?.details.reduce((total, item) => (total += item.price), 0);\n  }\n\n  function calculateTax() {\n    return data?.details.reduce((total, item) => (total += item.tax), 0);\n  }\n\n  function calculateCoupon() {\n    return data?.details.reduce(\n      (total, item) => (total += item.coupon?.price),\n      0,\n    );\n  }\n\n  function calculateDeliveryPrice() {\n    return data?.details.reduce(\n      (total, item) => (total += item.delivery_fee),\n      0,\n    );\n  }\n\n  return (\n    <Modal\n      visible={!!orderId}\n      title={`Order created successfully`}\n      onOk={handleClose}\n      onCancel={handleClose}\n      footer={[\n        <Button onClick={handleClose}>{t('back')}</Button>,\n        <Button type='primary' onClick={() => window.print()}>\n          <PrinterOutlined type='printer' />\n          <span className='ml-1'>{t('print')}</span>\n        </Button>,\n      ]}\n      style={{ minWidth: '80vw' }}\n    >\n      <div className='py-4'>\n        {loading ? (\n          <div className='w-100 text-center'>\n            <Spin />\n          </div>\n        ) : (\n          <Card>\n            <div className='d-flex justify-content-between mt-3'>\n              <div>\n                <h2 className='mb-1 font-weight-semibold'>\n                  {t('invoice')} #{data?.id}\n                </h2>\n                <p>{moment(data?.created_at).format('DD/M/YYYY')}</p>\n                <address>\n                  <p>\n                    <span>\n                      {t('delivery.type')}:{' '}\n                      {data?.details[0]?.delivery_type?.translation?.title}\n                    </span>\n                    <br />\n                    <span>\n                      {t('delivery.address')}:{' '}\n                      {data?.details[0]?.delivery_address?.address}\n                    </span>\n                    <br />\n                    <span>\n                      {t('delivery.date')}: {data?.details[0]?.delivery_date}{' '}\n                      {data?.details[0]?.delivery_time}\n                    </span>\n                    <br />\n                    <span>\n                      {t('note')}: {data?.note}\n                    </span>\n                  </p>\n                </address>\n              </div>\n              <address>\n                <p>\n                  <span className='font-weight-semibold text-dark font-size-md'>\n                    {data?.user?.firstname} {data?.user?.lastname}\n                  </span>\n                  <br />\n                  <span>\n                    {t('phone')}:{' '}\n                    {data?.user?.phone\n                      ? ReactAppIsDemo\n                        ? hideNumber(data?.user?.phone)\n                        : data?.user?.phone\n                      : t('no.phone')}\n                  </span>\n                  <br />\n                  <span>\n                    {t('email')}:{' '}\n                    {data?.user?.email\n                      ? ReactAppIsDemo\n                        ? hideEmail(data?.user?.email)\n                        : data?.user?.email\n                      : t('no.email')}\n                  </span>\n                </p>\n              </address>\n            </div>\n            <div className='mt-4'>\n              <Table\n                scroll={{ x: true }}\n                dataSource={list}\n                pagination={false}\n                className='mb-5'\n              >\n                <Column title='No.' dataIndex='id' key='id' />\n                <Column\n                  title='Product'\n                  dataIndex='product'\n                  key='product'\n                  render={(product) => product?.translation?.title}\n                />\n                <Column\n                  title={t('quantity')}\n                  dataIndex='quantity'\n                  key='quantity'\n                  render={(_, row) => (\n                    <span>\n                      {row.quantity * (row?.stock?.product?.interval || 1)}\n                      {row?.stock?.product?.unit?.translation?.title}\n                    </span>\n                  )}\n                />\n                <Column\n                  title={t('discount')}\n                  dataIndex='discount'\n                  key='discount'\n                  render={(discount) =>\n                    numberToPrice(discount, data?.currency?.symbol)\n                  }\n                />\n                <Column\n                  title={t('price')}\n                  dataIndex='total_price'\n                  key='total_price'\n                  render={(total_price) =>\n                    numberToPrice(total_price, data?.currency?.symbol)\n                  }\n                />\n              </Table>\n              <div className='d-flex justify-content-end'>\n                <div className='text-right '>\n                  <div className='border-bottom'>\n                    <p className='mb-2'>\n                      <span>{t('sub-total.amount')}: </span>\n                      {numberToPrice(\n                        calculateProductsPrice(),\n                        data?.currency?.symbol,\n                      )}\n                    </p>\n                    <p>\n                      {t('delivery.price')}:{' '}\n                      {numberToPrice(\n                        calculateDeliveryPrice(),\n                        data?.currency?.symbol,\n                      )}\n                    </p>\n                    <p>\n                      {t('tax')}:{' '}\n                      {numberToPrice(calculateTax(), data?.currency?.symbol)}\n                    </p>\n                    <p>\n                      {t('coupon')}:{' '}\n                      {numberToPrice(calculateCoupon(), data?.currency?.symbol)}\n                    </p>\n                  </div>\n                  <h2 className='font-weight-semibold mt-3'>\n                    <span className='mr-1'>{t('grand.total')}: </span>\n                    {numberToPrice(data?.price, data?.currency?.symbol)}\n                  </h2>\n                </div>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default PreviewInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orderStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orderDeliveryman.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/show-locations.map.js",["6452"],[],"import GoogleMapReact from 'google-map-react';\nimport { Button, Card, Col, Modal, Row, Steps, Tag } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport orderService from '../../../services/waiter/order';\nimport Loading from '../../../components/loading';\nimport { BsCalendar2Day, BsCheckLg } from 'react-icons/bs';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MAP_API_KEY } from '../../../configs/app-global';\nimport FaUser from '../../../assets/images/user.jpg';\nimport FaStore from '../../../assets/images/shop.png';\nimport getDefaultLocation from '../../../helpers/getDefaultLocation';\nimport { ShoppingCartOutlined } from '@ant-design/icons';\nimport { MdRestaurant } from 'react-icons/md';\nimport { IoBicycleSharp, IoCheckmarkDoneSharp } from 'react-icons/io5';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nconst { Step } = Steps;\nconst User = () => <img src={FaUser} width='50' alt='Pin' />;\nconst Store = () => <img src={FaStore} width='50' alt='Pin' />;\n\nconst colors = ['blue', 'red', 'gold', 'volcano', 'cyan', 'lime'];\n\nconst ShowLocationsMap = ({ id, handleCancel }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(null);\n  const [data, setData] = useState(null);\n  const [status, setStatus] = useState(null);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual\n  );\n  const center = getDefaultLocation(settings);\n  const [current, setCurrent] = useState(0);\n  const [shop, setShop] = useState(getDefaultLocation(settings));\n  const [user, setUser] = useState(getDefaultLocation(settings));\n  const [steps, setSteps] = useState([\n    { id: 0, name: 'new', icon: <ShoppingCartOutlined /> },\n    { id: 1, name: 'accepted', icon: <BsCheckLg /> },\n    { id: 2, name: 'ready', icon: <MdRestaurant /> },\n    { id: 3, name: 'on_a_way', icon: <IoBicycleSharp /> },\n    { id: 4, name: 'delivered', icon: <IoCheckmarkDoneSharp /> },\n  ]);\n\n  function fetchOrder() {\n    setLoading(true);\n    orderService\n      .getById(id)\n      .then(({ data }) => {\n        setSteps(\n          data.status === 'canceled'\n            ? [\n                { id: 1, name: 'new', icon: <ShoppingCartOutlined /> },\n                { id: 5, name: 'canceled', icon: <AiOutlineCloseCircle /> },\n              ]\n            : steps\n        );\n        setCurrent(\n          data.status === 'canceled'\n            ? 1\n            : steps.find((item) => item.name === data.status)?.id\n        );\n\n        setStatus(data.status === 'canceled' ? 'error' : 'success');\n        setData(data);\n        setUser({\n          lat: data.location.latitude,\n          lng: data.location.longitude,\n        });\n        setShop({\n          lat: data.shop.location.latitude,\n          lng: data.shop.location.longitude,\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual\n  );\n\n  useEffect(() => {\n    fetchOrder();\n  }, []);\n\n  const handleLoadMap = ({ map, maps }) => {\n    const markers = [shop, user].map((item) => ({\n      lat: Number(item.lat || '0'),\n      lng: Number(item.lng || '0'),\n    }));\n\n    let bounds = new maps.LatLngBounds();\n    for (var i = 0; i < markers.length; i++) {\n      bounds.extend(markers[i]);\n    }\n    map.fitBounds(bounds);\n  };\n\n  return (\n    <>\n      <Modal\n        visible={!!id}\n        title={t('show.locations')}\n        closable={true}\n        onCancel={handleCancel}\n        style={{ minWidth: '80vw' }}\n        footer={[\n          <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {loading ? (\n          <Loading />\n        ) : (\n          <Card>\n            <Steps current={current} status={status} className='mb-5'>\n              {steps?.map((item, index) => (\n                <Step\n                  title={t(item.name)}\n                  key={item.id + index}\n                  icon={item?.icon}\n                />\n              ))}\n            </Steps>\n            <Row gutter={12}>\n              <Col span={12}>\n                <h3>\n                  {t('order.id')} #{data?.id}\n                </h3>\n                <p>\n                  <BsCalendar2Day /> {data?.created_at}\n                </p>\n                <p>\n                  {t('schedulet.at')} {data?.delivery_date}\n                </p>\n                <span>\n                  <strong>{data?.shop?.translation?.title}</strong>{' '}\n                  {data?.details?.map((details, index) => (\n                    <Tag className='mb-2' color={colors[index]}>\n                      {details?.stock?.product.translation.title}\n                    </Tag>\n                  ))}\n                </span>\n              </Col>\n              <Col span={12}>\n                <p>\n                  {t('status')}{' '}\n                  {data?.status === 'new' ? (\n                    <Tag color='blue'>{t(data?.status)}</Tag>\n                  ) : data?.status === 'canceled' ? (\n                    <Tag color='error'>{t(data?.status)}</Tag>\n                  ) : (\n                    <Tag color='cyan'>{t(data?.status)}</Tag>\n                  )}\n                </p>\n                <p>\n                  {t('payment.method')}{' '}\n                  <strong>{data?.transaction?.payment_system?.tag}</strong>\n                </p>\n                <p>\n                  {t('order.type')} <strong>{data?.delivery_type}</strong>\n                </p>\n                <p>\n                  {t('payment.type')}{' '}\n                  <strong>{data?.transaction?.status}</strong>\n                </p>\n              </Col>\n\n              <Col span={24} className='mt-5'>\n                <h4>{t('map')}</h4>\n                <div\n                  className='map-container'\n                  style={{ height: 400, width: '100%' }}\n                >\n                  <GoogleMapReact\n                    bootstrapURLKeys={{\n                      key: google_map_key || MAP_API_KEY,\n                    }}\n                    defaultZoom={14}\n                    center={center}\n                    options={{\n                      fullscreenControl: false,\n                    }}\n                    onGoogleApiLoaded={handleLoadMap}\n                  >\n                    <Store lat={shop?.lat} lng={shop?.lng} />\n                    <User lat={user?.lat} lng={user?.lng} />\n                  </GoogleMapReact>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default ShowLocationsMap;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/downloadModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-delete-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-group-modal.js",["6453"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Form, Input, Modal } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from 'components/language-list';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport propertyService from 'services/seller/property';\nimport { toast } from 'react-toastify';\nimport { fetchSellerPropertyGroups } from 'redux/slices/propertyGroup';\nimport getTranslationFields from 'helpers/getTranslationFields';\nimport Loading from 'components/loading';\n\nexport default function PropertyGroupModal({ modal, handleCancel, onSuccess }) {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { languages, defaultLang } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  function fetchGroup(id) {\n    setLoading(true);\n    propertyService\n      .getGroupById(id)\n      .then((res) => {\n        const data = res.data;\n        form.setFieldsValue({ ...data, ...getLanguageFields(data) });\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    if (modal?.id) {\n      fetchGroup(modal.id);\n    }\n  }, [modal]);\n\n  function createGroup(body) {\n    setLoadingBtn(true);\n    propertyService\n      .createGroup(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        handleCancel();\n        dispatch(fetchSellerPropertyGroups());\n        !!onSuccess && onSuccess();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      title: getTranslationFields(languages, values),\n      type: 'text',\n    };\n    if (modal?.id) {\n      updateGroup(modal?.id, body);\n    } else {\n      createGroup(body);\n    }\n  };\n\n  function updateGroup(id, body) {\n    setLoadingBtn(true);\n    propertyService\n      .updateGroup(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(fetchSellerPropertyGroups());\n        handleCancel();\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale\n      )?.title,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  return (\n    <Modal\n      title={modal?.id ? t('edit.property.group') : t('add.property.group')}\n      visible={!!modal}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='save-button-group'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button-group' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <>\n          <div className='d-flex justify-content-end'>\n            <LanguageList />\n          </div>\n          <Form\n            layout='vertical'\n            name='property-group'\n            form={form}\n            onFinish={onFinish}\n          >\n            {languages.map((item) => (\n              <Form.Item\n                key={'title' + item.locale}\n                rules={[\n                  {\n                    required: item.locale === defaultLang,\n                    message: t('required'),\n                  },\n                ]}\n                name={`title[${item.locale}]`}\n                label={t('title')}\n                hidden={item.locale !== defaultLang}\n              >\n                <Input placeholder={t('title')} />\n              </Form.Item>\n            ))}\n          </Form>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/property/property-group-show-modal.js",["6454"],[],"import { Descriptions, Modal, Image, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loading from 'components/loading';\nimport { IMG_URL } from 'configs/app-global';\nimport propertyService from 'services/seller/property';\n\nexport default function PropertyGroupShowModal({ open, handleClose }) {\n  const { t } = useTranslation();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const fetchValue = () => {\n    setLoading(true);\n    propertyService\n      .getGroupById(open)\n      .then((res) => {\n        setData(res.data);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchValue();\n  }, []);\n\n  return (\n    <Modal\n      closable={false}\n      visible={open}\n      footer={null}\n      centered\n      onCancel={handleClose}\n    >\n      {!loading ? (\n        <Descriptions title={`${t('property.group.value')}`} bordered>\n          {data?.values?.map((item, index) => (\n            <Descriptions.Item\n              key={index}\n              label={data.translation.title}\n              span={3}\n            >\n              {data.type === 'text' ? (\n                item.value\n              ) : data.type === 'image' ? (\n                <Image\n                  src={IMG_URL + item.value}\n                  alt='images'\n                  width={100}\n                  height={80}\n                />\n              ) : (\n                <Space>\n                  <div\n                    className='extra-color-wrapper-contain'\n                    style={{ backgroundColor: item.value }}\n                  />\n                  {item.value}\n                </Space>\n              )}\n            </Descriptions.Item>\n          ))}\n        </Descriptions>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/wallet/top-up.js",["6455","6456"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, InputNumber, Modal, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchRestPayments } from '../../../redux/slices/payment';\nimport Loading from '../../../components/loading';\nimport { toast } from 'react-toastify';\nimport Paystack from '../../../assets/images/paystack.svg';\nimport { FaPaypal } from 'react-icons/fa';\nimport { SiStripe, SiRazorpay } from 'react-icons/si';\nimport { AiOutlineWallet } from 'react-icons/ai';\nimport restPaymentService from '../../../services/rest/payment';\nimport walletService from 'services/seller/wallet';\n\nexport default function WalletTopUp({ open, handleCancel, refetch }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { payments, loading } = useSelector(\n    (state) => state.payment,\n    shallowEqual,\n  );\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const walletId = useSelector((state) => state.auth.user.walledId);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [paymentType, setPaymentType] = useState({});\n  const [paymentData, setPaymentData] = useState(null);\n  const [paymentData2, setPaymentData2] = useState(null);\n\n  const { payment_type } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n  const [form] = Form.useForm();\n\n  async function fetchSellerPaymentList() {\n    return await restPaymentService.getById(shop.id).then(({ data }) =>\n      setPaymentData(\n        data.map((item) => ({\n          label: item.payment.tag || 'no name',\n          value: item.payment.id,\n          key: item.payment.id,\n        })),\n      ),\n    );\n  }\n\n  async function fetchPaymentList() {\n    return restPaymentService.getAll().then(({ data }) =>\n      setPaymentData2(\n        data.map((item) => ({\n          label: item.tag || 'no name',\n          value: item.id,\n          key: item.id,\n        })),\n      ),\n    );\n  }\n\n  useEffect(() => {\n    if (!payments.length) {\n      dispatch(fetchRestPayments());\n    }\n    fetchSellerPaymentList();\n    fetchPaymentList().then();\n  }, []);\n\n  const handleSubmit = (values) => {\n    if (!paymentType.value) {\n      toast.warning(t('please.select.payment.type'));\n      return;\n    }\n\n    const data = {\n      wallet_id: walletId,\n      total_price: values.price,\n      currency_id: defaultCurrency?.id,\n    };\n\n    setLoadingBtn(true);\n    walletService\n      .topUp(paymentType.label, data)\n      .then(({ data }) => {\n        form.resetFields();\n        setPaymentType({});\n        handleCancel();\n        refetch();\n        window.open(data.data.url);\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const selectPayment = (type) => {\n    setPaymentType(type);\n  };\n\n  const handleAddIcon = (data) => {\n    switch (data) {\n      case 'wallet':\n        return <AiOutlineWallet size={80} />;\n      case 'paypal':\n        return <FaPaypal size={80} />;\n      case 'stripe':\n        return <SiStripe size={80} />;\n      case 'razorpay':\n        return <SiRazorpay size={80} />;\n      case 'paystack':\n        return <img src={Paystack} alt='img' width='80' height='80' />;\n    }\n  };\n\n  return (\n    <Modal\n      visible={open}\n      title={t('wallet.topup')}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          type='primary'\n          disabled={loading}\n          htmlType='submit'\n          form='payment'\n          loading={loadingBtn}\n          key='save-btn'\n        >\n          {t('save')}\n        </Button>,\n        <Button type='default' onClick={handleCancel} key='cancel-btn'>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {!loading ? (\n        <Form layout='vertical' id='payment' onFinish={handleSubmit}>\n          <Row gutter={12}>\n            <Col span={24}>\n              <Form.Item\n                name='price'\n                label={t('price')}\n                rules={[\n                  { required: true, message: t('required') },\n                  {\n                    type: 'number',\n                    min: 0,\n                    message: t('should.be.greater.than.0'),\n                  },\n                ]}\n              >\n                <InputNumber className='w-100' />\n              </Form.Item>\n            </Col>\n            {(payment_type === 'admin' ? paymentData2 : paymentData)\n              ?.filter(\n                (item) => item?.label !== 'cash' && item?.label !== 'wallet',\n              )\n              ?.map((item, index) => (\n                <Col span={8} key={index}>\n                  <Card\n                    className={`payment-card ${\n                      paymentType?.label === item.label ? 'active' : ''\n                    }`}\n                    onClick={() => selectPayment(item)}\n                  >\n                    <div className='payment-icon'>\n                      {handleAddIcon(item?.label)}\n                    </div>\n                    <div className='font-weight-bold mt-2'>\n                      {t(item?.label)}\n                    </div>\n                  </Card>\n                </Col>\n              ))}\n          </Row>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/dnd/Incorporate/index.js",["6457"],[],"import List from '../List/index';\nimport { DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { useState } from 'react';\nimport { Spin } from 'antd';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {\n  clearCurrentOrders,\n  clearItems,\n  setItems,\n} from 'redux/slices/sellerOrders';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { useEffect } from 'react';\nimport { mockOrderList } from '../../../../../constants';\nimport OrderCardLoader from 'components/order-card-loader';\nimport { toast } from 'react-toastify';\nimport orderService from 'services/seller/order';\nimport OrderCardSeller from 'components/order-card-seller';\nimport Loading from 'components/loading';\nimport OrderNoteModal from '../../../../order/orderNoteModal';\n\nconst Incorporate = ({\n  goToEdit,\n  goToShow,\n  fetchOrderAllItem,\n  fetchOrders,\n  setLocationsMap,\n  setId,\n  setIsModalVisible,\n  setText,\n  setDowloadModal,\n  setType,\n  orderType,\n}) => {\n  const dispatch = useDispatch();\n  const { statusList, loading } = useSelector(\n    (state) => state.orderStatus,\n    shallowEqual,\n  );\n  const statuses = statusList?.map((status) => status?.name);\n  const { items } = useSelector((state) => state.sellerOrders, shallowEqual);\n  const { isEnabledStatusChange } = useSelector(\n    (state) => state.myShop,\n    shallowEqual,\n  );\n  const orders = useSelector((state) => state.sellerOrders, shallowEqual);\n  const [key, setKey] = useState('');\n  const [current, setCurrent] = useState({});\n  const [currentCId, setCurrentCId] = useState({});\n  const [statusChangedOrder, setStatusChangedOrder] = useState(null);\n  const [modalNoteType, setModalNoteType] = useState('');\n  const [result, setResult] = useState({});\n\n  const removeFromList = (list, index) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(index, 1);\n    return [removed, result];\n  };\n\n  const addToList = (list, index, element) => {\n    const result = Array.from(list);\n    result.splice(index, 0, element);\n    return result;\n  };\n\n  const changeStatus = (id, params) => {\n    orderService.updateStatus(id, params).then(() => {\n      toast.success(`#${id} order status changed`);\n    });\n  };\n\n  const changeColumnData = (result) => {\n    const listCopy = { ...items };\n    const sourceList = listCopy[result.source.droppableId];\n    const [removedElement, newSourceList] = removeFromList(\n      sourceList,\n      result.source.index,\n    );\n    listCopy[result.source.droppableId] = newSourceList;\n    const destinationList = listCopy[result.destination.droppableId];\n    listCopy[result.destination.droppableId] = addToList(\n      destinationList,\n      result.destination.index,\n      removedElement,\n    );\n    dispatch(setItems(listCopy));\n    setCurrentCId(null);\n  };\n\n  const onDragStart = (task) => {\n    const id = statuses?.findIndex(\n      (item) => item === task?.source?.droppableId,\n    );\n    setCurrent(task);\n    setCurrentCId(id);\n  };\n\n  const onDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n    setResult(result);\n    if (result.destination.droppableId === 'pause') {\n      setModalNoteType('pause');\n      setStatusChangedOrder(result.draggableId);\n    } else if (\n      result.destination &&\n      current.source.droppableId !== result.destination.droppableId\n    ) {\n      changeStatus(result.draggableId, {\n        status: result.destination.droppableId,\n      });\n      changeColumnData(result);\n    }\n  };\n\n  const handleScroll = (event, key) => {\n    const lastProductLoaded = event.target.lastChild;\n    const pageOffset = event.target.clientHeight + event.target.scrollTop;\n    if (lastProductLoaded) {\n      const lastProductLoadedOffset =\n        lastProductLoaded.offsetTop + lastProductLoaded.clientHeight + 19.9;\n      if (pageOffset > lastProductLoadedOffset) {\n        if (\n          orders[key].meta.last_page > orders[key].meta.current_page &&\n          !orders[key]?.loading\n        ) {\n          setKey(key);\n          fetchOrders({\n            page: orders[key].meta.current_page + 1,\n            perPage: 5,\n            status: key,\n          });\n        }\n      }\n    }\n  };\n\n  // const checkIsEmpty = () => {\n  //   const array = Object.keys(items).map((item) => {\n  //     return items[item].length === 0;\n  //   });\n  //\n  //   return array.includes(true);\n  // };\n\n  const checkDisable = (index) => {\n    if (index === 0 && currentCId === statuses?.length - 1) return false;\n    return Boolean(currentCId > index);\n  };\n\n  useEffect(() => {\n    dispatch(clearItems());\n    // if (checkIsEmpty()) {\n    fetchOrderAllItem();\n    // }\n  }, []);\n\n  const reloadOrder = (item) => {\n    dispatch(clearCurrentOrders(item));\n    fetchOrders({ status: item });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <div>\n          <Loading />\n        </div>\n      ) : (\n        <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n          <div className='order-board'>\n            {statuses?.map((item, index) => (\n              <div key={item} className='dnd-column'>\n                <List\n                  title={item}\n                  onDragEnd={onDragEnd}\n                  name={item}\n                  isDropDisabled={checkDisable(index)}\n                  total={items[item]?.length}\n                  loading={orders[item]?.loading}\n                  reloadOrder={() => reloadOrder(item)}\n                >\n                  <Scrollbars\n                    onScroll={(e) => handleScroll(e, item)}\n                    autoHeight\n                    autoHeightMin={'75vh'}\n                    autoHeightMax={'75vh'}\n                    autoHide\n                    id={item}\n                  >\n                    {!Boolean(orders[item]?.loading && !items[item]?.length)\n                      ? items[item]?.map((data, index) => (\n                          <>\n                            <Draggable\n                              key={data.id}\n                              draggableId={data.id.toString()}\n                              index={index}\n                              isDragDisabled={!isEnabledStatusChange}\n                            >\n                              {(provided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  <OrderCardSeller\n                                    data={data}\n                                    goToEdit={goToEdit}\n                                    goToShow={goToShow}\n                                    setLocationsMap={setLocationsMap}\n                                    setId={setId}\n                                    setIsModalVisible={setIsModalVisible}\n                                    setText={setText}\n                                    setDowloadModal={setDowloadModal}\n                                    setType={setType}\n                                    orderType={orderType}\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          </>\n                        ))\n                      : mockOrderList[item]?.map(() => (\n                          <OrderCardLoader loading={true} />\n                        ))}\n                    {orders[item]?.loading && item === key && (\n                      <Spin\n                        indicator={\n                          <LoadingOutlined\n                            style={{\n                              fontSize: 24,\n                            }}\n                            spin\n                          />\n                        }\n                      />\n                    )}\n                  </Scrollbars>\n                </List>\n              </div>\n            ))}\n          </div>\n        </DragDropContext>\n      )}\n      {statusChangedOrder && (\n        <OrderNoteModal\n          result={result}\n          changeColumnData={changeColumnData}\n          statusChangedOrder={statusChangedOrder}\n          setStatusChangedOrder={setStatusChangedOrder}\n          modalNoteType={modalNoteType}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Incorporate;\n","/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/dnd/Incorporate/index.js",["6458","6459"],[],"import List from '../List/index';\nimport { DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { useState } from 'react';\nimport { Spin } from 'antd';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {\n  clearCurrentOrders,\n  clearItems,\n  setItems,\n} from '../../../../../redux/slices/waiterOrder';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { useEffect } from 'react';\nimport { mockOrderList } from '../../../../../constants';\nimport OrderCardLoader from '../../../../../components/order-card-loader';\nimport { toast } from 'react-toastify';\nimport orderService from '../../../../../services/waiter/order';\nimport OrderCardWaiter from 'components/order-card-waiter';\nconst statuses = [\n  'new',\n  'accepted',\n  'ready',\n  'on_a_way',\n  'delivered',\n  'canceled',\n];\nconst Incorporate = ({\n  goToEdit,\n  goToShow,\n  fetchOrderAllItem,\n  fetchOrders,\n  setLocationsMap,\n  setId,\n  setIsModalVisible,\n  setText,\n  setDowloadModal,\n  setType,\n}) => {\n  const dispatch = useDispatch();\n  const { items } = useSelector((state) => state.waiterOrder, shallowEqual);\n  const orders = useSelector((state) => state.waiterOrder, shallowEqual);\n  const [key, setKey] = useState('');\n  const [current, setCurrent] = useState({});\n  const [currentCId, setCurrentCId] = useState({});\n\n  const removeFromList = (list, index) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(index, 1);\n    return [removed, result];\n  };\n\n  const addToList = (list, index, element) => {\n    const result = Array.from(list);\n    result.splice(index, 0, element);\n    return result;\n  };\n\n  const changeStatus = (id, params) => {\n    orderService.updateStatus(id, params).then((res) => {\n      toast.success(`#${id} order status changed`);\n    });\n  };\n\n  const onDragStart = (task) => {\n    const id = statuses.findIndex((item) => item === task.source.droppableId);\n    setCurrent(task);\n    setCurrentCId(id);\n  };\n\n  const onDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n    if (\n      result.destination &&\n      current.source.droppableId !== result.destination.droppableId\n    ) {\n      changeStatus(result.draggableId, {\n        status: result.destination.droppableId,\n      });\n    }\n    const listCopy = { ...items };\n    const sourceList = listCopy[result.source.droppableId];\n    const [removedElement, newSourceList] = removeFromList(\n      sourceList,\n      result.source.index\n    );\n    listCopy[result.source.droppableId] = newSourceList;\n    const destinationList = listCopy[result.destination.droppableId];\n    listCopy[result.destination.droppableId] = addToList(\n      destinationList,\n      result.destination.index,\n      removedElement\n    );\n    dispatch(setItems(listCopy));\n    setCurrentCId(null);\n  };\n\n  const handleScroll = (event, key) => {\n    const lastProductLoaded = event.target.lastChild;\n    const pageOffset = event.target.clientHeight + event.target.scrollTop;\n    if (lastProductLoaded) {\n      const lastProductLoadedOffset =\n        lastProductLoaded.offsetTop + lastProductLoaded.clientHeight + 19.9;\n      if (pageOffset > lastProductLoadedOffset) {\n        if (\n          orders[key].meta.last_page > orders[key].meta.current_page &&\n          !orders[key].loading\n        ) {\n          setKey(key);\n          fetchOrders({\n            page: orders[key].meta.current_page + 1,\n            perPage: 5,\n            status: key,\n          });\n        }\n      }\n    }\n  };\n\n  const checkIsEmpty = () => {\n    const array = Object.keys(items).map((item) => {\n      if (items[item].length === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (array.includes(true)) return true;\n    else return false;\n  };\n\n  const checkDisable = (index) => {\n    if (index === 0 && currentCId === statuses.length - 1) return false;\n    if (Boolean(currentCId > index)) return true;\n    else return false;\n  };\n\n  useEffect(() => {\n    dispatch(clearItems());\n    // if (checkIsEmpty()) {\n    fetchOrderAllItem();\n    // }\n  }, []);\n\n  const reloadOrder = (item) => {\n    dispatch(clearCurrentOrders(item));\n    fetchOrders({ status: item });\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n      <div className='order-board'>\n        {statuses?.map((item, index) => (\n          <div key={item} className='dnd-column'>\n            <List\n              title={item}\n              onDragEnd={onDragEnd}\n              name={item}\n              isDropDisabled={checkDisable(index)}\n              total={items[item]?.length}\n              loading={orders[item].loading}\n              reloadOrder={() => reloadOrder(item)}\n            >\n              <Scrollbars\n                onScroll={(e) => handleScroll(e, item)}\n                autoHeight\n                autoHeightMin={'75vh'}\n                autoHeightMax={'75vh'}\n                autoHide\n                id={item}\n              >\n                {!Boolean(orders[item].loading && !items[item]?.length)\n                  ? items[item]?.map((data, index) => (\n                      <>\n                        <Draggable\n                          key={data.id}\n                          draggableId={data.id.toString()}\n                          index={index}\n                        >\n                          {(provided, snapshot) => (\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                            >\n                              <OrderCardWaiter\n                                data={data}\n                                goToShow={goToShow}\n                              />\n                            </div>\n                          )}\n                        </Draggable>\n                      </>\n                    ))\n                  : mockOrderList[item]?.map(() => (\n                      <OrderCardLoader loading={true} />\n                    ))}\n                {orders[item].loading && item === key && (\n                  <Spin\n                    indicator={\n                      <LoadingOutlined\n                        style={{\n                          fontSize: 24,\n                        }}\n                        spin\n                      />\n                    }\n                  />\n                )}\n              </Scrollbars>\n            </List>\n          </div>\n        ))}\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default Incorporate;\n","/home/mostafa/Magde/new/frontadminreact/src/components/image-gallery.js",["6460"],[],"import { Space, Upload, Button, Row } from 'antd';\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport galleryService from 'services/gallery';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\n\nconst ImageGallery = ({\n  fileList,\n  setFileList,\n  type,\n  form,\n  multiple,\n  loadingBtn,\n  setLoadingBtn,\n  imageList,\n  setImageList,\n  handleClose,\n}) => {\n  const { t } = useTranslation();\n\n  const createImage = (file) => {\n    return {\n      uid: file.title,\n      name: file.title,\n      status: 'done', // done, uploading, error\n      url: file.title,\n      created: true,\n    };\n  };\n\n  const handleSave = () => {\n    setLoadingBtn(true);\n    const formData = new FormData();\n    formData.append('type', type);\n    imageList.forEach((item, index) => {\n      formData.append(`images[${index}]`, item?.originFileObj);\n    });\n    galleryService\n      .storeMany(formData)\n      .then(({ data }) => {\n        const images = data?.title?.map((item) => createImage({ title: item }));\n        setFileList((prev) => [...prev, ...images]);\n        form.setFieldsValue({\n          images: [...fileList, ...images],\n        });\n        handleClose();\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const handleChange = ({ fileList }) => {\n    setImageList(fileList);\n  };\n  const handleRemove = (file) => {\n    setImageList((prev) => prev.filter((item) => item.uid !== file.uid));\n  };\n\n  const uploadButton = (\n    <button\n      style={{\n        border: 0,\n        background: 'none',\n      }}\n      type='button'\n    >\n      <PlusOutlined />\n      <div\n        style={{\n          marginTop: 8,\n        }}\n      >\n        Upload\n      </div>\n    </button>\n  );\n\n  return (\n    <>\n      <Upload\n        listType='picture-card'\n        accept='.png,.jpg,.jpeg,.webp,.avif,jfif'\n        onChange={handleChange}\n        className='antdImgUpload'\n        showUploadList={false}\n        onRemove={handleRemove}\n        fileList={imageList}\n        // beforeUpload={(file) => {\n        //   const isItAtLeast2MB = file.size / 1024 / 1024 < 2;\n        //   if (!isItAtLeast2MB) {\n        //     toast.error(t('max.2.mb'));\n        //     return false;\n        //   }\n        //   return true;\n        // }}\n        customRequest={() => {}}\n        disabled={!multiple && imageList.length > 0}\n        multiple={multiple}\n      >\n        {uploadButton}\n      </Upload>\n      {imageList?.length > 0 && (\n        <Row gutter={12} className='mt-4 media-container'>\n          {imageList.map((item) => (\n            <div className='item'>\n              <span>{item?.name || ''}</span>\n              <button\n                className='delete-button'\n                onClick={() => handleRemove(item)}\n              >\n                <DeleteOutlined />\n              </button>\n            </div>\n          ))}\n        </Row>\n      )}\n      <Space className='mt-4'>\n        <Button\n          type='primary'\n          onClick={handleSave}\n          loading={loadingBtn}\n          disabled={!imageList?.length}\n        >\n          {t('save')}\n        </Button>\n        <Button onClick={handleClose}>{t('cancel')}</Button>\n      </Space>\n    </>\n  );\n};\n\nexport default ImageGallery;\n","/home/mostafa/Magde/new/frontadminreact/src/components/upload/upload-media.js",["6461"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'antd';\nimport { colLg } from '../card-responsive';\nimport { useTranslation } from 'react-i18next';\nimport GalleryItem from './gallery-item';\nimport { BsFolder } from 'react-icons/bs';\nimport Meta from 'antd/lib/card/Meta';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchGalleryTypes } from 'redux/slices/gallery';\nimport Loading from 'components/loading';\n\nconst UploadMedia = ({\n  setImageList,\n  imageList,\n  setIsModalOpen,\n  form,\n  name,\n}) => {\n  const { t } = useTranslation();\n  const [currentType, setCurrentType] = useState(null);\n  const dispatch = useDispatch();\n  const { types, loading } = useSelector(\n    (state) => state.gallery,\n    shallowEqual,\n  );\n  useEffect(() => {\n    dispatch(fetchGalleryTypes({}));\n  }, []);\n  return (\n    <>\n      {currentType ? (\n        <GalleryItem\n          type={currentType}\n          setCurrentType={setCurrentType}\n          setImageList={setImageList}\n          imageList={imageList}\n          setIsModalOpen={setIsModalOpen}\n          form={form}\n          name={name}\n        />\n      ) : (\n        <Card className='media-upload-gallery-container'>\n          {loading ? (\n            <Loading />\n          ) : (\n            <Row gutter={[24, 24]}>\n              {Object.values(types).map((item, index) => {\n                return (\n                  <Col {...colLg} key={index}>\n                    <Card\n                      cover={<BsFolder className='icon-folder' />}\n                      className='folder'\n                      onClick={() => setCurrentType(item)}\n                    >\n                      <Meta title={t(`${item}`)} />\n                    </Card>\n                  </Col>\n                );\n              })}\n            </Row>\n          )}\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport default UploadMedia;\n","/home/mostafa/Magde/new/frontadminreact/src/components/video-uploader.js",["6462","6463"],[],"import React, { useState } from 'react';\nimport { Upload, Modal, Row, Col, Space, Button, Image, Form } from 'antd';\nimport { PlusOutlined, DeleteOutlined } from '@ant-design/icons';\nimport MediaUpload from './upload';\nimport galleryService from 'services/gallery';\nimport { useTranslation } from 'react-i18next';\n\nconst VideoUploaderWithModal = ({\n  // form,\n  mediaList,\n  setMediaList,\n  name = 'products',\n}) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [videoPreview, setVideoPreview] = useState(null);\n  const [imgPreview, setImgPreview] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [imgPreviewModal, setImgPreviewModal] = useState(false);\n\n  const handlePreview = async ({ file, type }) => {\n    if (file.name) {\n      if (type === 'video')\n        setVideoPreview(\n          <video controls src={file.name} width={450} height={450}></video>,\n        );\n      else\n        setVideoPreview(\n          <Image src={file.name} width='100%' height={450} alt='preview-img' />,\n        );\n\n      setModalVisible(true);\n    } else {\n      setVideoPreview(null);\n    }\n  };\n\n  const handleModalClose = () => {\n    setModalVisible(false);\n  };\n\n  const createImage = (file) => {\n    return {\n      uid: file.title,\n      name: file.title,\n      status: 'done', // done, uploading, error\n      url: file.title,\n      created: true,\n    };\n  };\n\n  const handleUpload = ({ file, onSuccess }) => {\n    setImgPreviewModal(true);\n    const formData = new FormData();\n    formData.append('image', file);\n    formData.append('type', name);\n    galleryService.upload(formData).then(({ data }) => {\n      setMediaList((prev) => ({\n        ...prev,\n        images: [...prev.images, { ...createImage(data), isVideo: true }],\n      }));\n      onSuccess('ok');\n    });\n  };\n\n  const handleSave = () => {\n    setMediaList((prev) => ({\n      ...prev,\n      previews: [...prev.previews, ...imgPreview],\n    }));\n    setImgPreview([]);\n    setImgPreviewModal(false);\n  };\n\n  const removeImg = (initialIndex) => {\n    const nextImages = mediaList.images.filter((item, index) => {\n      if (index !== initialIndex) {\n        return item;\n      }\n    });\n    const nextPreviews = mediaList.previews.filter((item, index) => {\n      if (index !== initialIndex) {\n        return item;\n      }\n    });\n    setMediaList({ images: nextImages, previews: nextPreviews });\n  };\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Space className='align-items-start'>\n          <Upload\n            customRequest={handleUpload}\n            accept='video/*'\n            listType='text'\n            className='video-upload'\n            multiple={false}\n            fileList={[]}\n          >\n            <div className='media-upload'>\n              <PlusOutlined /> <span>{t('upload.video')}</span>\n            </div>\n          </Upload>\n        </Space>\n      </Col>\n      <Col span={24}>\n        {mediaList?.previews?.map((item, index) => {\n          return (\n            <Space className='uploaded-file' wrap>\n              <span\n                className='media-item'\n                onClick={() =>\n                  handlePreview({\n                    type: 'img',\n                    file: mediaList?.previews[index],\n                  })\n                }\n              >\n                {mediaList?.previews[index]?.name}\n              </span>\n              <span\n                className='media-item'\n                onClick={() =>\n                  handlePreview({\n                    type: 'video',\n                    file: mediaList?.images[index],\n                  })\n                }\n              >\n                {mediaList?.images[index]?.name}\n              </span>\n              <DeleteOutlined\n                className='delete-media-item'\n                onClick={() => removeImg(index)}\n              />\n            </Space>\n          );\n        })}\n      </Col>\n      <Modal\n        title='Video Preview'\n        visible={modalVisible}\n        onCancel={handleModalClose}\n        footer={null}\n      >\n        {videoPreview}\n      </Modal>\n      <Modal title='Preview image' visible={imgPreviewModal} footer={null}>\n        <Form form={form} onFinish={handleSave} layout='vertical'>\n          <Row gutter={[24, 24]}>\n            <Col span={24}>\n              <Form.Item\n                label={t('preview.image')}\n                name='preview-image'\n                rules={[\n                  {\n                    required: !imgPreview?.length,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type={name}\n                  imageList={imgPreview}\n                  setImageList={setImgPreview}\n                  multiple={false}\n                  text='upload.image'\n                  form={form}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={24} className='d-flex justify-content-end'>\n              <Button type='primary' onClick={() => form.submit()}>\n                {t('save')}\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Modal>\n    </Row>\n  );\n};\n\nexport default VideoUploaderWithModal;\n","/home/mostafa/Magde/new/frontadminreact/src/views/chat/chat-date.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/categories/categoryStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/chat/user-message.js",["6464"],[],"import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { Message } from '@chatscope/chat-ui-kit-react';\nimport { fetchRepliedMessage } from '../../firebase';\nimport { useSelector } from 'react-redux';\nimport ReplyMessage from './replyMessage';\nimport { Dropdown, Menu } from 'antd';\nimport { FaReply } from 'react-icons/fa';\n\nconst UserMessage = ({ data, onActionMessage }) => {\n  const { time, message, type, replyDocId } = data;\n  const currentChatId = useSelector((state) => state.chat?.currentChat?.chatId);\n  const [replyMessage, setReplyMessage] = useState(null);\n\n  const handleMenuClick = ({ key }) => {\n    onActionMessage(key);\n  };\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key='reply' icon={<FaReply />}>\n        <div className='w-100'>Reply</div>\n      </Menu.Item>\n    </Menu>\n  );\n\n  useEffect(() => {\n    if (replyDocId) {\n      return fetchRepliedMessage(replyDocId, currentChatId, setReplyMessage);\n    }\n  }, []);\n  return (\n    <div className='user-sms-wrapper'>\n      <div className={`user-message ${type === 'image' && 'chat-image'}`}>\n        <Dropdown overlay={menu} trigger={['contextMenu']}>\n          <div>\n            {replyMessage && <ReplyMessage replyMessage={replyMessage} />}\n            {type === 'image' ? (\n              <Message\n                type='image'\n                model={{\n                  direction: 'incoming',\n                  payload: {\n                    src: message,\n                    alt: 'Image',\n                    width: '100%',\n                    height: '100%',\n                  },\n                }}\n              />\n            ) : (\n              <div className='text'>{message}</div>\n            )}\n          </div>\n        </Dropdown>\n\n        <div className='time'>{moment(new Date(time)).format('HH:mm')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserMessage;\n","/home/mostafa/Magde/new/frontadminreact/src/views/chat/admin-message.js",["6465","6466","6467"],[],"import React, {useEffect, useState} from 'react';\nimport moment from 'moment';\nimport {Message} from '@chatscope/chat-ui-kit-react';\nimport {IoCheckmarkOutline, IoCheckmarkDone} from \"react-icons/io5\";\nimport {FaReply} from \"react-icons/fa\";\nimport {MdOutlineModeEditOutline} from \"react-icons/md\";\nimport {RiDeleteBin6Fill} from \"react-icons/ri\";\nimport {Dropdown, Menu, Space} from \"antd\";\nimport {useSelector} from \"react-redux\";\nimport {fetchRepliedMessage} from \"../../firebase\";\nimport ReplyMessage from \"./replyMessage\";\n\nconst AdminMessage = ({data, onActionMessage, onDeleteMessage}) => {\n    const {type, time, message, status = '', read, replyDocId} = data;\n    const currentChatId = useSelector((state) => state.chat?.currentChat?.chatId)\n\n    const [replyMessage, setReplyMessage] = useState(null);\n    const handleMenuClick = ({key}) => {\n       switch (key) {\n           case 'delete':\n               return onDeleteMessage();\n           default:\n               return onActionMessage(key)\n       }\n    }\n    const menu = (\n        <Menu onClick={handleMenuClick}>\n            <Menu.Item key=\"reply\" icon={<FaReply/>}>Reply</Menu.Item>\n            {type !== 'image' && <Menu.Item key=\"edit\" icon={<MdOutlineModeEditOutline/>}>Edit</Menu.Item>}\n            <Menu.Item key=\"delete\" icon={<RiDeleteBin6Fill/>} danger>Delete</Menu.Item>\n        </Menu>\n    );\n    useEffect(() => {\n        if (replyDocId) {\n            return fetchRepliedMessage(replyDocId, currentChatId, setReplyMessage)\n        }\n    }, []);\n    return (\n        <div className='admin-message-wrapper'>\n            <div className={`admin-message ${type === 'image' && 'chat-image'}`}>\n                <Dropdown\n                    overlay={menu}\n                    trigger={['contextMenu']}>\n                    <div>\n                        {replyMessage && <ReplyMessage replyMessage={replyMessage}/>}\n                        {type === 'image' ? (\n                            <Message\n                                type='image'\n                                model={{\n                                    direction: 'incoming',\n                                    payload: {\n                                        src: message,\n                                        alt: 'Image',\n                                        width: '100%',\n                                        height: '100%',\n                                    },\n                                }}\n                            />\n                        ) : <div className='text'>{message}</div>}\n                    </div>\n                </Dropdown>\n\n                <div className='time'>{moment(new Date(time)).format('HH:mm')}</div>\n                <span className='double-check'>\n          {read ? <IoCheckmarkDone size={16}/> : <IoCheckmarkOutline size={16}/>}\n        </span>\n            </div>\n        </div>\n    );\n};\n\nexport default AdminMessage;\n","/home/mostafa/Magde/new/frontadminreact/src/views/categories/category-request-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/orderChart.js",["6468"],[],"import React, { useMemo } from 'react';\nimport { Badge, Card, Select, Spin } from 'antd';\nimport moment from 'moment';\nimport ChartWidget from 'components/chart-widget';\nimport { COLORS } from 'constants/ChartConstant';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchOrderCounts,\n  fetchSellerOrderCounts,\n  filterOrderCounts,\n} from 'redux/slices/statistics/orderCounts';\nimport { useTranslation } from 'react-i18next';\n\nexport default function OrderChart() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { counts, params, loading } = useSelector(\n    (state) => state.orderCounts,\n    shallowEqual,\n  );\n  const { role } = useSelector((state) => state.auth.user, shallowEqual);\n  const { direction } = useSelector((state) => state.theme.theme, shallowEqual);\n  const categories = useMemo(\n    () => counts.map((item) => moment(item.time).format('D MMM')),\n    [counts],\n  );\n  const chartData = useMemo(() => {\n    return [\n      {\n        name: t('orders'),\n        data: counts?.map((item) => item.count) || [],\n      },\n    ];\n  }, [counts]);\n\n  const handleChange = (value) => {\n    const payload = { time: value };\n    dispatch(filterOrderCounts(payload));\n    switch (role) {\n      case 'admin':\n        dispatch(fetchOrderCounts(payload));\n        break;\n      case 'seller':\n        dispatch(fetchSellerOrderCounts(payload));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Card\n      className='h-100'\n      title={t('orders')}\n      extra={\n        <Select\n          value={params.time}\n          size='small'\n          style={{ minWidth: 110 }}\n          onSelect={handleChange}\n          defaultValue='subMonth'\n        >\n          <Select.Option value='subWeek'>{t('this.week')}</Select.Option>\n          <Select.Option value='subMonth'>{t('this.month')}</Select.Option>\n          <Select.Option value='subYear'>{t('this.year')}</Select.Option>\n        </Select>\n      }\n    >\n      {loading && (\n        <div className='loader'>\n          <Spin />\n        </div>\n      )}\n      <div className='d-flex'>\n        <div className='mr-5'>\n          <h2 className='font-weight-bold mb-1'>\n            {counts?.reduce((total, item) => (total += item?.count), 0)}\n          </h2>\n          <p>\n            <Badge color={COLORS[6]} />\n            {t('total.orders.count')}\n          </p>\n        </div>\n      </div>\n      <div>\n        <ChartWidget\n          card={false}\n          series={chartData}\n          xAxis={categories}\n          height={280}\n          customOptions={{\n            colors: [COLORS[6], COLORS[0]],\n            legend: {\n              show: false,\n            },\n            stroke: {\n              width: 2.5,\n              curve: 'smooth',\n            },\n          }}\n          direction={direction}\n        />\n      </div>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/salesChart.js",["6469"],[],"import React, { useMemo } from 'react';\nimport { Badge, Card, Select, Spin } from 'antd';\nimport ChartWidget from '../../components/chart-widget';\nimport numberToPrice from '../../helpers/numberToPrice';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { COLORS } from '../../constants/ChartConstant';\nimport moment from 'moment';\nimport {\n  fetchOrderSales,\n  fetchSellerOrderSales,\n  filterOrderSales,\n} from '../../redux/slices/statistics/orderSales';\nimport { useTranslation } from 'react-i18next';\n\nexport default function SalesChart() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { defaultCurrency } = useSelector(\n    (state) => state.currency,\n    shallowEqual,\n  );\n  const { sales, params, loading } = useSelector(\n    (state) => state.orderSales,\n    shallowEqual,\n  );\n\n  const { role } = useSelector((state) => state.auth.user, shallowEqual);\n  const { direction } = useSelector((state) => state.theme.theme, shallowEqual);\n  const categories = useMemo(\n    () => sales.map((item) => moment(item.time).format('D MMM')),\n    [sales],\n  );\n\n  const chartData = useMemo(() => {\n    return [\n      {\n        name: t('sales'),\n        data: sales?.map((item) => item.total_price.toFixed(2)) || [],\n      },\n    ];\n  }, [sales]);\n\n  const handleChange = (value) => {\n    const payload = { time: value };\n    dispatch(filterOrderSales(payload));\n    switch (role) {\n      case 'admin':\n        dispatch(fetchOrderSales(payload));\n        break;\n      case 'seller':\n        dispatch(fetchSellerOrderSales(payload));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Card\n      className='h-100'\n      title={t('sales')}\n      extra={\n        <Select\n          value={params.time}\n          size='small'\n          style={{ minWidth: 110 }}\n          onSelect={handleChange}\n          defaultValue='subMonth'\n        >\n          <Select.Option value='subWeek'>{t('this.week')}</Select.Option>\n          <Select.Option value='subMonth'>{t('this.month')}</Select.Option>\n          <Select.Option value='subYear'>{t('this.year')}</Select.Option>\n        </Select>\n      }\n    >\n      {loading && (\n        <div className='loader'>\n          <Spin />\n        </div>\n      )}\n      <div className='d-flex'>\n        <div className='mr-5'>\n          <h2 className='font-weight-bold mb-1'>\n            {numberToPrice(\n              sales.reduce((total, item) => (total += item.total_price), 0),\n              defaultCurrency?.symbol,\n              defaultCurrency?.position,\n            )}\n          </h2>\n          <p>\n            <Badge color={COLORS[0]} />\n            {t('total.sales.amount')}\n          </p>\n        </div>\n      </div>\n      <div>\n        <ChartWidget\n          card={false}\n          type='area'\n          series={chartData}\n          xAxis={categories}\n          height={280}\n          customOptions={{\n            colors: COLORS,\n            legend: {\n              show: false,\n            },\n            stroke: {\n              width: 2.5,\n              curve: 'smooth',\n            },\n          }}\n          direction={direction}\n        />\n      </div>\n    </Card>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/statisticPriceWidget.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/topBar.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/topCustomers.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/useDebounce.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/orderPieChart.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/useUserActivity.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/export.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/user/userWalletModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/dashboard/topProducts.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/product-modal.js",[],["6470","6471"],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/pos-user-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/delivery-info.js",["6472"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport { Button, Card, Col, DatePicker, Form, Row, Select } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport shopService from 'services/restaurant';\nimport { setMenuData } from 'redux/slices/menu';\nimport { getCartData } from 'redux/selectors/cartSelector';\nimport { setCartData } from 'redux/slices/cart';\nimport { DebounceSelect } from 'components/search';\nimport deliveryPointService from 'services/delivery-point';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport deliveryPriceService from 'services/delivery-price';\nimport { toast } from 'react-toastify';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport DeliveryUserModal from './delivery-user-modal';\nimport addressService from '../../../services/deliveryzone/address';\n\nconst DeliveryInfo = ({ form }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const data = useSelector((state) => getCartData(state.cart));\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { currentBag } = useSelector((state) => state.cart, shallowEqual);\n  const cartData = useSelector((state) => getCartData(state.cart));\n  const [userAddressModal, setUserAddressModal] = useState(null);\n  const filter = activeMenu.data?.CurrentShop?.shop_closed_date?.map(\n    (date) => date.day,\n  );\n\n  const addressesList = useRef([]);\n\n  function disabledDate(current) {\n    const a = filter?.find(\n      (date) => date === moment(current).format('YYYY-MM-DD'),\n    );\n    const b = moment().add(-1, 'days') >= current;\n    if (a) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n\n  const range = (start, end) => {\n    const x = parseInt(start);\n    const y = parseInt(end);\n    const number = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n      21, 22, 23, 24,\n    ];\n    for (let i = x; i <= y; i++) {\n      delete number[i];\n    }\n    return number;\n  };\n\n  const disabledDateTime = () => ({\n    disabledHours: () =>\n      range(\n        moment(cartData?.delivery_date).format('YYYYMMDD') ===\n          moment(new Date()).format('YYYYMMDD')\n          ? moment(new Date()).add(1, 'hour').format('HH')\n          : 0,\n        24,\n      ),\n    disabledMinutes: () => [],\n    disabledSeconds: () => [],\n  });\n\n  const fetchShop = (uuid) => {\n    shopService.getById(uuid).then((data) => {\n      const currency_shop = data.data;\n      dispatch(setCartData({ currency_shop, bag_id: currentBag }));\n      dispatch(\n        setMenuData({\n          activeMenu,\n          data: {\n            ...activeMenu.data,\n            CurrentShop: data.data,\n          },\n        }),\n      );\n    });\n  };\n\n  const fetchDeliveryPoints = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    return deliveryPointService.get(params).then(({ data }) =>\n      data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const fetchUserAddresses = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n    };\n\n    return addressService.getAll(params).then(({ data }) => {\n      addressesList.current = data;\n      return data?.map((item) => ({\n        label: item?.title || item.location?.address,\n        value: item?.id,\n        key: item?.id,\n      }));\n    });\n  };\n\n  const delivery = [\n    {\n      label: t('delivery'),\n      value: 'delivery',\n      key: 1,\n    },\n    {\n      label: t('pickup'),\n      value: 'point',\n      key: 0,\n    },\n  ];\n\n  const setDeliveryPrice = (delivery) =>\n    dispatch(\n      setCartData({ delivery_type: delivery.value, bag_id: currentBag }),\n    );\n\n  const goToAddUserDeliveryAddress = () => {\n    if (!data.userUuid) {\n      toast.warning(t('please.select.client'));\n      return;\n    }\n    setUserAddressModal(data.userUuid);\n  };\n\n  useEffect(() => {\n    if (cartData?.shop?.value) {\n      fetchShop(cartData?.shop?.value);\n    }\n  }, [cartData?.shop]);\n\n  useDidUpdate(() => {\n    if (\n      cartData?.deliveryAddress?.country_id &&\n      cartData?.deliveryAddress?.city_id\n    ) {\n      const body = {\n        country_id: cartData?.deliveryAddress?.country_id,\n        city_id: cartData?.deliveryAddress?.city_id,\n      };\n      deliveryPriceService.get(body).then(({ data }) => {\n        dispatch(\n          setCartData({ delivery_price_id: data?.[0]?.id, bag_id: currentBag }),\n        );\n      });\n    }\n  }, [\n    cartData?.deliveryAddress?.country_id,\n    cartData?.deliveryAddress?.city_id,\n  ]);\n\n  return (\n    <Card title={t('shipping.info')} className='p-0'>\n      <Row gutter={12}>\n        <Col span={24}>\n          <Form.Item\n            name='delivery'\n            label={t('delivery')}\n            rules={[{ required: true, message: t('required') }]}\n          >\n            <Select\n              placeholder={t('delivery.type')}\n              options={delivery}\n              labelInValue\n              onSelect={setDeliveryPrice}\n              onChange={(deliveries) =>\n                dispatch(\n                  setCartData({\n                    deliveries,\n                    bag_id: currentBag,\n                  }),\n                )\n              }\n            />\n          </Form.Item>\n        </Col>\n        {cartData?.deliveries?.key === 1 && (\n          <>\n            <Col span={21}>\n              <Form.Item\n                name='address'\n                label={t('address')}\n                rules={[\n                  {\n                    required: true,\n                    message: t('address'),\n                  },\n                ]}\n              >\n                <DebounceSelect\n                  fetchOptions={fetchUserAddresses}\n                  placeholder={t('select.address')}\n                  allowClear={false}\n                  onChange={(e) => {\n                    if (e === undefined)\n                      return dispatch(\n                        setCartData({\n                          bag_id: currentBag,\n                          address: '',\n                          deliveryAddress: null,\n                        }),\n                      );\n\n                    const selectedAddress = addressesList.current.find(\n                      (item) => item.id === e.value,\n                    );\n                    dispatch(\n                      setCartData({\n                        bag_id: currentBag,\n                        address: e,\n                        deliveryAddress: {\n                          address: selectedAddress.location?.address,\n                          country_id: selectedAddress?.country_id,\n                          city_id: selectedAddress?.city_id,\n                          street_house_number:\n                            selectedAddress?.street_house_number,\n                          zip_code: selectedAddress?.zipcode,\n                          location: selectedAddress?.location,\n                        },\n                      }),\n                    );\n                  }}\n                  autoComplete='none'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={3}>\n              <Form.Item label=' '>\n                <Button\n                  icon={<PlusCircleOutlined />}\n                  onClick={goToAddUserDeliveryAddress}\n                />\n              </Form.Item>\n            </Col>\n          </>\n        )}\n        {cartData?.deliveries?.key === 0 && (\n          <Col span={24}>\n            <Form.Item\n              name='delivery_point'\n              label={t('delivery.point')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchDeliveryPoints}\n                placeholder={t('select.delivery.point')}\n                onChange={(delivery_point) => {\n                  dispatch(\n                    setCartData({\n                      delivery_point,\n                      bag_id: currentBag,\n                    }),\n                  );\n                }}\n              />\n            </Form.Item>\n          </Col>\n        )}\n        <Col span={24}>\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                name='delivery_date'\n                label={t('delivery.date')}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DatePicker\n                  placeholder={t('delivery.date')}\n                  className='w-100'\n                  format='YYYY-MM-DD'\n                  disabledDate={disabledDate}\n                  onChange={(e) => {\n                    const delivery_date = moment(e).format('YYYY-MM-DD');\n                    dispatch(\n                      setCartData({\n                        delivery_date,\n                        bag_id: currentBag,\n                      }),\n                    );\n                  }}\n                  allowClear={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={`${t('delivery.time')} (${t('up.to')})`}\n                name='delivery_time'\n                rules={[\n                  {\n                    required: false,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <DatePicker\n                  disabled={!data?.delivery_date}\n                  picker='time'\n                  placeholder={t('start.time')}\n                  className='w-100'\n                  format={'HH:mm'}\n                  showNow={false}\n                  disabledTime={disabledDateTime}\n                  onChange={(e) => {\n                    const delivery_time = moment(e).format('HH:mm');\n                    dispatch(\n                      setCartData({ delivery_time, bag_id: currentBag }),\n                    );\n                  }}\n                  allowClear={false}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      {userAddressModal && (\n        <DeliveryUserModal\n          visible={userAddressModal}\n          handleCancel={() => setUserAddressModal(null)}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport default DeliveryInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/generateRandomNumbers.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/digital-product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/async-tree-select-category.js",["6473"],[],"import React, { useMemo, useState } from 'react';\nimport { Spin, TreeSelect } from 'antd';\nimport debounce from 'lodash/debounce';\n\nexport const AsyncTreeSelect = ({\n  fetchOptions,\n  refetch = false,\n  debounceTimeout = 400,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [treeData, setTreeData] = useState([]);\n  const fetchOnFocus = () => {\n    if (!treeData.length || refetch) {\n      setFetching(true);\n      fetchOptions().then((newOptions) => {\n        setTreeData(newOptions);\n        setFetching(false);\n      });\n    }\n  };\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (value) => {\n      setTreeData([]);\n      setFetching(true);\n      fetchOptions(value).then((newOptions) => {\n        setTreeData(newOptions);\n        setFetching(false);\n      });\n    };\n    return debounce(loadOptions, debounceTimeout);\n  }, []);\n\n  return (\n    <TreeSelect\n      showSearch\n      labelInValue\n      filterTreeNode={(value, node) => {\n        return node.label.localeCompare(value);\n      }}\n      treeLine={true}\n      onSearch={(value) => debounceFetcher(value)}\n      treeData={fetching ? [] : treeData}\n      treeDefaultExpandAll\n      onFocus={fetchOnFocus}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n    />\n  );\n};\n","/home/mostafa/Magde/new/frontadminreact/src/services/rest/invokable.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/cartesian.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/extra-select-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/drawing-map.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/zone.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/extra-value-select-modal.js",["6474"],[],"import { Badge, Button, Checkbox, Empty, List, Modal, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport extraService from 'services/extra';\nimport ExtraValueModal from './Extras/extra-value-modal';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport Scrollbars from 'react-custom-scrollbars';\n\nconst ExtraValueSelectModal = ({ extra, onClose, onSelect }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [extraValues, setExtraValues] = useState([]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const handleChange = (values) => {\n    setSelectedValues(values);\n  };\n\n  const handleSelect = () => {\n    const list = [];\n    extraValues.forEach((extraValue) => {\n      selectedValues.forEach((value) => {\n        if (extraValue.value === value) {\n          list.push(extraValue);\n        }\n      });\n    });\n    onSelect(extra?.value, list);\n    onClose();\n  };\n\n  function fetchExtra(id) {\n    setLoading(true);\n    extraService\n      .getGroupById(id)\n      .then((res) => {\n        setExtraValues(\n          res.data.extra_values.map((item) => ({\n            label: item.value,\n            value: item.id,\n            group_type: item.group.type,\n          })),\n        );\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n  useEffect(() => {\n    if (!!extra?.value && !isAddModalOpen) {\n      fetchExtra(extra.value);\n      setSelectedValues(extra?.values?.map((value) => value.value) || []);\n    }\n  }, [extra?.value, isAddModalOpen]);\n\n  return (\n    <>\n      <Modal\n        visible={!!extra}\n        onCancel={onClose}\n        footer={[\n          <Button onClick={onClose}>{t('cancel')}</Button>,\n          !loading && extraValues.length > 0 && (\n            <Button onClick={handleSelect} type='primary'>\n              {t('save')}\n            </Button>\n          ),\n        ]}\n      >\n        <Scrollbars\n          autoHide\n          autoHeight\n          autoHeightMin={'60vh'}\n          autoHeightMax={'60vh'}\n        >\n          <Checkbox.Group\n            value={selectedValues}\n            onChange={handleChange}\n            className='w-100'\n          >\n            {extraValues?.length === 0 && !loading ? (\n              <Empty />\n            ) : (\n              <List\n                dataSource={extraValues}\n                loading={loading}\n                renderItem={(item) => (\n                  <List.Item>\n                    <Checkbox value={item.value}>\n                      {item.group_type === 'color' ? (\n                        <Space size='small'>\n                          <Badge\n                            className='extras-color-badge'\n                            color={item?.label}\n                          />\n                          {GetColorName(item?.label)}\n                          <span>({item?.label})</span>\n                        </Space>\n                      ) : (\n                        <span>{item?.label}</span>\n                      )}\n                    </Checkbox>\n                  </List.Item>\n                )}\n              />\n            )}\n          </Checkbox.Group>\n        </Scrollbars>\n        {!loading ? (\n          <Button\n            type='link'\n            onClick={() => setIsAddModalOpen(true)}\n            style={{ paddingLeft: 0 }}\n            icon={<PlusOutlined />}\n          >\n            {t('add.new.extra')}\n          </Button>\n        ) : null}\n      </Modal>\n      {extra && (\n        <ExtraValueModal\n          isVisible={isAddModalOpen}\n          modal={{\n            label: extra?.label,\n            value: extra?.id,\n            key: extra?.id,\n          }}\n          handleCancel={() => setIsAddModalOpen(false)}\n          groupId={extra?.value}\n          onSuccess={() => fetchExtra(extra?.value)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ExtraValueSelectModal;\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/product-modal.js",["6475","6476"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Col,\n  Descriptions,\n  Image,\n  Modal,\n  Row,\n  Space,\n  Spin,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport getImageFromStock from 'helpers/getImageFromStock';\nimport numberToPrice from 'helpers/numberToPrice';\nimport numberToQuantity from 'helpers/numberToQuantity';\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { getExtras, sortExtras } from 'helpers/getExtras';\nimport productService from 'services/product';\nimport { setMenuData } from 'redux/slices/menu';\n\nexport default function ProductModal({ productData, setProductData }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { currency } = useSelector((state) => state.order.data, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [currentStock, setCurrentStock] = useState({});\n  const [extrasIds, setExtrasIds] = useState([]);\n  const [extras, setExtras] = useState([]);\n  const [stock, setStock] = useState([]);\n  const [counter, setCounter] = useState(\n    data?.quantity || productData.quantity || productData.min_qty,\n  );\n  const [showExtras, setShowExtras] = useState({\n    extras: [],\n    stock: {\n      id: 0,\n      quantity: 1,\n      price: 0,\n    },\n  });\n\n  const handleCancel = () => {\n    setProductData(null);\n  };\n\n  const handleSubmit = () => {\n    const body = {\n      stock: { ...currentStock, extras: extrasIds },\n      quantity: counter,\n      id: currentStock.id,\n      img: getImageFromStock(currentStock) || data?.img,\n      price: currentStock.price,\n      translation: data?.translation,\n    };\n\n    dispatch(setMenuData({ activeMenu, data: { newProduct: { ...body } } }));\n    setProductData(null);\n  };\n\n  const calculateTotalPrice = (priceKey) => {\n    return showExtras?.stock?.[priceKey || 'price'] * counter;\n  };\n\n  const handleExtrasClick = (e) => {\n    const index = extrasIds.findIndex(\n      (item) => item.extra_group_id === e.extra_group_id,\n    );\n    let array = extrasIds;\n    if (index > -1) array = array.slice(0, index);\n    array.push(e);\n    const nextIds = array.map((item) => item.extra_value_id).join(',');\n    var extrasData = getExtras(nextIds, extras, stock);\n    setShowExtras(extrasData);\n    extrasData.extras?.forEach((element) => {\n      const index = extrasIds.findIndex((item) =>\n        element[0].extra_group_id !== e.extra_group_id\n          ? item.extra_group_id === element[0].extra_group_id\n          : item.extra_group_id === e.extra_group_id,\n      );\n      if (element[0].level >= e.level) {\n        var itemData =\n          element[0].extra_group_id !== e.extra_group_id ? element[0] : e;\n        if (index === -1) array.push(itemData);\n        else {\n          array[index] = itemData;\n        }\n      }\n    });\n    setExtrasIds(array);\n  };\n\n  const addCounter = () => {\n    if (counter === data.max_qty) {\n      return;\n    }\n    setCounter((prev) => prev + 1);\n  };\n\n  const reduceCounter = () => {\n    if (counter === 1) {\n      return;\n    }\n    if (counter <= data?.min_qty) {\n      return;\n    }\n    setCounter((prev) => prev - 1);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    productService\n      .getById(productData.uuid)\n      .then(({ data }) => {\n        setData(data);\n        const myData = sortExtras(data, {});\n        setExtras(myData.extras);\n        setCounter(data.quantity || data.min_qty);\n        setStock(myData.stock);\n        setShowExtras(getExtras(extrasIds, myData.extras, myData.stock));\n        getExtras('', myData.extras, myData.stock).extras?.forEach(\n          (element) => {\n            setExtrasIds((prev) => [...prev, element[0]]);\n          },\n        );\n      })\n      .finally(() => setLoading(false));\n  }, [productData.uuid]);\n\n  useEffect(() => {\n    if (showExtras?.stock) {\n      setCurrentStock({ ...showExtras.stock, extras: extrasIds });\n    }\n  }, [showExtras]);\n\n  return (\n    <Modal\n      visible={!!productData}\n      onCancel={handleCancel}\n      footer={[\n        loading ? (\n          ''\n        ) : (\n          <Button key={'add-product'} type='primary' onClick={handleSubmit}>\n            {t('add')}\n          </Button>\n        ),\n        <Button key={'cancel-modal'} type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Spin spinning={loading}>\n        <Row gutter={24}>\n          <Col span={8}>\n            <Image\n              src={getImage(\n                getImageFromStock(currentStock) || productData?.img,\n              )}\n              alt={productData.name}\n              height={200}\n              style={{ objectFit: 'contain' }}\n            />\n          </Col>\n          <Col span={16}>\n            <Descriptions title={productData.translation?.title}>\n              <Descriptions.Item label={t('price')} span={3}>\n                <div className={currentStock?.discount ? 'strike' : ''}>\n                  {numberToPrice(calculateTotalPrice(), currency.symbol)}\n                </div>\n                {currentStock?.discount ? (\n                  <div className='ml-2 font-weight-bold'>\n                    {numberToPrice(\n                      calculateTotalPrice('total_price'),\n                      currency.symbol,\n                    )}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('in.stock')} span={3}>\n                {numberToQuantity(currentStock?.quantity, data?.unit)}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('tax')} span={3}>\n                {numberToPrice(currentStock?.tax, currency.symbol)}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n        {showExtras?.extras\n          ? showExtras?.extras?.map((extra, idx) => {\n              return (\n                <div className='extra-group' key={'extra-group' + idx}>\n                  <Space className='extras-select' wrap>\n                    {extra?.map((item, itemIdx) => {\n                      if (item?.group?.type === 'color') {\n                        return (\n                          <span\n                            className={`extras-color-wrapper ${\n                              !!extrasIds.find((extra) => extra.id === item.id)\n                                ? 'selected'\n                                : ''\n                            }`}\n                            key={'color' + itemIdx}\n                            onClick={() => handleExtrasClick(item)}\n                          >\n                            <i\n                              className='extras-color'\n                              style={{ backgroundColor: item?.value?.value }}\n                            />\n                          </span>\n                        );\n                      } else if (item?.group?.type === 'text') {\n                        return (\n                          <span\n                            className={`extras-text rounded ${\n                              !!extrasIds.find((extra) => extra.id === item.id)\n                                ? 'selected'\n                                : ''\n                            }`}\n                            key={'text' + itemIdx}\n                            onClick={() => handleExtrasClick(item)}\n                          >\n                            {item?.value?.value}\n                          </span>\n                        );\n                      }\n                      return null;\n                    })}\n                  </Space>\n                </div>\n              );\n            })\n          : null}\n        <Row gutter={12} className='mt-3'>\n          <Col span={24}>\n            <Space>\n              <Button\n                key={'plus'}\n                type='primary'\n                icon={<MinusOutlined />}\n                onClick={reduceCounter}\n              />\n              {(counter || 1) * (productData?.interval || 1)}\n              {productData?.unit?.translation?.title}\n              <Button\n                key={'minus'}\n                type='primary'\n                icon={<PlusOutlined />}\n                onClick={addCounter}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Spin>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/upload/upload-extras-image.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/user-address.js",["6477"],[],"import React, { useState } from 'react';\nimport { Button, Form, Modal, Row, Col } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Map from '../../components/map';\nimport getDefaultLocation from '../../helpers/getDefaultLocation';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport { MAP_API_KEY } from '../../configs/app-global';\nimport { setMenuData } from '../../redux/slices/menu';\nimport { setOrderData } from '../../redux/slices/order';\nimport AddressForm from '../../components/forms/address-form';\n\nexport default function UserAddress({ uuid, handleCancel }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const { google_map_key } = useSelector(\n    (state) => state.globalSettings.settings,\n    shallowEqual,\n  );\n  const { data } = useSelector((state) => state.order, shallowEqual);\n\n  const { ref } = usePlacesWidget({\n    apiKey: google_map_key || MAP_API_KEY,\n    onPlaceSelected: (place) => {\n      const location = {\n        lat: place?.geometry.location.lat(),\n        lng: place?.geometry.location.lng(),\n      };\n      setLocation(location);\n    },\n  });\n\n  const [location, setLocation] = useState(\n    data.address\n      ? { lat: data.address.lat, lng: data.address.lng }\n      : getDefaultLocation(settings),\n  );\n\n  const [value, setValue] = useState(data?.address?.address);\n\n  const onFinish = (values) => {\n    const address = {\n      ...values,\n      active: 1,\n      address: values?.[`address[${defaultLang}]`],\n      lat: location.lat,\n      lng: location.lng,\n    };\n    dispatch(setOrderData({ address }));\n    dispatch(\n      setMenuData({\n        activeMenu,\n        data: {\n          ...activeMenu.data,\n          addressData: address,\n        },\n      }),\n    );\n    handleCancel();\n  };\n\n  return (\n    <Modal\n      visible={!!uuid}\n      title={t('create.address')}\n      onCancel={handleCancel}\n      footer={[\n        <Button type='primary' key={'saveBtn'} onClick={() => form.submit()}>\n          {t('save')}\n        </Button>,\n        <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        layout='vertical'\n        name='user-address'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{\n          [`address[${defaultLang}]`]: activeMenu?.data?.addressData?.address,\n        }}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <AddressForm\n              value={value}\n              setValue={setValue}\n              setLocation={setLocation}\n            />\n          </Col>\n        </Row>\n        <Col span={24}>\n          <Form.Item label={t('map')}>\n            <Map\n              location={location}\n              setLocation={setLocation}\n              setAddress={(value) =>\n                form.setFieldsValue({\n                  [`address[${defaultLang}]`]: value,\n                })\n              }\n            />\n          </Form.Item>\n        </Col>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/order/orderItems.js",["6478","6479","6480","6481","6482","6483","6484","6485"],[],"import React, { useState } from 'react';\nimport {\n  CheckOutlined,\n  CloseOutlined,\n  EditOutlined,\n  MinusOutlined,\n  PlusOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Col, Input, Row, Space, Spin } from 'antd';\nimport Meta from 'antd/lib/card/Meta';\nimport getImage from 'helpers/getImage';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  addOrderCoupon,\n  clearOrderProducts,\n  removeFromOrder,\n  setOrderData,\n  setOrderTotal,\n  verifyOrderCoupon,\n  changeOrderedProductQuantity,\n  setOrderProducts,\n} from 'redux/slices/order';\nimport orderService from 'services/order';\nimport ExtrasModal from './extrasModal';\nimport numberToPrice from 'helpers/numberToPrice';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { useNavigate } from 'react-router-dom';\nimport { addMenu } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport invokableService from 'services/rest/invokable';\nimport QueryString from 'qs';\nimport { BsFillGiftFill } from 'react-icons/bs';\n\nexport default function OrderItems() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { orderItems, data, total, coupon, orderProducts } = useSelector(\n    (state) => state.order,\n    shallowEqual,\n  );\n  const [loading, setLoading] = useState(false);\n  const [extrasModal, setExtrasModal] = useState(null);\n  const [couponName, setCouponName] = useState('');\n  const [loadingCoupon, setLoadingCoupon] = useState(false);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  function formatProducts(list) {\n    const addons = list?.map((item) => ({\n      quantity: item.quantity,\n      stock_id: item.stockID ? item.stockID?.id : item.stock?.id,\n    }));\n\n    const products = list?.flatMap((item) =>\n      item.addons?.map((addon) => ({\n        quantity: addon.quantity,\n        stock_id: addon.stock_id,\n        parent_id: item.stockID ? item.stockID?.id : item.stock?.id,\n      })),\n    );\n\n    const combine = addons.concat(products);\n\n    const result = {\n      products: combine,\n      currency_id: data?.currency?.id,\n      coupon: data?.coupon?.name,\n      shop_id: data?.shop?.value,\n      type: data?.deliveries?.label?.toLowerCase(),\n      address: {\n        latitude: data?.address?.lat,\n        longitude: data?.address?.lng,\n      },\n    };\n    return QueryString.stringify(result, { addQueryPrefix: true });\n  }\n\n  useDidUpdate(() => {\n    if (orderItems.length) {\n      productCalculate();\n    } else {\n      dispatch(clearOrderProducts());\n    }\n  }, [orderItems, data.currency, data.address, data?.coupon]);\n\n  function productCalculate() {\n    if (!!data?.deliveries?.label) {\n      const products = formatProducts(orderItems);\n\n      setLoading(true);\n      orderService\n        .calculate(products)\n        .then(({ data }) => {\n          const product = data;\n          const orderData = {\n            product_tax: product?.total_tax,\n            shop_tax: product?.total_shop_tax,\n            order_total: product?.total_price,\n            delivery_fee: product?.delivery_fee,\n            coupon: product?.coupon_price,\n            discount: product?.total_discount,\n            service_fee: product?.service_fee,\n          };\n          dispatch(setOrderTotal(orderData));\n        })\n        .catch(() => dispatch(setOrderProducts(orderProducts)))\n        .finally(() => setLoading(false));\n    }\n  }\n\n  const goToProduct = (item) => {\n    dispatch(\n      addMenu({\n        id: `product-${item.uuid}`,\n        url: `product/${item.uuid}`,\n        name: t('edit.product'),\n      }),\n    );\n    navigate(`/product/${item.uuid}`);\n  };\n\n  function handleCheckCoupon() {\n    if (!couponName) return;\n\n    setLoadingCoupon(true);\n    invokableService\n      .checkCoupon({ coupon: couponName })\n      .then((res) => {\n        const coupon = res.data;\n        batch(() => {\n          dispatch(setOrderData({ coupon }));\n          dispatch(\n            verifyOrderCoupon({\n              price: res.data.price,\n              verified: true,\n            }),\n          );\n        });\n      })\n      .catch(() =>\n        dispatch(\n          verifyOrderCoupon({\n            price: 0,\n            verified: false,\n          }),\n        ),\n      )\n      .finally(() => setLoadingCoupon(false));\n  }\n\n  const handleChangeProductQuantity = (quantity, id) => {\n    dispatch(changeOrderedProductQuantity({ quantity, id }));\n  };\n\n  return (\n    <div className='order-items'>\n      {loading && (\n        <div className='loader'>\n          <Spin />\n        </div>\n      )}\n      <Row gutter={24} className='mt-4'>\n        <Col span={24}>\n          <Card className='shop-card'>\n            {orderItems?.map((item, index) =>\n              item?.bonus === undefined || item?.bonus === false ? (\n                <div key={index}>\n                  <Card className='position-relative'>\n                    <CloseOutlined\n                      className='close-order'\n                      onClick={() => dispatch(removeFromOrder(item))}\n                    />\n                    <Space className='mr-3'>\n                      <div\n                        className='order-item-img'\n                        style={{ marginRight: '20px' }}\n                      >\n                        <img\n                          src={getImage(item?.stock?.product?.img || item?.img)}\n                          alt={item?.stock?.product?.translation?.title}\n                        />\n                      </div>\n                      <Meta\n                        title={\n                          <div>\n                            <Space>\n                              <div\n                                className='cursor-pointer white-space-wrap'\n                                onClick={() => goToProduct(item)}\n                              >\n                                {item?.stock?.product?.translation?.title ||\n                                  item?.translation?.title}\n                              </div>\n                              <Button\n                                icon={<EditOutlined />}\n                                type='text'\n                                size='small'\n                                onClick={() => setExtrasModal(item)}\n                              />\n                            </Space>\n                            <div className='product-price'>\n                              {numberToPrice(\n                                item?.price * item?.quantity,\n                                data?.currency?.symbol,\n                              )}\n                            </div>\n                          </div>\n                        }\n                        description={\n                          <>\n                            <Space>\n                              <Button\n                                disabled={\n                                  item?.quantity <\n                                    item?.stock?.product?.min_qty + 1 ||\n                                  item?.quantity === 1\n                                }\n                                onClick={() =>\n                                  handleChangeProductQuantity(\n                                    item.quantity - 1,\n                                    item.id,\n                                  )\n                                }\n                                type='primary'\n                                icon={<MinusOutlined />}\n                              />{' '}\n                              <span>\n                                {item?.quantity * (item?.interval || 1)}\n                                {item?.unit?.translation?.title}\n                              </span>\n                              <Button\n                                onClick={() =>\n                                  handleChangeProductQuantity(\n                                    item.quantity + 1,\n                                    item.id,\n                                  )\n                                }\n                                type='primary'\n                                disabled={item?.quantity === item?.max_qty}\n                                icon={<PlusOutlined />}\n                              />\n                            </Space>\n                            <div className='mt-2'>\n                              <Space wrap>\n                                {item?.addons?.map((addon) => (\n                                  <span\n                                    key={addon.id}\n                                    className='extras-text rounded'\n                                  >\n                                    {addon?.stock?.product?.translation\n                                      ?.title ||\n                                      addon?.product.translation?.title}{' '}\n                                    x {addon?.quantity}\n                                  </span>\n                                ))}\n                              </Space>\n                            </div>\n                          </>\n                        }\n                      />\n                    </Space>\n                  </Card>\n                </div>\n              ) : (\n                <div key={index}>\n                  <div>\n                    <Card className='position-relative'>\n                      <Space className='mr-3 w-100 justify-content-between align-items-start'>\n                        <Space>\n                          <div className='order-item-img'>\n                            <img\n                              src={getImage(item?.img)}\n                              alt={item.translation?.title}\n                            />\n                          </div>\n                          <Meta\n                            title={\n                              <div>\n                                <div\n                                  className='cursor-pointer white-space-wrap'\n                                  onClick={() => goToProduct(item)}\n                                >\n                                  {item.translation?.title}\n                                </div>\n                                <div className='product-price'>\n                                  {numberToPrice(\n                                    item.price,\n                                    data.currency?.symbol,\n                                  )}\n                                </div>\n                              </div>\n                            }\n                          />\n                        </Space>\n                        <div className='bonus'>\n                          <BsFillGiftFill /> Bonus\n                        </div>\n                      </Space>\n                    </Card>\n                  </div>\n                </div>\n              ),\n            )}\n\n            <div className='d-flex align-items-center justify-content-end'>\n              {/*<Space>*/}\n              {/*  <img*/}\n              {/*    src={getImage(activeMenu.data?.shop?.logo_img)}*/}\n              {/*    alt='logo'*/}\n              {/*    width={40}*/}\n              {/*    height={40}*/}\n              {/*    className='rounded-circle'*/}\n              {/*  />*/}\n              {/*  <div>{activeMenu.data?.shop?.translation?.title}</div>*/}\n              {/*</Space>*/}\n              {/*<Space>*/}\n              {/*  <Input*/}\n              {/*    placeholder={t('coupon')}*/}\n              {/*    addonAfter={*/}\n              {/*      coupon.verified ? (*/}\n              {/*        <CheckOutlined style={{ color: '#18a695' }} />*/}\n              {/*      ) : null*/}\n              {/*    }*/}\n              {/*    defaultValue={coupon.coupon}*/}\n              {/*    onBlur={(event) =>*/}\n              {/*      dispatch(*/}\n              {/*        addOrderCoupon({*/}\n              {/*          coupon: event.target.value,*/}\n              {/*          user_id: data.user?.value,*/}\n              {/*          shop_id: data.shop?.value,*/}\n              {/*          verified: false,*/}\n              {/*        }),*/}\n              {/*      )*/}\n              {/*    }*/}\n              {/*    onChange={(event) => setCouponName(event.target.value)}*/}\n              {/*  />*/}\n              {/*  <Button*/}\n              {/*    onClick={() => handleCheckCoupon()}*/}\n              {/*    loading={loadingCoupon}*/}\n              {/*    disabled={!couponName.length}*/}\n              {/*  >*/}\n              {/*    {t('check.coupon')}*/}\n              {/*  </Button>*/}\n              {/*</Space>*/}\n\n              <div className='mt-2 text-right shop-total'>\n                <Space>\n                  <p className='font-weight-bold'>{t('product.tax')}:</p>\n                  <p>\n                    {numberToPrice(total.product_tax, data.currency?.symbol)}\n                  </p>\n                </Space>\n                <div />\n                <Space>\n                  <p className='font-weight-bold'>{t('shop.tax')}:</p>\n                  <p>{numberToPrice(total.shop_tax, data.currency?.symbol)}</p>\n                </Space>\n                <div />\n                <Space>\n                  <p className='font-weight-bold'>{t('delivery.fee')}:</p>\n                  <p>\n                    {numberToPrice(\n                      total.delivery_fee?.reduce((acc, curr) => acc + curr, 0),\n                      data.currency?.symbol,\n                    )}\n                  </p>\n                </Space>\n                <div />\n                <Space>\n                  <p className='font-weight-bold'>{t('discount')}:</p>\n                  <p>-{numberToPrice(total.discount, data.currency?.symbol)}</p>\n                </Space>\n                <div />\n                <Space>\n                  <p className='font-weight-bold'>{t('coupon')}:</p>\n                  <p>\n                    -\n                    {numberToPrice(\n                      total.coupon?.reduce((acc, curr) => acc + curr, 0),\n                      data.currency?.symbol,\n                    )}\n                  </p>\n                </Space>\n                <div />\n                <Space>\n                  <p className='font-weight-bold'>{t('service.fee')}:</p>\n                  <p>\n                    {numberToPrice(total?.service_fee, data.currency?.symbol)}\n                  </p>\n                </Space>\n                <div />\n                <Space>\n                  <p className='font-weight-bold'>{t('total')}:</p>\n                  <p>\n                    {numberToPrice(total.order_total, data.currency?.symbol)}\n                  </p>\n                </Space>\n              </div>\n            </div>\n          </Card>\n        </Col>\n      </Row>\n      {extrasModal && (\n        <ExtrasModal\n          extrasModal={extrasModal}\n          setExtrasModal={setExtrasModal}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/redux/selectors/cartSelector.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/extrasModal.js",["6486","6487","6488","6489"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Checkbox,\n  Col,\n  Descriptions,\n  Image,\n  Modal,\n  Row,\n  Space,\n  Spin,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport getImage from 'helpers/getImage';\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\nimport { addOrderItem, setOrderData } from 'redux/slices/order';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { toast } from 'react-toastify';\nimport numberToQuantity from 'helpers/numberToQuantity';\nimport { useTranslation } from 'react-i18next';\nimport { getExtras, sortExtras } from 'helpers/getExtras';\nimport getImageFromStock from 'helpers/getImageFromStock';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport productService from 'services/product';\n\nexport default function ExtrasModal({ extrasModal, setExtrasModal }) {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const { t } = useTranslation();\n  const [counter, setCounter] = useState(\n    extrasModal.quantity || data.quantity || data.min_qty,\n  );\n  const [currentStock, setCurrentStock] = useState({});\n  const { currency } = useSelector((state) => state.order.data, shallowEqual);\n  const dispatch = useDispatch();\n  const [extras, setExtras] = useState([]);\n  const [stock, setStock] = useState([]);\n  const [showExtras, setShowExtras] = useState({\n    extras: [],\n    stock: {\n      id: 0,\n      quantity: 1,\n      price: 0,\n    },\n  });\n  const [extrasIds, setExtrasIds] = useState([]);\n  const [addons, setAddons] = useState([]);\n  const [selectedValues, setSelectedValues] = useState([]);\n\n  const handleCancel = () => setExtrasModal(false);\n\n  const handleSubmit = () => {\n    const calculate = false;\n    dispatch(setOrderData({ calculate }));\n    const products = addons.map((item) => ({\n      ...item,\n      quantity: item.product.quantity || item.product.min_qty,\n      stock_id: item.product.stock.id,\n    }));\n    const orderItem = {\n      ...data,\n      stock: currentStock,\n      quantity: counter,\n      id: currentStock.id,\n      img: getImageFromStock(currentStock) || data.img,\n      stockID: currentStock,\n      addons: products,\n      price: currentStock.price,\n    };\n    if (orderItem.quantity > currentStock.quantity) {\n      toast.warning(\n        `${t('you.cannot.order.more.than')} ${currentStock.quantity}`,\n      );\n      return;\n    }\n    dispatch(addOrderItem(orderItem));\n    setExtrasModal(null);\n  };\n\n  function addCounter() {\n    if (counter === data.max_qty) {\n      return;\n    }\n    setCounter((prev) => prev + 1);\n  }\n\n  function reduceCounter() {\n    if (counter === 1) {\n      return;\n    }\n    if (counter <= data.min_qty) {\n      return;\n    }\n    setCounter((prev) => prev - 1);\n  }\n  const handleExtrasClick = (e) => {\n    const index = extrasIds.findIndex(\n      (item) => item.extra_group_id === e.extra_group_id,\n    );\n    let array = extrasIds;\n    if (index > -1) array = array.slice(0, index);\n    array.push(e);\n    const nextIds = array.map((item) => item.extra_value_id).join(',');\n    var extrasData = getExtras(nextIds, extras, stock);\n    setShowExtras(extrasData);\n    extrasData.extras?.forEach((element) => {\n      const index = extrasIds.findIndex((item) =>\n        element[0].extra_group_id !== e.extra_group_id\n          ? item.extra_group_id === element[0].extra_group_id\n          : item.extra_group_id === e.extra_group_id,\n      );\n      if (element[0].level >= e.level) {\n        var itemData =\n          element[0].extra_group_id !== e.extra_group_id ? element[0] : e;\n        if (index === -1) array.push(itemData);\n        else {\n          array[index] = itemData;\n        }\n      }\n    });\n    setExtrasIds(array);\n  };\n\n  useEffect(() => {\n    if (showExtras?.stock) {\n      setCurrentStock({ ...showExtras.stock, extras: extrasIds });\n    }\n  }, [showExtras]);\n\n  const handleChange = (item) => {\n    const value = String(item.addon_id);\n    if (selectedValues.includes(value)) {\n      setSelectedValues((prev) => prev.filter((el) => el !== value));\n    } else {\n      setSelectedValues((prev) => [...prev, value]);\n    }\n  };\n\n  function handleAddonClick(list) {\n    setAddons(list);\n  }\n\n  useDidUpdate(() => {\n    const addons = showExtras?.stock?.addons?.filter((item) =>\n      selectedValues.includes(String(item.addon_id)),\n    );\n\n    handleAddonClick(addons);\n  }, [selectedValues]);\n\n  function calculateTotalPrice(priceKey) {\n    const addonPrice = addons?.reduce(\n      (total, item) =>\n        (total +=\n          item.product.stock.price *\n          (item.product.quantity || item.product.min_qty)),\n      0,\n    );\n    return addonPrice + showExtras?.stock?.[priceKey || 'price'] * counter;\n  }\n\n  function addonCalculate(id, quantity) {\n    setShowExtras((prev) => ({\n      ...prev,\n      stock: {\n        ...prev.stock,\n        addons: prev.stock.addons.map((addon) => {\n          if (addon.addon_id === id) {\n            return { ...addon, product: { ...addon.product, quantity } };\n          }\n          return addon;\n        }),\n      },\n    }));\n    setAddons((prev) =>\n      prev.map((addon) => {\n        if (addon.addon_id === id) {\n          return {\n            ...addon,\n            product: { ...addon.product, quantity },\n          };\n        }\n        return addon;\n      }),\n    );\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    productService\n      .getById(extrasModal.uuid)\n      .then(({ data }) => {\n        setData(data);\n        const myData = sortExtras(data, extrasModal?.addons);\n        setExtras(myData.extras);\n        setCounter(extrasModal.quantity || data.quantity || data.min_qty);\n        setStock(myData.stock);\n        setShowExtras(getExtras('', myData.extras, myData.stock));\n        getExtras('', myData.extras, myData.stock).extras?.forEach(\n          (element) => {\n            setExtrasIds((prev) => [...prev, element[0]]);\n          },\n        );\n        if (extrasModal?.addons) {\n          setSelectedValues(\n            extrasModal?.addons?.map((addon) =>\n              String(addon?.stock?.product?.id || addon.addon_id),\n            ) || [],\n          );\n        }\n      })\n      .finally(() => setLoading(false));\n  }, [extrasModal.uuid]);\n\n  return (\n    <Modal\n      visible={!!data}\n      title={data?.translation?.title}\n      onCancel={handleCancel}\n      footer={[\n        loading ? null : (\n          <Button key={'add-product'} type='primary' onClick={handleSubmit}>\n            {t('add')}\n          </Button>\n        ),\n        <Button key={'cancel-modal'} type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Spin spinning={loading}>\n        <Row gutter={24}>\n          <Col span={8}>\n            <Image\n              src={getImage(getImageFromStock(currentStock) || data.img)}\n              alt={data.name}\n              height={200}\n              style={{ objectFit: 'contain' }}\n            />\n          </Col>\n          <Col span={16}>\n            <Descriptions title={data.translation?.title}>\n              <Descriptions.Item label={t('price')} span={3}>\n                <div className={currentStock?.discount ? 'strike' : ''}>\n                  {numberToPrice(calculateTotalPrice(), currency.symbol)}\n                </div>\n                {currentStock?.discount ? (\n                  <div className='ml-2 font-weight-bold'>\n                    {numberToPrice(\n                      calculateTotalPrice('total_price'),\n                      currency.symbol,\n                    )}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('in.stock')} span={3}>\n                {numberToQuantity(currentStock?.quantity, data.unit)}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('tax')} span={3}>\n                {numberToPrice(currentStock?.tax, currency.symbol)}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n        {showExtras?.extras\n          ? showExtras?.extras?.map((extra, idx) => {\n              return (\n                <div className='extra-group' key={'extra-group' + idx}>\n                  <Space className='extras-select' wrap>\n                    {extra?.map((item, itemIdx) => {\n                      if (item?.group?.type === 'color') {\n                        return (\n                          <span\n                            className={`extras-color-wrapper ${\n                              !!extrasIds.find((extra) => extra.id === item.id)\n                                ? 'selected'\n                                : ''\n                            }`}\n                            key={'color' + itemIdx}\n                            onClick={() => handleExtrasClick(item)}\n                          >\n                            <i\n                              className='extras-color'\n                              style={{ backgroundColor: item?.value?.value }}\n                            />\n                          </span>\n                        );\n                      } else if (item?.group?.type === 'text') {\n                        return (\n                          <span\n                            className={`extras-text rounded ${\n                              !!extrasIds.find((extra) => extra.id === item.id)\n                                ? 'selected'\n                                : ''\n                            }`}\n                            key={'text' + itemIdx}\n                            onClick={() => handleExtrasClick(item)}\n                          >\n                            {item?.value?.value}\n                          </span>\n                        );\n                      }\n                      return null;\n                    })}\n                  </Space>\n                </div>\n              );\n            })\n          : null}\n        <Space direction='vertical' size='middle'>\n          {showExtras.stock?.addons\n            ?.filter((item) => !!item.product)\n            .map((item) => {\n              const selected = selectedValues.includes(String(item.addon_id));\n              return (\n                <div key={item.id}>\n                  <label htmlFor={String(item.id)}>\n                    {selected && (\n                      <Space size={0}>\n                        <Button\n                          type='text'\n                          className='minus-button'\n                          style={{ padding: 0, height: 'max-content' }}\n                          size='small'\n                          icon={<MinusOutlined />}\n                          disabled={item.product.quantity === 1}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            addonCalculate(\n                              item.addon_id,\n                              item.product.quantity - 1,\n                            );\n                          }}\n                        />\n                        <span className='ml-2'>\n                          {(item.product.quantity || item.product.min_qty) *\n                            (item?.interval || 1)}\n                          {item.unit?.translation?.title}\n                        </span>\n                        <Button\n                          type='text'\n                          className='plus-button'\n                          style={{ padding: 0, height: 'max-content' }}\n                          size='small'\n                          icon={<PlusOutlined />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            addonCalculate(\n                              item.addon_id,\n                              item.product.quantity\n                                ? item.product.quantity + 1\n                                : item.product.min_qty + 1,\n                            );\n                          }}\n                        />\n                      </Space>\n                    )}\n                    <span className='ml-2'>\n                      {item.product.translation.title}\n                    </span>\n                  </label>\n                </div>\n              );\n            })}\n        </Space>\n        <Row gutter={12} className='mt-3'>\n          <Col span={24}>\n            <Space>\n              <Button\n                key={'plus'}\n                type='primary'\n                icon={<MinusOutlined />}\n                onClick={reduceCounter}\n              />\n              {(counter || 1) * (data?.interval || 1)}\n              {data?.unit?.translation?.title}\n              <Button\n                key={'minus'}\n                type='primary'\n                icon={<PlusOutlined />}\n                onClick={addCounter}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Spin>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/redux/selectors/orderSelector.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-ingredients.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-instructions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-nutritions.js",["6490"],[],"import { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  Space,\n} from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nconst { Option } = Select;\n\nconst ReceptNutritions = ({ prev, loading }) => {\n  const { t } = useTranslation();\n\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n\n  return (\n    <>\n      <Row gutter={12}>\n        <Col span={24}>\n          <Form.List\n            name='nutrition'\n            initialValue={[\n              {\n                weight: undefined,\n                percentage: undefined,\n                en: undefined,\n                ru: undefined,\n              },\n            ]}\n          >\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map(({ key, name, ...restField }, i) => (\n                  <Row gutter={12} align='middle'>\n                    <Col span={7}>\n                      {languages.map((item) => (\n                        <Form.Item\n                          key={'name' + item.id}\n                          label={t('name')}\n                          name={[name, item.locale]}\n                          rules={[\n                            {\n                              validator(_, value) {\n                                if (!value && item?.locale === defaultLang) {\n                                  return Promise.reject(\n                                    new Error(t('required'))\n                                  );\n                                } else if (value && value?.trim() === '') {\n                                  return Promise.reject(\n                                    new Error(t('no.empty.space'))\n                                  );\n                                } else if (value && value?.trim().length < 2) {\n                                  return Promise.reject(\n                                    new Error(t('must.be.at.least.2'))\n                                  );\n                                }\n                                return Promise.resolve();\n                              },\n                            },\n                          ]}\n                          hidden={item.locale !== defaultLang}\n                        >\n                          <Input />\n                        </Form.Item>\n                      ))}\n                    </Col>\n                    <Col span={7}>\n                      <Form.Item\n                        {...restField}\n                        label={t('weight')}\n                        name={[name, 'weight']}\n                        rules={[\n                          {\n                            validator(_, value) {\n                              if (!value && value !== 0) {\n                                return Promise.reject(new Error(t('required')));\n                              } else if (value && (value < 0 || value > 191)) {\n                                return Promise.reject(\n                                  new Error(t('must.be.between.0.and.191'))\n                                );\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumber enterButton className='w-100' />\n                      </Form.Item>\n                    </Col>\n                    <Col span={7}>\n                      <Form.Item\n                        {...restField}\n                        label={t('percentage')}\n                        name={[name, 'percentage']}\n                        rules={[\n                          {\n                            validator(_, value) {\n                              if (!value && value !== 0) {\n                                return Promise.reject(new Error(t('required')));\n                              } else if (value && (value < 0 || value > 100)) {\n                                return Promise.reject(\n                                  new Error(t('must.be.between.0.and.100'))\n                                );\n                              }\n                              return Promise.resolve();\n                            },\n                          },\n                        ]}\n                      >\n                        <InputNumber addonAfter={'%'} className='w-100' />\n                      </Form.Item>\n                    </Col>\n                    {i !== 0 && (\n                      <Col span={3} className='d-flex justify-content-end'>\n                        <Button\n                          onClick={() => remove(name)}\n                          danger\n                          className='w-100'\n                          type='primary'\n                          icon={<DeleteOutlined />}\n                        />\n                      </Col>\n                    )}\n                  </Row>\n                ))}\n\n                <Form.Item>\n                  <Button onClick={() => add()} block icon={<PlusOutlined />}>\n                    {t('add.nutrition')}\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Col>\n      </Row>\n      <Space>\n        <Button type='primary' htmlType='button' onClick={() => prev()}>\n          {t('prev')}\n        </Button>\n        <Button type='primary' htmlType='submit' loading={loading}>\n          {t('submit')}\n        </Button>\n      </Space>\n    </>\n  );\n};\n\nexport default ReceptNutritions;\n","/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-main.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/recepts/recept-stocks.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/digital-product.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/products/productStatusModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/restaurant/restaurant-add-data.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/forms/shop-delivery-form.js",["6491"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Row,\n  Space,\n  Switch,\n  Tag,\n  TimePicker,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { BsChevronCompactDown, BsChevronCompactUp } from 'react-icons/bs';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { DayPicker } from 'react-day-picker';\n\nconst ShopDeliveryForm = ({\n  onFinish,\n  prev,\n  form,\n  lines,\n  loadingBtn,\n  days,\n  setDays,\n  setLines,\n  weeks,\n}) => {\n  const { t } = useTranslation();\n  const deleteDay = (e) => setDays(days.filter((item) => item !== e));\n  const disabledDays = [\n    { from: new Date(1900, 4, 18), to: new Date(moment().subtract(1, 'days')) },\n  ];\n  const [list, setList] = useState(true);\n\n  const footer =\n    days && days.length > 0 ? (\n      <Row>\n        <Tag\n          style={{\n            fontSize: 14,\n            padding: '4px 10px',\n            width: '100%',\n            marginTop: '10px',\n          }}\n        >\n          {t('Your.existing.vacations')}\n        </Tag>\n        <Col span={24} className='mt-2'>\n          {days.slice(0, list ? 1 : days.length).map((item, index) => (\n            <Space\n              key={index}\n              className='d-flex justify-content-between'\n              style={{ borderBottom: '1px solid #4D5B75' }}\n            >\n              <Col span={24} style={{ fontSize: 14, marginTop: '8px' }}>\n                {moment(item).format('YYYY-MM-DD')}\n              </Col>\n              <Col span={24}>\n                <Tag\n                  color='red'\n                  className='cursor-pointer mt-3 mb-2'\n                  style={{ fontSize: 14 }}\n                  onClick={() => deleteDay(item)}\n                >\n                  {t('remove')}\n                </Tag>\n              </Col>\n            </Space>\n          ))}\n          <Button\n            className='mt-3 w-100'\n            onClick={() => {\n              setList(!list);\n            }}\n          >\n            {list ? <BsChevronCompactDown /> : <BsChevronCompactUp />}\n          </Button>\n        </Col>\n      </Row>\n    ) : (\n      <Tag style={{ fontSize: 14, padding: '4px 10px', width: '100%' }}>\n        Please pick one or more days.\n      </Tag>\n    );\n\n  const handleChange = (idx) => {\n    const newLines = [...lines];\n    newLines[idx] = !lines[idx];\n    setLines(newLines);\n  };\n\n  const middle = (start, end) => {\n    const result = [];\n    for (let i = start; i < end; i++) {\n      result.push(i);\n    }\n    return result;\n  };\n\n  const disabledDateTime = () => ({\n    disabledHours: () => middle(0, 1),\n    disabledMinutes: () => middle(0, 0),\n    disabledSeconds: () => middle(0, 60),\n  });\n  return (\n    <Form form={form} layout='vertical' onFinish={onFinish}>\n      <Row gutter={12}>\n        <Col span={12}>\n          <Card title={t('restaurant.working.days')}>\n            <Row gutter={8}>\n              <Col span={24}>\n                <Form.List name='working_days'>\n                  {(fields) => {\n                    return (\n                      <div>\n                        {fields.map((field, index) => (\n                          <Row key={field.key} gutter={12} align='center'>\n                            <Col span={7}>\n                              <Form.Item name={[index, 'day']}>\n                                <span>{t(weeks[index].title)}</span>\n                              </Form.Item>\n                            </Col>\n                            {lines[field.key] ? (\n                              <Col span={13} className='mt-2'>\n                                <span>{t('shop.closed')}</span>\n                              </Col>\n                            ) : (\n                              <>\n                                <Col span={7}>\n                                  <Form.Item\n                                    rules={[\n                                      {\n                                        required: lines[field.key] === false,\n                                      },\n                                    ]}\n                                    name={[index, 'from']}\n                                  >\n                                    <TimePicker\n                                      disabledTime={disabledDateTime}\n                                      picker='time'\n                                      placeholder={t('start.time')}\n                                    />\n                                  </Form.Item>\n                                </Col>\n                                <Col span={6}>\n                                  <Form.Item\n                                    rules={[\n                                      {\n                                        required: lines[field.key] === false,\n                                      },\n                                    ]}\n                                    name={[index, 'to']}\n                                  >\n                                    <TimePicker\n                                      disabledTime={disabledDateTime}\n                                      picker='time'\n                                      placeholder={t('end.time')}\n                                    />\n                                  </Form.Item>\n                                </Col>\n                              </>\n                            )}\n                            <Col span={4}>\n                              <Form.Item\n                                name={[index, 'disabled']}\n                                valuePropName='checked'\n                              >\n                                <Switch\n                                  checkedChildren={<CheckOutlined />}\n                                  unCheckedChildren={<CloseOutlined />}\n                                  checked={lines[field.key]}\n                                  onChange={() => handleChange(field.key)}\n                                />\n                              </Form.Item>\n                            </Col>\n                          </Row>\n                        ))}\n                      </div>\n                    );\n                  }}\n                </Form.List>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t('restaurant.closed.days')}>\n            <p>{t('restaurant.closed.days.text')}</p>\n            <Form.Item rules={[{ required: false, message: t('required') }]}>\n              <DayPicker\n                className='datepicker'\n                mode='multiple'\n                disabled={disabledDays}\n                min={1}\n                selected={days}\n                onSelect={setDays}\n                footer={footer}\n                showOutsideDays\n              />\n            </Form.Item>\n          </Card>\n        </Col>\n        <Col span={24}>\n          <Space>\n            <Button type='primary' htmlType='submit' loading={loadingBtn}>\n              {t('next')}\n            </Button>\n            <Button htmlType='submit' onClick={() => prev()}>\n              {t('prev')}\n            </Button>\n          </Space>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default ShopDeliveryForm;\n","/home/mostafa/Magde/new/frontadminreact/src/components/todo/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/shop-social.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/shop/location-select.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/forms/shop-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliverypointWorkingDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliverypointClosedDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getFullDateTime.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/forms/shop-user-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/shops/delivery-time-types.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/order-card.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/constants/shop-types.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getFullDate.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/constants/ChartConstant.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/forms/address-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/delivery-point/date-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/order-card-loader.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/address-input.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/warehouseWorkingDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getAddress.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/radio-card.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/constants/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/warehouseClosedDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/parcel-order/transaction-status-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/warehouse/date-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/orderNoteModal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/unit.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/qr-code-card.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/workingDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/closedDays.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/shop-social.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/settings/general-settings/deliveryman_time.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/order/dnd/List/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/shop-add-data.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/rest/brand.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/rest/category.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-footer.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-table-card.js",["6492"],[],"import { Empty, Spin } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport BookingModal from './booking-modal';\nimport { fetchBookingTable } from 'redux/slices/booking-tables';\nimport { useDispatch } from 'react-redux';\nimport useDidUpdate from 'helpers/useDidUpdate';\nimport { disableRefetch } from 'redux/slices/menu';\n\nexport default function BookingTableCard() {\n  const { t } = useTranslation();\n  const [openModal, setOpenModal] = useState(null);\n  const dispatch = useDispatch();\n  const { tables, loading } = useSelector(\n    (state) => state.bookingTable,\n    shallowEqual\n  );\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { data } = useSelector((state) => state.booking, shallowEqual);\n  const { current_zone } = useSelector(\n    (state) => state.bookingZone,\n    shallowEqual\n  );\n  const max_count = {\n    count: Math.max(...tables?.map((c) => c?.chair_count)),\n    percent: 33,\n  };\n\n  const params = {\n    shop_section_id: current_zone?.id,\n    status: data.current_tab === 'all' ? undefined : data.current_tab,\n    free_from:\n      data?.free_from?.length > 2 ? JSON.parse(data?.free_from) : undefined,\n  };\n\n  useDidUpdate(() => {\n    dispatch(fetchBookingTable(params));\n  }, [current_zone, data]);\n\n  useEffect(() => {\n    if (activeMenu.refetch && current_zone?.id) {\n      dispatch(fetchBookingTable(params));\n      dispatch(disableRefetch(activeMenu));\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <div className='container-fluid'>\n      <div className='table_main'>\n        {loading ? (\n          <div className='empty'>\n            <Spin style={{ height: '120px' }} />\n          </div>\n        ) : (\n          tables?.map((item, idx) => {\n            const residual = item.chair_count >= 12 ? 2 : 1;\n            return (\n              <div\n                key={item.name + '_' + idx}\n                className='table_container'\n                onClick={() => setOpenModal(item)}\n                style={{\n                  width: `${\n                    item.chair_count <= 3\n                      ? 10\n                      : (item.chair_count / max_count.count) * max_count.percent\n                  }%`,\n                }}\n              >\n                <div className='table_chair_top'>\n                  {Array.from(\n                    {\n                      length: Math.ceil(item.chair_count / 2) - residual,\n                    },\n                    (_, y) => (\n                      <span key={y}></span>\n                    )\n                  )}\n                </div>\n\n                <div className='table_card'>\n                  <div className='table_chair_left'>\n                    {Array.from({ length: residual }, (_, y) => (\n                      <span key={y}></span>\n                    ))}\n                  </div>\n                  {item.name}\n                  {item.chair_count > 1 && (\n                    <div className='table_chair_right'>\n                      {Array.from({ length: residual }, (_, y) => (\n                        <span key={y}></span>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className='table_chair_bottom'>\n                  {Array.from(\n                    {\n                      length: Math.floor(item.chair_count / 2) - residual,\n                    },\n                    (_, y) => (\n                      <span key={y}></span>\n                    )\n                  )}\n                </div>\n              </div>\n            );\n          })\n        )}\n        {!tables.length > 0 && (\n          <div className='empty'>\n            <Empty\n              image='https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg'\n              description={<span>{t('no.data')}</span>}\n              style={{ height: '120px' }}\n            />\n          </div>\n        )}\n      </div>\n\n      {openModal && (\n        <BookingModal\n          visible={openModal}\n          handleCancel={() => setOpenModal(null)}\n        />\n      )}\n    </div>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/product-modal.js",["6493"],["6494","6495"],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Col,\n  Descriptions,\n  Image,\n  Modal,\n  Row,\n  Space,\n  Spin,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport getImage from 'helpers/getImage';\nimport {\n  MinusOutlined,\n  PlusCircleOutlined,\n  PlusOutlined,\n} from '@ant-design/icons';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { addToCart } from 'redux/slices/cart';\nimport numberToQuantity from 'helpers/numberToQuantity';\nimport getImageFromStock from 'helpers/getImageFromStock';\nimport { getExtras, sortExtras } from 'helpers/getExtras';\nimport AddonsItem from './addons';\nimport productService from 'services/product';\n\nexport default function ProductModal({ extrasModal, setExtrasModal }) {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState({});\n  const { t } = useTranslation();\n  const [currentStock, setCurrentStock] = useState({});\n  const dispatch = useDispatch();\n  const [extras, setExtras] = useState([]);\n  const [stock, setStock] = useState([]);\n  const [extrasIds, setExtrasIds] = useState([]);\n  const [addons, setAddons] = useState([]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const [showExtras, setShowExtras] = useState({\n    extras: [],\n    stock: {\n      id: 0,\n      quantity: 1,\n      price: 0,\n    },\n  });\n  const [counter, setCounter] = useState(\n    extrasModal.quantity || data.quantity || data.min_qty,\n  );\n\n  const { currentBag, currency } = useSelector(\n    (state) => state.cart,\n    shallowEqual,\n  );\n\n  const handleSubmit = () => {\n    const orderItem = {\n      ...data,\n      stock: currentStock,\n      quantity: counter,\n      id: currentStock.id,\n      img: getImageFromStock(currentStock) || data.img,\n      bag_id: currentBag,\n      stockID: currentStock,\n    };\n    if (orderItem.quantity > currentStock.quantity) {\n      toast.warning(\n        `${t('you.cannot.order.more.than')} ${currentStock.quantity}`,\n      );\n      return;\n    }\n    dispatch(addToCart(orderItem));\n    setExtrasModal(null);\n  };\n\n  const handleExtrasClick = (e) => {\n    const index = extrasIds.findIndex(\n      (item) => item.extra_group_id === e.extra_group_id,\n    );\n    let array = extrasIds;\n    if (index > -1) array = array.slice(0, index);\n    array.push(e);\n    const nextIds = array.map((item) => item.extra_value_id).join(',');\n    var extrasData = getExtras(nextIds, extras, stock);\n    setShowExtras(extrasData);\n    extrasData.extras?.forEach((element) => {\n      const index = extrasIds.findIndex((item) =>\n        element[0].extra_group_id !== e.extra_group_id\n          ? item.extra_group_id === element[0].extra_group_id\n          : item.extra_group_id === e.extra_group_id,\n      );\n      if (element[0].level >= e.level) {\n        var itemData =\n          element[0].extra_group_id !== e.extra_group_id ? element[0] : e;\n        if (index === -1) array.push(itemData);\n        else {\n          array[index] = itemData;\n        }\n      }\n    });\n    setExtrasIds(array);\n  };\n\n  function addCounter() {\n    if (counter === data?.quantity) {\n      return;\n    }\n    if (counter === data.max_qty) {\n      return;\n    }\n    setCounter((prev) => prev + 1);\n  }\n\n  function reduceCounter() {\n    if (counter === 1) {\n      return;\n    }\n    if (counter <= data.min_qty) {\n      return;\n    }\n    setCounter((prev) => prev - 1);\n  }\n\n  const handleChange = (item) => {\n    const value = String(item.addon_id);\n    if (selectedValues.includes(value)) {\n      setSelectedValues((prev) => prev.filter((el) => el !== value));\n    } else {\n      setSelectedValues((prev) => [...prev, value]);\n    }\n  };\n\n  const handleCancel = () => setExtrasModal(false);\n\n  function calculateTotalPrice(priceKey) {\n    return showExtras?.stock?.[priceKey || 'price'] * counter;\n  }\n  function addonCalculate(id, quantity) {\n    setShowExtras((prev) => ({\n      ...prev,\n      stock: {\n        ...prev.stock,\n        addons: prev.stock.addons.map((addon) => {\n          if (addon.addon_id === id) {\n            return { ...addon, product: { ...addon.product, quantity } };\n          }\n          return addon;\n        }),\n      },\n    }));\n    setAddons((prev) =>\n      prev.map((addon) => {\n        if (addon.addon_id === id) {\n          return {\n            ...addon,\n            product: { ...addon.product, quantity },\n          };\n        }\n        return addon;\n      }),\n    );\n  }\n\n  useEffect(() => {\n    if (showExtras?.stock) {\n      setCurrentStock({ ...showExtras.stock, extras: extrasIds });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showExtras]);\n\n  useEffect(() => {\n    setLoading(true);\n    productService\n      .getById(extrasModal.uuid)\n      .then(({ data }) => {\n        setData(data);\n        const myData = sortExtras(data, extrasModal?.addons);\n        setExtras(myData.extras);\n        setCounter(extrasModal.quantity || data.quantity || data.min_qty);\n        setStock(myData.stock);\n        setShowExtras(getExtras(extrasIds, myData.extras, myData.stock));\n        getExtras('', myData.extras, myData.stock).extras?.forEach(\n          (element) => {\n            setExtrasIds((prev) => [...prev, element[0]]);\n          },\n        );\n        if (extrasModal?.addons) {\n          setSelectedValues(\n            extrasModal?.addons?.map((addon) =>\n              String(addon?.countable?.id || addon.countable_id),\n            ) || [],\n          );\n        }\n      })\n      .finally(() => setLoading(false));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [extrasModal.uuid]);\n\n  return (\n    <Modal\n      visible={!!data}\n      title={data.name}\n      onCancel={handleCancel}\n      key={data?.id}\n      footer={[\n        loading ? null : (\n          <Button\n            icon={<PlusCircleOutlined />}\n            key='add-product'\n            type='primary'\n            onClick={handleSubmit}\n          >\n            {t('add')}\n          </Button>\n        ),\n        <Button key='cancel-product' type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Spin spinning={loading}>\n        <Row gutter={24}>\n          <Col span={8}>\n            <Image\n              src={getImage(getImageFromStock(currentStock) || data.img)}\n              alt={data.name}\n              height={200}\n              style={{ objectFit: 'contain' }}\n            />\n          </Col>\n          <Col span={16}>\n            <Descriptions title={data.translation?.title}>\n              <Descriptions.Item label={t('price')} span={3}>\n                <div className={currentStock?.discount ? 'strike' : ''}>\n                  {numberToPrice(\n                    calculateTotalPrice(),\n                    currency?.symbol,\n                    currency?.position,\n                  )}\n                </div>\n                {currentStock?.discount ? (\n                  <div className='ml-2 font-weight-bold'>\n                    {numberToPrice(\n                      calculateTotalPrice('total_price'),\n                      currency?.symbol,\n                      currency?.position,\n                    )}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('in.stock')} span={3}>\n                {numberToQuantity(currentStock?.quantity, data.unit)}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('tax')} span={3}>\n                {numberToPrice(\n                  currentStock?.tax,\n                  currency?.symbol,\n                  currency?.position,\n                )}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n\n        {showExtras?.extras?.map((item, idx) => (\n          <div className='extra-group'>\n            <div className='mb-3'>{item?.[0]?.group?.translation?.title}:</div>\n            <Space key={'extra-group' + idx} className='extras-select' wrap>\n              {item.map((el) => {\n                if (el?.group?.type === 'color') {\n                  return (\n                    <div\n                      className={`extras-color-wrapper rounded ${\n                        !!extrasIds.find(\n                          (extra) => extra.extra_value_id === el.extra_value_id,\n                        )\n                          ? 'selected'\n                          : ''\n                      }`}\n                      onClick={() => handleExtrasClick(el)}\n                    >\n                      <div\n                        className='extras-color'\n                        style={{ backgroundColor: el.value.value }}\n                      ></div>\n                    </div>\n                  );\n                }\n                return (\n                  <span\n                    className={`extras-text rounded ${\n                      !!extrasIds.find(\n                        (extra) => extra.extra_value_id === el.extra_value_id,\n                      )\n                        ? 'selected'\n                        : ''\n                    }`}\n                    onClick={() => handleExtrasClick(el)}\n                  >\n                    {el.value.value}\n                  </span>\n                );\n              })}\n            </Space>\n          </div>\n        ))}\n\n        <AddonsItem\n          showExtras={showExtras}\n          selectedValues={selectedValues}\n          handleChange={handleChange}\n          addonCalculate={addonCalculate}\n        />\n\n        <Row gutter={12} className='mt-3'>\n          <Col span={24}>\n            <Space>\n              <Button\n                type='primary'\n                icon={<MinusOutlined />}\n                onClick={reduceCounter}\n              />\n              {(counter || 1) * (data?.interval || 1)}\n              {data?.unit?.translation?.title}\n              <Button\n                type='primary'\n                icon={<PlusOutlined />}\n                onClick={addCounter}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Spin>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/user-add-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/delivery-info.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/preview-info.js",["6496"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Card, Modal, Space, Spin, Table, Tag } from 'antd';\nimport Column from 'antd/lib/table/Column';\nimport { PrinterOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport numberToPrice from 'helpers/numberToPrice';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport hideNumber from 'components/hideNumber';\nimport hideEmail from 'components/hideEmail';\nimport useDemo from 'helpers/useDemo';\n\nconst ReactAppIsDemo = process.env.REACT_APP_IS_DEMO;\n\nconst PreviewInfo = ({ handleClose }) => {\n  const { t } = useTranslation();\n  const { cartOrder } = useSelector((state) => state.cart, shallowEqual);\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const { isDemo } = useDemo();\n\n  const [data, setData] = useState();\n  const [list, setList] = useState();\n\n  function calculateProductsPrice() {\n    return data?.details.reduce(\n      (total, item) => (total += item?.total_price || 0),\n      0,\n    );\n  }\n\n  useEffect(() => {\n    if (cartOrder) {\n      const data = cartOrder?.filter((item) => !item?.parent_id)?.[0];\n\n      setList(cartOrder?.map((item) => item?.details).flat());\n      setData(data);\n    }\n  }, [cartOrder]);\n\n  return (\n    <Modal\n      visible={!!cartOrder}\n      title={t('order.created.successfully')}\n      onOk={handleClose}\n      onCancel={handleClose}\n      footer={[\n        <Button onClick={handleClose}>{t('back')}</Button>,\n        <Button type='primary' onClick={() => window.print()}>\n          <PrinterOutlined type='printer' />\n          <span className='ml-1'>{t('print')}</span>\n        </Button>,\n      ]}\n      width={1000}\n    >\n      <div className='py-4 order-preview'>\n        <Card>\n          <div className='d-flex justify-content-between mt-3'>\n            <div>\n              <h2 className='mb-1 font-weight-semibold'>\n                {t('invoice')} #{data?.id}\n              </h2>\n              <p>{moment(data?.created_at).format('YYYY-MM-DD HH:mm')}</p>\n              <address>\n                <p>\n                  <span>\n                    {t('delivery.type')}: {data?.delivery_type}\n                  </span>\n                  <br />\n                  {data?.delivery_type === 'point' &&\n                    data?.delivery_point?.address && (\n                      <>\n                        <span>\n                          {t('point')}:{' '}\n                          {data?.delivery_point?.address?.[defaultLang]}\n                        </span>\n                        <br />\n                      </>\n                    )}{' '}\n                  {data?.delivery_type === 'delivery' && (\n                    <>\n                      <span>\n                        {t('delivery.address')}: {data?.address?.address}\n                      </span>\n                      <br />\n                    </>\n                  )}\n                  <span>\n                    {t('delivery.date')}: {data?.delivery_date}{' '}\n                    {data?.details[0]?.delivery_time}\n                  </span>\n                  <br />\n                  <span>\n                    {t('note')}: {data?.note ?? '--'}\n                  </span>\n                </p>\n              </address>\n            </div>\n            <address>\n              <p>\n                <span className='font-weight-semibold text-dark font-size-md'>\n                  {data?.user?.firstname} {data?.user?.lastname || ''}\n                </span>\n                <br />\n                <span>\n                  {t('phone')}:{' '}\n                  {data?.user?.phone\n                    ? ReactAppIsDemo === 'true' || isDemo\n                      ? hideNumber(data?.user?.phone)\n                      : data?.user?.phone\n                    : t('no.phone')}\n                </span>\n                <br />\n                <span>\n                  {t('email')}:{' '}\n                  {data?.user?.email\n                    ? ReactAppIsDemo === 'true' || isDemo\n                      ? hideEmail(data?.user?.email)\n                      : data?.user?.email\n                    : t('no.email')}\n                </span>\n              </p>\n            </address>\n          </div>\n\n          <div className='mt-4'>\n            <Table\n              scroll={{ x: true }}\n              dataSource={list}\n              pagination={false}\n              className='mb-5'\n            >\n              <Column title='No.' dataIndex='id' key='id' />\n              <Column\n                title={t('product')}\n                dataIndex='stock'\n                key='product'\n                render={(stock) => (\n                  <Space wrap>\n                    <span>{stock?.product?.translation?.title}</span>\n                    {stock?.extras?.map((extra) =>\n                      extra.group?.type === 'color' ? (\n                        <Tag key={extra?.id}>\n                          {extra.group?.translation?.title}:{' '}\n                          {GetColorName(extra.value?.value)}\n                        </Tag>\n                      ) : (\n                        <Tag key={extra?.id}>\n                          {extra.group?.translation?.title}:{' '}\n                          {extra.value?.value}\n                        </Tag>\n                      ),\n                    )}\n                  </Space>\n                )}\n              />\n              <Column\n                title={t('quantity')}\n                dataIndex='numberQuantity'\n                key='numberQuantity'\n                render={(_, row) => (\n                  <span>\n                    {row.quantity * (row.stock?.product?.interval || 1)}\n                    {row?.stock?.product?.unit?.translation?.title}\n                  </span>\n                )}\n              />\n\n              <Column\n                title={t('discount')}\n                dataIndex='discount'\n                key='discount'\n                render={(_, row) =>\n                  row?.bonus\n                    ? 0\n                    : numberToPrice(\n                        row?.stock?.discount || 0,\n                        row?.currency?.symbol,\n                        row?.currency?.position,\n                      )\n                }\n              />\n\n              <Column\n                title={t('price')}\n                dataIndex='total_price'\n                key='total_price'\n                render={(total_price, row) =>\n                  numberToPrice(\n                    total_price || 0,\n                    row?.currency?.symbol,\n                    row?.currency?.position,\n                  )\n                }\n              />\n            </Table>\n            <div className='d-flex justify-content-end'>\n              <div className='text-right '>\n                <div className='border-bottom'>\n                  <p className='mb-2'>\n                    <span>{t('products')}: </span>\n                    {numberToPrice(\n                      calculateProductsPrice(),\n                      data?.currency?.symbol,\n                      data?.currency?.position,\n                    )}\n                  </p>\n                  <p>\n                    {t('delivery.fee')} :{' '}\n                    {numberToPrice(\n                      data?.delivery_fee || 0,\n                      data?.currency?.symbol,\n                      data?.currency?.position,\n                    )}\n                  </p>\n                  <p>\n                    {t('service.fee')} :{' '}\n                    {numberToPrice(\n                      data?.service_fee || 0,\n                      data?.currency?.symbol,\n                      data?.currency?.position,\n                    )}\n                  </p>\n                  <p>\n                    {t('tax')} :{' '}\n                    {numberToPrice(\n                      data?.total_tax || 0,\n                      data?.currency?.symbol,\n                      data?.currency?.position,\n                    )}\n                  </p>\n                  <p>\n                    {t('discount')} : -\n                    {numberToPrice(\n                      data?.total_discount || 0,\n                      data?.currency?.symbol,\n                      data?.currency?.position,\n                    )}\n                  </p>\n                  <p>\n                    {t('coupon')} : -\n                    {numberToPrice(\n                      data?.coupon?.price || 0,\n                      data?.currency?.symbol,\n                      data?.currency?.position,\n                    )}\n                  </p>\n                </div>\n                <h2 className='font-weight-semibold mt-3'>\n                  <span className='mr-1'>{t('grand.total')}: </span>\n                  {numberToPrice(\n                    data?.total_price || 0,\n                    data?.currency?.symbol,\n                    data?.currency?.position,\n                  )}\n                </h2>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </Modal>\n  );\n};\n\nexport default PreviewInfo;\n","/home/mostafa/Magde/new/frontadminreact/src/helpers/getAddressFromLocation.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/extra-value-select-modal.js",["6497"],[],"import { Badge, Button, Checkbox, Empty, List, Modal, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport extraService from 'services/extra';\nimport ExtraValueModal from './Extras/extra-value-modal';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { GetColorName } from 'hex-color-to-color-name';\nimport Scrollbars from 'react-custom-scrollbars';\n\nconst ExtraValueSelectModal = ({ extra, onClose, onSelect }) => {\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(false);\n  const [extraValues, setExtraValues] = useState([]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const handleChange = (values) => {\n    setSelectedValues(values);\n  };\n\n  const handleSelect = () => {\n    const list = [];\n    extraValues.forEach((extraValue) => {\n      selectedValues.forEach((value) => {\n        if (extraValue.value === value) {\n          list.push(extraValue);\n        }\n      });\n    });\n    onSelect(extra?.value, list);\n    onClose();\n  };\n\n  function fetchExtra(id) {\n    setLoading(true);\n    extraService\n      .getGroupById(id)\n      .then((res) =>\n        setExtraValues(\n          res.data.extra_values.map((item) => ({\n            label: item.value,\n            value: item.id,\n            group_type: item.group.type,\n          })),\n        ),\n      )\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n  useEffect(() => {\n    if (!!extra?.value && !isAddModalOpen) {\n      fetchExtra(extra.value);\n      setSelectedValues(extra?.values?.map((value) => value.value) || []);\n    }\n  }, [extra?.value, isAddModalOpen]);\n\n  return (\n    <>\n      <Modal\n        visible={!!extra}\n        onCancel={onClose}\n        footer={[\n          <Button onClick={onClose}>{t('cancel')}</Button>,\n          !loading && extraValues.length > 0 && (\n            <Button onClick={handleSelect} type='primary'>\n              {t('save')}\n            </Button>\n          ),\n        ]}\n      >\n        <Scrollbars\n          autoHide\n          autoHeight\n          autoHeightMin={'60vh'}\n          autoHeightMax={'60vh'}\n        >\n          <Checkbox.Group\n            value={selectedValues}\n            onChange={handleChange}\n            className='w-100'\n          >\n            {extraValues?.length === 0 && !loading ? (\n              <Empty />\n            ) : (\n              <List\n                dataSource={extraValues}\n                loading={loading}\n                renderItem={(item) => (\n                  <List.Item>\n                    <Checkbox value={item.value}>\n                      {item.group_type === 'color' ? (\n                        <Space size='small'>\n                          <Badge\n                            className='extras-color-badge'\n                            color={item?.label}\n                          />\n                          {GetColorName(item?.label)}\n                          <span>({item?.label})</span>\n                        </Space>\n                      ) : (\n                        <span>{item?.label}</span>\n                      )}\n                    </Checkbox>\n                  </List.Item>\n                )}\n              />\n            )}\n          </Checkbox.Group>\n        </Scrollbars>\n        {!loading ? (\n          <Button\n            type='link'\n            onClick={() => setIsAddModalOpen(true)}\n            style={{ paddingLeft: 0 }}\n            icon={<PlusOutlined />}\n          >\n            {t('add.new.extra')}\n          </Button>\n        ) : null}\n      </Modal>\n      {extra && (\n        <ExtraValueModal\n          isVisible={isAddModalOpen}\n          modal={{\n            label: extra?.label,\n            value: extra?.id,\n            key: extra?.id,\n          }}\n          handleCancel={() => setIsAddModalOpen(false)}\n          groupId={extra?.value}\n          onSuccess={() => fetchExtra(extra?.value)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ExtraValueSelectModal;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/products/extra-select-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/product-modal.js",["6498","6499"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Col,\n  Descriptions,\n  Image,\n  Modal,\n  Row,\n  Space,\n  Spin,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport getImage from 'helpers/getImage';\nimport getImageFromStock from 'helpers/getImageFromStock';\nimport numberToPrice from 'helpers/numberToPrice';\nimport numberToQuantity from 'helpers/numberToQuantity';\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { getExtras, sortExtras } from 'helpers/getExtras';\nimport productService from 'services/product';\nimport { setMenuData } from 'redux/slices/menu';\n\nexport default function ProductModal({ productData, setProductData }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { currency } = useSelector((state) => state.order.data, shallowEqual);\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [currentStock, setCurrentStock] = useState({});\n  const [extrasIds, setExtrasIds] = useState([]);\n  const [extras, setExtras] = useState([]);\n  const [stock, setStock] = useState([]);\n  const [counter, setCounter] = useState(\n    data?.quantity || productData.quantity || productData.min_qty,\n  );\n  const [showExtras, setShowExtras] = useState({\n    extras: [],\n    stock: {\n      id: 0,\n      quantity: 1,\n      price: 0,\n    },\n  });\n\n  const handleCancel = () => {\n    setProductData(null);\n  };\n\n  const handleSubmit = () => {\n    const body = {\n      stock: { ...currentStock, extras: extrasIds },\n      quantity: counter,\n      id: currentStock.id,\n      img: getImageFromStock(currentStock) || data?.img,\n      price: currentStock.price,\n      translation: data?.translation,\n    };\n\n    dispatch(setMenuData({ activeMenu, data: { newProduct: { ...body } } }));\n    setProductData(null);\n  };\n\n  const calculateTotalPrice = (priceKey) => {\n    return showExtras?.stock?.[priceKey || 'price'] * counter;\n  };\n\n  const handleExtrasClick = (e) => {\n    const index = extrasIds.findIndex(\n      (item) => item.extra_group_id === e.extra_group_id,\n    );\n    let array = extrasIds;\n    if (index > -1) array = array.slice(0, index);\n    array.push(e);\n    const nextIds = array.map((item) => item.extra_value_id).join(',');\n    var extrasData = getExtras(nextIds, extras, stock);\n    setShowExtras(extrasData);\n    extrasData.extras?.forEach((element) => {\n      const index = extrasIds.findIndex((item) =>\n        element[0].extra_group_id !== e.extra_group_id\n          ? item.extra_group_id === element[0].extra_group_id\n          : item.extra_group_id === e.extra_group_id,\n      );\n      if (element[0].level >= e.level) {\n        var itemData =\n          element[0].extra_group_id !== e.extra_group_id ? element[0] : e;\n        if (index === -1) array.push(itemData);\n        else {\n          array[index] = itemData;\n        }\n      }\n    });\n    setExtrasIds(array);\n  };\n\n  const addCounter = () => {\n    if (counter === data.max_qty) {\n      return;\n    }\n    setCounter((prev) => prev + 1);\n  };\n\n  const reduceCounter = () => {\n    if (counter === 1) {\n      return;\n    }\n    if (counter <= data?.min_qty) {\n      return;\n    }\n    setCounter((prev) => prev - 1);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    productService\n      .getById(productData.uuid)\n      .then(({ data }) => {\n        setData(data);\n        const myData = sortExtras(data, {});\n        setExtras(myData.extras);\n        setCounter(data.quantity || data.min_qty);\n        setStock(myData.stock);\n        setShowExtras(getExtras(extrasIds, myData.extras, myData.stock));\n        getExtras('', myData.extras, myData.stock).extras?.forEach(\n          (element) => {\n            setExtrasIds((prev) => [...prev, element[0]]);\n          },\n        );\n      })\n      .finally(() => setLoading(false));\n  }, [productData.uuid]);\n\n  useEffect(() => {\n    if (showExtras?.stock) {\n      setCurrentStock({ ...showExtras.stock, extras: extrasIds });\n    }\n  }, [showExtras]);\n\n  return (\n    <Modal\n      visible={!!productData}\n      onCancel={handleCancel}\n      footer={[\n        loading ? (\n          ''\n        ) : (\n          <Button key={'add-product'} type='primary' onClick={handleSubmit}>\n            {t('add')}\n          </Button>\n        ),\n        <Button key={'cancel-modal'} type='default' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Spin spinning={loading}>\n        <Row gutter={24}>\n          <Col span={8}>\n            <Image\n              src={getImage(\n                getImageFromStock(currentStock) || productData?.img,\n              )}\n              alt={productData.name}\n              height={200}\n              style={{ objectFit: 'contain' }}\n            />\n          </Col>\n          <Col span={16}>\n            <Descriptions title={productData.translation?.title}>\n              <Descriptions.Item label={t('price')} span={3}>\n                <div className={currentStock?.discount ? 'strike' : ''}>\n                  {numberToPrice(calculateTotalPrice(), currency.symbol)}\n                </div>\n                {currentStock?.discount ? (\n                  <div className='ml-2 font-weight-bold'>\n                    {numberToPrice(\n                      calculateTotalPrice('total_price'),\n                      currency.symbol,\n                    )}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('in.stock')} span={3}>\n                {numberToQuantity(currentStock?.quantity, data?.unit)}\n              </Descriptions.Item>\n              <Descriptions.Item label={t('tax')} span={3}>\n                {numberToPrice(currentStock?.tax, currency.symbol)}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n        {showExtras?.extras\n          ? showExtras?.extras?.map((extra, idx) => {\n              return (\n                <div className='extra-group' key={'extra-group' + idx}>\n                  <Space className='extras-select' wrap>\n                    {extra?.map((item, itemIdx) => {\n                      if (item?.group?.type === 'color') {\n                        return (\n                          <span\n                            className={`extras-color-wrapper ${\n                              !!extrasIds.find((extra) => extra.id === item.id)\n                                ? 'selected'\n                                : ''\n                            }`}\n                            key={'color' + itemIdx}\n                            onClick={() => handleExtrasClick(item)}\n                          >\n                            <i\n                              className='extras-color'\n                              style={{ backgroundColor: item?.value?.value }}\n                            />\n                          </span>\n                        );\n                      } else if (item?.group?.type === 'text') {\n                        return (\n                          <span\n                            className={`extras-text rounded ${\n                              !!extrasIds.find((extra) => extra.id === item.id)\n                                ? 'selected'\n                                : ''\n                            }`}\n                            key={'text' + itemIdx}\n                            onClick={() => handleExtrasClick(item)}\n                          >\n                            {item?.value?.value}\n                          </span>\n                        );\n                      }\n                      return null;\n                    })}\n                  </Space>\n                </div>\n              );\n            })\n          : null}\n        <Space direction='vertical' size='middle'></Space>\n        <Row gutter={12} className='mt-3'>\n          <Col span={24}>\n            <Space>\n              <Button\n                key={'plus'}\n                type='primary'\n                icon={<MinusOutlined />}\n                onClick={reduceCounter}\n              />\n              {(counter || 1) * (productData?.interval || 1)}\n              {productData?.unit?.translation?.title}\n              <Button\n                key={'minus'}\n                type='primary'\n                icon={<PlusOutlined />}\n                onClick={addCounter}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Spin>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-ingredients.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/extrasModal.js",["6500","6501","6502","6503"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Col,\n  Descriptions,\n  Form,\n  Image,\n  Modal,\n  Row,\n  Space,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport getImage from '../../../helpers/getImage';\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\nimport { addOrderItem } from '../../../redux/slices/order';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { toast } from 'react-toastify';\nimport getImageFromStock from '../../../helpers/getImageFromStock';\nimport { getExtras, sortExtras } from '../../../helpers/getExtras';\nimport numberToQuantity from '../../../helpers/numberToQuantity';\n\nexport default function ExtrasModal({ extrasModal: data, setExtrasModal }) {\n  const [currentStock, setCurrentStock] = useState(data.stock);\n  const [counter, setCounter] = useState(data.quantity || data.min_qty);\n  const [extras, setExtras] = useState([]);\n  const [stock, setStock] = useState([]);\n  const [showExtras, setShowExtras] = useState(null);\n  const [extrasIds, setExtrasIds] = useState([]);\n\n  const { currency } = useSelector((state) => state.order.data, shallowEqual);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (showExtras?.stock) {\n      setCurrentStock({ ...showExtras.stock, extras: extrasIds });\n    }\n  }, [showExtras]);\n\n  useEffect(() => {\n    const myData = sortExtras(data);\n    setExtras(myData.extras);\n    setStock(myData.stock);\n    setShowExtras(getExtras('', myData.extras, myData.stock));\n    getExtras('', myData.extras, myData.stock).extras?.forEach((element) => {\n      setExtrasIds((prev) => [...prev, element[0]]);\n    });\n  }, [data]);\n\n  const handleExtrasClick = (e) => {\n    const index = extrasIds.findIndex(\n      (item) => item.extra_group_id === e.extra_group_id\n    );\n    let array = extrasIds;\n    if (index > -1) array = array.slice(0, index);\n    array.push(e);\n    const nextIds = array.map((item) => item.id).join(',');\n    var extrasData = getExtras(nextIds, extras, stock);\n    setShowExtras(extrasData);\n    extrasData.extras?.forEach((element) => {\n      const index = extrasIds.findIndex((item) =>\n        element[0].extra_group_id != e.extra_group_id\n          ? item.extra_group_id === element[0].extra_group_id\n          : item.extra_group_id === e.extra_group_id\n      );\n      if (element[0].level >= e.level) {\n        var itemData =\n          element[0].extra_group_id != e.extra_group_id ? element[0] : e;\n        if (index == -1) array.push(itemData);\n        else {\n          array[index] = itemData;\n        }\n      }\n    });\n    setExtrasIds(array);\n  };\n\n  const handleCancel = () => {\n    setExtrasModal(false);\n  };\n\n  const onFinish = (values) => {\n    const orderItem = {\n      ...data,\n      stock: currentStock,\n      quantity: counter,\n      id: currentStock.id,\n      img: getImageFromStock(currentStock) || data.img,\n    };\n    if (orderItem.quantity > currentStock.quantity) {\n      toast.warning(`You cannot order more than ${currentStock.quantity}`);\n      return;\n    }\n    dispatch(addOrderItem(orderItem));\n    setExtrasModal(null);\n  };\n\n  function addCounter() {\n    if (counter === currentStock?.quantity) {\n      return;\n    }\n    if (counter === data.max_qty) {\n      return;\n    }\n    setCounter((prev) => prev + 1);\n  }\n\n  function reduceCounter() {\n    if (counter === 1) {\n      return;\n    }\n    if (counter <= data.min_qty) {\n      return;\n    }\n    setCounter((prev) => prev - 1);\n  }\n\n  return (\n    <Modal\n      visible={!!data}\n      title={data.translation?.title}\n      onCancel={handleCancel}\n      footer={[\n        <Button type='primary' onClick={() => form.submit()}>\n          Add\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{ stock: data.stock?.id }}\n      >\n        <Row gutter={24}>\n          <Col span={8}>\n            <Image\n              src={getImage(getImageFromStock(currentStock) || data.img)}\n              alt={data.translation?.title}\n              height={200}\n              style={{ objectFit: 'contain' }}\n            />\n          </Col>\n          <Col span={16}>\n            <Descriptions title={data.translation?.title}>\n              <Descriptions.Item label='Price' span={3}>\n                <div className={currentStock?.discount ? 'strike' : ''}>\n                  {numberToPrice(currentStock?.price, currency.symbol)}\n                </div>\n                {currentStock?.discount ? (\n                  <div className='ml-2 font-weight-bold'>\n                    {numberToPrice(currentStock?.total_price, currency.symbol)}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label='In stock' span={3}>\n                {numberToQuantity(currentStock?.quantity, data.unit)}\n              </Descriptions.Item>\n              <Descriptions.Item label='Tax' span={3}>\n                {numberToPrice(currentStock?.tax, currency.symbol)}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n        {showExtras?.extras?.map((item, idx) => (\n          <div className='extra-group'>\n            <Space key={'extra-group' + idx} className='extras-select'>\n              {item.map((el) => {\n                if (el.group.type === 'color') {\n                  return (\n                    <span\n                      className={`extras-color-wrapper ${\n                        !!extrasIds.find((extra) => extra.id === el.id)\n                          ? 'selected'\n                          : ''\n                      }`}\n                      onClick={() => handleExtrasClick(el)}\n                    >\n                      <i\n                        className='extras-color'\n                        style={{ backgroundColor: el.value }}\n                      />\n                    </span>\n                  );\n                } else if (el.group.type === 'text') {\n                  return (\n                    <span\n                      className={`extras-text rounded ${\n                        !!extrasIds.find((extra) => extra.id === el.id)\n                          ? 'selected'\n                          : ''\n                      }`}\n                      onClick={() => handleExtrasClick(el)}\n                    >\n                      {el.value}\n                    </span>\n                  );\n                }\n                return (\n                  <span\n                    className={`extras-image rounded ${\n                      !!extrasIds.find((extra) => extra.id === el.id)\n                        ? 'selected'\n                        : ''\n                    }`}\n                    onClick={() => handleExtrasClick(el)}\n                  >\n                    <img src={getImage(el.value)} alt='extra' />\n                  </span>\n                );\n              })}\n            </Space>\n          </div>\n        ))}\n        <Row gutter={12} className='mt-3'>\n          <Col span={24}>\n            <Space>\n              <Button\n                type='primary'\n                icon={<MinusOutlined />}\n                onClick={reduceCounter}\n              />\n              {counter}\n              <Button\n                type='primary'\n                icon={<PlusOutlined />}\n                onClick={addCounter}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-instructions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-main.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-nutritions.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/recepts/recept-stocks.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/categories/createCategory.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/orderItems.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/user-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/order-card-seller.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/order-card-waiter.js",["6504","6505"],[],"import React from 'react';\nimport {\n  EyeOutlined,\n  UserOutlined,\n  ContainerOutlined,\n  CarOutlined,\n  DollarOutlined,\n  PayCircleOutlined,\n  BorderlessTableOutlined,\n  FieldTimeOutlined,\n  TableOutlined,\n} from '@ant-design/icons';\nimport { Avatar, Card, List, Skeleton, Space } from 'antd';\nimport { IMG_URL } from '../configs/app-global';\nimport numberToPrice from '../helpers/numberToPrice';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport { BsTruck } from 'react-icons/bs';\n\nconst { Meta } = Card;\n\nconst OrderCardWaiter = ({ data: item, goToShow, loading }) => {\n  const { t } = useTranslation();\n  const data = [\n    {\n      title: 'Number of products',\n      icon: <ContainerOutlined />,\n      data: item?.order_details_count,\n    },\n    {\n      title: 'Delivery type',\n      icon: <BsTruck />,\n      data: item?.delivery_type,\n    },\n    {\n      title: 'Table',\n      icon: <TableOutlined />,\n      data: item?.table?.name || t('unspecified'),\n    },\n    {\n      title: 'Amount',\n      icon: <DollarOutlined />,\n      data: numberToPrice(item.total_price, item.currency?.symbol),\n    },\n    {\n      title: 'Payment type',\n      icon: <PayCircleOutlined />,\n      data: item.transaction?.payment_system?.tag || '-',\n    },\n    {\n      title: 'Created at',\n      icon: <FieldTimeOutlined />,\n      data: moment(item?.created_at).format('YYYY-MM-DD') || '-',\n    },\n  ];\n\n  return (\n    <Card\n      actions={[<EyeOutlined key='setting' onClick={() => goToShow(item)} />]}\n      className='order-card'\n    >\n      <Skeleton loading={loading} avatar active>\n        <Meta\n          avatar={\n            <Avatar src={IMG_URL + item.user?.img} icon={<UserOutlined />} />\n          }\n          description={`#${item.id}`}\n          title={`${item.user?.firstname || '-'} ${item.user?.lastname || '-'}`}\n        />\n        <List\n          itemLayout='horizontal'\n          dataSource={data}\n          renderItem={(item, key) => (\n            <List.Item key={key}>\n              <Space>\n                {item.icon}\n                {`${item.title}:  ${item.data}`}\n              </Space>\n            </List.Item>\n          )}\n        />\n      </Skeleton>\n    </Card>\n  );\n};\n\nexport default OrderCardWaiter;\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/deliverymen/statuses.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/orderItems.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/extrasModal.js",["6506","6507","6508","6509"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Col,\n  Descriptions,\n  Form,\n  Image,\n  Modal,\n  Row,\n  Space,\n} from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport getImage from '../../../helpers/getImage';\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\nimport { addOrderItem } from '../../../redux/slices/order';\nimport numberToPrice from '../../../helpers/numberToPrice';\nimport { toast } from 'react-toastify';\nimport getImageFromStock from '../../../helpers/getImageFromStock';\nimport { getExtras, sortExtras } from '../../../helpers/getExtras';\nimport numberToQuantity from '../../../helpers/numberToQuantity';\n\nexport default function ExtrasModal({ extrasModal: data, setExtrasModal }) {\n  const [currentStock, setCurrentStock] = useState(data.stock);\n  const [counter, setCounter] = useState(data.quantity || data.min_qty);\n  const [extras, setExtras] = useState([]);\n  const [stock, setStock] = useState([]);\n  const [showExtras, setShowExtras] = useState(null);\n  const [extrasIds, setExtrasIds] = useState([]);\n\n  const { currency } = useSelector((state) => state.order.data, shallowEqual);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (showExtras?.stock) {\n      setCurrentStock({ ...showExtras.stock, extras: extrasIds });\n    }\n  }, [showExtras]);\n\n  useEffect(() => {\n    const myData = sortExtras(data);\n    setExtras(myData.extras);\n    setStock(myData.stock);\n    setShowExtras(getExtras('', myData.extras, myData.stock));\n    getExtras('', myData.extras, myData.stock).extras?.forEach((element) => {\n      setExtrasIds((prev) => [...prev, element[0]]);\n    });\n  }, [data]);\n\n  const handleExtrasClick = (e) => {\n    const index = extrasIds.findIndex(\n      (item) => item.extra_group_id === e.extra_group_id\n    );\n    let array = extrasIds;\n    if (index > -1) array = array.slice(0, index);\n    array.push(e);\n    const nextIds = array.map((item) => item.id).join(',');\n    var extrasData = getExtras(nextIds, extras, stock);\n    setShowExtras(extrasData);\n    extrasData.extras?.forEach((element) => {\n      const index = extrasIds.findIndex((item) =>\n        element[0].extra_group_id != e.extra_group_id\n          ? item.extra_group_id === element[0].extra_group_id\n          : item.extra_group_id === e.extra_group_id\n      );\n      if (element[0].level >= e.level) {\n        var itemData =\n          element[0].extra_group_id != e.extra_group_id ? element[0] : e;\n        if (index == -1) array.push(itemData);\n        else {\n          array[index] = itemData;\n        }\n      }\n    });\n    setExtrasIds(array);\n  };\n\n  const handleCancel = () => {\n    setExtrasModal(false);\n  };\n\n  const onFinish = (values) => {\n    const orderItem = {\n      ...data,\n      stock: currentStock,\n      quantity: counter,\n      id: currentStock.id,\n      img: getImageFromStock(currentStock) || data.img,\n    };\n    if (orderItem.quantity > currentStock.quantity) {\n      toast.warning(`You cannot order more than ${currentStock.quantity}`);\n      return;\n    }\n    dispatch(addOrderItem(orderItem));\n    setExtrasModal(null);\n  };\n\n  function addCounter() {\n    if (counter === currentStock?.quantity) {\n      return;\n    }\n    if (counter === data.max_qty) {\n      return;\n    }\n    setCounter((prev) => prev + 1);\n  }\n\n  function reduceCounter() {\n    if (counter === 1) {\n      return;\n    }\n    if (counter <= data.min_qty) {\n      return;\n    }\n    setCounter((prev) => prev - 1);\n  }\n\n  return (\n    <Modal\n      visible={!!data}\n      title={data.translation?.title}\n      onCancel={handleCancel}\n      footer={[\n        <Button type='primary' onClick={() => form.submit()}>\n          Add\n        </Button>,\n        <Button type='default' onClick={handleCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout='vertical'\n        onFinish={onFinish}\n        initialValues={{ stock: data.stock?.id }}\n      >\n        <Row gutter={24}>\n          <Col span={8}>\n            <Image\n              src={getImage(getImageFromStock(currentStock) || data.img)}\n              alt={data.translation?.title}\n              height={200}\n              style={{ objectFit: 'contain' }}\n            />\n          </Col>\n          <Col span={16}>\n            <Descriptions title={data.translation?.title}>\n              <Descriptions.Item label='Price' span={3}>\n                <div className={currentStock?.discount ? 'strike' : ''}>\n                  {numberToPrice(currentStock?.price, currency.symbol)}\n                </div>\n                {currentStock?.discount ? (\n                  <div className='ml-2 font-weight-bold'>\n                    {numberToPrice(currentStock?.total_price, currency.symbol)}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label='In stock' span={3}>\n                {numberToQuantity(currentStock?.quantity, data.unit)}\n              </Descriptions.Item>\n              <Descriptions.Item label='Tax' span={3}>\n                {numberToPrice(currentStock?.tax, currency.symbol)}\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n        {showExtras?.extras?.map((item, idx) => (\n          <div className='extra-group'>\n            <Space key={'extra-group' + idx} className='extras-select'>\n              {item.map((el) => {\n                if (el.group.type === 'color') {\n                  return (\n                    <span\n                      className={`extras-color-wrapper ${\n                        !!extrasIds.find((extra) => extra.id === el.id)\n                          ? 'selected'\n                          : ''\n                      }`}\n                      onClick={() => handleExtrasClick(el)}\n                    >\n                      <i\n                        className='extras-color'\n                        style={{ backgroundColor: el.value }}\n                      />\n                    </span>\n                  );\n                } else if (el.group.type === 'text') {\n                  return (\n                    <span\n                      className={`extras-text rounded ${\n                        !!extrasIds.find((extra) => extra.id === el.id)\n                          ? 'selected'\n                          : ''\n                      }`}\n                      onClick={() => handleExtrasClick(el)}\n                    >\n                      {el.value}\n                    </span>\n                  );\n                }\n                return (\n                  <span\n                    className={`extras-image rounded ${\n                      !!extrasIds.find((extra) => extra.id === el.id)\n                        ? 'selected'\n                        : ''\n                    }`}\n                    onClick={() => handleExtrasClick(el)}\n                  >\n                    <img src={getImage(el.value)} alt='extra' />\n                  </span>\n                );\n              })}\n            </Space>\n          </div>\n        ))}\n        <Row gutter={12} className='mt-3'>\n          <Col span={24}>\n            <Space>\n              <Button\n                type='primary'\n                icon={<MinusOutlined />}\n                onClick={reduceCounter}\n              />\n              {(counter || 1) * (data?.interval || 1)}{data?.unit?.translation?.title}\n              <Button\n                type='primary'\n                icon={<PlusOutlined />}\n                onClick={addCounter}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/order/dnd/List/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/waiter-views/order/dnd/List/index.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/upload/gallery-item.js",["6510"],[],"import React, { useEffect, useState } from 'react';\nimport { Card, Col, Image, Row, Pagination } from 'antd';\nimport { ArrowLeftOutlined } from '@ant-design/icons';\nimport { FcOpenedFolder } from 'react-icons/fc';\nimport galleryService from '../../services/gallery';\nimport { useTranslation } from 'react-i18next';\nimport getImage from '../../helpers/getImage';\nimport Loading from '../../components/loading';\nimport { toast } from 'react-toastify';\n\nconst GalleryItem = ({\n  type,\n  setCurrentType,\n  setImageList,\n  imageList,\n  setIsModalOpen,\n  form,\n  name: item_name,\n}) => {\n  const { t } = useTranslation();\n  const [languages, setLanguages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageSize, setPageSize] = useState(10);\n  const [page, setPage] = useState(1);\n  const [meta, setMeta] = useState({});\n\n  const fetchGallery = () => {\n    const params = {\n      type,\n      perPage: pageSize,\n      page: page,\n    };\n    setLoading(true);\n    galleryService\n      .getAll(params)\n      .then((res) => {\n        setLanguages(res.data.data);\n        setMeta(res.data);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchGallery();\n  }, [page, pageSize]);\n\n  const onChangePagination = (pageNumber, e) => {\n    setPage(pageNumber);\n    setPageSize(e);\n  };\n\n  const createImage = (file) => {\n    return {\n      uid: file,\n      name: file,\n      status: 'done', // done, uploading, error\n      url: file,\n      created: true,\n    };\n  };\n\n  const handleImage = (name) => {\n    const include = imageList.includes(name);\n    if (include) toast.warn('This image is already uploaded');\n    else {\n      setIsModalOpen(false);\n      setImageList((prev) => [...prev, createImage(name)]);\n      if (Boolean(item_name)) {\n        form.setFieldsValue({\n          [item_name]: createImage(name),\n        });\n      } else {\n        form.setFieldsValue({\n          images: [...imageList, createImage(name)],\n        });\n      }\n    }\n  };\n\n  return (\n    <div className='gallery-item '>\n      <Card\n        title={\n          <div className='d-flex align-items-center'>\n            <span className='mr-3' onClick={() => setCurrentType(null)}>\n              <ArrowLeftOutlined />\n            </span>\n            <FcOpenedFolder style={{ fontSize: '25px' }} />\n            <span className='ml-2'>{t('gallery')}</span>\n          </div>\n        }\n      >\n        {!loading ? (\n          <>\n            <Row gutter={[24, 24]}>\n              {languages?.map((item, index) => (\n                <Col key={item.id}>\n                  <Card\n                    className={`mb-0 ${\n                      item.isset ? 'card-noActive' : 'card-active'\n                    } card-image`}\n                  >\n                    <Image\n                      preview={false}\n                      src={getImage(item.path)}\n                      className='images'\n                      alt={'images'}\n                      onClick={() => handleImage(item.path)}\n                    />\n                  </Card>\n                </Col>\n              ))}\n            </Row>\n            <div className='d-flex justify-content-end mt-5'>\n              <Pagination\n                total={meta.total}\n                pageSize={pageSize}\n                current={page}\n                onChange={onChangePagination}\n              />\n            </div>\n          </>\n        ) : (\n          <Loading />\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default GalleryItem;\n","/home/mostafa/Magde/new/frontadminreact/src/views/chat/replyMessage.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/deliveryzone/address.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/numberToQuantity.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/helpers/getExtras.js",["6511","6512","6513","6514","6515","6516","6517","6518"],[],"export function sortExtras(object, initialAddons) {\n  var extras = [];\n  var stocks = [];\n  var up = '';\n\n  for (var i = 0; i < object['stocks']?.length; i++) {\n    up = '';\n    object['stocks'][i]['extras'].sort((a, b) => a.extra_group_id - b.extra_group_id);\n    for (var k = 0; k < object['stocks'][i]['extras']?.length; k++) {\n      var extra = Object.assign({}, object['stocks'][i]['extras'][k]);\n       var index = extras.findIndex((item) => item['extra_value_id'] == extra['extra_value_id']);\n      if (index == -1) {\n        extra['level'] = k;\n        extra['up'] = [up];\n        extras.push(extra);\n        up += extra['extra_value_id'].toString();\n      } else {\n        extras[index]['up'].push(up);\n        up += extra['extra_value_id'].toString();\n      }\n    }\n    var mdata = {\n      id: object['stocks'][i]['id'],\n      extras: up,\n      price: object['stocks'][i]['price'],\n      quantity: object['stocks'][i]['quantity'],\n      countable_id: object['stocks'][i]['countable_id'],\n      discount: object['stocks'][i]['discount'],\n      tax: object['stocks'][i]['tax'],\n      total_price: object['stocks'][i]['total_price'],\n      bonus: object['stocks'][i]['bonus'],\n     };\n\n    stocks.push(mdata);\n  }\n\n  return {\n    stock: stocks,\n    extras: extras,\n  };\n}\n\nexport function getExtras(extrasIdsArray, extras, stocks) {\n  var splitted = extrasIdsArray == '' ? [] : extrasIdsArray.split(',');\n  var result = [];\n  var up = [];\n  for (var i = 0; i <= splitted.length; i++) {\n    if (i - 1 >= 0) up[up.length] = splitted[i - 1].toString();\n    var filtered = extras.filter((item) => {\n      var mySet = new Set(item['up']);\n      if (mySet.has(up.join(''))) return item;\n    });\n    if (filtered.length > 0) result.push(filtered);\n  }\n  var i = 0;\n  if (up.length < result.length)\n    while (i < extras.length) {\n      up[up.length] = result[result.length - 1][0]['extra_value_id'].toString();\n      let filtered = extras.filter((item) => {\n        var mySet = new Set(item['up']);\n        if (mySet.has(up.join(''))) return true;\n        return false\n      });\n      if (filtered.length == 0) {\n        //up.pop();\n        break;\n      }\n      result.push(filtered);\n      i++;\n    }\n  var index = stocks.findIndex((item) => item['extras'] == up.join(''));\n  return {\n    stock: stocks[index],\n    extras: result,\n  };\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/addons.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/delivery-user-modal.js",["6519"],[],"import React, { useRef, useState } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Modal, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport { DebounceSelect } from '../../../components/search';\nimport { setCartData } from '../../../redux/slices/cart';\nimport countryService from '../../../services/deliveryzone/country';\nimport cityService from '../../../services/deliveryzone/city';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { getCartData } from '../../../redux/selectors/cartSelector';\nimport PosUserAddress from './pos-user-address';\nimport addressService from '../../../services/deliveryzone/address';\n\nexport default function DeliveryUserModal({ visible, handleCancel }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const [addressModal, setAddressModal] = useState(null);\n  const dispatch = useDispatch();\n\n  const cartData = useSelector((state) => getCartData(state.cart));\n  const { currentBag } = useSelector((state) => state.cart, shallowEqual);\n\n  const countryOptions = useRef([]);\n\n  const fetchCountries = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      has_price: 1,\n      region_id: cartData?.region?.value,\n    };\n\n    return countryService.get(params).then(({ data }) => {\n      const options = data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n        region_id: item?.region_id,\n      }));\n      countryOptions.current = options;\n      return options;\n    });\n  };\n\n  const fetchCities = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      country_id: cartData?.country?.value,\n      has_price: 1,\n    };\n\n    return cityService.get(params).then(({ data }) =>\n      data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const goToAddClientAddress = () => {\n    if (!cartData.userUuid) {\n      toast.warning(t('please.select.client'));\n      return;\n    }\n    setAddressModal(cartData.userUuid);\n  };\n\n  const onFinish = (values) => {\n    const payload = {\n      ...values,\n      user_id: cartData.user?.value,\n      country_id: values.country?.value,\n      city_id: values.city?.value,\n      active: 1,\n      phone: values.phone?.toString(),\n      street_house_number: values.street_house_number?.toString(),\n      city: undefined,\n      country: undefined,\n    };\n    setLoadingBtn(true);\n    addressService\n      .create(payload)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        handleCancel();\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Modal\n      title={t('add.delivery.address')}\n      visible={visible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='ok-button'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form layout='vertical' form={form} onFinish={onFinish}>\n        <Row gutter={24}>\n          <Col span={12}>\n            <Form.Item\n              name='firstname'\n              label={t('firstname')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='lastname'\n              label={t('lastname')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='title'\n              label={t('title')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='country'\n              label={t('country')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchCountries}\n                placeholder={t('select.country')}\n                onChange={(country) => {\n                  const selectedCountry = countryOptions.current.find(\n                    (item) => item.value === country.value,\n                  );\n                  form.setFieldsValue({\n                    region_id: selectedCountry?.region_id,\n                  });\n                  dispatch(\n                    setCartData({\n                      country,\n                      region_id: selectedCountry?.region_id,\n                      bag_id: currentBag,\n                    }),\n                  );\n                }}\n                refetchOptions={true}\n                onClear={() => {\n                  form.setFieldsValue({ city: [] });\n                  dispatch(\n                    setCartData({\n                      country: null,\n                      city: null,\n                      bag_id: currentBag,\n                    }),\n                  );\n                }}\n                autoComplete='none'\n              />\n            </Form.Item>\n            <Form.Item name='region_id' hidden />\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='city'\n              label={t('city')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchCities}\n                placeholder={t('select.city')}\n                refetchOptions={true}\n                disabled={!cartData?.country}\n                onChange={(city) =>\n                  dispatch(\n                    setCartData({\n                      city,\n                      bag_id: currentBag,\n                    }),\n                  )\n                }\n                autoComplete='none'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('phone.number')}\n              name='phone'\n              rules={[\n                {\n                  validator(_, value) {\n                    if (value < 0) {\n                      return Promise.reject(new Error(t('must.be.positive')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <InputNumber\n                className='w-100'\n                addonBefore={'+'}\n                parser={(value) => parseInt(value, 10)}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='street_house_number'\n              label={t('home.number')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'number',\n                  max: 99999999,\n                  message: t('max.length.8'),\n                },\n              ]}\n            >\n              <InputNumber\n                placeholder={t('home.number')}\n                className='w-100'\n                min={0}\n                onChange={(value) =>\n                  dispatch(\n                    setCartData({\n                      street_house_number: value,\n                      bag_id: currentBag,\n                    }),\n                  )\n                }\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='zipcode'\n              label={t('zip.code')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input\n                placeholder={t('zip.code')}\n                className='w-100'\n                onChange={(value) =>\n                  dispatch(\n                    setCartData({\n                      zip_code: value.target.value,\n                      bag_id: currentBag,\n                    }),\n                  )\n                }\n                maxLength={15}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              name={['address', 'address']}\n              label={t('address')}\n              rules={[{ required: true, message: '' }]}\n              onClick={goToAddClientAddress}\n            >\n              <Input autoComplete='off' placeholder={t('address')} />\n            </Form.Item>\n            <Form.Item name={['location', 'latitude']} hidden />\n            <Form.Item name={['location', 'longitude']} hidden />\n          </Col>\n          <Col span={24}>\n            <Form.Item name='additional_details' label={t('details')}>\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n      {addressModal && (\n        <PosUserAddress\n          uuid={addressModal}\n          handleCancel={() => setAddressModal(null)}\n          parentForm={form}\n        />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/shop/user-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/todo/todo-form.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/shop/category-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/components/todo/todo-list.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/rest/address.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/services/seller/address.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-modal.js",["6520","6521"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Col,\n  DatePicker,\n  Form,\n  Modal,\n  Row,\n  Select,\n  TimePicker,\n} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport sellerBooking from 'services/seller/booking';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport { fetchBookingTime } from 'redux/slices/booking-time';\nimport { weeks } from 'components/week';\nimport bookingClosedDays from 'services/seller/bookingClosedDays';\nimport bookingWorkingDays from 'services/seller/bookingWorkingDays';\nimport { toast } from 'react-toastify';\nimport sellerBookingTable from 'services/seller/booking-table';\nimport { fetchSellerBookingList } from 'redux/slices/booking-list';\n\nexport default function BookingModal({ visible, handleCancel }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { myShop } = useSelector((state) => state.myShop, shallowEqual);\n  const { reservation_enable_for_user, reservetion_time_durations } =\n    useSelector((state) => state.globalSettings.settings, shallowEqual);\n\n  const [selectDate, setSelectDate] = useState(null);\n  const [selectStartTime, setSelectStartTime] = useState(null);\n  const [closedDate, setClosedDate] = useState(null);\n  const [workingDays, setWorkingDays] = useState(null);\n  const [disabledTime, setDisabledTime] = useState(null);\n  const { data: time } = useSelector(\n    (state) => state.bookingTime,\n    shallowEqual\n  );\n  const bookingTime = workingDays?.find(\n    (item) => item?.day === weeks[selectDate?.getDay()]?.title\n  );\n  const filter = closedDate?.map((date) => date.day);\n\n  function disabledDate(current) {\n    const a = filter?.find(\n      (date) => date === moment(current).format('YYYY-MM-DD')\n    );\n    const b = moment().add(-1, 'days') >= current;\n    if (a) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n\n  const range = (start, end, timeList) => {\n    const x = parseInt(start);\n    const y = parseInt(end);\n    const number = [...Array(24).keys()];\n    for (let i = x; i <= y; i++) {\n      delete number[i];\n    }\n\n    for (let i = 0; i <= timeList?.length; i++) {\n      const start_time = parseInt(\n        moment(timeList?.[i]?.start_date).format('HH')\n      );\n      const end_time =\n        parseInt(moment(timeList?.[i]?.end_date).format('HH')) - 1;\n\n      for (let j = start_time; j <= end_time; j++) {\n        number[j] = j;\n      }\n    }\n\n    return number;\n  };\n\n  const middle = (start, end) => {\n    const x = parseInt(start);\n    const y = parseInt(end);\n    const number = [...Array(60).keys()];\n    for (let i = x; i <= y; i++) {\n      delete number[i];\n    }\n    return number;\n  };\n\n  const disabledDateTime = () => ({\n    disabledHours: () =>\n      range(\n        moment(new Date()).format('DD') === moment(selectDate).format('DD')\n          ? bookingTime?.from.substring(0, 2) >= moment(new Date()).format('HH')\n            ? bookingTime?.from.substring(0, 2)\n            : moment(new Date()).format('HH')\n          : bookingTime?.from.substring(0, 2),\n        bookingTime?.to.substring(0, 2),\n        disabledTime\n      ),\n    disabledMinutes: (selectedHour) => {\n      const selectedDate = moment(selectDate).format('YYYY-MM-DD');\n      const disabledMinutes = [];\n\n      disabledTime.forEach((time) => {\n        const startDate = moment(time.start_date).format('YYYY-MM-DD');\n\n        if (selectedDate === startDate) {\n          const startHour = moment(time.start_date).format('HH');\n          const endHour = moment(time.end_date).format('HH');\n          const startMinute = moment(time.start_date).format('mm');\n          const endMinute = moment(time.end_date).format('mm');\n\n          if (selectedHour === parseInt(startHour)) {\n            disabledMinutes.push(...middle(0, parseInt(startMinute)));\n          }\n\n          if (selectedHour === parseInt(endHour)) {\n            disabledMinutes.push(...middle(parseInt(endMinute) + 1, 60));\n          }\n\n          if (\n            selectedHour > parseInt(startHour) &&\n            selectedHour < parseInt(endHour)\n          ) {\n            disabledMinutes.push(...middle(0, 60));\n          }\n        }\n      });\n\n      return disabledMinutes;\n    },\n  });\n\n  const startTime = moment('01:00', 'HH').format('HH');\n  const endTime =\n    moment(bookingTime?.to, 'HH').format('HH') -\n    moment(selectStartTime, 'HH').format('HH');\n  const interval = reservetion_time_durations;\n  const result = [];\n  let currentTime = moment(startTime, 'HH:mm');\n\n  while (currentTime <= moment(endTime, 'HH:mm')) {\n    result.push(currentTime.format('HH:mm'));\n    currentTime = currentTime.add(interval, 'minute');\n  }\n\n  const onFinish = (values) => {\n    setLoadingBtn(true)\n    const selectedData = moment(selectDate).format('YYYY-MM-DD');\n    const start_time = moment(values.start_time).format('HH:mm');\n    const end_time = moment(values.end_time);\n    const result = moment(\n      values.start_time.add(values.end_time, 'hours')\n    ).format('HH:mm');\n\n    const payload = {\n      table_id: visible.id,\n      booking_id: time[0]?.id,\n      start_date: selectedData + ' ' + start_time,\n      end_date: end_time ? selectedData + ' ' + result : undefined,\n    };\n    \n    sellerBooking.create(payload).then(() => {\n      toast.success(t('successfully.created'));\n      handleCancel();\n      dispatch(fetchSellerBookingList({shop_section_id: visible?.shop_section_id}))\n    }).finally(() => {\n      setLoadingBtn(false)\n    });\n  };\n\n  const fetchBookingClosedDays = () => {\n    bookingClosedDays.getById(myShop.uuid).then((res) => {\n      setClosedDate(res.data.closed_dates);\n    });\n  };\n\n  const fetchBookingWorkingDays = () => {\n    bookingWorkingDays.getById(myShop.uuid).then((res) => {\n      setWorkingDays(res.data.dates.length !== 0 ? res.data.dates : []);\n    });\n  };\n\n  const CheckSelectDate = () => {\n    setLoadingBtn(true);\n    const params = {\n      date_from: moment(selectDate, 'YYYY-MM-DD').format('YYYY-MM-DD'),\n    };\n    sellerBookingTable\n      .checkTable(visible.id, params)\n      .then((res) => setDisabledTime(res))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    fetchBookingWorkingDays();\n    fetchBookingClosedDays();\n    dispatch(fetchBookingTime());\n  }, []);\n\n  useEffect(() => {\n    if (selectDate) CheckSelectDate();\n  }, [selectDate]);\n\n  return (\n    <Modal\n      title={t('new.order')}\n      visible={visible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='ok-button'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n          className='table_booking'\n        >\n          {t('confirm')}\n        </Button>,\n      ]}\n    >\n      <Form\n        layout='vertical'\n        name='booking-modal'\n        form={form}\n        onFinish={onFinish}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <Form.Item\n              label={t('date')}\n              name='date'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DatePicker\n                disabledDate={disabledDate}\n                picker='date'\n                placeholder={t('date')}\n                className='w-100'\n                format={'YYYY-MM-DD'}\n                onChange={(e) => setSelectDate(e ? new Date(e) : null)}\n                showNow={false}\n              />\n            </Form.Item>\n\n            <Form.Item\n              label={t('start.time')}\n              name='start_time'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <TimePicker\n                disabled={!selectDate || loadingBtn}\n                picker='time'\n                placeholder={t('')}\n                className='w-100'\n                format={'HH:mm'}\n                showNow={false}\n                disabledTime={disabledDateTime}\n                onChange={(e) => setSelectStartTime(new Date(e))}\n              />\n            </Form.Item>\n\n            {reservation_enable_for_user ? (\n              <Form.Item\n                label={t('durations')}\n                name='end_time'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <Select disabled={!selectDate || loadingBtn}>\n                  {result.map((item) => (\n                    <Select.Option key={item}>{item}</Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            ) : (\n              ''\n            )}\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-table-add-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/my-shop/delivery-time-types.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/addons.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/delivery-user-modal.js",["6522"],[],"import { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Col, Form, Input, InputNumber, Modal, Row } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { getCartData } from '../../../../redux/selectors/cartSelector';\nimport countryService from '../../../../services/deliveryzone/country';\nimport cityService from '../../../../services/deliveryzone/city';\nimport { toast } from 'react-toastify';\nimport addressService from '../../../../services/seller/address';\nimport { DebounceSelect } from '../../../../components/search';\nimport { setCartData } from '../../../../redux/slices/cart';\nimport PosUserAddress from './pos-user-address';\n\nexport default function DeliveryUserModal({ visible, handleCancel }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [error, setError] = useState(null);\n  const [addressModal, setAddressModal] = useState(null);\n  const dispatch = useDispatch();\n\n  const cartData = useSelector((state) => getCartData(state.cart));\n  const { currentBag } = useSelector((state) => state.cart, shallowEqual);\n\n  const countryOptions = useRef([]);\n\n  const fetchCountries = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      has_price: 1,\n      region_id: cartData?.region?.value,\n    };\n\n    return countryService.get(params).then(({ data }) => {\n      const options = data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n        region_id: item?.region_id,\n      }));\n      countryOptions.current = options;\n      return options;\n    });\n  };\n\n  const fetchCities = (search) => {\n    const params = {\n      search,\n      perPage: 10,\n      page: 1,\n      country_id: cartData?.country?.value,\n      has_price: 1,\n    };\n\n    return cityService.get(params).then(({ data }) =>\n      data?.flatMap((item) => ({\n        label: item?.translation?.title,\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  };\n\n  const goToAddClientAddress = () => {\n    if (!cartData.userUuid) {\n      toast.warning(t('please.select.client'));\n      return;\n    }\n    setAddressModal(cartData.userUuid);\n  };\n\n  const onFinish = (values) => {\n    const payload = {\n      ...values,\n      user_id: cartData.user?.value,\n      country_id: values.country?.value,\n      city_id: values.city?.value,\n      active: 1,\n      phone: values.phone?.toString(),\n      street_house_number: values.street_house_number?.toString(),\n      city: undefined,\n      country: undefined,\n    };\n    setLoadingBtn(true);\n    addressService\n      .create(payload)\n      .then(() => {\n        toast.success(t('successfully.added'));\n        handleCancel();\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Modal\n      title={t('add.delivery.address')}\n      visible={visible}\n      onCancel={handleCancel}\n      footer={[\n        <Button\n          key='ok-button'\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>,\n        <Button key='cancel-button' onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form layout='vertical' form={form} onFinish={onFinish}>\n        <Row gutter={24}>\n          <Col span={12}>\n            <Form.Item\n              name='firstname'\n              label={t('firstname')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='lastname'\n              label={t('lastname')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='title'\n              label={t('title')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='country'\n              label={t('country')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchCountries}\n                placeholder={t('select.country')}\n                onChange={(country) => {\n                  const selectedCountry = countryOptions.current.find(\n                    (item) => item.value === country.value,\n                  );\n                  form.setFieldsValue({\n                    region_id: selectedCountry?.region_id,\n                  });\n                  dispatch(\n                    setCartData({\n                      country,\n                      region_id: selectedCountry?.region_id,\n                      bag_id: currentBag,\n                    }),\n                  );\n                }}\n                refetchOptions={true}\n                onClear={() => {\n                  form.setFieldsValue({ city: [] });\n                  dispatch(\n                    setCartData({\n                      country: null,\n                      city: null,\n                      bag_id: currentBag,\n                    }),\n                  );\n                }}\n                autoComplete='none'\n              />\n            </Form.Item>\n            <Form.Item name='region_id' hidden />\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='city'\n              label={t('city')}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DebounceSelect\n                fetchOptions={fetchCities}\n                placeholder={t('select.city')}\n                refetchOptions={true}\n                disabled={!cartData?.country}\n                onChange={(city) =>\n                  dispatch(\n                    setCartData({\n                      city,\n                      bag_id: currentBag,\n                    }),\n                  )\n                }\n                autoComplete='none'\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              label={t('phone.number')}\n              name='phone'\n              rules={[\n                {\n                  validator(_, value) {\n                    if (value < 0) {\n                      return Promise.reject(new Error(t('must.be.positive')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <InputNumber\n                className='w-100'\n                addonBefore={'+'}\n                parser={(value) => parseInt(value, 10)}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='street_house_number'\n              label={t('home.number')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                {\n                  type: 'number',\n                  max: 99999999,\n                  message: t('max.length.8'),\n                },\n              ]}\n            >\n              <InputNumber\n                placeholder={t('home.number')}\n                className='w-100'\n                min={0}\n                onChange={(value) =>\n                  dispatch(\n                    setCartData({\n                      street_house_number: value,\n                      bag_id: currentBag,\n                    }),\n                  )\n                }\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name='zipcode'\n              label={t('zip.code')}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input\n                placeholder={t('zip.code')}\n                className='w-100'\n                onChange={(value) =>\n                  dispatch(\n                    setCartData({\n                      zip_code: value.target.value,\n                      bag_id: currentBag,\n                    }),\n                  )\n                }\n                maxLength={15}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              name={['address', 'address']}\n              label={t('address')}\n              rules={[{ required: true, message: '' }]}\n              onClick={goToAddClientAddress}\n            >\n              <Input autoComplete='off' placeholder={t('address')} />\n            </Form.Item>\n            <Form.Item name={['location', 'latitude']} hidden />\n            <Form.Item name={['location', 'longitude']} hidden />\n          </Col>\n          <Col span={24}>\n            <Form.Item name='additional_details' label={t('details')}>\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n      {addressModal && (\n        <PosUserAddress\n          uuid={addressModal}\n          handleCancel={() => setAddressModal(null)}\n          parentForm={form}\n        />\n      )}\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/views/pos-system/components/pos-user-address.js",["6523"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Form, Modal } from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Map from 'components/map';\nimport getDefaultLocation from 'helpers/getDefaultLocation';\nimport AddressForm from 'components/forms/address-form';\n\nexport default function PosUserAddress({ uuid, handleCancel, parentForm }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { currentBag } = useSelector((state) => state.cart, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n\n  const parentFormValues = parentForm.getFieldsValue();\n\n  const [location, setLocation] = useState(\n    parentFormValues.location?.latitude\n      ? {\n          lat: parentFormValues.location?.latitude,\n          lng: parentFormValues.location?.longitude,\n        }\n      : getDefaultLocation(settings),\n  );\n\n  const [value, setValue] = useState(parentFormValues?.address?.address);\n\n  const onFinish = (values) => {\n    const body = {\n      address: { address: values?.[`address[${defaultLang}]`] },\n      location: {\n        latitude: location.lat,\n        longitude: location.lng,\n      },\n    };\n\n    parentForm.setFieldsValue(body);\n    handleCancel();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      address: parentFormValues.address.address || null,\n    });\n  }, [currentBag]);\n\n  return (\n    <Modal\n      visible={!!uuid}\n      title={t('create.address')}\n      onCancel={handleCancel}\n      footer={[\n        <Button type='primary' key={'saveBtn'} onClick={() => form.submit()}>\n          {t('save')}\n        </Button>,\n        <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        layout='vertical'\n        name='user-address'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{\n          [`address[${defaultLang}]`]: parentFormValues.address.address,\n        }}\n      >\n        <AddressForm\n          value={value}\n          setValue={setValue}\n          setLocation={setLocation}\n        />\n        <Form.Item label={t('map')}>\n          <Map\n            location={location}\n            setLocation={setLocation}\n            setAddress={(value) =>\n              form.setFieldsValue({ [`address[${defaultLang}]`]: value })\n            }\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","/home/mostafa/Magde/new/frontadminreact/src/components/week.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/booking/booking-zone-add-modal.js",[],[],"/home/mostafa/Magde/new/frontadminreact/src/views/seller-views/pos-system/components/pos-user-address.js",["6524","6525","6526"],[],"import React, { useState, useEffect } from 'react';\nimport { Button, Form, Input, Modal } from 'antd';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Map from '../../../../components/map';\nimport getDefaultLocation from '../../../../helpers/getDefaultLocation';\nimport { getCartData } from '../../../../redux/selectors/cartSelector';\n\nexport default function PosUserAddress({ uuid, handleCancel, parentForm }) {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const { currentBag } = useSelector((state) => state.cart, shallowEqual);\n  const { settings } = useSelector(\n    (state) => state.globalSettings,\n    shallowEqual,\n  );\n  const parentFormValues = parentForm.getFieldsValue();\n\n  const [location, setLocation] = useState(\n    parentFormValues.location?.latitude\n      ? {\n          lat: parentFormValues.location?.latitude,\n          lng: parentFormValues.location?.longitude,\n        }\n      : getDefaultLocation(settings),\n  );\n\n  const onFinish = (values) => {\n    const body = {\n      address: { address: values?.[`address[${defaultLang}]`] },\n      location: {\n        latitude: location.lat,\n        longitude: location.lng,\n      },\n    };\n\n    parentForm.setFieldsValue(body);\n    handleCancel();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      address: parentFormValues.address.address || null,\n    });\n  }, [currentBag]);\n\n  return (\n    <Modal\n      visible={!!uuid}\n      title={t('create.address')}\n      onCancel={handleCancel}\n      footer={[\n        <Button type='primary' key={'saveBtn'} onClick={() => form.submit()}>\n          {t('save')}\n        </Button>,\n        <Button type='default' key={'cancelBtn'} onClick={handleCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form\n        layout='vertical'\n        name='user-address'\n        form={form}\n        onFinish={onFinish}\n        initialValues={{\n          [`address[${defaultLang}]`]: parentFormValues.address.address,\n        }}\n      >\n        <Form.Item\n          name='address'\n          label={t('address')}\n          rules={[{ required: true, message: t('required') }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item label={t('map')}>\n          <Map\n            location={location}\n            setLocation={setLocation}\n            setAddress={(value) => form.setFieldsValue({ address: value })}\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n",{"ruleId":"6527","severity":1,"message":"6528","line":23,"column":10,"nodeType":"6529","messageId":"6530","endLine":23,"endColumn":15},{"ruleId":"6527","severity":1,"message":"6531","line":24,"column":10,"nodeType":"6529","messageId":"6530","endLine":24,"endColumn":17},{"ruleId":"6527","severity":1,"message":"6532","line":25,"column":10,"nodeType":"6529","messageId":"6530","endLine":25,"endColumn":27},{"ruleId":"6527","severity":1,"message":"6533","line":25,"column":29,"nodeType":"6529","messageId":"6530","endLine":25,"endColumn":37},{"ruleId":"6527","severity":1,"message":"6534","line":25,"column":39,"nodeType":"6529","messageId":"6530","endLine":25,"endColumn":50},{"ruleId":"6527","severity":1,"message":"6535","line":29,"column":9,"nodeType":"6529","messageId":"6530","endLine":29,"endColumn":22},{"ruleId":"6527","severity":1,"message":"6536","line":30,"column":9,"nodeType":"6529","messageId":"6530","endLine":30,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6538","line":19,"column":6,"nodeType":"6539","endLine":19,"endColumn":8,"suggestions":"6540"},{"ruleId":"6537","severity":1,"message":"6538","line":21,"column":6,"nodeType":"6539","endLine":21,"endColumn":8,"suggestions":"6541"},{"ruleId":"6537","severity":1,"message":"6542","line":61,"column":6,"nodeType":"6539","endLine":61,"endColumn":8,"suggestions":"6543"},{"ruleId":"6537","severity":1,"message":"6544","line":70,"column":6,"nodeType":"6539","endLine":70,"endColumn":8,"suggestions":"6545"},{"ruleId":"6527","severity":1,"message":"6546","line":15,"column":9,"nodeType":"6529","messageId":"6530","endLine":15,"endColumn":13},{"ruleId":"6527","severity":1,"message":"6547","line":16,"column":9,"nodeType":"6529","messageId":"6530","endLine":16,"endColumn":22},{"ruleId":"6537","severity":1,"message":"6548","line":125,"column":6,"nodeType":"6539","endLine":125,"endColumn":8,"suggestions":"6549"},{"ruleId":"6527","severity":1,"message":"6550","line":88,"column":15,"nodeType":"6529","messageId":"6530","endLine":88,"endColumn":22},{"ruleId":"6527","severity":1,"message":"6550","line":43,"column":15,"nodeType":"6529","messageId":"6530","endLine":43,"endColumn":22},{"ruleId":"6527","severity":1,"message":"6550","line":41,"column":15,"nodeType":"6529","messageId":"6530","endLine":41,"endColumn":22},{"ruleId":"6527","severity":1,"message":"6550","line":111,"column":15,"nodeType":"6529","messageId":"6530","endLine":111,"endColumn":22},{"ruleId":"6537","severity":1,"message":"6551","line":67,"column":6,"nodeType":"6539","endLine":67,"endColumn":8,"suggestions":"6552"},{"ruleId":"6537","severity":1,"message":"6553","line":54,"column":61,"nodeType":"6539","endLine":54,"endColumn":67,"suggestions":"6554"},{"ruleId":"6555","severity":1,"message":"6556","line":123,"column":24,"nodeType":"6557","messageId":"6558","endLine":123,"endColumn":26},{"ruleId":"6555","severity":1,"message":"6556","line":125,"column":32,"nodeType":"6557","messageId":"6558","endLine":125,"endColumn":34},{"ruleId":"6555","severity":1,"message":"6556","line":127,"column":36,"nodeType":"6557","messageId":"6558","endLine":127,"endColumn":38},{"ruleId":"6559","severity":1,"message":"6560","line":33,"column":23,"nodeType":"6561","messageId":"6562","endLine":33,"endColumn":25},{"ruleId":"6559","severity":1,"message":"6560","line":34,"column":29,"nodeType":"6561","messageId":"6562","endLine":34,"endColumn":31},{"ruleId":"6559","severity":1,"message":"6560","line":35,"column":27,"nodeType":"6561","messageId":"6562","endLine":35,"endColumn":29},{"ruleId":"6559","severity":1,"message":"6560","line":36,"column":29,"nodeType":"6561","messageId":"6562","endLine":36,"endColumn":31},{"ruleId":"6559","severity":1,"message":"6560","line":37,"column":29,"nodeType":"6561","messageId":"6562","endLine":37,"endColumn":31},{"ruleId":"6537","severity":1,"message":"6563","line":51,"column":6,"nodeType":"6539","endLine":51,"endColumn":8,"suggestions":"6564"},{"ruleId":"6537","severity":1,"message":"6565","line":16,"column":5,"nodeType":"6539","endLine":16,"endColumn":7,"suggestions":"6566"},{"ruleId":"6537","severity":1,"message":"6567","line":42,"column":6,"nodeType":"6539","endLine":42,"endColumn":8,"suggestions":"6568"},{"ruleId":"6537","severity":1,"message":"6569","line":13,"column":6,"nodeType":"6529","endLine":13,"endColumn":16},{"ruleId":"6537","severity":1,"message":"6570","line":13,"column":6,"nodeType":"6529","endLine":13,"endColumn":16,"suggestions":"6571"},{"ruleId":"6537","severity":1,"message":"6572","line":100,"column":6,"nodeType":"6539","endLine":100,"endColumn":26,"suggestions":"6573"},{"ruleId":"6537","severity":1,"message":"6572","line":113,"column":6,"nodeType":"6539","endLine":113,"endColumn":26,"suggestions":"6574"},{"ruleId":"6537","severity":1,"message":"6575","line":34,"column":6,"nodeType":"6539","endLine":34,"endColumn":8,"suggestions":"6576"},{"ruleId":"6537","severity":1,"message":"6577","line":108,"column":6,"nodeType":"6539","endLine":108,"endColumn":26,"suggestions":"6578"},{"ruleId":"6537","severity":1,"message":"6575","line":27,"column":6,"nodeType":"6539","endLine":27,"endColumn":8,"suggestions":"6579"},{"ruleId":"6537","severity":1,"message":"6575","line":32,"column":6,"nodeType":"6539","endLine":32,"endColumn":8,"suggestions":"6580"},{"ruleId":"6537","severity":1,"message":"6577","line":135,"column":6,"nodeType":"6539","endLine":135,"endColumn":26,"suggestions":"6581"},{"ruleId":"6537","severity":1,"message":"6575","line":44,"column":6,"nodeType":"6539","endLine":44,"endColumn":8,"suggestions":"6582"},{"ruleId":"6537","severity":1,"message":"6583","line":110,"column":6,"nodeType":"6539","endLine":110,"endColumn":26,"suggestions":"6584"},{"ruleId":"6537","severity":1,"message":"6575","line":35,"column":6,"nodeType":"6539","endLine":35,"endColumn":8,"suggestions":"6585"},{"ruleId":"6537","severity":1,"message":"6575","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":8,"suggestions":"6586"},{"ruleId":"6537","severity":1,"message":"6583","line":109,"column":6,"nodeType":"6539","endLine":109,"endColumn":26,"suggestions":"6587"},{"ruleId":"6537","severity":1,"message":"6575","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":8,"suggestions":"6588"},{"ruleId":"6537","severity":1,"message":"6589","line":126,"column":6,"nodeType":"6539","endLine":126,"endColumn":26,"suggestions":"6590"},{"ruleId":"6527","severity":1,"message":"6591","line":14,"column":10,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6575","line":54,"column":6,"nodeType":"6539","endLine":54,"endColumn":8,"suggestions":"6592"},{"ruleId":"6537","severity":1,"message":"6589","line":128,"column":6,"nodeType":"6539","endLine":128,"endColumn":26,"suggestions":"6593"},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6594"},{"ruleId":"6527","severity":1,"message":"6595","line":28,"column":9,"nodeType":"6529","messageId":"6530","endLine":28,"endColumn":18},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6596"},{"ruleId":"6537","severity":1,"message":"6597","line":89,"column":6,"nodeType":"6539","endLine":89,"endColumn":26,"suggestions":"6598"},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6599"},{"ruleId":"6537","severity":1,"message":"6597","line":100,"column":6,"nodeType":"6539","endLine":100,"endColumn":26,"suggestions":"6600"},{"ruleId":"6527","severity":1,"message":"6601","line":40,"column":20,"nodeType":"6529","messageId":"6530","endLine":40,"endColumn":31},{"ruleId":"6537","severity":1,"message":"6575","line":54,"column":6,"nodeType":"6539","endLine":54,"endColumn":8,"suggestions":"6602"},{"ruleId":"6537","severity":1,"message":"6603","line":143,"column":6,"nodeType":"6539","endLine":143,"endColumn":26,"suggestions":"6604"},{"ruleId":"6537","severity":1,"message":"6575","line":29,"column":6,"nodeType":"6539","endLine":29,"endColumn":8,"suggestions":"6605"},{"ruleId":"6537","severity":1,"message":"6575","line":41,"column":6,"nodeType":"6539","endLine":41,"endColumn":8,"suggestions":"6606"},{"ruleId":"6537","severity":1,"message":"6603","line":126,"column":6,"nodeType":"6539","endLine":126,"endColumn":26,"suggestions":"6607"},{"ruleId":"6537","severity":1,"message":"6575","line":34,"column":6,"nodeType":"6539","endLine":34,"endColumn":8,"suggestions":"6608"},{"ruleId":"6527","severity":1,"message":"6609","line":27,"column":10,"nodeType":"6529","messageId":"6530","endLine":27,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6575","line":56,"column":6,"nodeType":"6539","endLine":56,"endColumn":8,"suggestions":"6610"},{"ruleId":"6537","severity":1,"message":"6589","line":144,"column":6,"nodeType":"6539","endLine":144,"endColumn":26,"suggestions":"6611"},{"ruleId":"6527","severity":1,"message":"6612","line":28,"column":10,"nodeType":"6529","messageId":"6530","endLine":28,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6575","line":60,"column":6,"nodeType":"6539","endLine":60,"endColumn":8,"suggestions":"6613"},{"ruleId":"6537","severity":1,"message":"6603","line":125,"column":6,"nodeType":"6539","endLine":125,"endColumn":26,"suggestions":"6614"},{"ruleId":"6537","severity":1,"message":"6615","line":86,"column":6,"nodeType":"6539","endLine":86,"endColumn":32,"suggestions":"6616"},{"ruleId":"6537","severity":1,"message":"6617","line":62,"column":6,"nodeType":"6539","endLine":62,"endColumn":8,"suggestions":"6618"},{"ruleId":"6537","severity":1,"message":"6615","line":142,"column":6,"nodeType":"6539","endLine":142,"endColumn":49,"suggestions":"6619"},{"ruleId":"6537","severity":1,"message":"6575","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":8,"suggestions":"6620"},{"ruleId":"6527","severity":1,"message":"6621","line":32,"column":3,"nodeType":"6529","messageId":"6530","endLine":32,"endColumn":18},{"ruleId":"6537","severity":1,"message":"6622","line":98,"column":6,"nodeType":"6539","endLine":98,"endColumn":21,"suggestions":"6623"},{"ruleId":"6624","severity":1,"message":"6625","line":283,"column":31,"nodeType":"6626","messageId":"6627","endLine":283,"endColumn":32,"suggestions":"6628"},{"ruleId":"6537","severity":1,"message":"6629","line":93,"column":6,"nodeType":"6539","endLine":93,"endColumn":26,"suggestions":"6630"},{"ruleId":"6537","severity":1,"message":"6575","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":8,"suggestions":"6631"},{"ruleId":"6537","severity":1,"message":"6632","line":80,"column":6,"nodeType":"6539","endLine":80,"endColumn":26,"suggestions":"6633"},{"ruleId":"6527","severity":1,"message":"6634","line":25,"column":10,"nodeType":"6529","messageId":"6530","endLine":25,"endColumn":18},{"ruleId":"6527","severity":1,"message":"6635","line":32,"column":10,"nodeType":"6529","messageId":"6530","endLine":32,"endColumn":22},{"ruleId":"6537","severity":1,"message":"6636","line":147,"column":6,"nodeType":"6539","endLine":147,"endColumn":26,"suggestions":"6637"},{"ruleId":"6537","severity":1,"message":"6575","line":24,"column":6,"nodeType":"6539","endLine":24,"endColumn":8,"suggestions":"6638"},{"ruleId":"6639","severity":1,"message":"6640","line":82,"column":34,"nodeType":"6561","messageId":"6641","endLine":82,"endColumn":35},{"ruleId":"6537","severity":1,"message":"6642","line":270,"column":6,"nodeType":"6539","endLine":270,"endColumn":26,"suggestions":"6643"},{"ruleId":"6537","severity":1,"message":"6644","line":188,"column":6,"nodeType":"6539","endLine":188,"endColumn":26,"suggestions":"6645"},{"ruleId":"6537","severity":1,"message":"6642","line":121,"column":6,"nodeType":"6539","endLine":121,"endColumn":27,"suggestions":"6646"},{"ruleId":"6537","severity":1,"message":"6644","line":167,"column":6,"nodeType":"6539","endLine":167,"endColumn":27,"suggestions":"6647"},{"ruleId":"6527","severity":1,"message":"6648","line":9,"column":53,"nodeType":"6529","messageId":"6530","endLine":9,"endColumn":57},{"ruleId":"6527","severity":1,"message":"6649","line":175,"column":16,"nodeType":"6529","messageId":"6530","endLine":175,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6642","line":241,"column":6,"nodeType":"6539","endLine":241,"endColumn":26,"suggestions":"6650"},{"ruleId":"6527","severity":1,"message":"6651","line":285,"column":9,"nodeType":"6529","messageId":"6530","endLine":285,"endColumn":21},{"ruleId":"6527","severity":1,"message":"6652","line":2,"column":24,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":30},{"ruleId":"6537","severity":1,"message":"6642","line":135,"column":6,"nodeType":"6539","endLine":135,"endColumn":26,"suggestions":"6653"},{"ruleId":"6537","severity":1,"message":"6642","line":74,"column":6,"nodeType":"6539","endLine":74,"endColumn":26,"suggestions":"6654"},{"ruleId":"6537","severity":1,"message":"6644","line":73,"column":6,"nodeType":"6539","endLine":73,"endColumn":26,"suggestions":"6655"},{"ruleId":"6537","severity":1,"message":"6656","line":154,"column":6,"nodeType":"6539","endLine":154,"endColumn":26,"suggestions":"6657"},{"ruleId":"6537","severity":1,"message":"6644","line":71,"column":6,"nodeType":"6539","endLine":71,"endColumn":26,"suggestions":"6658"},{"ruleId":"6527","severity":1,"message":"6659","line":2,"column":16,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":22},{"ruleId":"6527","severity":1,"message":"6660","line":6,"column":10,"nodeType":"6529","messageId":"6530","endLine":6,"endColumn":29},{"ruleId":"6527","severity":1,"message":"6661","line":12,"column":10,"nodeType":"6529","messageId":"6530","endLine":12,"endColumn":20},{"ruleId":"6527","severity":1,"message":"6662","line":18,"column":9,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":22},{"ruleId":"6537","severity":1,"message":"6642","line":166,"column":6,"nodeType":"6539","endLine":166,"endColumn":26,"suggestions":"6663"},{"ruleId":"6537","severity":1,"message":"6664","line":102,"column":6,"nodeType":"6539","endLine":102,"endColumn":8,"suggestions":"6665"},{"ruleId":"6537","severity":1,"message":"6664","line":109,"column":6,"nodeType":"6539","endLine":109,"endColumn":26,"suggestions":"6666"},{"ruleId":"6537","severity":1,"message":"6642","line":234,"column":6,"nodeType":"6539","endLine":234,"endColumn":26,"suggestions":"6667"},{"ruleId":"6537","severity":1,"message":"6642","line":148,"column":6,"nodeType":"6539","endLine":148,"endColumn":26,"suggestions":"6668"},{"ruleId":"6537","severity":1,"message":"6642","line":139,"column":6,"nodeType":"6539","endLine":139,"endColumn":26,"suggestions":"6669"},{"ruleId":"6537","severity":1,"message":"6642","line":214,"column":6,"nodeType":"6539","endLine":214,"endColumn":26,"suggestions":"6670"},{"ruleId":"6527","severity":1,"message":"6671","line":8,"column":24,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":29},{"ruleId":"6527","severity":1,"message":"6672","line":147,"column":25,"nodeType":"6529","messageId":"6530","endLine":147,"endColumn":32},{"ruleId":"6537","severity":1,"message":"6642","line":188,"column":6,"nodeType":"6539","endLine":188,"endColumn":26,"suggestions":"6673"},{"ruleId":"6537","severity":1,"message":"6674","line":74,"column":6,"nodeType":"6539","endLine":74,"endColumn":26,"suggestions":"6675"},{"ruleId":"6537","severity":1,"message":"6644","line":122,"column":6,"nodeType":"6539","endLine":122,"endColumn":26,"suggestions":"6676"},{"ruleId":"6537","severity":1,"message":"6642","line":181,"column":6,"nodeType":"6539","endLine":181,"endColumn":26,"suggestions":"6677"},{"ruleId":"6527","severity":1,"message":"6678","line":15,"column":3,"nodeType":"6529","messageId":"6530","endLine":15,"endColumn":19},{"ruleId":"6527","severity":1,"message":"6679","line":21,"column":7,"nodeType":"6529","messageId":"6530","endLine":21,"endColumn":15},{"ruleId":"6537","severity":1,"message":"6642","line":163,"column":6,"nodeType":"6539","endLine":163,"endColumn":27,"suggestions":"6680"},{"ruleId":"6537","severity":1,"message":"6548","line":168,"column":6,"nodeType":"6539","endLine":168,"endColumn":8,"suggestions":"6681"},{"ruleId":"6537","severity":1,"message":"6642","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":27,"suggestions":"6682"},{"ruleId":"6527","severity":1,"message":"6683","line":19,"column":7,"nodeType":"6529","messageId":"6530","endLine":19,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6684","line":76,"column":6,"nodeType":"6539","endLine":76,"endColumn":27,"suggestions":"6685","suppressions":"6686"},{"ruleId":"6537","severity":1,"message":"6575","line":56,"column":6,"nodeType":"6539","endLine":56,"endColumn":8,"suggestions":"6687","suppressions":"6688"},{"ruleId":"6537","severity":1,"message":"6689","line":310,"column":6,"nodeType":"6539","endLine":310,"endColumn":27,"suggestions":"6690"},{"ruleId":"6537","severity":1,"message":"6691","line":89,"column":6,"nodeType":"6539","endLine":89,"endColumn":27,"suggestions":"6692"},{"ruleId":"6527","severity":1,"message":"6693","line":5,"column":3,"nodeType":"6529","messageId":"6530","endLine":5,"endColumn":23},{"ruleId":"6527","severity":1,"message":"6694","line":80,"column":9,"nodeType":"6529","messageId":"6530","endLine":80,"endColumn":18},{"ruleId":"6537","severity":1,"message":"6642","line":256,"column":6,"nodeType":"6539","endLine":256,"endColumn":26,"suggestions":"6695"},{"ruleId":"6537","severity":1,"message":"6575","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":8,"suggestions":"6696"},{"ruleId":"6537","severity":1,"message":"6697","line":81,"column":6,"nodeType":"6539","endLine":81,"endColumn":26,"suggestions":"6698"},{"ruleId":"6639","severity":1,"message":"6640","line":84,"column":43,"nodeType":"6561","messageId":"6641","endLine":84,"endColumn":44},{"ruleId":"6537","severity":1,"message":"6699","line":70,"column":6,"nodeType":"6539","endLine":70,"endColumn":10,"suggestions":"6700"},{"ruleId":"6537","severity":1,"message":"6575","line":36,"column":6,"nodeType":"6539","endLine":36,"endColumn":8,"suggestions":"6701"},{"ruleId":"6639","severity":1,"message":"6640","line":60,"column":43,"nodeType":"6561","messageId":"6641","endLine":60,"endColumn":44},{"ruleId":"6527","severity":1,"message":"6702","line":13,"column":3,"nodeType":"6529","messageId":"6530","endLine":13,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6699","line":71,"column":6,"nodeType":"6539","endLine":71,"endColumn":30,"suggestions":"6703"},{"ruleId":"6537","severity":1,"message":"6572","line":121,"column":6,"nodeType":"6539","endLine":121,"endColumn":26,"suggestions":"6704"},{"ruleId":"6527","severity":1,"message":"6705","line":47,"column":9,"nodeType":"6529","messageId":"6530","endLine":47,"endColumn":19},{"ruleId":"6537","severity":1,"message":"6572","line":215,"column":6,"nodeType":"6539","endLine":215,"endColumn":26,"suggestions":"6706"},{"ruleId":"6537","severity":1,"message":"6575","line":39,"column":6,"nodeType":"6539","endLine":39,"endColumn":8,"suggestions":"6707"},{"ruleId":"6537","severity":1,"message":"6708","line":59,"column":6,"nodeType":"6539","endLine":59,"endColumn":26,"suggestions":"6709"},{"ruleId":"6537","severity":1,"message":"6575","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":8,"suggestions":"6710"},{"ruleId":"6537","severity":1,"message":"6711","line":77,"column":6,"nodeType":"6539","endLine":77,"endColumn":22,"suggestions":"6712"},{"ruleId":"6537","severity":1,"message":"6575","line":41,"column":6,"nodeType":"6539","endLine":41,"endColumn":8,"suggestions":"6713"},{"ruleId":"6537","severity":1,"message":"6714","line":100,"column":6,"nodeType":"6539","endLine":100,"endColumn":26,"suggestions":"6715"},{"ruleId":"6537","severity":1,"message":"6575","line":47,"column":6,"nodeType":"6539","endLine":47,"endColumn":8,"suggestions":"6716"},{"ruleId":"6537","severity":1,"message":"6717","line":95,"column":6,"nodeType":"6539","endLine":95,"endColumn":26,"suggestions":"6718"},{"ruleId":"6537","severity":1,"message":"6575","line":42,"column":6,"nodeType":"6539","endLine":42,"endColumn":8,"suggestions":"6719"},{"ruleId":"6527","severity":1,"message":"6720","line":4,"column":60,"nodeType":"6529","messageId":"6530","endLine":4,"endColumn":66},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6721"},{"ruleId":"6537","severity":1,"message":"6722","line":99,"column":6,"nodeType":"6539","endLine":99,"endColumn":26,"suggestions":"6723"},{"ruleId":"6527","severity":1,"message":"6720","line":4,"column":60,"nodeType":"6529","messageId":"6530","endLine":4,"endColumn":66},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6724"},{"ruleId":"6537","severity":1,"message":"6722","line":99,"column":6,"nodeType":"6539","endLine":99,"endColumn":26,"suggestions":"6725"},{"ruleId":"6527","severity":1,"message":"6720","line":4,"column":54,"nodeType":"6529","messageId":"6530","endLine":4,"endColumn":60},{"ruleId":"6537","severity":1,"message":"6575","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":8,"suggestions":"6726"},{"ruleId":"6537","severity":1,"message":"6642","line":153,"column":6,"nodeType":"6539","endLine":153,"endColumn":26,"suggestions":"6727"},{"ruleId":"6537","severity":1,"message":"6642","line":133,"column":6,"nodeType":"6539","endLine":133,"endColumn":26,"suggestions":"6728"},{"ruleId":"6527","severity":1,"message":"6671","line":3,"column":33,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":38},{"ruleId":"6537","severity":1,"message":"6636","line":54,"column":6,"nodeType":"6539","endLine":54,"endColumn":16,"suggestions":"6729"},{"ruleId":"6730","severity":1,"message":"6731","line":115,"column":19,"nodeType":"6732","endLine":119,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6636","line":256,"column":6,"nodeType":"6539","endLine":256,"endColumn":26,"suggestions":"6733"},{"ruleId":"6527","severity":1,"message":"6734","line":67,"column":11,"nodeType":"6529","messageId":"6530","endLine":67,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6735","line":346,"column":5,"nodeType":"6539","endLine":346,"endColumn":15,"suggestions":"6736"},{"ruleId":"6537","severity":1,"message":"6737","line":356,"column":6,"nodeType":"6539","endLine":356,"endColumn":26,"suggestions":"6738"},{"ruleId":"6537","severity":1,"message":"6735","line":389,"column":5,"nodeType":"6539","endLine":389,"endColumn":15,"suggestions":"6739"},{"ruleId":"6537","severity":1,"message":"6737","line":425,"column":6,"nodeType":"6539","endLine":425,"endColumn":26,"suggestions":"6740"},{"ruleId":"6537","severity":1,"message":"6642","line":355,"column":6,"nodeType":"6539","endLine":355,"endColumn":27,"suggestions":"6741","suppressions":"6742"},{"ruleId":"6537","severity":1,"message":"6642","line":516,"column":6,"nodeType":"6539","endLine":516,"endColumn":37,"suggestions":"6743"},{"ruleId":"6537","severity":1,"message":"6548","line":520,"column":6,"nodeType":"6539","endLine":520,"endColumn":8,"suggestions":"6744"},{"ruleId":"6537","severity":1,"message":"6642","line":434,"column":6,"nodeType":"6539","endLine":434,"endColumn":27,"suggestions":"6745"},{"ruleId":"6537","severity":1,"message":"6548","line":438,"column":6,"nodeType":"6539","endLine":438,"endColumn":8,"suggestions":"6746"},{"ruleId":"6537","severity":1,"message":"6575","line":66,"column":6,"nodeType":"6539","endLine":66,"endColumn":8,"suggestions":"6747"},{"ruleId":"6537","severity":1,"message":"6577","line":156,"column":6,"nodeType":"6539","endLine":156,"endColumn":26,"suggestions":"6748"},{"ruleId":"6537","severity":1,"message":"6575","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":8,"suggestions":"6749"},{"ruleId":"6537","severity":1,"message":"6575","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":8,"suggestions":"6750"},{"ruleId":"6537","severity":1,"message":"6751","line":129,"column":6,"nodeType":"6539","endLine":129,"endColumn":26,"suggestions":"6752"},{"ruleId":"6537","severity":1,"message":"6575","line":61,"column":6,"nodeType":"6539","endLine":61,"endColumn":8,"suggestions":"6753"},{"ruleId":"6537","severity":1,"message":"6754","line":162,"column":6,"nodeType":"6539","endLine":162,"endColumn":26,"suggestions":"6755"},{"ruleId":"6537","severity":1,"message":"6575","line":59,"column":6,"nodeType":"6539","endLine":59,"endColumn":8,"suggestions":"6756"},{"ruleId":"6537","severity":1,"message":"6575","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":8,"suggestions":"6757"},{"ruleId":"6537","severity":1,"message":"6589","line":128,"column":6,"nodeType":"6539","endLine":128,"endColumn":26,"suggestions":"6758"},{"ruleId":"6527","severity":1,"message":"6759","line":44,"column":11,"nodeType":"6529","messageId":"6530","endLine":44,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6575","line":55,"column":6,"nodeType":"6539","endLine":55,"endColumn":8,"suggestions":"6760"},{"ruleId":"6537","severity":1,"message":"6589","line":143,"column":6,"nodeType":"6539","endLine":143,"endColumn":26,"suggestions":"6761"},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6762"},{"ruleId":"6527","severity":1,"message":"6763","line":17,"column":3,"nodeType":"6529","messageId":"6530","endLine":17,"endColumn":10},{"ruleId":"6527","severity":1,"message":"6764","line":65,"column":9,"nodeType":"6529","messageId":"6530","endLine":65,"endColumn":14},{"ruleId":"6537","severity":1,"message":"6765","line":196,"column":6,"nodeType":"6539","endLine":196,"endColumn":26,"suggestions":"6766"},{"ruleId":"6537","severity":1,"message":"6767","line":109,"column":6,"nodeType":"6539","endLine":109,"endColumn":26,"suggestions":"6768"},{"ruleId":"6537","severity":1,"message":"6767","line":111,"column":6,"nodeType":"6539","endLine":111,"endColumn":26,"suggestions":"6769"},{"ruleId":"6537","severity":1,"message":"6770","line":300,"column":6,"nodeType":"6539","endLine":300,"endColumn":27,"suggestions":"6771"},{"ruleId":"6527","severity":1,"message":"6772","line":36,"column":9,"nodeType":"6529","messageId":"6530","endLine":36,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6644","line":173,"column":6,"nodeType":"6539","endLine":173,"endColumn":26,"suggestions":"6773"},{"ruleId":"6537","severity":1,"message":"6642","line":154,"column":6,"nodeType":"6539","endLine":154,"endColumn":26,"suggestions":"6774"},{"ruleId":"6537","severity":1,"message":"6644","line":181,"column":6,"nodeType":"6539","endLine":181,"endColumn":26,"suggestions":"6775"},{"ruleId":"6537","severity":1,"message":"6644","line":173,"column":6,"nodeType":"6539","endLine":173,"endColumn":26,"suggestions":"6776"},{"ruleId":"6537","severity":1,"message":"6644","line":140,"column":6,"nodeType":"6539","endLine":140,"endColumn":26,"suggestions":"6777"},{"ruleId":"6527","severity":1,"message":"6778","line":9,"column":8,"nodeType":"6529","messageId":"6530","endLine":9,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6644","line":162,"column":6,"nodeType":"6539","endLine":162,"endColumn":26,"suggestions":"6779"},{"ruleId":"6537","severity":1,"message":"6575","line":25,"column":6,"nodeType":"6539","endLine":25,"endColumn":8,"suggestions":"6780"},{"ruleId":"6537","severity":1,"message":"6781","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":26,"suggestions":"6782"},{"ruleId":"6537","severity":1,"message":"6575","line":27,"column":6,"nodeType":"6539","endLine":27,"endColumn":8,"suggestions":"6783"},{"ruleId":"6537","severity":1,"message":"6781","line":54,"column":6,"nodeType":"6539","endLine":54,"endColumn":26,"suggestions":"6784"},{"ruleId":"6537","severity":1,"message":"6575","line":27,"column":6,"nodeType":"6539","endLine":27,"endColumn":8,"suggestions":"6785"},{"ruleId":"6537","severity":1,"message":"6781","line":54,"column":6,"nodeType":"6539","endLine":54,"endColumn":26,"suggestions":"6786"},{"ruleId":"6537","severity":1,"message":"6575","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":8,"suggestions":"6787"},{"ruleId":"6537","severity":1,"message":"6781","line":132,"column":6,"nodeType":"6539","endLine":132,"endColumn":26,"suggestions":"6788"},{"ruleId":"6537","severity":1,"message":"6575","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":8,"suggestions":"6789"},{"ruleId":"6537","severity":1,"message":"6790","line":68,"column":6,"nodeType":"6539","endLine":68,"endColumn":26,"suggestions":"6791"},{"ruleId":"6537","severity":1,"message":"6575","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":8,"suggestions":"6792"},{"ruleId":"6537","severity":1,"message":"6793","line":68,"column":6,"nodeType":"6539","endLine":68,"endColumn":26,"suggestions":"6794"},{"ruleId":"6537","severity":1,"message":"6644","line":159,"column":6,"nodeType":"6539","endLine":159,"endColumn":26,"suggestions":"6795"},{"ruleId":"6527","severity":1,"message":"6649","line":142,"column":16,"nodeType":"6529","messageId":"6530","endLine":142,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6642","line":211,"column":6,"nodeType":"6539","endLine":211,"endColumn":26,"suggestions":"6796"},{"ruleId":"6537","severity":1,"message":"6644","line":131,"column":6,"nodeType":"6539","endLine":131,"endColumn":26,"suggestions":"6797"},{"ruleId":"6537","severity":1,"message":"6644","line":140,"column":6,"nodeType":"6539","endLine":140,"endColumn":26,"suggestions":"6798"},{"ruleId":"6537","severity":1,"message":"6642","line":228,"column":6,"nodeType":"6539","endLine":228,"endColumn":26,"suggestions":"6799"},{"ruleId":"6537","severity":1,"message":"6644","line":92,"column":6,"nodeType":"6539","endLine":92,"endColumn":26,"suggestions":"6800"},{"ruleId":"6527","severity":1,"message":"6659","line":2,"column":10,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":16},{"ruleId":"6537","severity":1,"message":"6642","line":249,"column":6,"nodeType":"6539","endLine":249,"endColumn":26,"suggestions":"6801"},{"ruleId":"6537","severity":1,"message":"6642","line":262,"column":6,"nodeType":"6539","endLine":262,"endColumn":26,"suggestions":"6802"},{"ruleId":"6537","severity":1,"message":"6642","line":171,"column":6,"nodeType":"6539","endLine":171,"endColumn":26,"suggestions":"6803"},{"ruleId":"6527","severity":1,"message":"6804","line":11,"column":10,"nodeType":"6529","messageId":"6530","endLine":11,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6575","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":8,"suggestions":"6805"},{"ruleId":"6537","severity":1,"message":"6806","line":108,"column":6,"nodeType":"6539","endLine":108,"endColumn":26,"suggestions":"6807"},{"ruleId":"6537","severity":1,"message":"6575","line":32,"column":6,"nodeType":"6539","endLine":32,"endColumn":8,"suggestions":"6808"},{"ruleId":"6527","severity":1,"message":"6804","line":11,"column":10,"nodeType":"6529","messageId":"6530","endLine":11,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6575","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":8,"suggestions":"6809"},{"ruleId":"6537","severity":1,"message":"6577","line":108,"column":6,"nodeType":"6539","endLine":108,"endColumn":26,"suggestions":"6810"},{"ruleId":"6537","severity":1,"message":"6644","line":79,"column":6,"nodeType":"6539","endLine":79,"endColumn":26,"suggestions":"6811"},{"ruleId":"6537","severity":1,"message":"6812","line":109,"column":6,"nodeType":"6539","endLine":109,"endColumn":35,"suggestions":"6813"},{"ruleId":"6537","severity":1,"message":"6644","line":80,"column":6,"nodeType":"6539","endLine":80,"endColumn":26,"suggestions":"6814"},{"ruleId":"6537","severity":1,"message":"6815","line":119,"column":6,"nodeType":"6539","endLine":119,"endColumn":41,"suggestions":"6816"},{"ruleId":"6537","severity":1,"message":"6817","line":86,"column":6,"nodeType":"6539","endLine":86,"endColumn":26,"suggestions":"6818","suppressions":"6819"},{"ruleId":"6537","severity":1,"message":"6820","line":177,"column":5,"nodeType":"6539","endLine":177,"endColumn":24,"suggestions":"6821"},{"ruleId":"6537","severity":1,"message":"6822","line":230,"column":6,"nodeType":"6539","endLine":230,"endColumn":55,"suggestions":"6823"},{"ruleId":"6537","severity":1,"message":"6824","line":58,"column":6,"nodeType":"6539","endLine":58,"endColumn":13,"suggestions":"6825"},{"ruleId":"6537","severity":1,"message":"6684","line":73,"column":6,"nodeType":"6539","endLine":73,"endColumn":27,"suggestions":"6826","suppressions":"6827"},{"ruleId":"6537","severity":1,"message":"6644","line":34,"column":6,"nodeType":"6539","endLine":34,"endColumn":27,"suggestions":"6828","suppressions":"6829"},{"ruleId":"6527","severity":1,"message":"6772","line":136,"column":9,"nodeType":"6529","messageId":"6530","endLine":136,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6830","line":215,"column":6,"nodeType":"6539","endLine":215,"endColumn":26,"suggestions":"6831"},{"ruleId":"6537","severity":1,"message":"6832","line":193,"column":6,"nodeType":"6539","endLine":193,"endColumn":8,"suggestions":"6833","suppressions":"6834"},{"ruleId":"6537","severity":1,"message":"6575","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":8,"suggestions":"6835","suppressions":"6836"},{"ruleId":"6559","severity":1,"message":"6560","line":177,"column":40,"nodeType":"6561","messageId":"6562","endLine":177,"endColumn":42,"suppressions":"6837"},{"ruleId":"6559","severity":1,"message":"6560","line":178,"column":40,"nodeType":"6561","messageId":"6562","endLine":178,"endColumn":42,"suppressions":"6838"},{"ruleId":"6559","severity":1,"message":"6560","line":179,"column":40,"nodeType":"6561","messageId":"6562","endLine":179,"endColumn":42,"suppressions":"6839"},{"ruleId":"6559","severity":1,"message":"6560","line":180,"column":40,"nodeType":"6561","messageId":"6562","endLine":180,"endColumn":42,"suppressions":"6840"},{"ruleId":"6559","severity":1,"message":"6560","line":181,"column":40,"nodeType":"6561","messageId":"6562","endLine":181,"endColumn":42,"suppressions":"6841"},{"ruleId":"6537","severity":1,"message":"6642","line":314,"column":6,"nodeType":"6539","endLine":314,"endColumn":26,"suggestions":"6842","suppressions":"6843"},{"ruleId":"6527","severity":1,"message":"6734","line":44,"column":11,"nodeType":"6529","messageId":"6530","endLine":44,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6642","line":188,"column":6,"nodeType":"6539","endLine":188,"endColumn":26,"suggestions":"6844","suppressions":"6845"},{"ruleId":"6537","severity":1,"message":"6846","line":105,"column":6,"nodeType":"6539","endLine":105,"endColumn":26,"suggestions":"6847"},{"ruleId":"6527","severity":1,"message":"6649","line":33,"column":16,"nodeType":"6529","messageId":"6530","endLine":33,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6642","line":192,"column":6,"nodeType":"6539","endLine":192,"endColumn":26,"suggestions":"6848"},{"ruleId":"6537","severity":1,"message":"6642","line":306,"column":6,"nodeType":"6539","endLine":306,"endColumn":26,"suggestions":"6849"},{"ruleId":"6537","severity":1,"message":"6575","line":46,"column":6,"nodeType":"6539","endLine":46,"endColumn":8,"suggestions":"6850"},{"ruleId":"6537","severity":1,"message":"6851","line":97,"column":6,"nodeType":"6539","endLine":97,"endColumn":26,"suggestions":"6852"},{"ruleId":"6537","severity":1,"message":"6575","line":30,"column":6,"nodeType":"6539","endLine":30,"endColumn":8,"suggestions":"6853"},{"ruleId":"6537","severity":1,"message":"6644","line":80,"column":6,"nodeType":"6539","endLine":80,"endColumn":26,"suggestions":"6854","suppressions":"6855"},{"ruleId":"6537","severity":1,"message":"6575","line":69,"column":6,"nodeType":"6539","endLine":69,"endColumn":8,"suggestions":"6856"},{"ruleId":"6537","severity":1,"message":"6857","line":145,"column":6,"nodeType":"6539","endLine":145,"endColumn":26,"suggestions":"6858"},{"ruleId":"6537","severity":1,"message":"6575","line":64,"column":6,"nodeType":"6539","endLine":64,"endColumn":8,"suggestions":"6859"},{"ruleId":"6537","severity":1,"message":"6575","line":92,"column":6,"nodeType":"6539","endLine":92,"endColumn":8,"suggestions":"6860"},{"ruleId":"6537","severity":1,"message":"6861","line":122,"column":6,"nodeType":"6539","endLine":122,"endColumn":26,"suggestions":"6862"},{"ruleId":"6537","severity":1,"message":"6644","line":95,"column":6,"nodeType":"6539","endLine":95,"endColumn":26,"suggestions":"6863"},{"ruleId":"6537","severity":1,"message":"6575","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":8,"suggestions":"6864"},{"ruleId":"6537","severity":1,"message":"6644","line":170,"column":6,"nodeType":"6539","endLine":170,"endColumn":26,"suggestions":"6865"},{"ruleId":"6537","severity":1,"message":"6866","line":53,"column":6,"nodeType":"6539","endLine":53,"endColumn":8,"suggestions":"6867"},{"ruleId":"6537","severity":1,"message":"6575","line":35,"column":6,"nodeType":"6539","endLine":35,"endColumn":8,"suggestions":"6868"},{"ruleId":"6537","severity":1,"message":"6857","line":108,"column":6,"nodeType":"6539","endLine":108,"endColumn":26,"suggestions":"6869"},{"ruleId":"6537","severity":1,"message":"6824","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":26,"suggestions":"6870"},{"ruleId":"6527","severity":1,"message":"6871","line":73,"column":15,"nodeType":"6529","messageId":"6530","endLine":73,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6642","line":227,"column":6,"nodeType":"6539","endLine":227,"endColumn":27,"suggestions":"6872"},{"ruleId":"6537","severity":1,"message":"6644","line":233,"column":6,"nodeType":"6539","endLine":233,"endColumn":8,"suggestions":"6873"},{"ruleId":"6527","severity":1,"message":"6874","line":21,"column":10,"nodeType":"6529","messageId":"6530","endLine":21,"endColumn":20},{"ruleId":"6537","severity":1,"message":"6642","line":267,"column":6,"nodeType":"6539","endLine":267,"endColumn":27,"suggestions":"6875"},{"ruleId":"6537","severity":1,"message":"6644","line":280,"column":6,"nodeType":"6539","endLine":280,"endColumn":8,"suggestions":"6876"},{"ruleId":"6537","severity":1,"message":"6644","line":81,"column":6,"nodeType":"6539","endLine":81,"endColumn":26,"suggestions":"6877"},{"ruleId":"6537","severity":1,"message":"6575","line":27,"column":6,"nodeType":"6539","endLine":27,"endColumn":8,"suggestions":"6878"},{"ruleId":"6527","severity":1,"message":"6879","line":53,"column":18,"nodeType":"6529","messageId":"6530","endLine":53,"endColumn":27},{"ruleId":"6537","severity":1,"message":"6880","line":167,"column":6,"nodeType":"6539","endLine":167,"endColumn":8,"suggestions":"6881"},{"ruleId":"6537","severity":1,"message":"6882","line":175,"column":6,"nodeType":"6539","endLine":175,"endColumn":26,"suggestions":"6883"},{"ruleId":"6884","severity":1,"message":"6885","line":54,"column":11,"nodeType":"6732","endLine":54,"endColumn":54},{"ruleId":"6537","severity":1,"message":"6886","line":99,"column":6,"nodeType":"6539","endLine":99,"endColumn":26,"suggestions":"6887"},{"ruleId":"6537","severity":1,"message":"6888","line":151,"column":6,"nodeType":"6539","endLine":151,"endColumn":8,"suggestions":"6889"},{"ruleId":"6537","severity":1,"message":"6890","line":158,"column":6,"nodeType":"6539","endLine":158,"endColumn":26,"suggestions":"6891"},{"ruleId":"6537","severity":1,"message":"6644","line":80,"column":6,"nodeType":"6539","endLine":80,"endColumn":26,"suggestions":"6892"},{"ruleId":"6884","severity":1,"message":"6885","line":33,"column":25,"nodeType":"6732","endLine":33,"endColumn":28},{"ruleId":"6884","severity":1,"message":"6885","line":70,"column":11,"nodeType":"6732","endLine":70,"endColumn":14},{"ruleId":"6884","severity":1,"message":"6885","line":71,"column":11,"nodeType":"6732","endLine":71,"endColumn":14},{"ruleId":"6527","severity":1,"message":"6893","line":11,"column":3,"nodeType":"6529","messageId":"6530","endLine":11,"endColumn":6},{"ruleId":"6537","severity":1,"message":"6894","line":186,"column":6,"nodeType":"6539","endLine":186,"endColumn":8,"suggestions":"6895"},{"ruleId":"6537","severity":1,"message":"6896","line":194,"column":6,"nodeType":"6539","endLine":194,"endColumn":26,"suggestions":"6897"},{"ruleId":"6884","severity":1,"message":"6885","line":58,"column":28,"nodeType":"6732","endLine":58,"endColumn":62},{"ruleId":"6537","severity":1,"message":"6898","line":211,"column":6,"nodeType":"6539","endLine":211,"endColumn":8,"suggestions":"6899"},{"ruleId":"6537","severity":1,"message":"6900","line":219,"column":6,"nodeType":"6539","endLine":219,"endColumn":26,"suggestions":"6901"},{"ruleId":"6537","severity":1,"message":"6902","line":66,"column":6,"nodeType":"6539","endLine":66,"endColumn":26,"suggestions":"6903"},{"ruleId":"6527","severity":1,"message":"6904","line":3,"column":8,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":20},{"ruleId":"6527","severity":1,"message":"6905","line":23,"column":11,"nodeType":"6529","messageId":"6530","endLine":23,"endColumn":13},{"ruleId":"6527","severity":1,"message":"6720","line":3,"column":38,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":44},{"ruleId":"6527","severity":1,"message":"6906","line":27,"column":10,"nodeType":"6529","messageId":"6530","endLine":27,"endColumn":16},{"ruleId":"6537","severity":1,"message":"6644","line":139,"column":6,"nodeType":"6539","endLine":139,"endColumn":26,"suggestions":"6907"},{"ruleId":"6537","severity":1,"message":"6642","line":142,"column":6,"nodeType":"6539","endLine":142,"endColumn":26,"suggestions":"6908"},{"ruleId":"6527","severity":1,"message":"6909","line":145,"column":11,"nodeType":"6529","messageId":"6530","endLine":145,"endColumn":15},{"ruleId":"6537","severity":1,"message":"6642","line":135,"column":6,"nodeType":"6539","endLine":135,"endColumn":27,"suggestions":"6910"},{"ruleId":"6537","severity":1,"message":"6642","line":380,"column":6,"nodeType":"6539","endLine":380,"endColumn":27,"suggestions":"6911"},{"ruleId":"6537","severity":1,"message":"6548","line":384,"column":6,"nodeType":"6539","endLine":384,"endColumn":8,"suggestions":"6912"},{"ruleId":"6527","severity":1,"message":"6913","line":8,"column":8,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":19},{"ruleId":"6527","severity":1,"message":"6914","line":18,"column":8,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":14},{"ruleId":"6537","severity":1,"message":"6781","line":93,"column":6,"nodeType":"6539","endLine":93,"endColumn":26,"suggestions":"6915"},{"ruleId":"6527","severity":1,"message":"6916","line":26,"column":11,"nodeType":"6529","messageId":"6530","endLine":26,"endColumn":25},{"ruleId":"6537","severity":1,"message":"6644","line":127,"column":6,"nodeType":"6539","endLine":127,"endColumn":26,"suggestions":"6917"},{"ruleId":"6537","severity":1,"message":"6642","line":133,"column":6,"nodeType":"6539","endLine":133,"endColumn":26,"suggestions":"6918"},{"ruleId":"6527","severity":1,"message":"6893","line":8,"column":3,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":6},{"ruleId":"6527","severity":1,"message":"6919","line":12,"column":3,"nodeType":"6529","messageId":"6530","endLine":12,"endColumn":8},{"ruleId":"6527","severity":1,"message":"6920","line":32,"column":10,"nodeType":"6529","messageId":"6530","endLine":32,"endColumn":14},{"ruleId":"6537","severity":1,"message":"6880","line":167,"column":6,"nodeType":"6539","endLine":167,"endColumn":8,"suggestions":"6921"},{"ruleId":"6537","severity":1,"message":"6900","line":175,"column":6,"nodeType":"6539","endLine":175,"endColumn":26,"suggestions":"6922"},{"ruleId":"6527","severity":1,"message":"6923","line":220,"column":9,"nodeType":"6529","messageId":"6530","endLine":220,"endColumn":16},{"ruleId":"6527","severity":1,"message":"6893","line":8,"column":3,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":6},{"ruleId":"6537","severity":1,"message":"6924","line":200,"column":6,"nodeType":"6539","endLine":200,"endColumn":26,"suggestions":"6925"},{"ruleId":"6537","severity":1,"message":"6642","line":59,"column":6,"nodeType":"6539","endLine":59,"endColumn":26,"suggestions":"6926"},{"ruleId":"6527","severity":1,"message":"6927","line":103,"column":9,"nodeType":"6529","messageId":"6530","endLine":103,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6642","line":206,"column":6,"nodeType":"6539","endLine":206,"endColumn":26,"suggestions":"6928"},{"ruleId":"6537","severity":1,"message":"6642","line":245,"column":6,"nodeType":"6539","endLine":245,"endColumn":26,"suggestions":"6929"},{"ruleId":"6537","severity":1,"message":"6642","line":249,"column":6,"nodeType":"6539","endLine":249,"endColumn":26,"suggestions":"6930"},{"ruleId":"6537","severity":1,"message":"6572","line":100,"column":6,"nodeType":"6539","endLine":100,"endColumn":26,"suggestions":"6931"},{"ruleId":"6537","severity":1,"message":"6572","line":103,"column":6,"nodeType":"6539","endLine":103,"endColumn":26,"suggestions":"6932"},{"ruleId":"6537","severity":1,"message":"6765","line":203,"column":6,"nodeType":"6539","endLine":203,"endColumn":26,"suggestions":"6933"},{"ruleId":"6537","severity":1,"message":"6644","line":97,"column":6,"nodeType":"6539","endLine":97,"endColumn":26,"suggestions":"6934"},{"ruleId":"6537","severity":1,"message":"6815","line":122,"column":6,"nodeType":"6539","endLine":122,"endColumn":52,"suggestions":"6935"},{"ruleId":"6537","severity":1,"message":"6575","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":8,"suggestions":"6936"},{"ruleId":"6537","severity":1,"message":"6937","line":77,"column":6,"nodeType":"6539","endLine":77,"endColumn":26,"suggestions":"6938"},{"ruleId":"6537","severity":1,"message":"6575","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":8,"suggestions":"6939"},{"ruleId":"6537","severity":1,"message":"6642","line":272,"column":6,"nodeType":"6539","endLine":272,"endColumn":26,"suggestions":"6940"},{"ruleId":"6527","severity":1,"message":"6941","line":20,"column":22,"nodeType":"6529","messageId":"6530","endLine":20,"endColumn":37},{"ruleId":"6537","severity":1,"message":"6942","line":141,"column":6,"nodeType":"6539","endLine":141,"endColumn":26,"suggestions":"6943"},{"ruleId":"6537","severity":1,"message":"6644","line":135,"column":6,"nodeType":"6539","endLine":135,"endColumn":26,"suggestions":"6944"},{"ruleId":"6537","severity":1,"message":"6644","line":134,"column":6,"nodeType":"6539","endLine":134,"endColumn":26,"suggestions":"6945"},{"ruleId":"6527","severity":1,"message":"6941","line":21,"column":22,"nodeType":"6529","messageId":"6530","endLine":21,"endColumn":37},{"ruleId":"6537","severity":1,"message":"6946","line":141,"column":6,"nodeType":"6539","endLine":141,"endColumn":26,"suggestions":"6947"},{"ruleId":"6537","severity":1,"message":"6937","line":79,"column":6,"nodeType":"6539","endLine":79,"endColumn":26,"suggestions":"6948"},{"ruleId":"6527","severity":1,"message":"6941","line":19,"column":22,"nodeType":"6529","messageId":"6530","endLine":19,"endColumn":37},{"ruleId":"6537","severity":1,"message":"6949","line":118,"column":6,"nodeType":"6539","endLine":118,"endColumn":26,"suggestions":"6950"},{"ruleId":"6527","severity":1,"message":"6612","line":10,"column":10,"nodeType":"6529","messageId":"6530","endLine":10,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6575","line":26,"column":6,"nodeType":"6539","endLine":26,"endColumn":8,"suggestions":"6951"},{"ruleId":"6527","severity":1,"message":"6612","line":14,"column":10,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6575","line":33,"column":6,"nodeType":"6539","endLine":33,"endColumn":8,"suggestions":"6952"},{"ruleId":"6537","severity":1,"message":"6754","line":84,"column":6,"nodeType":"6539","endLine":84,"endColumn":26,"suggestions":"6953"},{"ruleId":"6527","severity":1,"message":"6652","line":4,"column":60,"nodeType":"6529","messageId":"6530","endLine":4,"endColumn":66},{"ruleId":"6527","severity":1,"message":"6612","line":14,"column":10,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6575","line":33,"column":6,"nodeType":"6539","endLine":33,"endColumn":8,"suggestions":"6954"},{"ruleId":"6537","severity":1,"message":"6754","line":84,"column":6,"nodeType":"6539","endLine":84,"endColumn":26,"suggestions":"6955"},{"ruleId":"6537","severity":1,"message":"6644","line":80,"column":6,"nodeType":"6539","endLine":80,"endColumn":26,"suggestions":"6956"},{"ruleId":"6537","severity":1,"message":"6644","line":184,"column":6,"nodeType":"6539","endLine":184,"endColumn":26,"suggestions":"6957"},{"ruleId":"6537","severity":1,"message":"6644","line":57,"column":6,"nodeType":"6539","endLine":57,"endColumn":26,"suggestions":"6958"},{"ruleId":"6559","severity":1,"message":"6560","line":122,"column":49,"nodeType":"6561","messageId":"6562","endLine":122,"endColumn":51},{"ruleId":"6537","severity":1,"message":"6644","line":111,"column":6,"nodeType":"6539","endLine":111,"endColumn":26,"suggestions":"6959"},{"ruleId":"6537","severity":1,"message":"6636","line":93,"column":6,"nodeType":"6539","endLine":93,"endColumn":8,"suggestions":"6960"},{"ruleId":"6537","severity":1,"message":"6644","line":169,"column":6,"nodeType":"6539","endLine":169,"endColumn":26,"suggestions":"6961"},{"ruleId":"6537","severity":1,"message":"6642","line":157,"column":6,"nodeType":"6539","endLine":157,"endColumn":26,"suggestions":"6962"},{"ruleId":"6537","severity":1,"message":"6644","line":164,"column":6,"nodeType":"6539","endLine":164,"endColumn":26,"suggestions":"6963"},{"ruleId":"6537","severity":1,"message":"6824","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":26,"suggestions":"6964"},{"ruleId":"6537","severity":1,"message":"6642","line":195,"column":6,"nodeType":"6539","endLine":195,"endColumn":26,"suggestions":"6965"},{"ruleId":"6537","severity":1,"message":"6575","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":8,"suggestions":"6966"},{"ruleId":"6537","severity":1,"message":"6967","line":80,"column":6,"nodeType":"6539","endLine":80,"endColumn":26,"suggestions":"6968"},{"ruleId":"6537","severity":1,"message":"6644","line":91,"column":6,"nodeType":"6539","endLine":91,"endColumn":26,"suggestions":"6969"},{"ruleId":"6537","severity":1,"message":"6575","line":44,"column":6,"nodeType":"6539","endLine":44,"endColumn":8,"suggestions":"6970"},{"ruleId":"6537","severity":1,"message":"6971","line":125,"column":6,"nodeType":"6539","endLine":125,"endColumn":8,"suggestions":"6972"},{"ruleId":"6537","severity":1,"message":"6973","line":131,"column":6,"nodeType":"6539","endLine":131,"endColumn":26,"suggestions":"6974"},{"ruleId":"6537","severity":1,"message":"6971","line":67,"column":6,"nodeType":"6539","endLine":67,"endColumn":8,"suggestions":"6975"},{"ruleId":"6537","severity":1,"message":"6575","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":8,"suggestions":"6976"},{"ruleId":"6537","severity":1,"message":"6754","line":90,"column":6,"nodeType":"6539","endLine":90,"endColumn":26,"suggestions":"6977"},{"ruleId":"6537","severity":1,"message":"6575","line":51,"column":6,"nodeType":"6539","endLine":51,"endColumn":8,"suggestions":"6978"},{"ruleId":"6537","severity":1,"message":"6979","line":119,"column":6,"nodeType":"6539","endLine":119,"endColumn":26,"suggestions":"6980"},{"ruleId":"6537","severity":1,"message":"6575","line":32,"column":6,"nodeType":"6539","endLine":32,"endColumn":8,"suggestions":"6981"},{"ruleId":"6982","severity":1,"message":"6983","line":39,"column":7,"nodeType":"6984","messageId":"6562","endLine":39,"endColumn":13},{"ruleId":"6537","severity":1,"message":"6575","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":8,"suggestions":"6985"},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"6986"},{"ruleId":"6537","severity":1,"message":"6597","line":90,"column":6,"nodeType":"6539","endLine":90,"endColumn":26,"suggestions":"6987"},{"ruleId":"6537","severity":1,"message":"6575","line":29,"column":6,"nodeType":"6539","endLine":29,"endColumn":8,"suggestions":"6988"},{"ruleId":"6537","severity":1,"message":"6575","line":56,"column":6,"nodeType":"6539","endLine":56,"endColumn":8,"suggestions":"6989"},{"ruleId":"6537","severity":1,"message":"6603","line":122,"column":6,"nodeType":"6539","endLine":122,"endColumn":26,"suggestions":"6990"},{"ruleId":"6537","severity":1,"message":"6615","line":86,"column":6,"nodeType":"6539","endLine":86,"endColumn":32,"suggestions":"6991"},{"ruleId":"6537","severity":1,"message":"6992","line":70,"column":6,"nodeType":"6539","endLine":70,"endColumn":8,"suggestions":"6993"},{"ruleId":"6537","severity":1,"message":"6615","line":148,"column":6,"nodeType":"6539","endLine":148,"endColumn":49,"suggestions":"6994"},{"ruleId":"6537","severity":1,"message":"6575","line":50,"column":6,"nodeType":"6539","endLine":50,"endColumn":8,"suggestions":"6995"},{"ruleId":"6537","severity":1,"message":"6996","line":71,"column":6,"nodeType":"6539","endLine":71,"endColumn":26,"suggestions":"6997"},{"ruleId":"6537","severity":1,"message":"6644","line":83,"column":6,"nodeType":"6539","endLine":83,"endColumn":8,"suggestions":"6998"},{"ruleId":"6537","severity":1,"message":"6572","line":121,"column":6,"nodeType":"6539","endLine":121,"endColumn":26,"suggestions":"6999"},{"ruleId":"6537","severity":1,"message":"6644","line":133,"column":6,"nodeType":"6539","endLine":133,"endColumn":8,"suggestions":"7000"},{"ruleId":"6527","severity":1,"message":"6705","line":42,"column":9,"nodeType":"6529","messageId":"6530","endLine":42,"endColumn":19},{"ruleId":"6537","severity":1,"message":"6572","line":196,"column":6,"nodeType":"6539","endLine":196,"endColumn":26,"suggestions":"7001"},{"ruleId":"6527","severity":1,"message":"6671","line":3,"column":33,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":38},{"ruleId":"6537","severity":1,"message":"6636","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":16,"suggestions":"7002"},{"ruleId":"6730","severity":1,"message":"6731","line":113,"column":19,"nodeType":"6732","endLine":117,"endColumn":21},{"ruleId":"6537","severity":1,"message":"7003","line":55,"column":6,"nodeType":"6539","endLine":55,"endColumn":8,"suggestions":"7004"},{"ruleId":"6537","severity":1,"message":"6636","line":112,"column":6,"nodeType":"6539","endLine":112,"endColumn":26,"suggestions":"7005"},{"ruleId":"6537","severity":1,"message":"6735","line":413,"column":5,"nodeType":"6539","endLine":413,"endColumn":15,"suggestions":"7006"},{"ruleId":"6537","severity":1,"message":"7007","line":427,"column":6,"nodeType":"6539","endLine":427,"endColumn":26,"suggestions":"7008"},{"ruleId":"6537","severity":1,"message":"6642","line":295,"column":6,"nodeType":"6539","endLine":295,"endColumn":27,"suggestions":"7009"},{"ruleId":"6537","severity":1,"message":"6642","line":131,"column":6,"nodeType":"6539","endLine":131,"endColumn":26,"suggestions":"7010"},{"ruleId":"6527","severity":1,"message":"7011","line":37,"column":10,"nodeType":"6529","messageId":"6530","endLine":37,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6575","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":8,"suggestions":"7012"},{"ruleId":"6537","severity":1,"message":"7013","line":102,"column":6,"nodeType":"6539","endLine":102,"endColumn":26,"suggestions":"7014"},{"ruleId":"6527","severity":1,"message":"7015","line":104,"column":9,"nodeType":"6529","messageId":"6530","endLine":104,"endColumn":22},{"ruleId":"7016","severity":1,"message":"7017","line":105,"column":5,"nodeType":"7018","messageId":"7019","endLine":114,"endColumn":6},{"ruleId":"6527","severity":1,"message":"7015","line":70,"column":9,"nodeType":"6529","messageId":"6530","endLine":70,"endColumn":22},{"ruleId":"7016","severity":1,"message":"7017","line":71,"column":5,"nodeType":"7018","messageId":"7019","endLine":80,"endColumn":6},{"ruleId":"6537","severity":1,"message":"6575","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":8,"suggestions":"7020"},{"ruleId":"6537","severity":1,"message":"6589","line":133,"column":6,"nodeType":"6539","endLine":133,"endColumn":26,"suggestions":"7021"},{"ruleId":"6527","severity":1,"message":"6759","line":45,"column":11,"nodeType":"6529","messageId":"6530","endLine":45,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6575","line":56,"column":6,"nodeType":"6539","endLine":56,"endColumn":8,"suggestions":"7022"},{"ruleId":"6537","severity":1,"message":"6589","line":149,"column":6,"nodeType":"6539","endLine":149,"endColumn":26,"suggestions":"7023"},{"ruleId":"6537","severity":1,"message":"6575","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":8,"suggestions":"7024"},{"ruleId":"6537","severity":1,"message":"6644","line":124,"column":6,"nodeType":"6539","endLine":124,"endColumn":26,"suggestions":"7025"},{"ruleId":"6527","severity":1,"message":"7026","line":24,"column":24,"nodeType":"6529","messageId":"6530","endLine":24,"endColumn":33},{"ruleId":"6537","severity":1,"message":"6575","line":51,"column":6,"nodeType":"6539","endLine":51,"endColumn":8,"suggestions":"7027"},{"ruleId":"6537","severity":1,"message":"6754","line":153,"column":6,"nodeType":"6539","endLine":153,"endColumn":26,"suggestions":"7028"},{"ruleId":"6537","severity":1,"message":"6575","line":44,"column":6,"nodeType":"6539","endLine":44,"endColumn":8,"suggestions":"7029"},{"ruleId":"6537","severity":1,"message":"6644","line":157,"column":6,"nodeType":"6539","endLine":157,"endColumn":26,"suggestions":"7030"},{"ruleId":"6537","severity":1,"message":"6575","line":35,"column":6,"nodeType":"6539","endLine":35,"endColumn":8,"suggestions":"7031"},{"ruleId":"6537","severity":1,"message":"7032","line":96,"column":6,"nodeType":"6539","endLine":96,"endColumn":26,"suggestions":"7033"},{"ruleId":"6537","severity":1,"message":"6575","line":32,"column":6,"nodeType":"6539","endLine":32,"endColumn":8,"suggestions":"7034"},{"ruleId":"6527","severity":1,"message":"7035","line":2,"column":10,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":24},{"ruleId":"6537","severity":1,"message":"6642","line":153,"column":6,"nodeType":"6539","endLine":153,"endColumn":26,"suggestions":"7036"},{"ruleId":"6527","severity":1,"message":"7037","line":117,"column":16,"nodeType":"6529","messageId":"6530","endLine":117,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6644","line":150,"column":6,"nodeType":"6539","endLine":150,"endColumn":26,"suggestions":"7038"},{"ruleId":"6537","severity":1,"message":"6644","line":181,"column":6,"nodeType":"6539","endLine":181,"endColumn":26,"suggestions":"7039"},{"ruleId":"6537","severity":1,"message":"6642","line":158,"column":6,"nodeType":"6539","endLine":158,"endColumn":26,"suggestions":"7040"},{"ruleId":"6537","severity":1,"message":"6642","line":183,"column":6,"nodeType":"6539","endLine":183,"endColumn":26,"suggestions":"7041"},{"ruleId":"6537","severity":1,"message":"7042","line":114,"column":6,"nodeType":"6539","endLine":114,"endColumn":27,"suggestions":"7043"},{"ruleId":"6537","severity":1,"message":"6642","line":158,"column":6,"nodeType":"6539","endLine":158,"endColumn":27,"suggestions":"7044"},{"ruleId":"6527","severity":1,"message":"6661","line":17,"column":10,"nodeType":"6529","messageId":"6530","endLine":17,"endColumn":20},{"ruleId":"6527","severity":1,"message":"7045","line":17,"column":22,"nodeType":"6529","messageId":"6530","endLine":17,"endColumn":35},{"ruleId":"6537","severity":1,"message":"6629","line":81,"column":6,"nodeType":"6539","endLine":81,"endColumn":26,"suggestions":"7046"},{"ruleId":"6537","severity":1,"message":"6642","line":139,"column":6,"nodeType":"6539","endLine":139,"endColumn":26,"suggestions":"7047"},{"ruleId":"6527","severity":1,"message":"7048","line":8,"column":3,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":15},{"ruleId":"6527","severity":1,"message":"7049","line":24,"column":8,"nodeType":"6529","messageId":"6530","endLine":24,"endColumn":19},{"ruleId":"6537","severity":1,"message":"6642","line":138,"column":6,"nodeType":"6539","endLine":138,"endColumn":26,"suggestions":"7050"},{"ruleId":"6527","severity":1,"message":"6651","line":156,"column":9,"nodeType":"6529","messageId":"6530","endLine":156,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6644","line":121,"column":6,"nodeType":"6539","endLine":121,"endColumn":26,"suggestions":"7051"},{"ruleId":"6537","severity":1,"message":"6902","line":60,"column":6,"nodeType":"6539","endLine":60,"endColumn":26,"suggestions":"7052"},{"ruleId":"6537","severity":1,"message":"6642","line":135,"column":6,"nodeType":"6539","endLine":135,"endColumn":26,"suggestions":"7053"},{"ruleId":"6527","severity":1,"message":"6651","line":153,"column":9,"nodeType":"6529","messageId":"6530","endLine":153,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6644","line":92,"column":6,"nodeType":"6539","endLine":92,"endColumn":26,"suggestions":"7054"},{"ruleId":"6537","severity":1,"message":"6642","line":233,"column":6,"nodeType":"6539","endLine":233,"endColumn":26,"suggestions":"7055"},{"ruleId":"6537","severity":1,"message":"6575","line":28,"column":6,"nodeType":"6539","endLine":28,"endColumn":8,"suggestions":"7056"},{"ruleId":"6527","severity":1,"message":"6649","line":37,"column":16,"nodeType":"6529","messageId":"6530","endLine":37,"endColumn":23},{"ruleId":"6527","severity":1,"message":"7057","line":38,"column":9,"nodeType":"6529","messageId":"6530","endLine":38,"endColumn":18},{"ruleId":"6537","severity":1,"message":"6642","line":199,"column":6,"nodeType":"6539","endLine":199,"endColumn":26,"suggestions":"7058"},{"ruleId":"6527","severity":1,"message":"6651","line":217,"column":9,"nodeType":"6529","messageId":"6530","endLine":217,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6642","line":130,"column":6,"nodeType":"6539","endLine":130,"endColumn":26,"suggestions":"7059"},{"ruleId":"6527","severity":1,"message":"7060","line":132,"column":9,"nodeType":"6529","messageId":"6530","endLine":132,"endColumn":21},{"ruleId":"6527","severity":1,"message":"7061","line":3,"column":30,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":46},{"ruleId":"6527","severity":1,"message":"7062","line":8,"column":10,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":17},{"ruleId":"6527","severity":1,"message":"7063","line":21,"column":9,"nodeType":"6529","messageId":"6530","endLine":21,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6642","line":122,"column":6,"nodeType":"6539","endLine":122,"endColumn":26,"suggestions":"7064"},{"ruleId":"6527","severity":1,"message":"6909","line":125,"column":11,"nodeType":"6529","messageId":"6530","endLine":125,"endColumn":15},{"ruleId":"6537","severity":1,"message":"7065","line":140,"column":6,"nodeType":"6539","endLine":140,"endColumn":26,"suggestions":"7066"},{"ruleId":"6537","severity":1,"message":"6642","line":249,"column":6,"nodeType":"6539","endLine":249,"endColumn":26,"suggestions":"7067"},{"ruleId":"6537","severity":1,"message":"6642","line":182,"column":6,"nodeType":"6539","endLine":182,"endColumn":26,"suggestions":"7068"},{"ruleId":"6537","severity":1,"message":"7003","line":57,"column":6,"nodeType":"6539","endLine":57,"endColumn":8,"suggestions":"7069"},{"ruleId":"6537","severity":1,"message":"6636","line":131,"column":6,"nodeType":"6539","endLine":131,"endColumn":26,"suggestions":"7070"},{"ruleId":"6537","severity":1,"message":"6642","line":164,"column":6,"nodeType":"6539","endLine":164,"endColumn":26,"suggestions":"7071"},{"ruleId":"6527","severity":1,"message":"7072","line":34,"column":10,"nodeType":"6529","messageId":"6530","endLine":34,"endColumn":20},{"ruleId":"6527","severity":1,"message":"7073","line":34,"column":22,"nodeType":"6529","messageId":"6530","endLine":34,"endColumn":35},{"ruleId":"6537","severity":1,"message":"6636","line":213,"column":6,"nodeType":"6539","endLine":213,"endColumn":26,"suggestions":"7074"},{"ruleId":"6527","severity":1,"message":"7075","line":13,"column":23,"nodeType":"6529","messageId":"6530","endLine":13,"endColumn":35},{"ruleId":"6527","severity":1,"message":"7076","line":17,"column":8,"nodeType":"6529","messageId":"6530","endLine":17,"endColumn":20},{"ruleId":"6537","severity":1,"message":"6642","line":110,"column":6,"nodeType":"6539","endLine":110,"endColumn":27,"suggestions":"7077"},{"ruleId":"6527","severity":1,"message":"7078","line":122,"column":18,"nodeType":"6529","messageId":"6530","endLine":122,"endColumn":26},{"ruleId":"6527","severity":1,"message":"7079","line":135,"column":9,"nodeType":"6529","messageId":"6530","endLine":135,"endColumn":18},{"ruleId":"6527","severity":1,"message":"7080","line":201,"column":9,"nodeType":"6529","messageId":"6530","endLine":201,"endColumn":21},{"ruleId":"6527","severity":1,"message":"7081","line":30,"column":10,"nodeType":"6529","messageId":"6530","endLine":30,"endColumn":24},{"ruleId":"6527","severity":1,"message":"7082","line":51,"column":24,"nodeType":"6529","messageId":"6530","endLine":51,"endColumn":39},{"ruleId":"6537","severity":1,"message":"6898","line":219,"column":6,"nodeType":"6539","endLine":219,"endColumn":8,"suggestions":"7083"},{"ruleId":"6537","severity":1,"message":"7084","line":227,"column":6,"nodeType":"6539","endLine":227,"endColumn":26,"suggestions":"7085"},{"ruleId":"6527","severity":1,"message":"7086","line":242,"column":18,"nodeType":"6529","messageId":"6530","endLine":242,"endColumn":35},{"ruleId":"6527","severity":1,"message":"6648","line":2,"column":38,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":42},{"ruleId":"6527","severity":1,"message":"6652","line":2,"column":49,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":55},{"ruleId":"6537","severity":1,"message":"6642","line":219,"column":6,"nodeType":"6539","endLine":219,"endColumn":27,"suggestions":"7087"},{"ruleId":"6537","severity":1,"message":"7088","line":36,"column":6,"nodeType":"6539","endLine":36,"endColumn":27,"suggestions":"7089"},{"ruleId":"6527","severity":1,"message":"7090","line":1,"column":17,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":26},{"ruleId":"6559","severity":1,"message":"6560","line":88,"column":33,"nodeType":"6561","messageId":"6562","endLine":88,"endColumn":35},{"ruleId":"6559","severity":1,"message":"6560","line":89,"column":33,"nodeType":"6561","messageId":"6562","endLine":89,"endColumn":35},{"ruleId":"6537","severity":1,"message":"6567","line":25,"column":6,"nodeType":"6539","endLine":25,"endColumn":8,"suggestions":"7091"},{"ruleId":"6527","severity":1,"message":"7092","line":1,"column":10,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":13},{"ruleId":"6527","severity":1,"message":"7093","line":1,"column":15,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":18},{"ruleId":"6527","severity":1,"message":"6804","line":1,"column":10,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":17},{"ruleId":"6537","severity":1,"message":"6575","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":8,"suggestions":"7094"},{"ruleId":"6537","severity":1,"message":"6572","line":74,"column":6,"nodeType":"6539","endLine":74,"endColumn":8,"suggestions":"7095"},{"ruleId":"6527","severity":1,"message":"7096","line":29,"column":10,"nodeType":"6529","messageId":"6530","endLine":29,"endColumn":15},{"ruleId":"6537","severity":1,"message":"6575","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":8,"suggestions":"7097"},{"ruleId":"6537","severity":1,"message":"7098","line":124,"column":6,"nodeType":"6539","endLine":124,"endColumn":8,"suggestions":"7099"},{"ruleId":"6527","severity":1,"message":"7090","line":1,"column":36,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":45},{"ruleId":"6527","severity":1,"message":"7090","line":1,"column":17,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":26},{"ruleId":"6537","severity":1,"message":"7100","line":275,"column":6,"nodeType":"6539","endLine":275,"endColumn":26,"suggestions":"7101"},{"ruleId":"6537","severity":1,"message":"6971","line":30,"column":6,"nodeType":"6539","endLine":30,"endColumn":8,"suggestions":"7102"},{"ruleId":"6730","severity":1,"message":"6731","line":45,"column":9,"nodeType":"6732","endLine":45,"endColumn":26},{"ruleId":"6537","severity":1,"message":"7103","line":19,"column":6,"nodeType":"6539","endLine":19,"endColumn":8,"suggestions":"7104"},{"ruleId":"6537","severity":1,"message":"7105","line":23,"column":6,"nodeType":"6539","endLine":23,"endColumn":19,"suggestions":"7106"},{"ruleId":"6537","severity":1,"message":"7107","line":55,"column":6,"nodeType":"6539","endLine":55,"endColumn":15,"suggestions":"7108"},{"ruleId":"6527","severity":1,"message":"7109","line":16,"column":11,"nodeType":"6529","messageId":"6530","endLine":16,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6971","line":34,"column":6,"nodeType":"6539","endLine":34,"endColumn":10,"suggestions":"7110"},{"ruleId":"6527","severity":1,"message":"7111","line":4,"column":10,"nodeType":"6529","messageId":"6530","endLine":4,"endColumn":19},{"ruleId":"6537","severity":1,"message":"6615","line":78,"column":6,"nodeType":"6539","endLine":78,"endColumn":19,"suggestions":"7112"},{"ruleId":"6527","severity":1,"message":"6893","line":2,"column":45,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":48},{"ruleId":"6537","severity":1,"message":"7100","line":180,"column":6,"nodeType":"6539","endLine":180,"endColumn":26,"suggestions":"7113"},{"ruleId":"6527","severity":1,"message":"6651","line":227,"column":9,"nodeType":"6529","messageId":"6530","endLine":227,"endColumn":21},{"ruleId":"6537","severity":1,"message":"7114","line":100,"column":6,"nodeType":"6539","endLine":100,"endColumn":26,"suggestions":"7115"},{"ruleId":"6537","severity":1,"message":"7116","line":162,"column":6,"nodeType":"6539","endLine":162,"endColumn":8,"suggestions":"7117","suppressions":"7118"},{"ruleId":"6537","severity":1,"message":"7119","line":151,"column":6,"nodeType":"6539","endLine":151,"endColumn":8,"suggestions":"7120"},{"ruleId":"6537","severity":1,"message":"6971","line":175,"column":6,"nodeType":"6539","endLine":175,"endColumn":24,"suggestions":"7121"},{"ruleId":"6537","severity":1,"message":"7122","line":83,"column":6,"nodeType":"6539","endLine":83,"endColumn":12,"suggestions":"7123","suppressions":"7124"},{"ruleId":"6537","severity":1,"message":"7125","line":154,"column":6,"nodeType":"6539","endLine":154,"endColumn":8,"suggestions":"7126","suppressions":"7127"},{"ruleId":"6527","severity":1,"message":"7128","line":7,"column":11,"nodeType":"6529","messageId":"6530","endLine":7,"endColumn":25},{"ruleId":"6527","severity":1,"message":"7129","line":1,"column":41,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":52},{"ruleId":"6537","severity":1,"message":"7130","line":75,"column":6,"nodeType":"6539","endLine":75,"endColumn":15,"suggestions":"7131"},{"ruleId":"6537","severity":1,"message":"7132","line":135,"column":6,"nodeType":"6539","endLine":135,"endColumn":12,"suggestions":"7133"},{"ruleId":"6537","severity":1,"message":"7134","line":208,"column":6,"nodeType":"6539","endLine":208,"endColumn":19,"suggestions":"7135"},{"ruleId":"6537","severity":1,"message":"6636","line":99,"column":6,"nodeType":"6539","endLine":99,"endColumn":8,"suggestions":"7136"},{"ruleId":"6527","severity":1,"message":"7137","line":2,"column":18,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":22},{"ruleId":"6527","severity":1,"message":"7138","line":22,"column":7,"nodeType":"6529","messageId":"6530","endLine":22,"endColumn":12},{"ruleId":"6537","severity":1,"message":"7139","line":225,"column":6,"nodeType":"6539","endLine":225,"endColumn":8,"suggestions":"7140"},{"ruleId":"6537","severity":1,"message":"7141","line":76,"column":6,"nodeType":"6539","endLine":76,"endColumn":18,"suggestions":"7142"},{"ruleId":"6537","severity":1,"message":"7143","line":121,"column":6,"nodeType":"6539","endLine":121,"endColumn":8,"suggestions":"7144"},{"ruleId":"6527","severity":1,"message":"7145","line":132,"column":18,"nodeType":"6529","messageId":"6530","endLine":132,"endColumn":40},{"ruleId":"6537","severity":1,"message":"7146","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":50,"suggestions":"7147"},{"ruleId":"6537","severity":1,"message":"6572","line":97,"column":6,"nodeType":"6539","endLine":97,"endColumn":17,"suggestions":"7148"},{"ruleId":"6527","severity":1,"message":"7149","line":15,"column":11,"nodeType":"6529","messageId":"6530","endLine":15,"endColumn":15},{"ruleId":"6527","severity":1,"message":"7045","line":18,"column":22,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":35},{"ruleId":"6527","severity":1,"message":"7150","line":16,"column":24,"nodeType":"6529","messageId":"6530","endLine":16,"endColumn":46},{"ruleId":"6527","severity":1,"message":"7151","line":19,"column":8,"nodeType":"6529","messageId":"6530","endLine":19,"endColumn":29},{"ruleId":"6527","severity":1,"message":"7152","line":41,"column":9,"nodeType":"6529","messageId":"6530","endLine":41,"endColumn":28},{"ruleId":"6537","severity":1,"message":"6575","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":8,"suggestions":"7153"},{"ruleId":"6537","severity":1,"message":"6575","line":262,"column":6,"nodeType":"6539","endLine":262,"endColumn":8,"suggestions":"7154"},{"ruleId":"6537","severity":1,"message":"7155","line":411,"column":6,"nodeType":"6539","endLine":411,"endColumn":43,"suggestions":"7156"},{"ruleId":"6537","severity":1,"message":"7157","line":66,"column":6,"nodeType":"6539","endLine":66,"endColumn":23,"suggestions":"7158"},{"ruleId":"6537","severity":1,"message":"7159","line":95,"column":6,"nodeType":"6539","endLine":95,"endColumn":8,"suggestions":"7160"},{"ruleId":"6527","severity":1,"message":"6909","line":43,"column":11,"nodeType":"6529","messageId":"6530","endLine":43,"endColumn":15},{"ruleId":"6537","severity":1,"message":"6548","line":75,"column":6,"nodeType":"6539","endLine":75,"endColumn":37,"suggestions":"7161"},{"ruleId":"6527","severity":1,"message":"6671","line":3,"column":26,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":31},{"ruleId":"6730","severity":1,"message":"6731","line":29,"column":13,"nodeType":"6732","endLine":33,"endColumn":15},{"ruleId":"6527","severity":1,"message":"6652","line":2,"column":44,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":50},{"ruleId":"6527","severity":1,"message":"7162","line":6,"column":10,"nodeType":"6529","messageId":"6530","endLine":6,"endColumn":24},{"ruleId":"6527","severity":1,"message":"7163","line":108,"column":9,"nodeType":"6529","messageId":"6530","endLine":108,"endColumn":25},{"ruleId":"6537","severity":1,"message":"6815","line":115,"column":6,"nodeType":"6539","endLine":115,"endColumn":18,"suggestions":"7164"},{"ruleId":"6537","severity":1,"message":"6548","line":47,"column":6,"nodeType":"6539","endLine":47,"endColumn":42,"suggestions":"7165"},{"ruleId":"6537","severity":1,"message":"6971","line":60,"column":6,"nodeType":"6539","endLine":60,"endColumn":13,"suggestions":"7166"},{"ruleId":"6537","severity":1,"message":"7167","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":13,"suggestions":"7168"},{"ruleId":"6537","severity":1,"message":"7169","line":25,"column":6,"nodeType":"6539","endLine":25,"endColumn":8,"suggestions":"7170"},{"ruleId":"6537","severity":1,"message":"7171","line":69,"column":6,"nodeType":"6539","endLine":69,"endColumn":8,"suggestions":"7172"},{"ruleId":"6537","severity":1,"message":"6575","line":47,"column":6,"nodeType":"6539","endLine":47,"endColumn":8,"suggestions":"7173"},{"ruleId":"6537","severity":1,"message":"7174","line":93,"column":6,"nodeType":"6539","endLine":93,"endColumn":8,"suggestions":"7175"},{"ruleId":"6537","severity":1,"message":"6642","line":347,"column":6,"nodeType":"6539","endLine":347,"endColumn":26,"suggestions":"7176"},{"ruleId":"6537","severity":1,"message":"6642","line":193,"column":6,"nodeType":"6539","endLine":193,"endColumn":26,"suggestions":"7177"},{"ruleId":"6527","severity":1,"message":"7178","line":1,"column":50,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":55},{"ruleId":"6559","severity":1,"message":"6560","line":47,"column":39,"nodeType":"6561","messageId":"6562","endLine":47,"endColumn":41},{"ruleId":"6537","severity":1,"message":"6575","line":51,"column":6,"nodeType":"6539","endLine":51,"endColumn":8,"suggestions":"7179"},{"ruleId":"6527","severity":1,"message":"6659","line":2,"column":10,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":16},{"ruleId":"6527","severity":1,"message":"7180","line":2,"column":18,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":21},{"ruleId":"6527","severity":1,"message":"7181","line":2,"column":29,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":34},{"ruleId":"6527","severity":1,"message":"7129","line":2,"column":36,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":47},{"ruleId":"6527","severity":1,"message":"7182","line":2,"column":49,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":52},{"ruleId":"6527","severity":1,"message":"7178","line":2,"column":54,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":59},{"ruleId":"6537","severity":1,"message":"7183","line":68,"column":6,"nodeType":"6539","endLine":68,"endColumn":8,"suggestions":"7184"},{"ruleId":"6537","severity":1,"message":"7174","line":90,"column":6,"nodeType":"6539","endLine":90,"endColumn":8,"suggestions":"7185"},{"ruleId":"6527","severity":1,"message":"7186","line":45,"column":30,"nodeType":"6529","messageId":"6530","endLine":45,"endColumn":51},{"ruleId":"6537","severity":1,"message":"7187","line":107,"column":6,"nodeType":"6539","endLine":107,"endColumn":16,"suggestions":"7188"},{"ruleId":"6537","severity":1,"message":"7189","line":124,"column":6,"nodeType":"6539","endLine":124,"endColumn":28,"suggestions":"7190"},{"ruleId":"6537","severity":1,"message":"7191","line":40,"column":6,"nodeType":"6539","endLine":40,"endColumn":13,"suggestions":"7192"},{"ruleId":"6537","severity":1,"message":"7193","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":8,"suggestions":"7194","suppressions":"7195"},{"ruleId":"6537","severity":1,"message":"7196","line":32,"column":6,"nodeType":"6539","endLine":32,"endColumn":8,"suggestions":"7197","suppressions":"7198"},{"ruleId":"6527","severity":1,"message":"6734","line":23,"column":11,"nodeType":"6529","messageId":"6530","endLine":23,"endColumn":17},{"ruleId":"6527","severity":1,"message":"7199","line":13,"column":9,"nodeType":"6529","messageId":"6530","endLine":13,"endColumn":16},{"ruleId":"6537","severity":1,"message":"7200","line":76,"column":5,"nodeType":"6539","endLine":76,"endColumn":7,"suggestions":"7201"},{"ruleId":"6537","severity":1,"message":"7202","line":203,"column":6,"nodeType":"6539","endLine":203,"endColumn":10,"suggestions":"7203"},{"ruleId":"6537","severity":1,"message":"7204","line":103,"column":6,"nodeType":"6539","endLine":103,"endColumn":10,"suggestions":"7205"},{"ruleId":"6537","severity":1,"message":"7206","line":110,"column":6,"nodeType":"6539","endLine":110,"endColumn":26,"suggestions":"7207"},{"ruleId":"6537","severity":1,"message":"7208","line":82,"column":6,"nodeType":"6539","endLine":82,"endColumn":8,"suggestions":"7209","suppressions":"7210"},{"ruleId":"6537","severity":1,"message":"7174","line":98,"column":6,"nodeType":"6539","endLine":98,"endColumn":8,"suggestions":"7211"},{"ruleId":"6527","severity":1,"message":"7212","line":43,"column":10,"nodeType":"6529","messageId":"6530","endLine":43,"endColumn":17},{"ruleId":"6527","severity":1,"message":"7213","line":47,"column":25,"nodeType":"6529","messageId":"6530","endLine":47,"endColumn":41},{"ruleId":"6537","severity":1,"message":"7214","line":142,"column":6,"nodeType":"6539","endLine":142,"endColumn":12,"suggestions":"7215"},{"ruleId":"6537","severity":1,"message":"6575","line":42,"column":6,"nodeType":"6539","endLine":42,"endColumn":8,"suggestions":"7216"},{"ruleId":"6537","severity":1,"message":"7217","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":26,"suggestions":"7218"},{"ruleId":"6537","severity":1,"message":"7219","line":101,"column":6,"nodeType":"6539","endLine":101,"endColumn":10,"suggestions":"7220"},{"ruleId":"6537","severity":1,"message":"7221","line":57,"column":6,"nodeType":"6539","endLine":57,"endColumn":25,"suggestions":"7222"},{"ruleId":"6537","severity":1,"message":"7223","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":12,"suggestions":"7224"},{"ruleId":"6527","severity":1,"message":"7225","line":17,"column":8,"nodeType":"6529","messageId":"6530","endLine":17,"endColumn":19},{"ruleId":"6537","severity":1,"message":"6636","line":105,"column":6,"nodeType":"6539","endLine":105,"endColumn":8,"suggestions":"7226"},{"ruleId":"6527","severity":1,"message":"7137","line":2,"column":18,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":22},{"ruleId":"6527","severity":1,"message":"6893","line":2,"column":55,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":58},{"ruleId":"6527","severity":1,"message":"7227","line":6,"column":8,"nodeType":"6529","messageId":"6530","endLine":6,"endColumn":23},{"ruleId":"6537","severity":1,"message":"7228","line":32,"column":6,"nodeType":"6539","endLine":32,"endColumn":8,"suggestions":"7229"},{"ruleId":"6537","severity":1,"message":"7219","line":112,"column":6,"nodeType":"6539","endLine":112,"endColumn":8,"suggestions":"7230"},{"ruleId":"6527","severity":1,"message":"7231","line":12,"column":10,"nodeType":"6529","messageId":"6530","endLine":12,"endColumn":25},{"ruleId":"6527","severity":1,"message":"6702","line":13,"column":10,"nodeType":"6529","messageId":"6530","endLine":13,"endColumn":24},{"ruleId":"6527","severity":1,"message":"6536","line":18,"column":9,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":17},{"ruleId":"6537","severity":1,"message":"7174","line":98,"column":6,"nodeType":"6539","endLine":98,"endColumn":8,"suggestions":"7232"},{"ruleId":"6537","severity":1,"message":"6575","line":24,"column":6,"nodeType":"6539","endLine":24,"endColumn":8,"suggestions":"7233"},{"ruleId":"6537","severity":1,"message":"6575","line":26,"column":6,"nodeType":"6539","endLine":26,"endColumn":8,"suggestions":"7234","suppressions":"7235"},{"ruleId":"6639","severity":1,"message":"6640","line":45,"column":49,"nodeType":"6561","messageId":"6641","endLine":45,"endColumn":50},{"ruleId":"6527","severity":1,"message":"7236","line":1,"column":34,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":39},{"ruleId":"6537","severity":1,"message":"6575","line":113,"column":6,"nodeType":"6539","endLine":113,"endColumn":8,"suggestions":"7237","suppressions":"7238"},{"ruleId":"6537","severity":1,"message":"6575","line":61,"column":6,"nodeType":"6539","endLine":61,"endColumn":8,"suggestions":"7239","suppressions":"7240"},{"ruleId":"6537","severity":1,"message":"6971","line":59,"column":6,"nodeType":"6539","endLine":59,"endColumn":22,"suggestions":"7241"},{"ruleId":"6537","severity":1,"message":"7242","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":13,"suggestions":"7243"},{"ruleId":"6537","severity":1,"message":"7244","line":25,"column":6,"nodeType":"6539","endLine":25,"endColumn":8,"suggestions":"7245"},{"ruleId":"6537","severity":1,"message":"7189","line":124,"column":6,"nodeType":"6539","endLine":124,"endColumn":28,"suggestions":"7246"},{"ruleId":"6537","severity":1,"message":"6575","line":47,"column":6,"nodeType":"6539","endLine":47,"endColumn":8,"suggestions":"7247"},{"ruleId":"6527","severity":1,"message":"7096","line":18,"column":10,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":15},{"ruleId":"6537","severity":1,"message":"6575","line":34,"column":6,"nodeType":"6539","endLine":34,"endColumn":8,"suggestions":"7248"},{"ruleId":"6537","severity":1,"message":"6572","line":74,"column":6,"nodeType":"6539","endLine":74,"endColumn":8,"suggestions":"7249"},{"ruleId":"6537","severity":1,"message":"6575","line":49,"column":6,"nodeType":"6539","endLine":49,"endColumn":8,"suggestions":"7250"},{"ruleId":"6537","severity":1,"message":"7251","line":122,"column":6,"nodeType":"6539","endLine":122,"endColumn":8,"suggestions":"7252"},{"ruleId":"6527","severity":1,"message":"7186","line":33,"column":30,"nodeType":"6529","messageId":"6530","endLine":33,"endColumn":51},{"ruleId":"6537","severity":1,"message":"7253","line":130,"column":6,"nodeType":"6539","endLine":130,"endColumn":10,"suggestions":"7254"},{"ruleId":"6537","severity":1,"message":"7253","line":112,"column":6,"nodeType":"6539","endLine":112,"endColumn":10,"suggestions":"7255"},{"ruleId":"6537","severity":1,"message":"7253","line":127,"column":6,"nodeType":"6539","endLine":127,"endColumn":10,"suggestions":"7256"},{"ruleId":"6527","severity":1,"message":"7257","line":39,"column":9,"nodeType":"6529","messageId":"6530","endLine":39,"endColumn":24},{"ruleId":"6537","severity":1,"message":"6575","line":59,"column":6,"nodeType":"6539","endLine":59,"endColumn":8,"suggestions":"7258"},{"ruleId":"6527","severity":1,"message":"7259","line":14,"column":9,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":13},{"ruleId":"6527","severity":1,"message":"7260","line":15,"column":9,"nodeType":"6529","messageId":"6530","endLine":15,"endColumn":14},{"ruleId":"6527","severity":1,"message":"7261","line":16,"column":9,"nodeType":"6529","messageId":"6530","endLine":16,"endColumn":20},{"ruleId":"6537","severity":1,"message":"7253","line":144,"column":6,"nodeType":"6539","endLine":144,"endColumn":10,"suggestions":"7262"},{"ruleId":"6537","severity":1,"message":"6548","line":37,"column":6,"nodeType":"6539","endLine":37,"endColumn":26,"suggestions":"7263"},{"ruleId":"6537","severity":1,"message":"6548","line":48,"column":6,"nodeType":"6539","endLine":48,"endColumn":44,"suggestions":"7264"},{"ruleId":"6537","severity":1,"message":"7265","line":55,"column":6,"nodeType":"6539","endLine":55,"endColumn":18,"suggestions":"7266"},{"ruleId":"6537","severity":1,"message":"7119","line":154,"column":6,"nodeType":"6539","endLine":154,"endColumn":8,"suggestions":"7267"},{"ruleId":"6537","severity":1,"message":"6971","line":178,"column":6,"nodeType":"6539","endLine":178,"endColumn":24,"suggestions":"7268"},{"ruleId":"6537","severity":1,"message":"6548","line":30,"column":6,"nodeType":"6539","endLine":30,"endColumn":8,"suggestions":"7269"},{"ruleId":"6537","severity":1,"message":"7270","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":8,"suggestions":"7271"},{"ruleId":"6537","severity":1,"message":"6971","line":30,"column":6,"nodeType":"6539","endLine":30,"endColumn":8,"suggestions":"7272"},{"ruleId":"6537","severity":1,"message":"7141","line":76,"column":6,"nodeType":"6539","endLine":76,"endColumn":18,"suggestions":"7273"},{"ruleId":"6537","severity":1,"message":"7143","line":121,"column":6,"nodeType":"6539","endLine":121,"endColumn":8,"suggestions":"7274"},{"ruleId":"6527","severity":1,"message":"7275","line":6,"column":3,"nodeType":"6529","messageId":"6530","endLine":6,"endColumn":15},{"ruleId":"6527","severity":1,"message":"7276","line":22,"column":8,"nodeType":"6529","messageId":"6530","endLine":22,"endColumn":20},{"ruleId":"6537","severity":1,"message":"7100","line":264,"column":6,"nodeType":"6539","endLine":264,"endColumn":26,"suggestions":"7277"},{"ruleId":"6537","severity":1,"message":"7278","line":279,"column":6,"nodeType":"6539","endLine":279,"endColumn":50,"suggestions":"7279"},{"ruleId":"6537","severity":1,"message":"7280","line":117,"column":5,"nodeType":"6539","endLine":117,"endColumn":11,"suggestions":"7281"},{"ruleId":"6537","severity":1,"message":"7159","line":124,"column":6,"nodeType":"6539","endLine":124,"endColumn":23,"suggestions":"7282"},{"ruleId":"6527","severity":1,"message":"7283","line":280,"column":9,"nodeType":"6529","messageId":"6530","endLine":280,"endColumn":20},{"ruleId":"6537","severity":1,"message":"7155","line":424,"column":6,"nodeType":"6539","endLine":424,"endColumn":43,"suggestions":"7284"},{"ruleId":"6537","severity":1,"message":"7157","line":68,"column":6,"nodeType":"6539","endLine":68,"endColumn":23,"suggestions":"7285"},{"ruleId":"6527","severity":1,"message":"7150","line":14,"column":10,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":32},{"ruleId":"6527","severity":1,"message":"7151","line":17,"column":8,"nodeType":"6529","messageId":"6530","endLine":17,"endColumn":29},{"ruleId":"6527","severity":1,"message":"7152","line":41,"column":9,"nodeType":"6529","messageId":"6530","endLine":41,"endColumn":28},{"ruleId":"6537","severity":1,"message":"6575","line":311,"column":6,"nodeType":"6539","endLine":311,"endColumn":8,"suggestions":"7286"},{"ruleId":"6537","severity":1,"message":"7159","line":95,"column":6,"nodeType":"6539","endLine":95,"endColumn":8,"suggestions":"7287"},{"ruleId":"6537","severity":1,"message":"6642","line":171,"column":6,"nodeType":"6539","endLine":171,"endColumn":26,"suggestions":"7288"},{"ruleId":"6537","severity":1,"message":"6642","line":295,"column":6,"nodeType":"6539","endLine":295,"endColumn":26,"suggestions":"7289"},{"ruleId":"6527","severity":1,"message":"6671","line":3,"column":26,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":31},{"ruleId":"6730","severity":1,"message":"6731","line":29,"column":13,"nodeType":"6732","endLine":33,"endColumn":15},{"ruleId":"6527","severity":1,"message":"7290","line":26,"column":17,"nodeType":"6529","messageId":"6530","endLine":26,"endColumn":25},{"ruleId":"6537","severity":1,"message":"7291","line":52,"column":6,"nodeType":"6539","endLine":52,"endColumn":31,"suggestions":"7292"},{"ruleId":"6527","severity":1,"message":"7293","line":2,"column":21,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":26},{"ruleId":"6537","severity":1,"message":"7294","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":15,"suggestions":"7295"},{"ruleId":"6527","severity":1,"message":"6652","line":2,"column":41,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":47},{"ruleId":"6527","severity":1,"message":"7296","line":14,"column":11,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":23},{"ruleId":"6537","severity":1,"message":"6548","line":36,"column":6,"nodeType":"6539","endLine":36,"endColumn":8,"suggestions":"7297"},{"ruleId":"6537","severity":1,"message":"7130","line":73,"column":6,"nodeType":"6539","endLine":73,"endColumn":15,"suggestions":"7298"},{"ruleId":"6537","severity":1,"message":"7132","line":133,"column":6,"nodeType":"6539","endLine":133,"endColumn":12,"suggestions":"7299"},{"ruleId":"6537","severity":1,"message":"7134","line":206,"column":6,"nodeType":"6539","endLine":206,"endColumn":19,"suggestions":"7300"},{"ruleId":"6537","severity":1,"message":"6636","line":98,"column":6,"nodeType":"6539","endLine":98,"endColumn":8,"suggestions":"7301"},{"ruleId":"6537","severity":1,"message":"7100","line":166,"column":6,"nodeType":"6539","endLine":166,"endColumn":26,"suggestions":"7302"},{"ruleId":"6527","severity":1,"message":"6651","line":215,"column":9,"nodeType":"6529","messageId":"6530","endLine":215,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6971","line":60,"column":6,"nodeType":"6539","endLine":60,"endColumn":13,"suggestions":"7303"},{"ruleId":"6537","severity":1,"message":"7304","line":39,"column":6,"nodeType":"6539","endLine":39,"endColumn":13,"suggestions":"7305"},{"ruleId":"6537","severity":1,"message":"7169","line":25,"column":6,"nodeType":"6539","endLine":25,"endColumn":8,"suggestions":"7306"},{"ruleId":"6537","severity":1,"message":"6971","line":59,"column":6,"nodeType":"6539","endLine":59,"endColumn":22,"suggestions":"7307"},{"ruleId":"6527","severity":1,"message":"7308","line":29,"column":12,"nodeType":"6529","messageId":"6530","endLine":29,"endColumn":28},{"ruleId":"6537","severity":1,"message":"6575","line":40,"column":6,"nodeType":"6539","endLine":40,"endColumn":8,"suggestions":"7309"},{"ruleId":"6537","severity":1,"message":"7217","line":46,"column":6,"nodeType":"6539","endLine":46,"endColumn":26,"suggestions":"7310"},{"ruleId":"6537","severity":1,"message":"7311","line":78,"column":6,"nodeType":"6539","endLine":78,"endColumn":12,"suggestions":"7312"},{"ruleId":"6527","severity":1,"message":"7293","line":2,"column":21,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":26},{"ruleId":"6537","severity":1,"message":"7294","line":43,"column":6,"nodeType":"6539","endLine":43,"endColumn":15,"suggestions":"7313"},{"ruleId":"6537","severity":1,"message":"6636","line":86,"column":6,"nodeType":"6539","endLine":86,"endColumn":8,"suggestions":"7314"},{"ruleId":"6537","severity":1,"message":"7242","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":13,"suggestions":"7315"},{"ruleId":"6537","severity":1,"message":"7316","line":25,"column":6,"nodeType":"6539","endLine":25,"endColumn":8,"suggestions":"7317"},{"ruleId":"6537","severity":1,"message":"7318","line":69,"column":6,"nodeType":"6539","endLine":69,"endColumn":8,"suggestions":"7319"},{"ruleId":"7016","severity":1,"message":"7017","line":101,"column":5,"nodeType":"7018","messageId":"7019","endLine":112,"endColumn":6},{"ruleId":"6537","severity":1,"message":"7214","line":158,"column":6,"nodeType":"6539","endLine":158,"endColumn":8,"suggestions":"7320"},{"ruleId":"6527","severity":1,"message":"7321","line":122,"column":9,"nodeType":"6529","messageId":"6530","endLine":122,"endColumn":21},{"ruleId":"6537","severity":1,"message":"7214","line":146,"column":6,"nodeType":"6539","endLine":146,"endColumn":8,"suggestions":"7322"},{"ruleId":"6527","severity":1,"message":"7323","line":5,"column":10,"nodeType":"6529","messageId":"6530","endLine":5,"endColumn":15},{"ruleId":"6537","severity":1,"message":"6548","line":29,"column":6,"nodeType":"6539","endLine":29,"endColumn":8,"suggestions":"7324"},{"ruleId":"6555","severity":1,"message":"7325","line":76,"column":62,"nodeType":"6557","messageId":"7326","endLine":76,"endColumn":64},{"ruleId":"6555","severity":1,"message":"7325","line":81,"column":66,"nodeType":"6557","messageId":"7326","endLine":81,"endColumn":68},{"ruleId":"6537","severity":1,"message":"7327","line":31,"column":6,"nodeType":"6539","endLine":31,"endColumn":8,"suggestions":"7328"},{"ruleId":"6527","severity":1,"message":"7178","line":8,"column":25,"nodeType":"6529","messageId":"6530","endLine":8,"endColumn":30},{"ruleId":"6527","severity":1,"message":"6871","line":14,"column":33,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":39},{"ruleId":"6537","severity":1,"message":"7327","line":37,"column":8,"nodeType":"6539","endLine":37,"endColumn":10,"suggestions":"7329"},{"ruleId":"6537","severity":1,"message":"7200","line":34,"column":6,"nodeType":"6539","endLine":34,"endColumn":14,"suggestions":"7330"},{"ruleId":"6537","severity":1,"message":"7200","line":41,"column":6,"nodeType":"6539","endLine":41,"endColumn":13,"suggestions":"7331"},{"ruleId":"6537","severity":1,"message":"7332","line":158,"column":6,"nodeType":"6539","endLine":158,"endColumn":18,"suggestions":"7333","suppressions":"7334"},{"ruleId":"6537","severity":1,"message":"7335","line":186,"column":6,"nodeType":"6539","endLine":186,"endColumn":24,"suggestions":"7336","suppressions":"7337"},{"ruleId":"6537","severity":1,"message":"6815","line":150,"column":6,"nodeType":"6539","endLine":150,"endColumn":22,"suggestions":"7338"},{"ruleId":"6537","severity":1,"message":"7339","line":33,"column":6,"nodeType":"6539","endLine":33,"endColumn":8,"suggestions":"7340"},{"ruleId":"6537","severity":1,"message":"7341","line":56,"column":6,"nodeType":"6539","endLine":56,"endColumn":36,"suggestions":"7342"},{"ruleId":"6537","severity":1,"message":"7343","line":132,"column":6,"nodeType":"6539","endLine":132,"endColumn":24,"suggestions":"7344"},{"ruleId":"6537","severity":1,"message":"7332","line":138,"column":6,"nodeType":"6539","endLine":138,"endColumn":18,"suggestions":"7345"},{"ruleId":"6527","severity":1,"message":"7346","line":30,"column":11,"nodeType":"6529","messageId":"6530","endLine":30,"endColumn":14},{"ruleId":"6527","severity":1,"message":"7347","line":3,"column":3,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":16},{"ruleId":"6527","severity":1,"message":"7181","line":9,"column":29,"nodeType":"6529","messageId":"6530","endLine":9,"endColumn":34},{"ruleId":"6527","severity":1,"message":"7348","line":14,"column":3,"nodeType":"6529","messageId":"6530","endLine":14,"endColumn":17},{"ruleId":"6527","severity":1,"message":"7349","line":38,"column":36,"nodeType":"6529","messageId":"6530","endLine":38,"endColumn":42},{"ruleId":"6527","severity":1,"message":"7350","line":44,"column":22,"nodeType":"6529","messageId":"6530","endLine":44,"endColumn":35},{"ruleId":"6527","severity":1,"message":"7351","line":45,"column":10,"nodeType":"6529","messageId":"6530","endLine":45,"endColumn":23},{"ruleId":"6527","severity":1,"message":"7109","line":46,"column":11,"nodeType":"6529","messageId":"6530","endLine":46,"endColumn":21},{"ruleId":"6527","severity":1,"message":"7352","line":121,"column":12,"nodeType":"6529","messageId":"6530","endLine":121,"endColumn":29},{"ruleId":"6527","severity":1,"message":"7353","line":4,"column":3,"nodeType":"6529","messageId":"6530","endLine":4,"endColumn":11},{"ruleId":"6537","severity":1,"message":"7332","line":128,"column":6,"nodeType":"6539","endLine":128,"endColumn":18,"suggestions":"7354"},{"ruleId":"6527","severity":1,"message":"7355","line":130,"column":9,"nodeType":"6529","messageId":"6530","endLine":130,"endColumn":21},{"ruleId":"6537","severity":1,"message":"7356","line":213,"column":6,"nodeType":"6539","endLine":213,"endColumn":24,"suggestions":"7357"},{"ruleId":"6527","severity":1,"message":"7358","line":15,"column":9,"nodeType":"6529","messageId":"6530","endLine":15,"endColumn":15},{"ruleId":"6527","severity":1,"message":"7090","line":1,"column":27,"nodeType":"6529","messageId":"6530","endLine":1,"endColumn":36},{"ruleId":"6537","severity":1,"message":"7359","line":46,"column":6,"nodeType":"6539","endLine":46,"endColumn":26,"suggestions":"7360"},{"ruleId":"6527","severity":1,"message":"7361","line":38,"column":10,"nodeType":"6529","messageId":"6530","endLine":38,"endColumn":16},{"ruleId":"6537","severity":1,"message":"7332","line":170,"column":6,"nodeType":"6539","endLine":170,"endColumn":18,"suggestions":"7362","suppressions":"7363"},{"ruleId":"6537","severity":1,"message":"7335","line":198,"column":6,"nodeType":"6539","endLine":198,"endColumn":24,"suggestions":"7364","suppressions":"7365"},{"ruleId":"6527","severity":1,"message":"7366","line":2,"column":38,"nodeType":"6529","messageId":"6530","endLine":2,"endColumn":42},{"ruleId":"6537","severity":1,"message":"7341","line":56,"column":6,"nodeType":"6539","endLine":56,"endColumn":36,"suggestions":"7367"},{"ruleId":"6537","severity":1,"message":"7343","line":132,"column":6,"nodeType":"6539","endLine":132,"endColumn":24,"suggestions":"7368"},{"ruleId":"6537","severity":1,"message":"7332","line":138,"column":6,"nodeType":"6539","endLine":138,"endColumn":18,"suggestions":"7369"},{"ruleId":"6537","severity":1,"message":"7332","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":18,"suggestions":"7370"},{"ruleId":"6559","severity":1,"message":"7371","line":62,"column":35,"nodeType":"6561","messageId":"6562","endLine":62,"endColumn":37},{"ruleId":"6559","severity":1,"message":"7371","line":68,"column":37,"nodeType":"6561","messageId":"6562","endLine":68,"endColumn":39},{"ruleId":"6559","severity":1,"message":"6560","line":69,"column":19,"nodeType":"6561","messageId":"6562","endLine":69,"endColumn":21},{"ruleId":"6527","severity":1,"message":"7372","line":6,"column":3,"nodeType":"6529","messageId":"6530","endLine":6,"endColumn":14},{"ruleId":"6527","severity":1,"message":"7373","line":9,"column":3,"nodeType":"6529","messageId":"6530","endLine":9,"endColumn":26},{"ruleId":"6537","severity":1,"message":"7332","line":38,"column":6,"nodeType":"6539","endLine":38,"endColumn":18,"suggestions":"7374"},{"ruleId":"6559","severity":1,"message":"7371","line":62,"column":35,"nodeType":"6561","messageId":"6562","endLine":62,"endColumn":37},{"ruleId":"6559","severity":1,"message":"7371","line":68,"column":37,"nodeType":"6561","messageId":"6562","endLine":68,"endColumn":39},{"ruleId":"6559","severity":1,"message":"6560","line":69,"column":19,"nodeType":"6561","messageId":"6562","endLine":69,"endColumn":21},{"ruleId":"6537","severity":1,"message":"6711","line":45,"column":6,"nodeType":"6539","endLine":45,"endColumn":22,"suggestions":"7375"},{"ruleId":"7376","severity":1,"message":"7377","line":11,"column":37,"nodeType":"6557","messageId":"7378","endLine":11,"endColumn":96},{"ruleId":"6559","severity":1,"message":"6560","line":11,"column":70,"nodeType":"6561","messageId":"6562","endLine":11,"endColumn":72},{"ruleId":"6559","severity":1,"message":"6560","line":12,"column":17,"nodeType":"6561","messageId":"6562","endLine":12,"endColumn":19},{"ruleId":"6559","severity":1,"message":"6560","line":44,"column":33,"nodeType":"6561","messageId":"6562","endLine":44,"endColumn":35},{"ruleId":"6555","severity":1,"message":"7325","line":49,"column":41,"nodeType":"6557","messageId":"7326","endLine":49,"endColumn":43},{"ruleId":"7379","severity":1,"message":"7380","line":55,"column":7,"nodeType":"6529","messageId":"7381","endLine":55,"endColumn":8},{"ruleId":"6559","severity":1,"message":"6560","line":64,"column":27,"nodeType":"6561","messageId":"6562","endLine":64,"endColumn":29},{"ruleId":"6559","severity":1,"message":"6560","line":71,"column":57,"nodeType":"6561","messageId":"6562","endLine":71,"endColumn":59},{"ruleId":"6527","severity":1,"message":"7096","line":18,"column":10,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":15},{"ruleId":"6537","severity":1,"message":"7382","line":204,"column":6,"nodeType":"6539","endLine":204,"endColumn":8,"suggestions":"7383"},{"ruleId":"6537","severity":1,"message":"7384","line":208,"column":6,"nodeType":"6539","endLine":208,"endColumn":18,"suggestions":"7385"},{"ruleId":"6527","severity":1,"message":"7096","line":18,"column":10,"nodeType":"6529","messageId":"6530","endLine":18,"endColumn":15},{"ruleId":"6537","severity":1,"message":"7386","line":49,"column":6,"nodeType":"6539","endLine":49,"endColumn":18,"suggestions":"7387"},{"ruleId":"6527","severity":1,"message":"7388","line":3,"column":24,"nodeType":"6529","messageId":"6530","endLine":3,"endColumn":35},{"ruleId":"6527","severity":1,"message":"7389","line":7,"column":10,"nodeType":"6529","messageId":"6530","endLine":7,"endColumn":21},{"ruleId":"6537","severity":1,"message":"7386","line":46,"column":6,"nodeType":"6539","endLine":46,"endColumn":18,"suggestions":"7390"},"no-unused-vars","'batch' is defined but never used.","Identifier","unusedVar","'getChat' is defined but never used.","'removeCurrentChat' is defined but never used.","'setChats' is defined but never used.","'setMessages' is defined but never used.","'currentUserId' is assigned a value but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["7391"],["7392"],"React Hook useEffect has missing dependencies: 'dispatch', 'fetchLanguages', 'languages.length', and 'user?.role'. Either include them or remove the dependency array.",["7393"],"React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["7394"],"'prev' is assigned a value but never used.","'onChangeSteps' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["7395"],"'payload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'menu.activeMenu.url' and 'pathname'. Either include them or remove the dependency array.",["7396"],"React Hook useMemo has a missing dependency: 'filterUserRoutes'. Either include it or remove the dependency array.",["7397"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'checkAccess'. Either include it or remove the dependency array.",["7398"],"React Hook useEffect has a missing dependency: 'prevailOnUnmount'. Either include it or remove the dependency array.",["7399"],"React Hook useEffect has a missing dependency: 'fetchLanguages'. Either include it or remove the dependency array.",["7400"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'f'. Either include it or remove the dependency array. If 'f' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["7401"],"React Hook useEffect has missing dependencies: 'fetchProduct' and 'uuid'. Either include them or remove the dependency array.",["7402"],["7403"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'form'. Either include them or remove the dependency array.",["7404"],"React Hook useEffect has missing dependencies: 'getBanner' and 'id'. Either include them or remove the dependency array.",["7405"],["7406"],["7407"],["7408"],["7409"],"React Hook useEffect has missing dependencies: 'fetchBlog' and 'uuid'. Either include them or remove the dependency array.",["7410"],["7411"],["7412"],["7413"],["7414"],"React Hook useEffect has missing dependencies: 'getCategory' and 'uuid'. Either include them or remove the dependency array.",["7415"],"'useLocation' is defined but never used.",["7416"],["7417"],["7418"],"'locations' is assigned a value but never used.",["7419"],"React Hook useEffect has missing dependencies: 'fetchBrand' and 'id'. Either include them or remove the dependency array.",["7420"],["7421"],["7422"],"'setLocation' is assigned a value but never used.",["7423"],"React Hook useEffect has missing dependencies: 'getCategory' and 'id'. Either include them or remove the dependency array.",["7424"],["7425"],["7426"],["7427"],["7428"],"'RefetchSearch' is defined but never used.",["7429"],["7430"],"'AsyncSelect' is defined but never used.",["7431"],["7432"],"React Hook useEffect has a missing dependency: 'getCategory'. Either include it or remove the dependency array.",["7433"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'form', 'params', 'state?.parentId', and 'type'. Either include them or remove the dependency array.",["7434"],["7435"],["7436"],"'setUnsubscriber' is defined but never used.","React Hook useEffect has missing dependencies: 'authUserId', 'chatInitialized', and 'dispatch'. Either include them or remove the dependency array.",["7437"],"no-useless-escape","Unnecessary escape character: \\&.","Literal","unnecessaryEscape",["7438","7439"],"React Hook useEffect has missing dependencies: 'getCoupon' and 'id'. Either include them or remove the dependency array.",["7440"],["7441"],"React Hook useEffect has missing dependencies: 'getEmailProvider' and 'id'. Either include them or remove the dependency array.",["7442"],"'BiDollar' is defined but never used.","'IoMapOutline' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrder'. Either include it or remove the dependency array.",["7443"],["7444"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'paramsData'. Either include them or remove the dependency array.",["7445"],"React Hook useEffect has missing dependencies: 'activeMenu' and 'dispatch'. Either include them or remove the dependency array.",["7446"],["7447"],["7448"],"'Tabs' is defined but never used.","'setRole' is assigned a value but never used.",["7449"],"'handleFilter' is assigned a value but never used.","'Select' is defined but never used.",["7450"],["7451"],["7452"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'params'. Either include them or remove the dependency array.",["7453"],["7454"],"'Button' is defined but never used.","'CloudUploadOutlined' is defined but never used.","'loadingBtn' is assigned a value but never used.","'updateBackend' is assigned a value but never used.",["7455"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'fetchOrder'. Either include them or remove the dependency array.",["7456"],["7457"],["7458"],["7459"],["7460"],["7461"],"'Image' is defined but never used.","'loading' is assigned a value but never used.",["7462"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'getDashboardsByRole'. Either include them or remove the dependency array.",["7463"],["7464"],["7465"],"'fetchOrderStatus' is defined but never used.","'statuses' is assigned a value but never used.",["7466"],["7467"],["7468"],"'ReactAppIsDemo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'showUserData' and 'uuid'. Either include them or remove the dependency array.",["7469"],["7470"],["7471"],["7472"],"React Hook useEffect has missing dependencies: 'activeMenu', 'data?.page', 'data?.status', 'deliverymanId', and 'dispatch'. Either include them or remove the dependency array.",["7473"],"React Hook useEffect has missing dependencies: 'active', 'activeMenu', 'dispatch', and 'paramsData'. Either include them or remove the dependency array.",["7474"],"'ShoppingCartOutlined' is defined but never used.","'goToOrder' is assigned a value but never used.",["7475"],["7476"],"React Hook useEffect has missing dependencies: 'fetchCurrency' and 'id'. Either include them or remove the dependency array.",["7477"],"React Hook useEffect has a missing dependency: 'fetchProductRequest'. Either include it or remove the dependency array.",["7478"],["7479"],"'removeFromMenu' is defined but never used.",["7480"],["7481"],"'colorItems' is assigned a value but never used.",["7482"],["7483"],"React Hook useEffect has missing dependencies: 'fetchFaq' and 'uuid'. Either include them or remove the dependency array.",["7484"],["7485"],"React Hook useEffect has a missing dependency: 'fetchGallery'. Either include it or remove the dependency array.",["7486"],["7487"],"React Hook useEffect has missing dependencies: 'fetchLanguage' and 'id'. Either include them or remove the dependency array.",["7488"],["7489"],"React Hook useEffect has missing dependencies: 'fetchSubscriber' and 'id'. Either include them or remove the dependency array.",["7490"],["7491"],"'Switch' is defined but never used.",["7492"],"React Hook useEffect has missing dependencies: 'fetchNotification' and 'uuid'. Either include them or remove the dependency array.",["7493"],["7494"],["7495"],["7496"],["7497"],["7498"],["7499"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["7500"],"'isDemo' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'fetchOrder' and 't'. Either include them or remove the dependency array.",["7501"],"React Hook useEffect has missing dependencies: 'dispatch', 'fetchOrder', and 'statusList.length'. Either include them or remove the dependency array.",["7502"],["7503"],["7504"],["7505"],["7506"],["7507"],["7508"],["7509"],["7510"],["7511"],["7512"],["7513"],["7514"],"React Hook useEffect has missing dependencies: 'getPayload' and 'id'. Either include them or remove the dependency array.",["7515"],["7516"],"React Hook useEffect has missing dependencies: 'fetchBox' and 'id'. Either include them or remove the dependency array.",["7517"],["7518"],["7519"],["7520"],"'params' is assigned a value but never used.",["7521"],["7522"],["7523"],"'Divider' is defined but never used.","'shops' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'fetchOrder'. Either include them or remove the dependency array.",["7524"],"React Hook useEffect has missing dependencies: 'fetchRestaurant' and 'uuid'. Either include them or remove the dependency array.",["7525"],["7526"],"React Hook useEffect has missing dependencies: 'activeMenu', 'data?.page', 'data?.status', and 'dispatch'. Either include them or remove the dependency array.",["7527"],"'goToShop' is assigned a value but never used.",["7528"],["7529"],["7530"],["7531"],["7532"],"'GlobalContainer' is defined but never used.",["7533"],["7534"],"React Hook useEffect has a missing dependency: 'fetchSettings'. Either include it or remove the dependency array.",["7535"],["7536"],["7537"],["7538"],["7539"],["7540"],["7541"],["7542"],"React Hook useEffect has a missing dependency: 'fetchTerms'. Either include it or remove the dependency array.",["7543"],["7544"],"React Hook useEffect has a missing dependency: 'fetchPolicy'. Either include it or remove the dependency array.",["7545"],["7546"],["7547"],["7548"],["7549"],["7550"],["7551"],["7552"],["7553"],["7554"],"'IMG_URL' is defined but never used.",["7555"],"React Hook useEffect has missing dependencies: 'getTag' and 'id'. Either include them or remove the dependency array.",["7556"],["7557"],["7558"],["7559"],["7560"],"React Hook useEffect has missing dependencies: 'fetchShop' and 'uuid'. Either include them or remove the dependency array.",["7561"],["7562"],"React Hook useEffect has a missing dependency: 'fetchShop'. Either include it or remove the dependency array.",["7563"],"React Hook useEffect has missing dependencies: 'fetchSmsPayload' and 'type'. Either include them or remove the dependency array.",["7564"],["7565"],"React Hook useMemo has missing dependencies: 'setIsModalVisible' and 't'. Either include them or remove the dependency array.",["7566"],"React Hook useEffect has a missing dependency: 'fetchTranslations'. Either include it or remove the dependency array.",["7567"],"React Hook useEffect has a missing dependency: 'fetchSubscriptionList'. Either include it or remove the dependency array.",["7568"],["7569"],["7570"],["7571"],["7572"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'id'. Either include them or remove the dependency array.",["7573"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["7574"],["7575"],["7576"],["7577"],["7578"],["7579"],["7580"],["7581"],["7582"],["7583"],["7584"],["7585"],["7586"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'isDemo'. Either include them or remove the dependency array.",["7587"],["7588"],["7589"],["7590"],"React Hook useEffect has missing dependencies: 'fetchUnit' and 'id'. Either include them or remove the dependency array.",["7591"],["7592"],["7593"],["7594"],["7595"],"React Hook useEffect has missing dependencies: 'fetchParcel' and 'id'. Either include them or remove the dependency array.",["7596"],["7597"],["7598"],"React Hook useEffect has missing dependencies: 'getLandingPage' and 'id'. Either include them or remove the dependency array.",["7599"],["7600"],["7601"],["7602"],"React Hook useEffect has a missing dependency: 'getOption'. Either include it or remove the dependency array.",["7603"],["7604"],["7605"],["7606"],"'status' is assigned a value but never used.",["7607"],["7608"],"'nFormatter' is defined but never used.",["7609"],["7610"],["7611"],["7612"],"'setSearch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chart_type' and 'handleChart'. Either include them or remove the dependency array.",["7613"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'fetchExtras', and 'fetchReport'. Either include them or remove the dependency array.",["7614"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'fetchProduct', and 'params'. Either include them or remove the dependency array.",["7615"],"React Hook useEffect has missing dependencies: 'chart', 'chart_type', and 'handleChart'. Either include them or remove the dependency array.",["7616"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'fetchReport'. Either include them or remove the dependency array.",["7617"],["7618"],"'Tag' is defined but never used.","React Hook useEffect has missing dependencies: 'chart', 'handleChart', and 'performance'. Either include them or remove the dependency array.",["7619"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'fetchReport', and 'fetchRevenue'. Either include them or remove the dependency array.",["7620"],"React Hook useEffect has missing dependencies: 'handleChart' and 'performance'. Either include them or remove the dependency array.",["7621"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'fetchProduct', and 'fetchReport'. Either include them or remove the dependency array.",["7622"],"React Hook useEffect has missing dependencies: 'fetchLook' and 'id'. Either include them or remove the dependency array.",["7623"],"'AddWarehouse' is defined but never used.","'id' is assigned a value but never used.","'active' is assigned a value but never used.",["7624"],["7625"],"'data' is assigned a value but never used.",["7626"],["7627"],["7628"],"'Reservation' is defined but never used.","'QrCode' is defined but never used.",["7629"],"'propertyGroups' is assigned a value but never used.",["7630"],["7631"],"'Badge' is defined but never used.","'Link' is defined but never used.",["7632"],["7633"],"'Compare' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'fetchCategories', 'fetchOverview', and 'fetchProducts'. Either include them or remove the dependency array.",["7634"],["7635"],"'goToEdit' is assigned a value but never used.",["7636"],["7637"],["7638"],["7639"],["7640"],["7641"],["7642"],["7643"],["7644"],"React Hook useEffect has missing dependencies: 'getBonus' and 'id'. Either include them or remove the dependency array.",["7645"],["7646"],["7647"],"'setSearchParams' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeMenu', 'country_id', and 'dispatch'. Either include them or remove the dependency array.",["7648"],["7649"],["7650"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'region_id'. Either include them or remove the dependency array.",["7651"],["7652"],"React Hook useEffect has missing dependencies: 'activeMenu', 'city_id', and 'dispatch'. Either include them or remove the dependency array.",["7653"],["7654"],["7655"],["7656"],["7657"],["7658"],["7659"],["7660"],["7661"],["7662"],["7663"],["7664"],["7665"],["7666"],["7667"],["7668"],["7669"],"React Hook useEffect has a missing dependency: 'fetchDiscount'. Either include it or remove the dependency array.",["7670"],["7671"],["7672"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["7673"],"React Hook useEffect has a missing dependency: 'getDays'. Either include it or remove the dependency array.",["7674"],["7675"],["7676"],["7677"],["7678"],"React Hook useEffect has missing dependencies: 'getBranch' and 'id'. Either include them or remove the dependency array.",["7679"],["7680"],"no-dupe-keys","Duplicate key 'images'.","ObjectExpression",["7681"],["7682"],["7683"],["7684"],["7685"],["7686"],["7687"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'form', 'params', 'state?.parentId', 'type', and 'user?.shop_id'. Either include them or remove the dependency array.",["7688"],["7689"],["7690"],"React Hook useEffect has missing dependencies: 'fetchProductRequest' and 'id'. Either include them or remove the dependency array.",["7691"],["7692"],["7693"],["7694"],["7695"],["7696"],"React Hook useEffect has missing dependencies: 'dispatch' and 'form'. Either include them or remove the dependency array.",["7697"],["7698"],["7699"],"React Hook useEffect has missing dependencies: 'dispatch', 'fetchOrder', and 'myShop.id'. Either include them or remove the dependency array.",["7700"],["7701"],["7702"],"'paymentList' is assigned a value but never used.",["7703"],"React Hook useEffect has missing dependencies: 'getPayment' and 'id'. Either include them or remove the dependency array.",["7704"],"'handleAddIcon' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["7705"],["7706"],["7707"],["7708"],["7709"],["7710"],"'languages' is assigned a value but never used.",["7711"],["7712"],["7713"],["7714"],["7715"],"React Hook useEffect has missing dependencies: 'getStory' and 'id'. Either include them or remove the dependency array.",["7716"],["7717"],"'DeleteOutlined' is defined but never used.",["7718"],"'setText' is assigned a value but never used.",["7719"],["7720"],["7721"],["7722"],"React Hook useEffect has missing dependencies: 'activeMenu', 'data?.status', 'dispatch', and 'orderType'. Either include them or remove the dependency array.",["7723"],["7724"],"'setLoadingBtn' is assigned a value but never used.",["7725"],["7726"],"'PlusOutlined' is defined but never used.","'SearchInput' is defined but never used.",["7727"],["7728"],["7729"],["7730"],["7731"],["7732"],["7733"],"'immutable' is assigned a value but never used.",["7734"],["7735"],"'rowSelection' is assigned a value but never used.","'fetchShopAdverts' is defined but never used.","'addMenu' is defined but never used.","'navigate' is assigned a value but never used.",["7736"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'shop.id'. Either include them or remove the dependency array.",["7737"],["7738"],["7739"],["7740"],["7741"],["7742"],"'totalPrice' is assigned a value but never used.","'setTotalPrice' is assigned a value but never used.",["7743"],"'handleSearch' is defined but never used.","'DeleteButton' is defined but never used.",["7744"],"'getUsers' is defined but never used.","'allDelete' is assigned a value but never used.","'goToAddOrder' is assigned a value but never used.","'DebounceSelect' is defined but never used.","'setSelectedShop' is assigned a value but never used.",["7745"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'fetchOrderChart', and 'fetchOrderList'. Either include them or remove the dependency array.",["7746"],"'fetchUserShopList' is defined but never used.",["7747"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'getProfile'. Either include them or remove the dependency array.",["7748"],"'useEffect' is defined but never used.",["7749"],"'LAT' is defined but never used.","'LNG' is defined but never used.",["7750"],["7751"],"'error' is assigned a value but never used.",["7752"],"React Hook useEffect has a missing dependency: 'fetchUnits'. Either include it or remove the dependency array.",["7753"],"React Hook useEffect has missing dependencies: 'activeMenu', 'activeTab', 'dispatch', and 'paramsData'. Either include them or remove the dependency array.",["7754"],["7755"],"React Hook useMemo has a missing dependency: 'handleChange'. Either include it or remove the dependency array. If 'handleChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["7756"],"React Hook useEffect has a missing dependency: 'defaultValue'. Either include it or remove the dependency array. If 'setSearchTerm' needs the current value of 'defaultValue', you can also switch to useReducer instead of useState and read 'defaultValue' in the reducer.",["7757"],"React Hook useEffect has a missing dependency: 'fetchQrCodeUrl'. Either include it or remove the dependency array.",["7758"],"'activeMenu' is assigned a value but never used.",["7759"],"'useParams' is defined but never used.",["7760"],["7761"],"React Hook useEffect has missing dependencies: 'activeMenu', 'currentBag', 'dispatch', and 'params'. Either include them or remove the dependency array.",["7762"],"React Hook useEffect has missing dependencies: 'data?.uuid' and 'dispatch'. Either include them or remove the dependency array.",["7763"],["7764"],"React Hook useEffect has missing dependencies: 'currencies', 'currency', 'currentBag', 'dispatch', and 'form'. Either include them or remove the dependency array.",["7765"],["7766"],"React Hook useEffect has a missing dependency: 'fetchWalletHistory'. Either include it or remove the dependency array.",["7767"],["7768"],"React Hook useEffect has missing dependencies: 'fetchDeliverySettings' and 'id'. Either include them or remove the dependency array.",["7769"],["7770"],"'google_map_key' is assigned a value but never used.","'InputNumber' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrderById'. Either include it or remove the dependency array.",["7771"],"React Hook useEffect has missing dependencies: 'statusList' and 't'. Either include them or remove the dependency array.",["7772"],"React Hook useEffect has missing dependencies: 'changeNote?.title' and 'form'. Either include them or remove the dependency array.",["7773"],["7774"],"'Card' is defined but never used.","'Store' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data.settingsId' and 'fetchDeliverySettings'. Either include them or remove the dependency array.",["7775"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', and 'uuid'. Either include them or remove the dependency array.",["7776"],"React Hook useEffect has missing dependencies: 'getPropduct' and 'uuid'. Either include them or remove the dependency array.",["7777"],"'fetchPropertyValueList' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'currentPage'. Either exclude it or remove the dependency array.",["7778"],["7779"],"'uuid' is assigned a value but never used.","'DeploymentUnitOutlined' is defined but never used.","'generateRandomNumbers' is defined but never used.","'randomNumbersLength' is assigned a value but never used.",["7780"],["7781"],"React Hook useEffect has missing dependencies: 'activeMenu.data.actualStocks', 'activeMenu.data?.delete_ids', 'activeMenu.data.extras', 'activeMenu.data.sku', 'activeMenu.data.stocks', 'activeMenu.data.tax', 'fetchProduct', 'form', and 'uuid'. Either include them or remove the dependency array.",["7782"],"React Hook useEffect has a missing dependency: 'setInitialState'. Either include it or remove the dependency array.",["7783"],"React Hook useEffect has a missing dependency: 'fetchProduct'. Either include it or remove the dependency array.",["7784"],["7785"],"'getCurrentShop' is defined but never used.","'setDeliveryPrice' is assigned a value but never used.",["7786"],["7787"],["7788"],"React Hook useEffect has a missing dependency: 'fetchExtraGroup'. Either include it or remove the dependency array.",["7789"],"React Hook useEffect has a missing dependency: 'fetchExtraValue'. Either include it or remove the dependency array.",["7790"],"React Hook useEffect has missing dependencies: 'activeMenu?.data' and 'showUserData'. Either include them or remove the dependency array.",["7791"],["7792"],"React Hook useEffect has missing dependencies: 'form', 'getDays', and 'uuid'. Either include them or remove the dependency array.",["7793"],["7794"],["7795"],"'Space' is defined but never used.",["7796"],"'Col' is defined but never used.","'Input' is defined but never used.","'Row' is defined but never used.","React Hook useEffect has missing dependencies: 'activeMenu?.data.seller' and 'showUserData'. Either include them or remove the dependency array.",["7797"],["7798"],"'setSocialMediaOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchShop', 'fetchShopSocial', and 'shop'. Either include them or remove the dependency array.",["7799"],"React Hook useEffect has missing dependencies: 'dispatch' and 'params'. Either include them or remove the dependency array.",["7800"],"React Hook useEffect has a missing dependency: 'fetchPayment'. Either include it or remove the dependency array.",["7801"],"React Hook useEffect has a missing dependency: 'fetchTopProducts'. Either include it or remove the dependency array.",["7802"],["7803"],"React Hook useEffect has a missing dependency: 'fetchRefunds'. Either include it or remove the dependency array.",["7804"],["7805"],"'comment' is assigned a value but never used.","React Hook useMemo has a missing dependency: 't'. Either include it or remove the dependency array.",["7806"],"React Hook useEffect has a missing dependency: 'getAd'. Either include it or remove the dependency array.",["7807"],"React Hook useEffect has a missing dependency: 'getShopAds'. Either include it or remove the dependency array.",["7808"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'getShopAds', and 'id'. Either include them or remove the dependency array.",["7809"],"React Hook useEffect has a missing dependency: 'setLegendOffset'. Either include it or remove the dependency array.",["7810"],["7811"],["7812"],"'current' is assigned a value but never used.","'setModalNoteType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'fetchOrderAllItem'. Either include them or remove the dependency array. If 'fetchOrderAllItem' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["7813"],["7814"],"React Hook useEffect has missing dependencies: 'getDeliveryPrice' and 'id'. Either include them or remove the dependency array.",["7815"],"React Hook useEffect has a missing dependency: 'getDeliveryPoint'. Either include it or remove the dependency array.",["7816"],"React Hook useMemo has missing dependencies: 'reportData.charts' and 't'. Either include them or remove the dependency array.",["7817"],"React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array.",["7818"],"'getFullDate' is defined but never used.",["7819"],"'getFullDateTime' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchParcelDetails'. Either include it or remove the dependency array.",["7820"],["7821"],"'fetchWarehouses' is defined but never used.",["7822"],["7823"],["7824"],["7825"],"'Radio' is defined but never used.",["7826"],["7827"],["7828"],["7829"],["7830"],"React Hook useEffect has a missing dependency: 'fetchGroup'. Either include it or remove the dependency array.",["7831"],"React Hook useEffect has a missing dependency: 'fetchPropertyValue'. Either include it or remove the dependency array.",["7832"],["7833"],["7834"],["7835"],["7836"],["7837"],"React Hook useEffect has missing dependencies: 'form', 'getDays', and 'shop.uuid'. Either include them or remove the dependency array.",["7838"],"React Hook useEffect has missing dependencies: 'form' and 'getLanguageFields'. Either include them or remove the dependency array.",["7839"],["7840"],["7841"],"'getInitialTimes' is assigned a value but never used.",["7842"],"'name' is assigned a value but never used.","'phone' is assigned a value but never used.","'description' is assigned a value but never used.",["7843"],["7844"],["7845"],"React Hook useEffect has missing dependencies: 'dispatch' and 'paramsData'. Either include them or remove the dependency array.",["7846"],["7847"],["7848"],["7849"],"React Hook useEffect has a missing dependency: 'currentLocation'. Either include it or remove the dependency array.",["7850"],["7851"],["7852"],["7853"],"'CopyOutlined' is defined but never used.","'useDidUpdate' is defined but never used.",["7854"],"React Hook useEffect has missing dependencies: 'activeMenu', 'dispatch', 'location?.pathname', and 'paramsData'. Either include them or remove the dependency array.",["7855"],"React Hook useCallback has a missing dependency: 'getLanguageFields'. Either include it or remove the dependency array.",["7856"],["7857"],"'fetchAddons' is assigned a value but never used.",["7858"],["7859"],["7860"],["7861"],["7862"],["7863"],"'setBrand' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'myShop?.id'. Either include them or remove the dependency array.",["7864"],"'Empty' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrderDetails'. Either include it or remove the dependency array.",["7865"],"'deliverymans' is assigned a value but never used.",["7866"],["7867"],["7868"],["7869"],["7870"],["7871"],["7872"],"React Hook useEffect has missing dependencies: 'dispatch' and 'fetchExtraGroup'. Either include them or remove the dependency array.",["7873"],["7874"],["7875"],"'handleValidation' is defined but never used.",["7876"],["7877"],"React Hook useEffect has missing dependencies: 'form' and 'orderData.deliveries'. Either include them or remove the dependency array.",["7878"],["7879"],["7880"],["7881"],"React Hook useEffect has a missing dependency: 'fetchValue'. Either include it or remove the dependency array.",["7882"],"React Hook useEffect has missing dependencies: 'dispatch', 'fetchSellerPaymentList', and 'payments.length'. Either include them or remove the dependency array.",["7883"],["7884"],"'checkIsEmpty' is assigned a value but never used.",["7885"],"'toast' is defined but never used.",["7886"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'currentChatId' and 'replyDocId'. Either include them or remove the dependency array.",["7887"],["7888"],["7889"],["7890"],"React Hook useEffect has a missing dependency: 'extrasIds'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentStock' needs the current value of 'extrasIds'.",["7891"],["7892"],"React Hook useEffect has missing dependencies: 'extrasIds', 'extrasModal?.addons', and 'extrasModal.quantity'. Either include them or remove the dependency array. If 'setSelectedValues' needs the current value of 'extrasModal.addons', you can also switch to useReducer instead of useState and read 'extrasModal.addons' in the reducer.",["7893"],["7894"],["7895"],"React Hook useMemo has missing dependencies: 'debounceTimeout' and 'fetchOptions'. Either include them or remove the dependency array. If 'fetchOptions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["7896"],"React Hook useEffect has a missing dependency: 'extra?.values'. Either include it or remove the dependency array. If 'setSelectedValues' needs the current value of 'extra.values', you can also switch to useReducer instead of useState and read 'extra.values' in the reducer.",["7897"],"React Hook useEffect has a missing dependency: 'extrasIds'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setShowExtras' needs the current value of 'extrasIds'.",["7898"],["7899"],"'ref' is assigned a value but never used.","'CheckOutlined' is defined but never used.","'addOrderCoupon' is defined but never used.","'coupon' is assigned a value but never used.","'setCouponName' is assigned a value but never used.","'loadingCoupon' is assigned a value but never used.","'handleCheckCoupon' is defined but never used.","'Checkbox' is defined but never used.",["7900"],"'handleChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'extrasModal?.addons' and 'extrasModal.quantity'. Either include them or remove the dependency array. If 'setSelectedValues' needs the current value of 'extrasModal.addons', you can also switch to useReducer instead of useState and read 'extrasModal.addons' in the reducer.",["7901"],"'Option' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeMenu', 'current_zone?.id', 'dispatch', and 'params'. Either include them or remove the dependency array.",["7902"],"'addons' is assigned a value but never used.",["7903"],["7904"],["7905"],["7906"],"'Spin' is defined but never used.",["7907"],["7908"],["7909"],["7910"],"Expected '!==' and instead saw '!='.","'CarOutlined' is defined but never used.","'BorderlessTableOutlined' is defined but never used.",["7911"],["7912"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'extra'.","unsafeRefs","no-redeclare","'i' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'dispatch', 'fetchBookingClosedDays', and 'fetchBookingWorkingDays'. Either include them or remove the dependency array.",["7913"],"React Hook useEffect has a missing dependency: 'CheckSelectDate'. Either include it or remove the dependency array.",["7914"],"React Hook useEffect has missing dependencies: 'form' and 'parentFormValues.address.address'. Either include them or remove the dependency array.",["7915"],"'useDispatch' is defined but never used.","'getCartData' is defined but never used.",["7916"],{"desc":"7917","fix":"7918"},{"desc":"7917","fix":"7919"},{"desc":"7920","fix":"7921"},{"desc":"7922","fix":"7923"},{"desc":"7924","fix":"7925"},{"desc":"7926","fix":"7927"},{"desc":"7928","fix":"7929"},{"desc":"7930","fix":"7931"},{"desc":"7932","fix":"7933"},{"desc":"7934","fix":"7935"},{"desc":"7936","fix":"7937"},{"desc":"7938","fix":"7939"},{"desc":"7938","fix":"7940"},{"desc":"7941","fix":"7942"},{"desc":"7943","fix":"7944"},{"desc":"7941","fix":"7945"},{"desc":"7941","fix":"7946"},{"desc":"7943","fix":"7947"},{"desc":"7941","fix":"7948"},{"desc":"7949","fix":"7950"},{"desc":"7941","fix":"7951"},{"desc":"7941","fix":"7952"},{"desc":"7949","fix":"7953"},{"desc":"7941","fix":"7954"},{"desc":"7955","fix":"7956"},{"desc":"7941","fix":"7957"},{"desc":"7955","fix":"7958"},{"desc":"7941","fix":"7959"},{"desc":"7941","fix":"7960"},{"desc":"7961","fix":"7962"},{"desc":"7941","fix":"7963"},{"desc":"7961","fix":"7964"},{"desc":"7941","fix":"7965"},{"desc":"7966","fix":"7967"},{"desc":"7941","fix":"7968"},{"desc":"7941","fix":"7969"},{"desc":"7966","fix":"7970"},{"desc":"7941","fix":"7971"},{"desc":"7941","fix":"7972"},{"desc":"7955","fix":"7973"},{"desc":"7941","fix":"7974"},{"desc":"7966","fix":"7975"},{"desc":"7955","fix":"7976"},{"desc":"7977","fix":"7978"},{"desc":"7979","fix":"7980"},{"desc":"7941","fix":"7981"},{"desc":"7982","fix":"7983"},{"messageId":"7984","fix":"7985","desc":"7986"},{"messageId":"7987","fix":"7988","desc":"7989"},{"desc":"7990","fix":"7991"},{"desc":"7941","fix":"7992"},{"desc":"7993","fix":"7994"},{"desc":"7995","fix":"7996"},{"desc":"7941","fix":"7997"},{"desc":"7998","fix":"7999"},{"desc":"8000","fix":"8001"},{"desc":"8002","fix":"8003"},{"desc":"8004","fix":"8005"},{"desc":"7998","fix":"8006"},{"desc":"7998","fix":"8007"},{"desc":"7998","fix":"8008"},{"desc":"8000","fix":"8009"},{"desc":"8010","fix":"8011"},{"desc":"8000","fix":"8012"},{"desc":"7998","fix":"8013"},{"desc":"8014","fix":"8015"},{"desc":"8016","fix":"8017"},{"desc":"7998","fix":"8018"},{"desc":"7998","fix":"8019"},{"desc":"7998","fix":"8020"},{"desc":"7998","fix":"8021"},{"desc":"7998","fix":"8022"},{"desc":"8023","fix":"8024"},{"desc":"8000","fix":"8025"},{"desc":"7998","fix":"8026"},{"desc":"8002","fix":"8027"},{"desc":"7924","fix":"8028"},{"desc":"8002","fix":"8029"},{"desc":"8030","fix":"8031"},{"kind":"8032","justification":"8033"},{"desc":"7941","fix":"8034"},{"kind":"8032","justification":"8033"},{"desc":"8035","fix":"8036"},{"desc":"8037","fix":"8038"},{"desc":"7998","fix":"8039"},{"desc":"7941","fix":"8040"},{"desc":"8041","fix":"8042"},{"desc":"8043","fix":"8044"},{"desc":"7941","fix":"8045"},{"desc":"8046","fix":"8047"},{"desc":"7938","fix":"8048"},{"desc":"7938","fix":"8049"},{"desc":"7941","fix":"8050"},{"desc":"8051","fix":"8052"},{"desc":"7941","fix":"8053"},{"desc":"8054","fix":"8055"},{"desc":"7941","fix":"8056"},{"desc":"8057","fix":"8058"},{"desc":"7941","fix":"8059"},{"desc":"8060","fix":"8061"},{"desc":"7941","fix":"8062"},{"desc":"7941","fix":"8063"},{"desc":"8064","fix":"8065"},{"desc":"7941","fix":"8066"},{"desc":"8064","fix":"8067"},{"desc":"7941","fix":"8068"},{"desc":"7998","fix":"8069"},{"desc":"7998","fix":"8070"},{"desc":"8071","fix":"8072"},{"desc":"7995","fix":"8073"},{"desc":"8074","fix":"8075"},{"desc":"8076","fix":"8077"},{"desc":"8074","fix":"8078"},{"desc":"8076","fix":"8079"},{"desc":"8002","fix":"8080"},{"kind":"8032","justification":"8033"},{"desc":"8081","fix":"8082"},{"desc":"7924","fix":"8083"},{"desc":"8002","fix":"8084"},{"desc":"7924","fix":"8085"},{"desc":"7941","fix":"8086"},{"desc":"7943","fix":"8087"},{"desc":"7941","fix":"8088"},{"desc":"7941","fix":"8089"},{"desc":"8090","fix":"8091"},{"desc":"7941","fix":"8092"},{"desc":"8093","fix":"8094"},{"desc":"7941","fix":"8095"},{"desc":"7941","fix":"8096"},{"desc":"7955","fix":"8097"},{"desc":"7941","fix":"8098"},{"desc":"7955","fix":"8099"},{"desc":"7941","fix":"8100"},{"desc":"8101","fix":"8102"},{"desc":"8103","fix":"8104"},{"desc":"8103","fix":"8105"},{"desc":"8106","fix":"8107"},{"desc":"8000","fix":"8108"},{"desc":"7998","fix":"8109"},{"desc":"8000","fix":"8110"},{"desc":"8000","fix":"8111"},{"desc":"8000","fix":"8112"},{"desc":"8000","fix":"8113"},{"desc":"7941","fix":"8114"},{"desc":"8115","fix":"8116"},{"desc":"7941","fix":"8117"},{"desc":"8115","fix":"8118"},{"desc":"7941","fix":"8119"},{"desc":"8115","fix":"8120"},{"desc":"7941","fix":"8121"},{"desc":"8115","fix":"8122"},{"desc":"7941","fix":"8123"},{"desc":"8124","fix":"8125"},{"desc":"7941","fix":"8126"},{"desc":"8127","fix":"8128"},{"desc":"8000","fix":"8129"},{"desc":"7998","fix":"8130"},{"desc":"8000","fix":"8131"},{"desc":"8000","fix":"8132"},{"desc":"7998","fix":"8133"},{"desc":"8000","fix":"8134"},{"desc":"7998","fix":"8135"},{"desc":"7998","fix":"8136"},{"desc":"7998","fix":"8137"},{"desc":"7941","fix":"8138"},{"desc":"8139","fix":"8140"},{"desc":"7941","fix":"8141"},{"desc":"7941","fix":"8142"},{"desc":"7943","fix":"8143"},{"desc":"8000","fix":"8144"},{"desc":"8145","fix":"8146"},{"desc":"8000","fix":"8147"},{"desc":"8145","fix":"8148"},{"desc":"8149","fix":"8150"},{"kind":"8032","justification":"8033"},{"desc":"8151","fix":"8152"},{"desc":"8153","fix":"8154"},{"desc":"8155","fix":"8156"},{"desc":"8030","fix":"8157"},{"kind":"8032","justification":"8033"},{"desc":"8004","fix":"8158"},{"kind":"8032","justification":"8033"},{"desc":"8159","fix":"8160"},{"desc":"8161","fix":"8162"},{"kind":"8032","justification":"8033"},{"desc":"7941","fix":"8163"},{"kind":"8032","justification":"8033"},{"kind":"8032","justification":"8033"},{"kind":"8032","justification":"8033"},{"kind":"8032","justification":"8033"},{"kind":"8032","justification":"8033"},{"kind":"8032","justification":"8033"},{"desc":"7998","fix":"8164"},{"kind":"8032","justification":"8033"},{"desc":"7998","fix":"8165"},{"kind":"8032","justification":"8033"},{"desc":"8166","fix":"8167"},{"desc":"7998","fix":"8168"},{"desc":"7998","fix":"8169"},{"desc":"7941","fix":"8170"},{"desc":"8171","fix":"8172"},{"desc":"7941","fix":"8173"},{"desc":"8000","fix":"8174"},{"kind":"8032","justification":"8033"},{"desc":"7941","fix":"8175"},{"desc":"8176","fix":"8177"},{"desc":"7941","fix":"8178"},{"desc":"7941","fix":"8179"},{"desc":"8180","fix":"8181"},{"desc":"8000","fix":"8182"},{"desc":"7941","fix":"8183"},{"desc":"8000","fix":"8184"},{"desc":"8185","fix":"8186"},{"desc":"7941","fix":"8187"},{"desc":"8176","fix":"8188"},{"desc":"8189","fix":"8190"},{"desc":"8002","fix":"8191"},{"desc":"8192","fix":"8193"},{"desc":"8002","fix":"8194"},{"desc":"8192","fix":"8195"},{"desc":"8000","fix":"8196"},{"desc":"7941","fix":"8197"},{"desc":"8198","fix":"8199"},{"desc":"8200","fix":"8201"},{"desc":"8202","fix":"8203"},{"desc":"8204","fix":"8205"},{"desc":"8206","fix":"8207"},{"desc":"8000","fix":"8208"},{"desc":"8209","fix":"8210"},{"desc":"8211","fix":"8212"},{"desc":"8213","fix":"8214"},{"desc":"8215","fix":"8216"},{"desc":"8217","fix":"8218"},{"desc":"8000","fix":"8219"},{"desc":"7998","fix":"8220"},{"desc":"8002","fix":"8221"},{"desc":"8002","fix":"8222"},{"desc":"7924","fix":"8223"},{"desc":"8115","fix":"8224"},{"desc":"8000","fix":"8225"},{"desc":"7998","fix":"8226"},{"desc":"8198","fix":"8227"},{"desc":"8215","fix":"8228"},{"desc":"8229","fix":"8230"},{"desc":"7998","fix":"8231"},{"desc":"7998","fix":"8232"},{"desc":"7998","fix":"8233"},{"desc":"7998","fix":"8234"},{"desc":"7938","fix":"8235"},{"desc":"7938","fix":"8236"},{"desc":"8101","fix":"8237"},{"desc":"8000","fix":"8238"},{"desc":"8239","fix":"8240"},{"desc":"7941","fix":"8241"},{"desc":"8242","fix":"8243"},{"desc":"7941","fix":"8244"},{"desc":"7998","fix":"8245"},{"desc":"8246","fix":"8247"},{"desc":"8000","fix":"8248"},{"desc":"8000","fix":"8249"},{"desc":"8250","fix":"8251"},{"desc":"8242","fix":"8252"},{"desc":"8253","fix":"8254"},{"desc":"7941","fix":"8255"},{"desc":"7941","fix":"8256"},{"desc":"8093","fix":"8257"},{"desc":"7941","fix":"8258"},{"desc":"8093","fix":"8259"},{"desc":"8000","fix":"8260"},{"desc":"8000","fix":"8261"},{"desc":"8000","fix":"8262"},{"desc":"8000","fix":"8263"},{"desc":"8264","fix":"8265"},{"desc":"8000","fix":"8266"},{"desc":"7998","fix":"8267"},{"desc":"8000","fix":"8268"},{"desc":"8189","fix":"8269"},{"desc":"7998","fix":"8270"},{"desc":"7941","fix":"8271"},{"desc":"8272","fix":"8273"},{"desc":"8000","fix":"8274"},{"desc":"7941","fix":"8275"},{"desc":"8276","fix":"8277"},{"desc":"8278","fix":"8279"},{"desc":"8276","fix":"8280"},{"desc":"7941","fix":"8281"},{"desc":"8093","fix":"8282"},{"desc":"7941","fix":"8283"},{"desc":"8284","fix":"8285"},{"desc":"7941","fix":"8286"},{"desc":"7941","fix":"8287"},{"desc":"7941","fix":"8288"},{"desc":"7961","fix":"8289"},{"desc":"7941","fix":"8290"},{"desc":"7941","fix":"8291"},{"desc":"7966","fix":"8292"},{"desc":"7955","fix":"8293"},{"desc":"8294","fix":"8295"},{"desc":"7979","fix":"8296"},{"desc":"7941","fix":"8297"},{"desc":"8046","fix":"8298"},{"desc":"8192","fix":"8299"},{"desc":"7938","fix":"8300"},{"desc":"8192","fix":"8301"},{"desc":"7938","fix":"8302"},{"desc":"8071","fix":"8303"},{"desc":"8304","fix":"8305"},{"desc":"7995","fix":"8306"},{"desc":"8074","fix":"8307"},{"desc":"8308","fix":"8309"},{"desc":"8002","fix":"8310"},{"desc":"7998","fix":"8311"},{"desc":"7941","fix":"8312"},{"desc":"8313","fix":"8314"},{"desc":"7941","fix":"8315"},{"desc":"7955","fix":"8316"},{"desc":"7941","fix":"8317"},{"desc":"7955","fix":"8318"},{"desc":"7941","fix":"8319"},{"desc":"8000","fix":"8320"},{"desc":"7941","fix":"8321"},{"desc":"8093","fix":"8322"},{"desc":"7941","fix":"8323"},{"desc":"8000","fix":"8324"},{"desc":"7941","fix":"8325"},{"desc":"8326","fix":"8327"},{"desc":"7941","fix":"8328"},{"desc":"7998","fix":"8329"},{"desc":"8000","fix":"8330"},{"desc":"8000","fix":"8331"},{"desc":"7998","fix":"8332"},{"desc":"7998","fix":"8333"},{"desc":"8334","fix":"8335"},{"desc":"8002","fix":"8336"},{"desc":"7990","fix":"8337"},{"desc":"7998","fix":"8338"},{"desc":"7998","fix":"8339"},{"desc":"8000","fix":"8340"},{"desc":"8217","fix":"8341"},{"desc":"7998","fix":"8342"},{"desc":"8000","fix":"8343"},{"desc":"7998","fix":"8344"},{"desc":"7941","fix":"8345"},{"desc":"7998","fix":"8346"},{"desc":"7998","fix":"8347"},{"desc":"7998","fix":"8348"},{"desc":"8349","fix":"8350"},{"desc":"7998","fix":"8351"},{"desc":"7998","fix":"8352"},{"desc":"8304","fix":"8353"},{"desc":"7995","fix":"8354"},{"desc":"7998","fix":"8355"},{"desc":"7995","fix":"8356"},{"desc":"8002","fix":"8357"},{"desc":"8213","fix":"8358"},{"desc":"8359","fix":"8360"},{"desc":"8002","fix":"8361"},{"desc":"8362","fix":"8363"},{"desc":"7934","fix":"8364"},{"desc":"7941","fix":"8365"},{"desc":"8366","fix":"8367"},{"desc":"7941","fix":"8368"},{"desc":"8369","fix":"8370"},{"desc":"8371","fix":"8372"},{"desc":"8276","fix":"8373"},{"desc":"8374","fix":"8375"},{"desc":"8376","fix":"8377"},{"desc":"8378","fix":"8379"},{"desc":"8380","fix":"8381"},{"desc":"8382","fix":"8383"},{"desc":"8371","fix":"8384"},{"desc":"8385","fix":"8386"},{"desc":"8387","fix":"8388"},{"kind":"8032","justification":"8033"},{"desc":"8389","fix":"8390"},{"desc":"8391","fix":"8392"},{"desc":"8393","fix":"8394"},{"kind":"8032","justification":"8033"},{"desc":"8395","fix":"8396"},{"kind":"8032","justification":"8033"},{"desc":"8397","fix":"8398"},{"desc":"8399","fix":"8400"},{"desc":"8401","fix":"8402"},{"desc":"8264","fix":"8403"},{"desc":"8404","fix":"8405"},{"desc":"8406","fix":"8407"},{"desc":"8408","fix":"8409"},{"desc":"8410","fix":"8411"},{"desc":"8412","fix":"8413"},{"desc":"7941","fix":"8414"},{"desc":"7941","fix":"8415"},{"desc":"8416","fix":"8417"},{"desc":"8418","fix":"8419"},{"desc":"8420","fix":"8421"},{"desc":"8422","fix":"8423"},{"desc":"8424","fix":"8425"},{"desc":"8426","fix":"8427"},{"desc":"8428","fix":"8429"},{"desc":"8430","fix":"8431"},{"desc":"8432","fix":"8433"},{"desc":"8434","fix":"8435"},{"desc":"7941","fix":"8436"},{"desc":"8437","fix":"8438"},{"desc":"7998","fix":"8439"},{"desc":"7998","fix":"8440"},{"desc":"7941","fix":"8441"},{"desc":"8442","fix":"8443"},{"desc":"8437","fix":"8444"},{"desc":"8445","fix":"8446"},{"desc":"8447","fix":"8448"},{"desc":"8449","fix":"8450"},{"desc":"8451","fix":"8452"},{"kind":"8032","justification":"8033"},{"desc":"8453","fix":"8454"},{"kind":"8032","justification":"8033"},{"desc":"8455","fix":"8456"},{"desc":"8457","fix":"8458"},{"desc":"8459","fix":"8460"},{"desc":"8461","fix":"8462"},{"desc":"8463","fix":"8464"},{"kind":"8032","justification":"8033"},{"desc":"8437","fix":"8465"},{"desc":"8466","fix":"8467"},{"desc":"7941","fix":"8468"},{"desc":"8469","fix":"8470"},{"desc":"8471","fix":"8472"},{"desc":"8473","fix":"8474"},{"desc":"8475","fix":"8476"},{"desc":"8264","fix":"8477"},{"desc":"8478","fix":"8479"},{"desc":"8480","fix":"8481"},{"desc":"8437","fix":"8482"},{"desc":"7941","fix":"8483"},{"desc":"7941","fix":"8484"},{"kind":"8032","justification":"8033"},{"desc":"7941","fix":"8485"},{"kind":"8032","justification":"8033"},{"desc":"7941","fix":"8486"},{"kind":"8032","justification":"8033"},{"desc":"8487","fix":"8488"},{"desc":"8489","fix":"8490"},{"desc":"8491","fix":"8492"},{"desc":"8447","fix":"8493"},{"desc":"7941","fix":"8494"},{"desc":"7941","fix":"8495"},{"desc":"8366","fix":"8496"},{"desc":"7941","fix":"8497"},{"desc":"8498","fix":"8499"},{"desc":"8500","fix":"8501"},{"desc":"8500","fix":"8502"},{"desc":"8500","fix":"8503"},{"desc":"7941","fix":"8504"},{"desc":"8500","fix":"8505"},{"desc":"8506","fix":"8507"},{"desc":"8508","fix":"8509"},{"desc":"8510","fix":"8511"},{"desc":"8389","fix":"8512"},{"desc":"8391","fix":"8513"},{"desc":"7924","fix":"8514"},{"desc":"8515","fix":"8516"},{"desc":"8276","fix":"8517"},{"desc":"8406","fix":"8518"},{"desc":"8408","fix":"8519"},{"desc":"8371","fix":"8520"},{"desc":"8521","fix":"8522"},{"desc":"8523","fix":"8524"},{"desc":"8412","fix":"8525"},{"desc":"8416","fix":"8526"},{"desc":"8418","fix":"8527"},{"desc":"7941","fix":"8528"},{"desc":"8420","fix":"8529"},{"desc":"7998","fix":"8530"},{"desc":"7998","fix":"8531"},{"desc":"8532","fix":"8533"},{"desc":"8534","fix":"8535"},{"desc":"7924","fix":"8536"},{"desc":"8397","fix":"8537"},{"desc":"8399","fix":"8538"},{"desc":"8401","fix":"8539"},{"desc":"8264","fix":"8540"},{"desc":"8371","fix":"8541"},{"desc":"8428","fix":"8542"},{"desc":"8543","fix":"8544"},{"desc":"8432","fix":"8545"},{"desc":"8487","fix":"8546"},{"desc":"7941","fix":"8547"},{"desc":"8469","fix":"8548"},{"desc":"8549","fix":"8550"},{"desc":"8534","fix":"8551"},{"desc":"8264","fix":"8552"},{"desc":"8489","fix":"8553"},{"desc":"8554","fix":"8555"},{"desc":"8556","fix":"8557"},{"desc":"8558","fix":"8559"},{"desc":"8558","fix":"8560"},{"desc":"7924","fix":"8561"},{"desc":"8562","fix":"8563"},{"desc":"8562","fix":"8564"},{"desc":"8565","fix":"8566"},{"desc":"8567","fix":"8568"},{"desc":"8569","fix":"8570"},{"kind":"8032","justification":"8033"},{"desc":"8571","fix":"8572"},{"kind":"8032","justification":"8033"},{"desc":"8573","fix":"8574"},{"desc":"8575","fix":"8576"},{"desc":"8577","fix":"8578"},{"desc":"8579","fix":"8580"},{"desc":"8569","fix":"8581"},{"desc":"8569","fix":"8582"},{"desc":"8583","fix":"8584"},{"desc":"8585","fix":"8586"},{"desc":"8569","fix":"8587"},{"kind":"8032","justification":"8033"},{"desc":"8571","fix":"8588"},{"kind":"8032","justification":"8033"},{"desc":"8577","fix":"8589"},{"desc":"8579","fix":"8590"},{"desc":"8569","fix":"8591"},{"desc":"8569","fix":"8592"},{"desc":"8569","fix":"8593"},{"desc":"8054","fix":"8594"},{"desc":"8595","fix":"8596"},{"desc":"8597","fix":"8598"},{"desc":"8599","fix":"8600"},{"desc":"8599","fix":"8601"},"Update the dependencies array to be: [navigate]",{"range":"8602","text":"8603"},{"range":"8604","text":"8603"},"Update the dependencies array to be: [dispatch, fetchLanguages, languages.length, user?.role]",{"range":"8605","text":"8606"},"Update the dependencies array to be: [dispatch, user]",{"range":"8607","text":"8608"},"Update the dependencies array to be: [dispatch]",{"range":"8609","text":"8610"},"Update the dependencies array to be: [menu.activeMenu.url, pathname]",{"range":"8611","text":"8612"},"Update the dependencies array to be: [filterUserRoutes, user.urls]",{"range":"8613","text":"8614"},"Update the dependencies array to be: [checkAccess]",{"range":"8615","text":"8616"},"Update the dependencies array to be: [prevailOnUnmount]",{"range":"8617","text":"8618"},"Update the dependencies array to be: [fetchLanguages]",{"range":"8619","text":"8620"},"Update the dependencies array to be: [f]",{"range":"8621","text":"8622"},"Update the dependencies array to be: [activeMenu.refetch, fetchProduct, uuid]",{"range":"8623","text":"8624"},{"range":"8625","text":"8624"},"Update the dependencies array to be: [activeMenu, dispatch, form]",{"range":"8626","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getBanner, id]",{"range":"8628","text":"8629"},{"range":"8630","text":"8627"},{"range":"8631","text":"8627"},{"range":"8632","text":"8629"},{"range":"8633","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchBlog, uuid]",{"range":"8634","text":"8635"},{"range":"8636","text":"8627"},{"range":"8637","text":"8627"},{"range":"8638","text":"8635"},{"range":"8639","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getCategory, uuid]",{"range":"8640","text":"8641"},{"range":"8642","text":"8627"},{"range":"8643","text":"8641"},{"range":"8644","text":"8627"},{"range":"8645","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchBrand, id]",{"range":"8646","text":"8647"},{"range":"8648","text":"8627"},{"range":"8649","text":"8647"},{"range":"8650","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getCategory, id]",{"range":"8651","text":"8652"},{"range":"8653","text":"8627"},{"range":"8654","text":"8627"},{"range":"8655","text":"8652"},{"range":"8656","text":"8627"},{"range":"8657","text":"8627"},{"range":"8658","text":"8641"},{"range":"8659","text":"8627"},{"range":"8660","text":"8652"},{"range":"8661","text":"8641"},"Update the dependencies array to be: [activeMenu, dispatch, form, params, state?.parentId, type]",{"range":"8662","text":"8663"},"Update the dependencies array to be: [activeMenu.refetch, uuid, state.parentId, getCategory]",{"range":"8664","text":"8665"},{"range":"8666","text":"8627"},"Update the dependencies array to be: [authUserId, chatInitialized, currentUserId, dispatch]",{"range":"8667","text":"8668"},"removeEscape",{"range":"8669","text":"8033"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"8670","text":"8671"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [activeMenu.refetch, getCoupon, id]",{"range":"8672","text":"8673"},{"range":"8674","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getEmailProvider, id]",{"range":"8675","text":"8676"},"Update the dependencies array to be: [activeMenu.refetch, fetchOrder]",{"range":"8677","text":"8678"},{"range":"8679","text":"8627"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, paramsData]",{"range":"8680","text":"8681"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch]",{"range":"8682","text":"8683"},"Update the dependencies array to be: [activeMenu, activeMenu?.refetch, dispatch, paramsData]",{"range":"8684","text":"8685"},"Update the dependencies array to be: [activeMenu, activeMenu?.refetch, dispatch]",{"range":"8686","text":"8687"},{"range":"8688","text":"8681"},{"range":"8689","text":"8681"},{"range":"8690","text":"8681"},{"range":"8691","text":"8683"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, params]",{"range":"8692","text":"8693"},{"range":"8694","text":"8683"},{"range":"8695","text":"8681"},"Update the dependencies array to be: [activeMenu, dispatch, fetchOrder]",{"range":"8696","text":"8697"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchOrder]",{"range":"8698","text":"8699"},{"range":"8700","text":"8681"},{"range":"8701","text":"8681"},{"range":"8702","text":"8681"},{"range":"8703","text":"8681"},{"range":"8704","text":"8681"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, getDashboardsByRole]",{"range":"8705","text":"8706"},{"range":"8707","text":"8683"},{"range":"8708","text":"8681"},{"range":"8709","text":"8685"},{"range":"8710","text":"8610"},{"range":"8711","text":"8685"},"Update the dependencies array to be: [activeMenu?.refetch, showUserData, uuid]",{"range":"8712","text":"8713"},"directive","",{"range":"8714","text":"8627"},"Update the dependencies array to be: [activeMenu, activeMenu?.refetch, data?.page, data?.status, deliverymanId, dispatch]",{"range":"8715","text":"8716"},"Update the dependencies array to be: [active, activeMenu, activeMenu?.refetch, dispatch, paramsData]",{"range":"8717","text":"8718"},{"range":"8719","text":"8681"},{"range":"8720","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchCurrency, id]",{"range":"8721","text":"8722"},"Update the dependencies array to be: [fetchProductRequest, id]",{"range":"8723","text":"8724"},{"range":"8725","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchProductRequest, id]",{"range":"8726","text":"8727"},{"range":"8728","text":"8624"},{"range":"8729","text":"8624"},{"range":"8730","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchFaq, uuid]",{"range":"8731","text":"8732"},{"range":"8733","text":"8627"},"Update the dependencies array to be: [fetchGallery, page, pageSize]",{"range":"8734","text":"8735"},{"range":"8736","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchLanguage, id]",{"range":"8737","text":"8738"},{"range":"8739","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchSubscriber, id]",{"range":"8740","text":"8741"},{"range":"8742","text":"8627"},{"range":"8743","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchNotification, uuid]",{"range":"8744","text":"8745"},{"range":"8746","text":"8627"},{"range":"8747","text":"8745"},{"range":"8748","text":"8627"},{"range":"8749","text":"8681"},{"range":"8750","text":"8681"},"Update the dependencies array to be: [fetchOrder, order_id]",{"range":"8751","text":"8752"},{"range":"8753","text":"8678"},"Update the dependencies array to be: [data?.id, fetchOrder, t]",{"range":"8754","text":"8755"},"Update the dependencies array to be: [activeMenu.refetch, dispatch, fetchOrder, statusList.length]",{"range":"8756","text":"8757"},{"range":"8758","text":"8755"},{"range":"8759","text":"8757"},{"range":"8760","text":"8685"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, pageType, paramsData]",{"range":"8761","text":"8762"},{"range":"8763","text":"8610"},{"range":"8764","text":"8685"},{"range":"8765","text":"8610"},{"range":"8766","text":"8627"},{"range":"8767","text":"8629"},{"range":"8768","text":"8627"},{"range":"8769","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getPayload, id]",{"range":"8770","text":"8771"},{"range":"8772","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchBox, id]",{"range":"8773","text":"8774"},{"range":"8775","text":"8627"},{"range":"8776","text":"8627"},{"range":"8777","text":"8641"},{"range":"8778","text":"8627"},{"range":"8779","text":"8641"},{"range":"8780","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, dispatch, fetchOrder]",{"range":"8781","text":"8782"},"Update the dependencies array to be: [activeMenu.refetch, fetchRestaurant, uuid]",{"range":"8783","text":"8784"},{"range":"8785","text":"8784"},"Update the dependencies array to be: [activeMenu, activeMenu?.refetch, data?.page, data?.status, dispatch]",{"range":"8786","text":"8787"},{"range":"8788","text":"8683"},{"range":"8789","text":"8681"},{"range":"8790","text":"8683"},{"range":"8791","text":"8683"},{"range":"8792","text":"8683"},{"range":"8793","text":"8683"},{"range":"8794","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchSettings]",{"range":"8795","text":"8796"},{"range":"8797","text":"8627"},{"range":"8798","text":"8796"},{"range":"8799","text":"8627"},{"range":"8800","text":"8796"},{"range":"8801","text":"8627"},{"range":"8802","text":"8796"},{"range":"8803","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchTerms]",{"range":"8804","text":"8805"},{"range":"8806","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchPolicy]",{"range":"8807","text":"8808"},{"range":"8809","text":"8683"},{"range":"8810","text":"8681"},{"range":"8811","text":"8683"},{"range":"8812","text":"8683"},{"range":"8813","text":"8681"},{"range":"8814","text":"8683"},{"range":"8815","text":"8681"},{"range":"8816","text":"8681"},{"range":"8817","text":"8681"},{"range":"8818","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getTag, id]",{"range":"8819","text":"8820"},{"range":"8821","text":"8627"},{"range":"8822","text":"8627"},{"range":"8823","text":"8629"},{"range":"8824","text":"8683"},"Update the dependencies array to be: [activeMenu.refetch, current, fetchShop, uuid]",{"range":"8825","text":"8826"},{"range":"8827","text":"8683"},{"range":"8828","text":"8826"},"Update the dependencies array to be: [activeMenu.refetch, fetchSmsPayload, type]",{"range":"8829","text":"8830"},"Update the dependencies array to be: [languages, locale, setIsModalVisible, t]",{"range":"8831","text":"8832"},"Update the dependencies array to be: [pageSize, group, sort, column, skipPage, search, fetchTranslations]",{"range":"8833","text":"8834"},"Update the dependencies array to be: [fetchSubscriptionList, modal]",{"range":"8835","text":"8836"},{"range":"8837","text":"8713"},{"range":"8838","text":"8687"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, id]",{"range":"8839","text":"8840"},"Update the dependencies array to be: [dispatch, id]",{"range":"8841","text":"8842"},{"range":"8843","text":"8627"},{"range":"8844","text":"8681"},{"range":"8845","text":"8681"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, isDemo]",{"range":"8846","text":"8847"},{"range":"8848","text":"8681"},{"range":"8849","text":"8681"},{"range":"8850","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchUnit, id]",{"range":"8851","text":"8852"},{"range":"8853","text":"8627"},{"range":"8854","text":"8683"},{"range":"8855","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchParcel, id]",{"range":"8856","text":"8857"},{"range":"8858","text":"8627"},{"range":"8859","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getLandingPage, id]",{"range":"8860","text":"8861"},{"range":"8862","text":"8683"},{"range":"8863","text":"8627"},{"range":"8864","text":"8683"},"Update the dependencies array to be: [getOption]",{"range":"8865","text":"8866"},{"range":"8867","text":"8627"},{"range":"8868","text":"8857"},"Update the dependencies array to be: [activeMenu.refetch, fetchSubscriptionList]",{"range":"8869","text":"8870"},{"range":"8871","text":"8685"},"Update the dependencies array to be: [activeMenu, dispatch]",{"range":"8872","text":"8873"},{"range":"8874","text":"8685"},{"range":"8875","text":"8873"},{"range":"8876","text":"8683"},{"range":"8877","text":"8627"},"Update the dependencies array to be: [chart_type, handleChart]",{"range":"8878","text":"8879"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchExtras, fetchReport]",{"range":"8880","text":"8881"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchProduct, params]",{"range":"8882","text":"8883"},"Update the dependencies array to be: [chart, chart_type, handleChart]",{"range":"8884","text":"8885"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchReport]",{"range":"8886","text":"8887"},{"range":"8888","text":"8683"},"Update the dependencies array to be: [chart, handleChart, performance]",{"range":"8889","text":"8890"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchReport, fetchRevenue]",{"range":"8891","text":"8892"},"Update the dependencies array to be: [handleChart, performance]",{"range":"8893","text":"8894"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchProduct, fetchReport]",{"range":"8895","text":"8896"},"Update the dependencies array to be: [activeMenu.refetch, fetchLook, id]",{"range":"8897","text":"8898"},{"range":"8899","text":"8683"},{"range":"8900","text":"8681"},{"range":"8901","text":"8685"},{"range":"8902","text":"8685"},{"range":"8903","text":"8610"},{"range":"8904","text":"8796"},{"range":"8905","text":"8683"},{"range":"8906","text":"8681"},{"range":"8907","text":"8879"},{"range":"8908","text":"8896"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchCategories, fetchOverview, fetchProducts]",{"range":"8909","text":"8910"},{"range":"8911","text":"8681"},{"range":"8912","text":"8681"},{"range":"8913","text":"8681"},{"range":"8914","text":"8681"},{"range":"8915","text":"8624"},{"range":"8916","text":"8624"},{"range":"8917","text":"8782"},{"range":"8918","text":"8683"},"Update the dependencies array to be: [activeMenu.refetch, fetchShop, queryParams.values?.step]",{"range":"8919","text":"8920"},{"range":"8921","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getBonus, id]",{"range":"8922","text":"8923"},{"range":"8924","text":"8627"},{"range":"8925","text":"8681"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, country_id, dispatch]",{"range":"8926","text":"8927"},{"range":"8928","text":"8683"},{"range":"8929","text":"8683"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, region_id]",{"range":"8930","text":"8931"},{"range":"8932","text":"8923"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, city_id, dispatch]",{"range":"8933","text":"8934"},{"range":"8935","text":"8627"},{"range":"8936","text":"8627"},{"range":"8937","text":"8774"},{"range":"8938","text":"8627"},{"range":"8939","text":"8774"},{"range":"8940","text":"8683"},{"range":"8941","text":"8683"},{"range":"8942","text":"8683"},{"range":"8943","text":"8683"},"Update the dependencies array to be: [fetchOrder]",{"range":"8944","text":"8945"},{"range":"8946","text":"8683"},{"range":"8947","text":"8681"},{"range":"8948","text":"8683"},{"range":"8949","text":"8870"},{"range":"8950","text":"8681"},{"range":"8951","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, fetchDiscount]",{"range":"8952","text":"8953"},{"range":"8954","text":"8683"},{"range":"8955","text":"8627"},"Update the dependencies array to be: [form]",{"range":"8956","text":"8957"},"Update the dependencies array to be: [activeMenu.refetch, getDays]",{"range":"8958","text":"8959"},{"range":"8960","text":"8957"},{"range":"8961","text":"8627"},{"range":"8962","text":"8774"},{"range":"8963","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getBranch, id]",{"range":"8964","text":"8965"},{"range":"8966","text":"8627"},{"range":"8967","text":"8627"},{"range":"8968","text":"8627"},{"range":"8969","text":"8647"},{"range":"8970","text":"8627"},{"range":"8971","text":"8627"},{"range":"8972","text":"8652"},{"range":"8973","text":"8641"},"Update the dependencies array to be: [activeMenu, dispatch, form, params, state?.parentId, type, user?.shop_id]",{"range":"8974","text":"8975"},{"range":"8976","text":"8665"},{"range":"8977","text":"8627"},{"range":"8978","text":"8727"},{"range":"8979","text":"8873"},{"range":"8980","text":"8624"},{"range":"8981","text":"8873"},{"range":"8982","text":"8624"},{"range":"8983","text":"8752"},"Update the dependencies array to be: [dispatch, form]",{"range":"8984","text":"8985"},{"range":"8986","text":"8678"},{"range":"8987","text":"8755"},"Update the dependencies array to be: [activeMenu.refetch, dispatch, fetchOrder, myShop.id]",{"range":"8988","text":"8989"},{"range":"8990","text":"8685"},{"range":"8991","text":"8681"},{"range":"8992","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getPayment, id]",{"range":"8993","text":"8994"},{"range":"8995","text":"8627"},{"range":"8996","text":"8641"},{"range":"8997","text":"8627"},{"range":"8998","text":"8641"},{"range":"8999","text":"8627"},{"range":"9000","text":"8683"},{"range":"9001","text":"8627"},{"range":"9002","text":"8774"},{"range":"9003","text":"8627"},{"range":"9004","text":"8683"},{"range":"9005","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getStory, id]",{"range":"9006","text":"9007"},{"range":"9008","text":"8627"},{"range":"9009","text":"8681"},{"range":"9010","text":"8683"},{"range":"9011","text":"8683"},{"range":"9012","text":"8681"},{"range":"9013","text":"8681"},"Update the dependencies array to be: [activeMenu, activeMenu?.refetch, data?.status, dispatch, orderType]",{"range":"9014","text":"9015"},{"range":"9016","text":"8685"},{"range":"9017","text":"8673"},{"range":"9018","text":"8681"},{"range":"9019","text":"8681"},{"range":"9020","text":"8683"},{"range":"9021","text":"8898"},{"range":"9022","text":"8681"},{"range":"9023","text":"8683"},{"range":"9024","text":"8681"},{"range":"9025","text":"8627"},{"range":"9026","text":"8681"},{"range":"9027","text":"8681"},{"range":"9028","text":"8681"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, shop.id]",{"range":"9029","text":"9030"},{"range":"9031","text":"8681"},{"range":"9032","text":"8681"},{"range":"9033","text":"8985"},{"range":"9034","text":"8678"},{"range":"9035","text":"8681"},{"range":"9036","text":"8678"},{"range":"9037","text":"8685"},{"range":"9038","text":"8894"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, fetchOrderChart, fetchOrderList]",{"range":"9039","text":"9040"},{"range":"9041","text":"8685"},"Update the dependencies array to be: [activeMenu, activeMenu?.refetch, dispatch, getProfile]",{"range":"9042","text":"9043"},{"range":"9044","text":"8620"},{"range":"9045","text":"8627"},"Update the dependencies array to be: [fetchProduct, uuid]",{"range":"9046","text":"9047"},{"range":"9048","text":"8627"},"Update the dependencies array to be: [fetchUnits]",{"range":"9049","text":"9050"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, activeTab, dispatch, paramsData]",{"range":"9051","text":"9052"},{"range":"9053","text":"8957"},"Update the dependencies array to be: [handleChange]",{"range":"9054","text":"9055"},"Update the dependencies array to be: [defaultValue, resetSearch]",{"range":"9056","text":"9057"},"Update the dependencies array to be: [fetchQrCodeUrl, orderId]",{"range":"9058","text":"9059"},"Update the dependencies array to be: [form, id]",{"range":"9060","text":"9061"},"Update the dependencies array to be: [getCategory, isModalOpen]",{"range":"9062","text":"9063"},{"range":"9064","text":"9052"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, currentBag, dispatch, params]",{"range":"9065","text":"9066"},"Update the dependencies array to be: [data?.uuid, dispatch]",{"range":"9067","text":"9068"},"Update the dependencies array to be: [currencies, currency, currentBag, dispatch, form]",{"range":"9069","text":"9070"},"Update the dependencies array to be: [currentBag, data, form]",{"range":"9071","text":"9072"},"Update the dependencies array to be: [fetchWalletHistory, page]",{"range":"9073","text":"9074"},"Update the dependencies array to be: [fetchDeliverySettings, id]",{"range":"9075","text":"9076"},"Update the dependencies array to be: [fetchOrderById, orderId]",{"range":"9077","text":"9078"},"Update the dependencies array to be: [data, statusList, t]",{"range":"9079","text":"9080"},"Update the dependencies array to be: [changeNote?.title, defaultLang, form]",{"range":"9081","text":"9082"},{"range":"9083","text":"8945"},"Update the dependencies array to be: [data.settingsId, fetchDeliverySettings]",{"range":"9084","text":"9085"},"Update the dependencies array to be: [activeMenu, dataSource, dispatch, uuid]",{"range":"9086","text":"9087"},"Update the dependencies array to be: [getPropduct, uuid]",{"range":"9088","text":"9089"},"Update the dependencies array to be: [fetchOptions, debounceTimeout]",{"range":"9090","text":"9091"},"Update the dependencies array to be: [fetchProduct, isRequest, uuid]",{"range":"9092","text":"9093"},{"range":"9094","text":"8627"},{"range":"9095","text":"8627"},"Update the dependencies array to be: [activeMenu.data.actualStocks, activeMenu.data?.delete_ids, activeMenu.data.extras, activeMenu.data.sku, activeMenu.data.stocks, activeMenu.data.tax, fetchProduct, form, isRequest, location.state?.generate, uuid]",{"range":"9096","text":"9097"},"Update the dependencies array to be: [activeMenu.data, setInitialState]",{"range":"9098","text":"9099"},"Update the dependencies array to be: [fetchProduct]",{"range":"9100","text":"9101"},"Update the dependencies array to be: [brand, category, dispatch, search, shop]",{"range":"9102","text":"9103"},"Update the dependencies array to be: [data?.shop, fetchShop]",{"range":"9104","text":"9105"},"Update the dependencies array to be: [brand, category, search, data.shop, dispatch]",{"range":"9106","text":"9107"},"Update the dependencies array to be: [form, modal]",{"range":"9108","text":"9109"},"Update the dependencies array to be: [fetchExtraGroup, modal]",{"range":"9110","text":"9111"},"Update the dependencies array to be: [fetchExtraValue]",{"range":"9112","text":"9113"},"Update the dependencies array to be: [activeMenu?.data, showUserData]",{"range":"9114","text":"9115"},{"range":"9116","text":"8627"},"Update the dependencies array to be: [form, getDays, uuid]",{"range":"9117","text":"9118"},{"range":"9119","text":"8681"},{"range":"9120","text":"8681"},{"range":"9121","text":"8627"},"Update the dependencies array to be: [activeMenu?.data.seller, showUserData]",{"range":"9122","text":"9123"},{"range":"9124","text":"9118"},"Update the dependencies array to be: [fetchShop, fetchShopSocial, shop, shop.id]",{"range":"9125","text":"9126"},"Update the dependencies array to be: [activeMenu?.data?.id, dispatch, params]",{"range":"9127","text":"9128"},"Update the dependencies array to be: [fetchPayment, modal]",{"range":"9129","text":"9130"},"Update the dependencies array to be: [fetchTopProducts]",{"range":"9131","text":"9132"},"Update the dependencies array to be: [fetchRefunds]",{"range":"9133","text":"9134"},"Update the dependencies array to be: [t]",{"range":"9135","text":"9136"},"Update the dependencies array to be: [getAd, id]",{"range":"9137","text":"9138"},"Update the dependencies array to be: [getShopAds, id]",{"range":"9139","text":"9140"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, dispatch, getShopAds, id]",{"range":"9141","text":"9142"},"Update the dependencies array to be: [setLegendOffset]",{"range":"9143","text":"9144"},{"range":"9145","text":"9118"},"Update the dependencies array to be: [dispatch, fetchOrderAllItem, type]",{"range":"9146","text":"9147"},{"range":"9148","text":"8627"},"Update the dependencies array to be: [activeMenu.refetch, getDeliveryPrice, id]",{"range":"9149","text":"9150"},"Update the dependencies array to be: [getDeliveryPoint, id]",{"range":"9151","text":"9152"},"Update the dependencies array to be: [reportData?.chart, reportData.charts, t]",{"range":"9153","text":"9154"},"Update the dependencies array to be: [data, status]",{"range":"9155","text":"9156"},{"range":"9157","text":"8945"},"Update the dependencies array to be: [fetchParcelDetails]",{"range":"9158","text":"9159"},"Update the dependencies array to be: [getDeliveryPoint]",{"range":"9160","text":"9161"},{"range":"9162","text":"9118"},{"range":"9163","text":"8627"},{"range":"9164","text":"8627"},{"range":"9165","text":"8627"},{"range":"9166","text":"8627"},"Update the dependencies array to be: [modal, groupId, form]",{"range":"9167","text":"9168"},"Update the dependencies array to be: [fetchGroup, modal]",{"range":"9169","text":"9170"},"Update the dependencies array to be: [fetchPropertyValue]",{"range":"9171","text":"9172"},{"range":"9173","text":"9128"},{"range":"9174","text":"8627"},{"range":"9175","text":"8627"},{"range":"9176","text":"9047"},{"range":"9177","text":"8627"},"Update the dependencies array to be: [form, getDays, shop.uuid]",{"range":"9178","text":"9179"},"Update the dependencies array to be: [form, getLanguageFields, id]",{"range":"9180","text":"9181"},{"range":"9182","text":"9181"},{"range":"9183","text":"9181"},{"range":"9184","text":"8627"},{"range":"9185","text":"9181"},"Update the dependencies array to be: [activeMenu.refetch, dispatch]",{"range":"9186","text":"9187"},"Update the dependencies array to be: [current_zone, activeMenu?.data?.page, dispatch]",{"range":"9188","text":"9189"},"Update the dependencies array to be: [dispatch, myShop.id, paramsData]",{"range":"9190","text":"9191"},{"range":"9192","text":"9070"},{"range":"9193","text":"9072"},{"range":"9194","text":"8610"},"Update the dependencies array to be: [currentLocation]",{"range":"9195","text":"9196"},{"range":"9197","text":"8957"},{"range":"9198","text":"9087"},{"range":"9199","text":"9089"},{"range":"9200","text":"9052"},"Update the dependencies array to be: [activeMenu.data, type, parentId, activeTab, location?.pathname, activeMenu, dispatch, paramsData]",{"range":"9201","text":"9202"},"Update the dependencies array to be: [getLanguageFields]",{"range":"9203","text":"9204"},{"range":"9205","text":"9093"},{"range":"9206","text":"9097"},{"range":"9207","text":"9099"},{"range":"9208","text":"8627"},{"range":"9209","text":"9101"},{"range":"9210","text":"8681"},{"range":"9211","text":"8681"},"Update the dependencies array to be: [brand, category, dispatch, myShop?.id, search]",{"range":"9212","text":"9213"},"Update the dependencies array to be: [fetchOrderDetails, orderId]",{"range":"9214","text":"9215"},{"range":"9216","text":"8610"},{"range":"9217","text":"9078"},{"range":"9218","text":"9080"},{"range":"9219","text":"9082"},{"range":"9220","text":"8945"},{"range":"9221","text":"9052"},{"range":"9222","text":"9109"},"Update the dependencies array to be: [dispatch, fetchExtraGroup, modal]",{"range":"9223","text":"9224"},{"range":"9225","text":"9113"},{"range":"9226","text":"9168"},{"range":"9227","text":"8627"},{"range":"9228","text":"9150"},"Update the dependencies array to be: [data, form, orderData.deliveries]",{"range":"9229","text":"9230"},{"range":"9231","text":"9215"},{"range":"9232","text":"8945"},{"range":"9233","text":"9170"},"Update the dependencies array to be: [fetchValue]",{"range":"9234","text":"9235"},"Update the dependencies array to be: [dispatch, fetchSellerPaymentList, payments.length]",{"range":"9236","text":"9237"},"Update the dependencies array to be: [dispatch, fetchOrderAllItem]",{"range":"9238","text":"9239"},{"range":"9240","text":"9239"},{"range":"9241","text":"8610"},"Update the dependencies array to be: [currentChatId, replyDocId]",{"range":"9242","text":"9243"},{"range":"9244","text":"9243"},"Update the dependencies array to be: [counts, t]",{"range":"9245","text":"9246"},"Update the dependencies array to be: [sales, t]",{"range":"9247","text":"9248"},"Update the dependencies array to be: [extrasIds, showExtras]",{"range":"9249","text":"9250"},"Update the dependencies array to be: [extrasIds, extrasModal?.addons, extrasModal.quantity, extrasModal.uuid]",{"range":"9251","text":"9252"},"Update the dependencies array to be: [cartData?.shop, fetchShop]",{"range":"9253","text":"9254"},"Update the dependencies array to be: [debounceTimeout, fetchOptions]",{"range":"9255","text":"9256"},"Update the dependencies array to be: [extra.value, extra?.values, isAddModalOpen]",{"range":"9257","text":"9258"},"Update the dependencies array to be: [extrasIds, productData.uuid]",{"range":"9259","text":"9260"},{"range":"9261","text":"9250"},{"range":"9262","text":"9250"},"Update the dependencies array to be: [extrasModal?.addons, extrasModal.quantity, extrasModal.uuid]",{"range":"9263","text":"9264"},"Update the dependencies array to be: [activeMenu, activeMenu.refetch, current_zone?.id, dispatch, params]",{"range":"9265","text":"9266"},{"range":"9267","text":"9250"},{"range":"9268","text":"9252"},{"range":"9269","text":"9258"},{"range":"9270","text":"9260"},{"range":"9271","text":"9250"},{"range":"9272","text":"9250"},{"range":"9273","text":"9250"},{"range":"9274","text":"8735"},"Update the dependencies array to be: [dispatch, fetchBookingClosedDays, fetchBookingWorkingDays]",{"range":"9275","text":"9276"},"Update the dependencies array to be: [CheckSelectDate, selectDate]",{"range":"9277","text":"9278"},"Update the dependencies array to be: [currentBag, form, parentFormValues.address.address]",{"range":"9279","text":"9280"},{"range":"9281","text":"9280"},[670,672],"[navigate]",[775,777],[2099,2101],"[dispatch, fetchLanguages, languages.length, user?.role]",[2275,2277],"[dispatch, user]",[3284,3286],"[dispatch]",[2014,2016],"[menu.activeMenu.url, pathname]",[2233,2239],"[filterUserRoutes, user.urls]",[1254,1256],"[checkAccess]",[345,347],"[prevailOnUnmount]",[1479,1481],"[fetchLanguages]",[327,337],"[f]",[3109,3129],"[activeMenu.refetch, fetchProduct, uuid]",[3529,3549],[1236,1238],"[activeMenu, dispatch, form]",[3181,3201],"[activeMenu.refetch, getBanner, id]",[1104,1106],[1169,1171],[3958,3978],[1580,1582],[3381,3401],"[activeMenu.refetch, fetchBlog, uuid]",[1324,1326],[1578,1580],[3426,3446],[1616,1618],[3467,3487],"[activeMenu.refetch, getCategory, uuid]",[1681,1683],[3548,3568],[1475,1477],[1318,1320],[2427,2447],"[activeMenu.refetch, fetchBrand, id]",[1318,1320],[2813,2833],[1942,1944],[4487,4507],"[activeMenu.refetch, getCategory, id]",[1098,1100],[1515,1517],[3940,3960],[1328,1330],[1736,1738],[3994,4014],[1897,1899],[3673,3693],[2493,2519],[1966,1968],"[activeMenu, dispatch, form, params, state?.parentId, type]",[4148,4191],"[activeMenu.refetch, uuid, state.parentId, getCategory]",[1429,1431],[2962,2977],"[authUserId, chatInitialized, currentUserId, dispatch]",[9034,9035],[9034,9034],"\\",[2701,2721],"[activeMenu.refetch, getCoupon, id]",[1142,1144],[2357,2377],"[activeMenu.refetch, getEmailProvider, id]",[3787,3807],"[activeMenu.refetch, fetchOrder]",[968,970],[7406,7426],"[activeMenu, activeMenu.refetch, dispatch, paramsData]",[4754,4774],"[activeMenu, activeMenu.refetch, dispatch]",[3505,3526],"[activeMenu, activeMenu?.refetch, dispatch, paramsData]",[4168,4189],"[activeMenu, activeMenu?.refetch, dispatch]",[6349,6369],[3769,3789],[2051,2071],[1935,1955],[4446,4466],"[activeMenu, activeMenu.refetch, dispatch, params]",[1965,1985],[4561,4581],[2898,2900],"[activeMenu, dispatch, fetchOrder]",[3029,3049],"[activeMenu, activeMenu.refetch, dispatch, fetchOrder]",[6322,6342],[4132,4152],[4039,4059],[5529,5549],[4859,4879],[2294,2314],"[activeMenu, activeMenu.refetch, dispatch, getDashboardsByRole]",[3447,3467],[4647,4667],[4369,4390],[4491,4493],[1648,1669],[2762,2783],"[activeMenu?.refetch, showUserData, uuid]",[1910,1912],[9029,9050],"[activeMenu, activeMenu?.refetch, data?.page, data?.status, deliverymanId, dispatch]",[2624,2645],"[active, activeMenu, activeMenu?.refetch, dispatch, paramsData]",[6975,6995],[1197,1199],[2125,2145],"[activeMenu.refetch, fetchCurrency, id]",[2306,2310],"[fetchProductRequest, id]",[1063,1065],[2070,2094],"[activeMenu.refetch, fetchProductRequest, id]",[3934,3954],[6864,6884],[1447,1449],[1890,1910],"[activeMenu.refetch, fetchFaq, uuid]",[1218,1220],[2131,2147],"[fetchGallery, page, pageSize]",[1514,1516],[3051,3071],"[activeMenu.refetch, fetchLanguage, id]",[1705,1707],[2993,3013],"[activeMenu.refetch, fetchSubscriber, id]",[1546,1548],[1397,1399],[3087,3107],"[activeMenu.refetch, fetchNotification, uuid]",[1396,1398],[3092,3112],[1196,1198],[4399,4419],[3681,3701],[1816,1826],"[fetchOrder, order_id]",[7943,7963],[8988,8998],"[data?.id, fetchOrder, t]",[9172,9192],"[activeMenu.refetch, dispatch, fetchOrder, statusList.length]",[10176,10186],[10969,10989],[9737,9758],[13930,13961],"[activeMenu, activeMenu.refetch, dispatch, pageType, paramsData]",[14026,14028],[11634,11655],[11720,11722],[1826,1828],[4370,4390],[1691,1693],[1803,1805],[3926,3946],"[activeMenu.refetch, getPayload, id]",[1852,1854],[4750,4770],"[activeMenu.refetch, fetchBox, id]",[1697,1699],[1534,1536],[3392,3412],[1708,1710],[4037,4057],[1393,1395],[5023,5043],"[activeMenu.refetch, dispatch, fetchOrder]",[3529,3549],"[activeMenu.refetch, fetchRestaurant, uuid]",[3596,3616],[8728,8749],"[activeMenu, activeMenu?.refetch, data?.page, data?.status, dispatch]",[4780,4800],[4378,4398],[4875,4895],[4695,4715],[3660,3680],[4291,4311],[999,1001],[1561,1581],"[activeMenu.refetch, fetchSettings]",[1073,1075],[1635,1655],[1076,1078],[1638,1658],[1575,1577],[3622,3642],[1263,1265],[2104,2124],"[activeMenu.refetch, fetchTerms]",[1264,1266],[2108,2128],"[activeMenu.refetch, fetchPolicy]",[4121,4141],[5919,5939],[3541,3561],[3458,3478],[5849,5869],[2698,2718],[6670,6690],[7332,7352],[4735,4755],[1494,1496],[3060,3080],"[activeMenu.refetch, getTag, id]",[1265,1267],[1493,1495],[3069,3089],[2199,2219],[3414,3443],"[activeMenu.refetch, current, fetchShop, uuid]",[2228,2248],[3823,3858],[2445,2465],"[activeMenu.refetch, fetchSmsPayload, type]",[5082,5101],"[languages, locale, setIsModalVisible, t]",[6218,6267],"[pageSize, group, sort, column, skipPage, search, fetchTranslations]",[1308,1315],"[fetchSubscriptionList, modal]",[2514,2535],[980,1001],[5384,5404],"[activeMenu, activeMenu.refetch, dispatch, id]",[4841,4843],"[dispatch, id]",[1375,1377],[8750,8770],[5242,5262],[2809,2829],"[activeMenu, activeMenu.refetch, dispatch, isDemo]",[4990,5010],[8220,8240],[1259,1261],[2490,2510],"[activeMenu.refetch, fetchUnit, id]",[1120,1122],[2134,2154],[2659,2661],[4924,4944],"[activeMenu.refetch, fetchParcel, id]",[2417,2419],[3013,3015],[3972,3992],"[activeMenu.refetch, getLandingPage, id]",[2664,2684],[1686,1688],[4459,4479],[1728,1730],"[getOption]",[1517,1519],[3487,3507],[1434,1454],"[activeMenu.refetch, fetchSubscriptionList]",[6195,6216],[6326,6328],"[activeMenu, dispatch]",[7435,7456],[7672,7674],[2251,2271],[1050,1052],[4392,4394],"[chart_type, handleChart]",[4545,4565],"[activeMenu, activeMenu.refetch, dispatch, fetchExtras, fetchReport]",[2988,3008],"[activeMenu, activeMenu.refetch, dispatch, fetchProduct, params]",[4358,4360],"[chart, chart_type, handleChart]",[4490,4510],"[activeMenu, activeMenu.refetch, dispatch, fetchReport]",[2116,2136],[4982,4984],"[chart, handleChart, performance]",[5136,5156],"[activeMenu, activeMenu.refetch, dispatch, fetchReport, fetchRevenue]",[5233,5235],"[handleChart, performance]",[5387,5407],"[activeMenu, activeMenu.refetch, dispatch, fetchProduct, fetchReport]",[2053,2073],"[activeMenu.refetch, fetchLook, id]",[3908,3928],[3569,3589],[3548,3569],[10391,10412],[10477,10479],[3435,3455],[3636,3656],[3663,3683],[4599,4601],[4753,4773],[4724,4744],"[activeMenu, activeMenu.refetch, dispatch, fetchCategories, fetchOverview, fetchProducts]",[2256,2276],[5363,5383],[6439,6459],[5843,5863],[3134,3154],[3253,3273],[5338,5358],[2767,2787],[3606,3652],"[activeMenu.refetch, fetchShop, queryParams.values?.step]",[1463,1465],[2193,2213],"[activeMenu.refetch, getBonus, id]",[1298,1300],[7220,7240],[3822,3842],"[activeMenu, activeMenu.refetch, country_id, dispatch]",[3694,3714],[3706,3726],[3871,3891],"[activeMenu, activeMenu.refetch, dispatch, region_id]",[2457,2477],[3316,3336],"[activeMenu, activeMenu.refetch, city_id, dispatch]",[1103,1105],[1271,1273],[2537,2557],[1278,1280],[2548,2568],[2283,2303],[4620,4640],[1610,1630],[3037,3057],[2555,2557],"[fetchOrder]",[4474,4494],[4678,4698],[4298,4318],[1351,1371],[5241,5261],[1703,1705],[2515,2535],"[activeMenu.refetch, fetchDiscount]",[2707,2727],[1507,1509],[3885,3887],"[form]",[3969,3989],"[activeMenu.refetch, getDays]",[2391,2393],[1349,1351],[2558,2578],[1939,1941],[3594,3614],"[activeMenu.refetch, getBranch, id]",[1237,1239],[1825,1827],[1376,1378],[2549,2569],[1128,1130],[1897,1899],[3733,3753],[2482,2508],[2126,2128],"[activeMenu, dispatch, form, params, state?.parentId, type, user?.shop_id]",[4307,4350],[1503,1505],[2106,2126],[2433,2435],[3724,3744],[4051,4053],[6211,6231],[1775,1785],[1862,1864],"[dispatch, form]",[3274,3294],[10974,10984],[11248,11268],"[activeMenu.refetch, dispatch, fetchOrder, myShop.id]",[8461,8482],[3517,3537],[1399,1401],[2793,2813],"[activeMenu.refetch, getPayment, id]",[1561,1563],[3699,3719],[1739,1741],[4353,4373],[1420,1422],[3246,3266],[1615,1617],[4520,4540],[1340,1342],[4198,4218],[1429,1431],[2857,2877],"[activeMenu.refetch, getStory, id]",[1270,1272],[4246,4266],[4139,4159],[4835,4855],[4392,4412],[4737,4757],[3705,3726],"[activeMenu, activeMenu?.refetch, data?.status, dispatch, orderType]",[4297,4318],[2503,2523],[3905,3925],[3831,3851],[3430,3450],[1890,1910],[3705,3725],[2654,2674],[6192,6212],[1136,1138],[5265,5285],[3785,3805],[3389,3409],[3730,3750],"[activeMenu, activeMenu.refetch, dispatch, shop.id]",[5902,5922],[4697,4717],[2032,2034],[4002,4022],[4370,4390],[5935,5955],[3473,3494],[5411,5413],[5571,5591],"[activeMenu, activeMenu.refetch, dispatch, fetchOrderChart, fetchOrderList]",[6222,6243],[1116,1137],"[activeMenu, activeMenu?.refetch, dispatch, getProfile]",[732,734],[1429,1431],[2294,2296],"[fetchProduct, uuid]",[1405,1407],[3242,3244],"[fetchUnits]",[7603,7623],"[activeMenu, activeMenu.refetch, activeTab, dispatch, paramsData]",[1014,1016],[499,501],"[handleChange]",[563,576],"[defaultValue, resetSearch]",[1463,1472],"[fetchQrCodeUrl, orderId]",[1229,1233],"[form, id]",[2272,2285],"[getCategory, isModalOpen]",[5227,5247],[3166,3186],"[activeMenu, activeMenu.refetch, currentBag, dispatch, params]",[4490,4492],"[data?.uuid, dispatch]",[3830,3832],"[currencies, currency, currentBag, dispatch, form]",[4614,4632],"[currentBag, data, form]",[2318,2324],"[fetchWalletHistory, page]",[4565,4567],"[fetchDeliverySettings, id]",[1910,1919],"[fetchOrderById, orderId]",[3393,3399],"[data, statusList, t]",[5249,5262],"[changeNote?.title, defaultLang, form]",[3091,3093],[6200,6202],"[data.settingsId, fetchDeliverySettings]",[1995,2007],"[activeMenu, dataSource, dispatch, uuid]",[3047,3049],"[getPropduct, uuid]",[908,952],"[fetchOptions, debounceTimeout]",[3098,3109],"[fetchProduct, isRequest, uuid]",[2042,2044],[7530,7532],[13037,13074],"[activeMenu.data.actualStocks, activeMenu.data?.delete_ids, activeMenu.data.extras, activeMenu.data.sku, activeMenu.data.stocks, activeMenu.data.tax, fetchProduct, form, isRequest, location.state?.generate, uuid]",[2017,2034],"[activeMenu.data, setInitialState]",[2638,2640],"[fetchProduct]",[2249,2280],"[brand, category, dispatch, search, shop]",[2945,2957],"[data?.shop, fetchShop]",[1744,1780],"[brand, category, search, data.shop, dispatch]",[1647,1654],"[form, modal]",[1325,1332],"[fetchExtraGroup, modal]",[763,765],"[fetchExtraValue]",[2285,2287],"[activeMenu?.data, showUserData]",[1802,1804],[2592,2594],"[form, getDays, uuid]",[9267,9287],[5596,5616],[1882,1884],[2327,2329],"[activeMenu?.data.seller, showUserData]",[2571,2573],[3099,3109],"[fetchShop, fetchShopSocial, shop, shop.id]",[3402,3424],"[activeMenu?.data?.id, dispatch, params]",[1483,1490],"[fetchPayment, modal]",[1322,1324],"[fetchTopProducts]",[944,946],"[fetchRefunds]",[2103,2105],"[t]",[5594,5598],"[getAd, id]",[2874,2878],"[getShopAds, id]",[3009,3029],"[activeMenu, activeMenu.refetch, dispatch, getShopAds, id]",[1872,1874],"[setLegendOffset]",[3143,3145],[4541,4547],"[dispatch, fetchOrderAllItem, type]",[1611,1613],[1712,1732],"[activeMenu.refetch, getDeliveryPrice, id]",[3273,3277],"[getDeliveryPoint, id]",[1835,1854],"[reportData?.chart, reportData.charts, t]",[1070,1076],"[data, status]",[3352,3354],[1053,1055],"[fetchParcelDetails]",[3658,3660],"[getDeliveryPoint]",[3115,3117],[934,936],[1056,1058],[2979,2981],[1806,1808],[1627,1643],"[modal, groupId, form]",[1280,1287],"[fetchGroup, modal]",[754,756],"[fetchPropertyValue]",[3419,3441],[1464,1466],[1391,1393],[2364,2366],[1787,1789],[3652,3654],"[form, getDays, shop.uuid]",[3743,3747],"[form, getLanguageFields, id]",[3035,3039],[3621,3625],[1696,1698],[4209,4213],[1034,1054],"[activeMenu.refetch, dispatch]",[1274,1312],"[current_zone, activeMenu?.data?.page, dispatch]",[1663,1675],"[dispatch, myShop.id, paramsData]",[3947,3949],[4728,4746],[1210,1212],[1506,1508],"[currentLocation]",[1009,1011],[2000,2012],[3052,3054],[7168,7188],[7553,7597],"[activeMenu.data, type, parentId, activeTab, location?.pathname, activeMenu, dispatch, paramsData]",[4004,4010],"[getLanguageFields]",[4096,4113],[13403,13440],[2058,2075],[9060,9062],[2645,2647],[4813,4833],[7875,7895],[1698,1723],"[brand, category, dispatch, myShop?.id, search]",[1379,1388],"[fetchOrderDetails, orderId]",[1314,1316],[1871,1880],[3354,3360],[5210,5223],[3097,3099],[4836,4856],[1660,1667],[1334,1341],"[dispatch, fetchExtraGroup, modal]",[744,746],[1639,1655],[1525,1527],[1626,1646],[2047,2053],"[data, form, orderData.deliveries]",[1315,1324],[3088,3090],[1293,1300],[745,747],"[fetchValue]",[2322,2324],"[dispatch, fetchSellerPaymentList, payments.length]",[4719,4721],"[dispatch, fetchOrderAllItem]",[4149,4151],[883,885],[991,993],"[currentChatId, replyDocId]",[1519,1521],[1107,1115],"[counts, t]",[1288,1295],"[sales, t]",[4434,4446],"[extrasIds, showExtras]",[5385,5403],"[extrasIds, extrasModal?.addons, extrasModal.quantity, extrasModal.uuid]",[4132,4148],"[cartData?.shop, fetchShop]",[876,878],"[debounceTimeout, fetchOptions]",[1696,1726],"[extra.value, extra?.values, isAddModalOpen]",[3988,4006],"[extrasIds, productData.uuid]",[4137,4149],[3890,3902],[6229,6247],"[extrasModal?.addons, extrasModal.quantity, extrasModal.uuid]",[1548,1568],"[activeMenu, activeMenu.refetch, current_zone?.id, dispatch, params]",[4718,4730],[5669,5687],[1693,1723],[3988,4006],[4137,4149],[1378,1390],[1378,1390],[1208,1224],[6433,6435],"[dispatch, fetchBookingClosedDays, fetchBookingWorkingDays]",[6503,6515],"[CheckSelectDate, selectDate]",[1531,1543],"[currentBag, form, parentFormValues.address.address]",[1514,1526]]