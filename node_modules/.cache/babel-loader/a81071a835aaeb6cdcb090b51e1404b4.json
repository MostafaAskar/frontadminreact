{"ast":null,"code":"var _jsxFileName = \"/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/views/banners/banner-clone.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { fetchBanners } from '../../redux/slices/banner';\nimport bannerService from '../../services/banner';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport BannerForm from './banner-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BannerClone = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    activeMenu\n  } = useSelector(state => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [loading, setLoading] = useState(false);\n  const {\n    languages\n  } = useSelector(state => state.formLang, shallowEqual);\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({\n        activeMenu,\n        data\n      }));\n    };\n  }, []);\n\n  const createImages = items => items.map(item => ({\n    uid: item.id,\n    name: item.path,\n    url: item.path\n  }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n\n    const {\n      translations\n    } = data;\n    const result = languages.map(item => {\n      var _translations$find, _translations$find2;\n\n      return {\n        [`title[${item.locale}]`]: (_translations$find = translations.find(el => el.locale === item.locale)) === null || _translations$find === void 0 ? void 0 : _translations$find.title,\n        [`description[${item.locale}]`]: (_translations$find2 = translations.find(el => el.locale === item.locale)) === null || _translations$find2 === void 0 ? void 0 : _translations$find2.description\n      };\n    });\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = alias => {\n    setLoading(true);\n    bannerService.getById(alias).then(res => {\n      var _banner$products;\n\n      let banner = res.data;\n      const data = { ...banner,\n        img: createImages(banner.galleries),\n        products: (_banner$products = banner.products) === null || _banner$products === void 0 ? void 0 : _banner$products.map(item => {\n          var _item$translation;\n\n          return {\n            label: (_item$translation = item.translation) === null || _item$translation === void 0 ? void 0 : _item$translation.title,\n            value: item.id\n          };\n        }),\n        ...getLanguageFields(banner)\n      };\n      form.setFieldsValue(data);\n      dispatch(setMenuData({\n        activeMenu,\n        data\n      }));\n    }).finally(() => {\n      dispatch(disableRefetch(activeMenu));\n      setLoading(false);\n    });\n  };\n\n  const onFinish = (values, image) => {\n    var _values$products;\n\n    const body = {\n      products: (_values$products = values.products) === null || _values$products === void 0 ? void 0 : _values$products.map(i => i.value),\n      images: image.map(image => image.name),\n      clickable: true,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description')\n    };\n    const nextUrl = 'banners';\n    return bannerService.create(body).then(() => {\n      toast.success(t('successfully.cloned'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu,\n          nextUrl\n        }));\n        dispatch(fetchBanners({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBanner(id);\n    }\n  }, [activeMenu.refetch]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: t('clone.banner'),\n    className: \"h-100\",\n    extra: /*#__PURE__*/_jsxDEV(LanguageList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 62\n    }, this),\n    children: !loading ? /*#__PURE__*/_jsxDEV(BannerForm, {\n      form: form,\n      handleSubmit: onFinish\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center\",\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        size: \"large\",\n        className: \"py-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BannerClone, \"ep/CfslYTgS4D92YCjHzy9eyAE0=\", false, function () {\n  return [useTranslation, useSelector, useDispatch, Form.useForm, useNavigate, useParams, useSelector];\n});\n\n_c = BannerClone;\nexport default BannerClone;\n\nvar _c;\n\n$RefreshReg$(_c, \"BannerClone\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","toast","Card","Form","Spin","batch","shallowEqual","useDispatch","useSelector","disableRefetch","removeFromMenu","setMenuData","fetchBanners","bannerService","useTranslation","LanguageList","getTranslationFields","BannerForm","BannerClone","t","activeMenu","state","menu","dispatch","form","useForm","navigate","id","loading","setLoading","languages","formLang","data","getFieldsValue","createImages","items","map","item","uid","name","path","url","getLanguageFields","translations","result","locale","find","el","title","description","Object","assign","getBanner","alias","getById","then","res","banner","img","galleries","products","label","translation","value","setFieldsValue","finally","onFinish","values","image","body","i","images","clickable","nextUrl","create","success","refetch"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/views/banners/banner-clone.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchBanners } from '../../redux/slices/banner';\nimport bannerService from '../../services/banner';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport BannerForm from './banner-form';\n\nconst BannerClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = (alias) => {\n    setLoading(true);\n    bannerService\n      .getById(alias)\n      .then((res) => {\n        let banner = res.data;\n\n        const data = {\n          ...banner,\n          img: createImages(banner.galleries),\n          products: banner.products?.map((item) => ({\n            label: item.translation?.title,\n            value: item.id,\n          })),\n          ...getLanguageFields(banner),\n        };\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const onFinish = (values, image) => {\n    const body = {\n      products: values.products?.map((i) => i.value),\n      images: image.map((image) => image.name),\n      clickable: true,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n    };\n    const nextUrl = 'banners';\n\n    return bannerService.create(body).then(() => {\n      toast.success(t('successfully.cloned'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchBanners({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBanner(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.banner')} className='h-100' extra={<LanguageList />}>\n      {!loading ? (\n        <BannerForm form={form} handleSubmit={onFinish} />\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default BannerClone;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}