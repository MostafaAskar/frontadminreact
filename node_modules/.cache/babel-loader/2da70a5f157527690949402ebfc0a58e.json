{"ast":null,"code":"var _jsxFileName = \"/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/components/upload/upload-media.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'antd';\nimport { colLg } from '../card-responsive';\nimport { useTranslation } from 'react-i18next';\nimport GalleryItem from './gallery-item';\nimport { BsFolder } from 'react-icons/bs';\nimport Meta from 'antd/lib/card/Meta';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchGalleryTypes } from 'redux/slices/gallery';\nimport Loading from 'components/loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UploadMedia = _ref => {\n  _s();\n\n  let {\n    setImageList,\n    imageList,\n    setIsModalOpen,\n    form,\n    name\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [currentType, setCurrentType] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    types,\n    loading\n  } = useSelector(state => state.gallery, shallowEqual);\n  useEffect(() => {\n    dispatch(fetchGalleryTypes({}));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentType ? /*#__PURE__*/_jsxDEV(GalleryItem, {\n      type: currentType,\n      setCurrentType: setCurrentType,\n      setImageList: setImageList,\n      imageList: imageList,\n      setIsModalOpen: setIsModalOpen,\n      form: form,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Card, {\n      className: \"media-upload-gallery-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Row, {\n        gutter: [24, 24],\n        children: Object.values(types).map((item, index) => {\n          return /*#__PURE__*/_createElement(Col, { ...colLg,\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/_jsxDEV(Card, {\n            cover: /*#__PURE__*/_jsxDEV(BsFolder, {\n              className: \"icon-folder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 30\n            }, this),\n            className: \"folder\",\n            onClick: () => setCurrentType(item),\n            children: /*#__PURE__*/_jsxDEV(Meta, {\n              title: t(`${item}`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this));\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(UploadMedia, \"jgPuzB5zTDI/POOm2VfmAnglvwE=\", false, function () {\n  return [useTranslation, useDispatch, useSelector];\n});\n\n_c = UploadMedia;\nexport default UploadMedia;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadMedia\");","map":{"version":3,"names":["React","useEffect","useState","Card","Col","Row","colLg","useTranslation","GalleryItem","BsFolder","Meta","shallowEqual","useSelector","useDispatch","fetchGalleryTypes","Loading","UploadMedia","setImageList","imageList","setIsModalOpen","form","name","t","currentType","setCurrentType","dispatch","types","loading","state","gallery","Object","values","map","item","index"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/components/upload/upload-media.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'antd';\nimport { colLg } from '../card-responsive';\nimport { useTranslation } from 'react-i18next';\nimport GalleryItem from './gallery-item';\nimport { BsFolder } from 'react-icons/bs';\nimport Meta from 'antd/lib/card/Meta';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchGalleryTypes } from 'redux/slices/gallery';\nimport Loading from 'components/loading';\n\nconst UploadMedia = ({\n  setImageList,\n  imageList,\n  setIsModalOpen,\n  form,\n  name,\n}) => {\n  const { t } = useTranslation();\n  const [currentType, setCurrentType] = useState(null);\n  const dispatch = useDispatch();\n  const { types, loading } = useSelector(\n    (state) => state.gallery,\n    shallowEqual,\n  );\n  useEffect(() => {\n    dispatch(fetchGalleryTypes({}));\n  }, []);\n  return (\n    <>\n      {currentType ? (\n        <GalleryItem\n          type={currentType}\n          setCurrentType={setCurrentType}\n          setImageList={setImageList}\n          imageList={imageList}\n          setIsModalOpen={setIsModalOpen}\n          form={form}\n          name={name}\n        />\n      ) : (\n        <Card className='media-upload-gallery-container'>\n          {loading ? (\n            <Loading />\n          ) : (\n            <Row gutter={[24, 24]}>\n              {Object.values(types).map((item, index) => {\n                return (\n                  <Col {...colLg} key={index}>\n                    <Card\n                      cover={<BsFolder className='icon-folder' />}\n                      className='folder'\n                      onClick={() => setCurrentType(item)}\n                    >\n                      <Meta title={t(`${item}`)} />\n                    </Card>\n                  </Col>\n                );\n              })}\n            </Row>\n          )}\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport default UploadMedia;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,QAA+B,MAA/B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;;;AAEA,MAAMC,WAAW,GAAG,QAMd;EAAA;;EAAA,IANe;IACnBC,YADmB;IAEnBC,SAFmB;IAGnBC,cAHmB;IAInBC,IAJmB;IAKnBC;EALmB,CAMf;EACJ,MAAM;IAAEC;EAAF,IAAQf,cAAc,EAA5B;EACA,MAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,IAAD,CAA9C;EACA,MAAMuB,QAAQ,GAAGZ,WAAW,EAA5B;EACA,MAAM;IAAEa,KAAF;IAASC;EAAT,IAAqBf,WAAW,CACnCgB,KAAD,IAAWA,KAAK,CAACC,OADmB,EAEpClB,YAFoC,CAAtC;EAIAV,SAAS,CAAC,MAAM;IACdwB,QAAQ,CAACX,iBAAiB,CAAC,EAAD,CAAlB,CAAR;EACD,CAFQ,EAEN,EAFM,CAAT;EAGA,oBACE;IAAA,UACGS,WAAW,gBACV,QAAC,WAAD;MACE,IAAI,EAAEA,WADR;MAEE,cAAc,EAAEC,cAFlB;MAGE,YAAY,EAAEP,YAHhB;MAIE,SAAS,EAAEC,SAJb;MAKE,cAAc,EAAEC,cALlB;MAME,IAAI,EAAEC,IANR;MAOE,IAAI,EAAEC;IAPR;MAAA;MAAA;MAAA;IAAA,QADU,gBAWV,QAAC,IAAD;MAAM,SAAS,EAAC,gCAAhB;MAAA,UACGM,OAAO,gBACN,QAAC,OAAD;QAAA;QAAA;QAAA;MAAA,QADM,gBAGN,QAAC,GAAD;QAAK,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;QAAA,UACGG,MAAM,CAACC,MAAP,CAAcL,KAAd,EAAqBM,GAArB,CAAyB,CAACC,IAAD,EAAOC,KAAP,KAAiB;UACzC,oBACE,eAAC,GAAD,OAAS5B,KAAT;YAAgB,GAAG,EAAE4B,KAArB;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,gBACE,QAAC,IAAD;YACE,KAAK,eAAE,QAAC,QAAD;cAAU,SAAS,EAAC;YAApB;cAAA;cAAA;cAAA;YAAA,QADT;YAEE,SAAS,EAAC,QAFZ;YAGE,OAAO,EAAE,MAAMV,cAAc,CAACS,IAAD,CAH/B;YAAA,uBAKE,QAAC,IAAD;cAAM,KAAK,EAAEX,CAAC,CAAE,GAAEW,IAAK,EAAT;YAAd;cAAA;cAAA;cAAA;YAAA;UALF;YAAA;YAAA;YAAA;UAAA,QADF,CADF;QAWD,CAZA;MADH;QAAA;QAAA;QAAA;MAAA;IAJJ;MAAA;MAAA;MAAA;IAAA;EAZJ,iBADF;AAqCD,CAtDD;;GAAMjB,W;UAOUT,c,EAEGM,W,EACUD,W;;;KAVvBI,W;AAwDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}