{"ast":null,"code":"var _jsxFileName = \"/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/components/async-tree-select.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Spin, TreeSelect } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AsyncTreeSelect = _ref => {\n  _s();\n\n  let {\n    fetchOptions,\n    refetch = false,\n    ...props\n  } = _ref;\n  const [fetching, setFetching] = useState(false);\n  const [treeData, setTreeData] = useState([]);\n\n  const fetchOnFocus = () => {\n    if (!treeData.length || refetch) {\n      setFetching(true);\n      fetchOptions().then(newOptions => {\n        setTreeData(newOptions);\n        setFetching(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TreeSelect, {\n    treeLine: true,\n    treeData: fetching ? [] : treeData,\n    treeDefaultExpandAll: true,\n    labelInValue: true,\n    onFocus: fetchOnFocus,\n    notFoundContent: fetching ? /*#__PURE__*/_jsxDEV(Spin, {\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 35\n    }, this) : 'no results',\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AsyncTreeSelect, \"NmmULqYfYyesg9765ZYxU0E/m5w=\");\n\n_c = AsyncTreeSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsyncTreeSelect\");","map":{"version":3,"names":["React","useState","Spin","TreeSelect","AsyncTreeSelect","fetchOptions","refetch","props","fetching","setFetching","treeData","setTreeData","fetchOnFocus","length","then","newOptions"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/components/async-tree-select.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Spin, TreeSelect } from 'antd';\n\nexport const AsyncTreeSelect = ({\n  fetchOptions,\n  refetch = false,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [treeData, setTreeData] = useState([]);\n\n  const fetchOnFocus = () => {\n    if (!treeData.length || refetch) {\n      setFetching(true);\n      fetchOptions().then((newOptions) => {\n        setTreeData(newOptions);\n        setFetching(false);\n      });\n    }\n  };\n\n  return (\n    <TreeSelect\n      treeLine={true}\n      treeData={fetching ? [] : treeData}\n      treeDefaultExpandAll\n      labelInValue\n      onFocus={fetchOnFocus}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n    />\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,MAAjC;;AAEA,OAAO,MAAMC,eAAe,GAAG,QAIzB;EAAA;;EAAA,IAJ0B;IAC9BC,YAD8B;IAE9BC,OAAO,GAAG,KAFoB;IAG9B,GAAGC;EAH2B,CAI1B;EACJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;;EAEA,MAAMW,YAAY,GAAG,MAAM;IACzB,IAAI,CAACF,QAAQ,CAACG,MAAV,IAAoBP,OAAxB,EAAiC;MAC/BG,WAAW,CAAC,IAAD,CAAX;MACAJ,YAAY,GAAGS,IAAf,CAAqBC,UAAD,IAAgB;QAClCJ,WAAW,CAACI,UAAD,CAAX;QACAN,WAAW,CAAC,KAAD,CAAX;MACD,CAHD;IAID;EACF,CARD;;EAUA,oBACE,QAAC,UAAD;IACE,QAAQ,EAAE,IADZ;IAEE,QAAQ,EAAED,QAAQ,GAAG,EAAH,GAAQE,QAF5B;IAGE,oBAAoB,MAHtB;IAIE,YAAY,MAJd;IAKE,OAAO,EAAEE,YALX;IAME,eAAe,EAAEJ,QAAQ,gBAAG,QAAC,IAAD;MAAM,IAAI,EAAC;IAAX;MAAA;MAAA;MAAA;IAAA,QAAH,GAA2B,YANtD;IAAA,GAOMD;EAPN;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CA7BM;;GAAMH,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}