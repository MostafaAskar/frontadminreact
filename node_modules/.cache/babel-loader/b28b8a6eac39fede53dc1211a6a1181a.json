{"ast":null,"code":"var _jsxFileName = \"/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/views/settings/general-settings/locations.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, Col, Form, Input, Row, Select } from 'antd';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Map from '../../../components/map';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\nimport useDemo from '../../../helpers/useDemo';\nimport getAddress from '../../../helpers/getAddress';\nimport useGoogle from 'react-google-autocomplete/lib/usePlacesAutocompleteService';\nimport { MAP_API_KEY } from '../../../configs/app-global';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Locations = _ref => {\n  _s();\n\n  let {\n    location,\n    setLocation\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [form] = Form.useForm();\n  const {\n    activeMenu\n  } = useSelector(state => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const {\n    isDemo\n  } = useDemo();\n  const [value, setValue] = useState('');\n  const {\n    placePredictions,\n    getPlacePredictions,\n    isPlacePredictionsLoading\n  } = useGoogle({\n    apiKey: MAP_API_KEY,\n    libraries: ['places', 'geocode']\n  });\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService.update(data).then(() => {\n      toast.success(t('successfully.updated'));\n      dispatch(getSettings());\n    }).finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = values => {\n    const body = { ...values,\n      location: `${location.lat}, ${location.lng}`\n    };\n    updateSettings(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    layout: \"vertical\",\n    form: form,\n    name: \"global-settings\",\n    onFinish: onFinish,\n    initialValues: { ...activeMenu.data\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 24,\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('google.map.key'),\n            name: \"google_map_key\",\n            rules: [{\n              required: true,\n              message: t('required')\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('address'),\n            name: `address`,\n            rules: [{\n              required: true,\n              message: t('required')\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              allowClear: true,\n              searchValue: value,\n              showSearch: true,\n              autoClearSearchValue: true,\n              loading: isPlacePredictionsLoading,\n              options: placePredictions === null || placePredictions === void 0 ? void 0 : placePredictions.map(prediction => ({\n                label: prediction.description,\n                value: prediction.description\n              })),\n              onSearch: searchValue => {\n                setValue(searchValue);\n\n                if (searchValue.length > 0) {\n                  getPlacePredictions({\n                    input: searchValue\n                  });\n                }\n              },\n              onSelect: async value => {\n                const address = await getAddress(value);\n                setLocation({\n                  lat: address === null || address === void 0 ? void 0 : address.geometry.location.lat,\n                  lng: address === null || address === void 0 ? void 0 : address.geometry.location.lng\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, 'address', false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 24,\n          children: /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('map'),\n            name: \"location\",\n            style: {\n              borderRadius: '50px'\n            },\n            children: /*#__PURE__*/_jsxDEV(Map, {\n              location: location,\n              setLocation: setLocation,\n              setAddress: value => form.setFieldsValue({\n                address: value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => form.submit(),\n        loading: loadingBtn,\n        disabled: isDemo,\n        children: t('save')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Locations, \"hMmPqBtoSLB/YeetdmxLHyHSFl8=\", false, function () {\n  return [useTranslation, Form.useForm, useSelector, useDispatch, useDemo, useGoogle];\n});\n\n_c = Locations;\nexport default Locations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Locations\");","map":{"version":3,"names":["Button","Card","Col","Form","Input","Row","Select","React","useState","useTranslation","useDispatch","shallowEqual","useSelector","toast","Map","settingService","fetchSettings","getSettings","useDemo","getAddress","useGoogle","MAP_API_KEY","Locations","location","setLocation","t","form","useForm","activeMenu","state","menu","dispatch","loadingBtn","setLoadingBtn","isDemo","value","setValue","placePredictions","getPlacePredictions","isPlacePredictionsLoading","apiKey","libraries","updateSettings","data","update","then","success","finally","onFinish","values","body","lat","lng","required","message","map","prediction","label","description","searchValue","length","input","address","geometry","borderRadius","setFieldsValue","submit"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/views/settings/general-settings/locations.js"],"sourcesContent":["import { Button, Card, Col, Form, Input, Row, Select } from 'antd';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Map from '../../../components/map';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\nimport useDemo from '../../../helpers/useDemo';\nimport getAddress from '../../../helpers/getAddress';\nimport useGoogle from 'react-google-autocomplete/lib/usePlacesAutocompleteService';\nimport { MAP_API_KEY } from '../../../configs/app-global';\n\nconst Locations = ({ location, setLocation }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { isDemo } = useDemo();\n  const [value, setValue] = useState('');\n  const { placePredictions, getPlacePredictions, isPlacePredictionsLoading } =\n    useGoogle({\n      apiKey: MAP_API_KEY,\n      libraries: ['places', 'geocode'],\n    });\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    const body = {\n      ...values,\n      location: `${location.lat}, ${location.lng}`,\n    };\n    updateSettings(body);\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{\n        ...activeMenu.data,\n      }}\n    >\n      <Card>\n        <Row>\n          <Col span={24}>\n            <Form.Item\n              label={t('google.map.key')}\n              name='google_map_key'\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              key={'address'}\n              label={t('address')}\n              name={`address`}\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n              ]}\n            >\n              <Select\n                allowClear\n                searchValue={value}\n                showSearch\n                autoClearSearchValue\n                loading={isPlacePredictionsLoading}\n                options={placePredictions?.map((prediction) => ({\n                  label: prediction.description,\n                  value: prediction.description,\n                }))}\n                onSearch={(searchValue) => {\n                  setValue(searchValue);\n                  if (searchValue.length > 0) {\n                    getPlacePredictions({ input: searchValue });\n                  }\n                }}\n                onSelect={async (value) => {\n                  const address = await getAddress(value);\n                  setLocation({\n                    lat: address?.geometry.location.lat,\n                    lng: address?.geometry.location.lng,\n                  });\n                }}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              label={t('map')}\n              name='location'\n              style={{ borderRadius: '50px' }}\n            >\n              <Map\n                location={location}\n                setLocation={setLocation}\n                setAddress={(value) => form.setFieldsValue({ address: value })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n          disabled={isDemo}\n        >\n          {t('save')}\n        </Button>\n      </Card>\n    </Form>\n  );\n};\n\nexport default Locations;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}