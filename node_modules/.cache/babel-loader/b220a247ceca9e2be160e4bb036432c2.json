{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport qs from 'qs';\nexport const useQueryParams = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = qs.parse(location.search, {\n    ignoreQueryPrefix: true\n  });\n\n  const set = (name, value) => navigate({\n    search: qs.stringify({ ...queryParams,\n      [name]: value\n    })\n  });\n\n  const clear = () => navigate({\n    search: qs.stringify({})\n  });\n\n  const merge = values => navigate({\n    search: qs.stringify({ ...queryParams,\n      ...values\n    })\n  });\n\n  const reset = name => {\n    const newParams = { ...queryParams\n    };\n\n    if (newParams[name]) {\n      delete newParams[name];\n    }\n\n    navigate({\n      search: qs.stringify({ ...newParams\n      })\n    });\n  };\n\n  return {\n    values: queryParams,\n    set,\n    reset,\n    clear,\n    merge\n  };\n};\n\n_s(useQueryParams, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});","map":{"version":3,"names":["useNavigate","useLocation","qs","useQueryParams","navigate","location","queryParams","parse","search","ignoreQueryPrefix","set","name","value","stringify","clear","merge","values","reset","newParams"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/helpers/useQueryParams.js"],"sourcesContent":["import { useNavigate, useLocation } from 'react-router-dom';\nimport qs from 'qs';\n\nexport const useQueryParams = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const queryParams = qs.parse(location.search, { ignoreQueryPrefix: true });\n\n  const set = (name, value) =>\n    navigate({ search: qs.stringify({ ...queryParams, [name]: value }) });\n  const clear = () => navigate({ search: qs.stringify({}) });\n  const merge = (values) =>\n    navigate({ search: qs.stringify({ ...queryParams, ...values }) });\n  const reset = (name) => {\n    const newParams = { ...queryParams };\n    if (newParams[name]) {\n      delete newParams[name];\n    }\n\n    navigate({ search: qs.stringify({ ...newParams }) });\n  };\n\n  return { values: queryParams, set, reset, clear, merge };\n};\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;EAAA;;EAClC,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;EACA,MAAMK,QAAQ,GAAGJ,WAAW,EAA5B;EAEA,MAAMK,WAAW,GAAGJ,EAAE,CAACK,KAAH,CAASF,QAAQ,CAACG,MAAlB,EAA0B;IAAEC,iBAAiB,EAAE;EAArB,CAA1B,CAApB;;EAEA,MAAMC,GAAG,GAAG,CAACC,IAAD,EAAOC,KAAP,KACVR,QAAQ,CAAC;IAAEI,MAAM,EAAEN,EAAE,CAACW,SAAH,CAAa,EAAE,GAAGP,WAAL;MAAkB,CAACK,IAAD,GAAQC;IAA1B,CAAb;EAAV,CAAD,CADV;;EAEA,MAAME,KAAK,GAAG,MAAMV,QAAQ,CAAC;IAAEI,MAAM,EAAEN,EAAE,CAACW,SAAH,CAAa,EAAb;EAAV,CAAD,CAA5B;;EACA,MAAME,KAAK,GAAIC,MAAD,IACZZ,QAAQ,CAAC;IAAEI,MAAM,EAAEN,EAAE,CAACW,SAAH,CAAa,EAAE,GAAGP,WAAL;MAAkB,GAAGU;IAArB,CAAb;EAAV,CAAD,CADV;;EAEA,MAAMC,KAAK,GAAIN,IAAD,IAAU;IACtB,MAAMO,SAAS,GAAG,EAAE,GAAGZ;IAAL,CAAlB;;IACA,IAAIY,SAAS,CAACP,IAAD,CAAb,EAAqB;MACnB,OAAOO,SAAS,CAACP,IAAD,CAAhB;IACD;;IAEDP,QAAQ,CAAC;MAAEI,MAAM,EAAEN,EAAE,CAACW,SAAH,CAAa,EAAE,GAAGK;MAAL,CAAb;IAAV,CAAD,CAAR;EACD,CAPD;;EASA,OAAO;IAAEF,MAAM,EAAEV,WAAV;IAAuBI,GAAvB;IAA4BO,KAA5B;IAAmCH,KAAnC;IAA0CC;EAA1C,CAAP;AACD,CArBM;;GAAMZ,c;UACMH,W,EACAC,W"},"metadata":{},"sourceType":"module"}