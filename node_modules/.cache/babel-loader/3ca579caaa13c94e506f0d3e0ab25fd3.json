{"ast":null,"code":"var _excluded = [\"children\", \"position\", \"scrollable\", \"loading\", \"className\"],\n    _excluded2 = [\"children\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { prefix } from \"../settings\";\nimport PerfectScrollbar from \"../Scroll\";\nimport classNames from \"classnames\";\nimport Overlay from \"../Overlay\";\nimport Loader from \"../Loader\";\nexport var Sidebar = function Sidebar(_ref) {\n  var children = _ref.children,\n      position = _ref.position,\n      scrollable = _ref.scrollable,\n      loading = _ref.loading,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var cName = \"\".concat(prefix, \"-sidebar\");\n\n  var sideClass = function () {\n    if (position === \"left\") {\n      return \"\".concat(cName, \"--left\");\n    } else if (position === \"right\") {\n      return \"\".concat(cName, \"--right\");\n    } else {\n      return \"\";\n    }\n  }();\n  /* eslint-disable react/display-name*/\n\n\n  var Tag = useMemo(function () {\n    return function (_ref2) {\n      var children = _ref2.children,\n          rest = _objectWithoutProperties(_ref2, _excluded2); // PerfectScrollbar for now can't be disabled, so render div instead of disabling it\n      // https://github.com/goldenyz/react-perfect-scrollbar/issues/107\n\n\n      if (scrollable === false || scrollable === true && loading === true) {\n        return /*#__PURE__*/React.createElement(\"div\", rest, loading && /*#__PURE__*/React.createElement(Overlay, null, /*#__PURE__*/React.createElement(Loader, null)), children);\n      } else {\n        return /*#__PURE__*/React.createElement(PerfectScrollbar, rest, children);\n      }\n    };\n  }, [scrollable, loading]);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, props, {\n    className: classNames(cName, sideClass, className)\n  }), children);\n};\nprocess.env.NODE_ENV !== \"production\" ? Sidebar.propTypes = {\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Sidebar can be placed on two positions */\n  position: PropTypes.oneOf([\"left\", \"right\"]),\n\n  /** Sidebar can be scrollable */\n  scrollable: PropTypes.bool,\n\n  /** Loading flag. */\n  loading: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : void 0;\nSidebar.defaultProps = {\n  children: undefined,\n  position: undefined,\n  scrollable: true,\n  loading: false,\n  className: \"\"\n};\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}