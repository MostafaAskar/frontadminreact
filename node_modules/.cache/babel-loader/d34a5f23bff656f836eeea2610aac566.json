{"ast":null,"code":"import React,{useEffect,useState}from'react';import{toast}from'react-toastify';import{Button,Card,Col,Form,Input,Row,Space}from'antd';import{shallowEqual,useDispatch,useSelector}from'react-redux';import{CKEditor}from'@ckeditor/ckeditor5-react';import ClassicEditor from'@ckeditor/ckeditor5-build-classic';import{disableRefetch,setMenuData}from'../../redux/slices/menu';import privacyService from'../../services/privacy';import{useTranslation}from'react-i18next';import Loading from'../../components/loading';import LanguageList from'../../components/language-list';import getTranslationFields from'../../helpers/getTranslationFields';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Policy(){const{t}=useTranslation();const{activeMenu}=useSelector(state=>state.menu,shallowEqual);const dispatch=useDispatch();const[form]=Form.useForm();const[loadingBtn,setLoadingBtn]=useState(false);const[loading,setLoading]=useState(false);const{languages,defaultLang}=useSelector(state=>state.formLang,shallowEqual);useEffect(()=>{return()=>{const data=form.getFieldsValue(true);dispatch(setMenuData({activeMenu,data}));};},[]);function getLanguageFields(data){if(!data){return{};}const{translations}=data;const result=languages.map(item=>{var _translations$find,_translations$find2;return{[`title[${item.locale}]`]:(_translations$find=translations.find(el=>el.locale===item.locale))===null||_translations$find===void 0?void 0:_translations$find.title,[`description[${item.locale}]`]:(_translations$find2=translations.find(el=>el.locale===item.locale))===null||_translations$find2===void 0?void 0:_translations$find2.description};});return Object.assign({},...result);}function fetchPolicy(){setLoading(true);privacyService.getPolicy().then(_ref=>{let{data}=_ref;return form.setFieldsValue({...getLanguageFields(data)});}).finally(()=>{setLoading(false);dispatch(disableRefetch(activeMenu));});}useEffect(()=>{if(activeMenu.refetch){fetchPolicy();}},[activeMenu.refetch]);const onFinish=values=>{const body={title:getTranslationFields(languages,values),description:getTranslationFields(languages,values,'description')};setLoadingBtn(true);privacyService.createPolicy(body).then(()=>{toast.success(t('successfully.saved'));}).finally(()=>setLoadingBtn(false));};return/*#__PURE__*/_jsx(Card,{title:t('policy'),extra:/*#__PURE__*/_jsx(LanguageList,{}),children:!loading?/*#__PURE__*/_jsxs(Form,{name:\"policy-form\",layout:\"vertical\",onFinish:onFinish,form:form,initialValues:activeMenu.data,children:[/*#__PURE__*/_jsxs(Row,{gutter:12,children:[/*#__PURE__*/_jsx(Col,{span:12,children:languages.map(item=>/*#__PURE__*/_jsx(Form.Item,{label:t('title'),name:`title[${item.locale}]`,rules:[{required:item.locale===defaultLang,message:t('required')}],hidden:item.locale!==defaultLang,children:/*#__PURE__*/_jsx(Input,{})},'title'+item.locale))}),/*#__PURE__*/_jsx(Col,{span:24,children:languages.map(item=>/*#__PURE__*/_jsx(Form.Item,{label:t('description'),name:`description[${item.locale}]`,valuePropName:\"data\",getValueFromEvent:(event,editor)=>{const data=editor.getData();return data;},rules:[{required:item.locale===defaultLang,message:t('required')}],hidden:item.locale!==defaultLang,children:/*#__PURE__*/_jsx(CKEditor,{editor:ClassicEditor})}))})]}),/*#__PURE__*/_jsx(Space,{children:/*#__PURE__*/_jsx(Button,{type:\"primary\",htmlType:\"submit\",loading:loadingBtn,children:t('save')})})]}):/*#__PURE__*/_jsx(Loading,{})});}","map":null,"metadata":{},"sourceType":"module"}