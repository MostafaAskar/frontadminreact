{"ast":null,"code":"import React from'react';import useGoogle from'react-google-autocomplete/lib/usePlacesAutocompleteService';import getAddress from'helpers/getAddress';import{MAP_API_KEY}from'configs/app-global';import{shallowEqual}from'react-redux';import{Form,Select}from'antd';import{t}from'i18next';import{useSelector}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";const AddressForm=_ref=>{let{value,setValue,setLocation}=_ref;const{placePredictions,getPlacePredictions,isPlacePredictionsLoading}=useGoogle({apiKey:MAP_API_KEY,libraries:['places','geocode']});const{defaultLang,languages}=useSelector(state=>state.formLang,shallowEqual);return/*#__PURE__*/_jsx(\"div\",{children:languages.map((item,idx)=>/*#__PURE__*/_jsx(Form.Item,{label:t('address'),name:`address[${item.locale}]`,rules:[{required:item.locale===defaultLang,message:t('required')}],hidden:item.locale!==defaultLang,children:/*#__PURE__*/_jsx(Select,{allowClear:true,searchValue:value,showSearch:true,autoClearSearchValue:true,loading:isPlacePredictionsLoading,options:placePredictions===null||placePredictions===void 0?void 0:placePredictions.map(prediction=>({label:prediction.description,value:prediction.description})),onSearch:searchValue=>{setValue(searchValue);if(searchValue.length>0){getPlacePredictions({input:searchValue});}},onSelect:async value=>{const address=await getAddress(value);setLocation({lat:address===null||address===void 0?void 0:address.geometry.location.lat,lng:address===null||address===void 0?void 0:address.geometry.location.lng});}})},'address'+idx))});};export default AddressForm;","map":null,"metadata":{},"sourceType":"module"}