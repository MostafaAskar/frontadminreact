{"ast":null,"code":"import List from'../List/index';import{DragDropContext,Draggable}from'react-beautiful-dnd';import{useState}from'react';import{Spin}from'antd';import Scrollbars from'react-custom-scrollbars';import{clearCurrentOrders,clearItems,setItems}from'../../../../../redux/slices/waiterOrder';import{shallowEqual,useDispatch}from'react-redux';import{useSelector}from'react-redux';import{LoadingOutlined}from'@ant-design/icons';import{useEffect}from'react';import{mockOrderList}from'../../../../../constants';import OrderCardLoader from'../../../../../components/order-card-loader';import{toast}from'react-toastify';import orderService from'../../../../../services/waiter/order';import OrderCardWaiter from'components/order-card-waiter';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const statuses=['new','accepted','ready','on_a_way','delivered','canceled'];const Incorporate=_ref=>{let{goToEdit,goToShow,fetchOrderAllItem,fetchOrders,setLocationsMap,setId,setIsModalVisible,setText,setDowloadModal,setType}=_ref;const dispatch=useDispatch();const{items}=useSelector(state=>state.waiterOrder,shallowEqual);const orders=useSelector(state=>state.waiterOrder,shallowEqual);const[key,setKey]=useState('');const[current,setCurrent]=useState({});const[currentCId,setCurrentCId]=useState({});const removeFromList=(list,index)=>{const result=Array.from(list);const[removed]=result.splice(index,1);return[removed,result];};const addToList=(list,index,element)=>{const result=Array.from(list);result.splice(index,0,element);return result;};const changeStatus=(id,params)=>{orderService.updateStatus(id,params).then(res=>{toast.success(`#${id} order status changed`);});};const onDragStart=task=>{const id=statuses.findIndex(item=>item===task.source.droppableId);setCurrent(task);setCurrentCId(id);};const onDragEnd=result=>{if(!result.destination){return;}if(result.destination&&current.source.droppableId!==result.destination.droppableId){changeStatus(result.draggableId,{status:result.destination.droppableId});}const listCopy={...items};const sourceList=listCopy[result.source.droppableId];const[removedElement,newSourceList]=removeFromList(sourceList,result.source.index);listCopy[result.source.droppableId]=newSourceList;const destinationList=listCopy[result.destination.droppableId];listCopy[result.destination.droppableId]=addToList(destinationList,result.destination.index,removedElement);dispatch(setItems(listCopy));setCurrentCId(null);};const handleScroll=(event,key)=>{const lastProductLoaded=event.target.lastChild;const pageOffset=event.target.clientHeight+event.target.scrollTop;if(lastProductLoaded){const lastProductLoadedOffset=lastProductLoaded.offsetTop+lastProductLoaded.clientHeight+19.9;if(pageOffset>lastProductLoadedOffset){if(orders[key].meta.last_page>orders[key].meta.current_page&&!orders[key].loading){setKey(key);fetchOrders({page:orders[key].meta.current_page+1,perPage:5,status:key});}}}};const checkIsEmpty=()=>{const array=Object.keys(items).map(item=>{if(items[item].length===0){return true;}else{return false;}});if(array.includes(true))return true;else return false;};const checkDisable=index=>{if(index===0&&currentCId===statuses.length-1)return false;if(Boolean(currentCId>index))return true;else return false;};useEffect(()=>{dispatch(clearItems());// if (checkIsEmpty()) {\nfetchOrderAllItem();// }\n},[]);const reloadOrder=item=>{dispatch(clearCurrentOrders(item));fetchOrders({status:item});};return/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:onDragEnd,onDragStart:onDragStart,children:/*#__PURE__*/_jsx(\"div\",{className:\"order-board\",children:statuses===null||statuses===void 0?void 0:statuses.map((item,index)=>{var _items$item,_items$item2,_items$item3,_mockOrderList$item;return/*#__PURE__*/_jsx(\"div\",{className:\"dnd-column\",children:/*#__PURE__*/_jsx(List,{title:item,onDragEnd:onDragEnd,name:item,isDropDisabled:checkDisable(index),total:(_items$item=items[item])===null||_items$item===void 0?void 0:_items$item.length,loading:orders[item].loading,reloadOrder:()=>reloadOrder(item),children:/*#__PURE__*/_jsxs(Scrollbars,{onScroll:e=>handleScroll(e,item),autoHeight:true,autoHeightMin:'75vh',autoHeightMax:'75vh',autoHide:true,id:item,children:[!Boolean(orders[item].loading&&!((_items$item2=items[item])!==null&&_items$item2!==void 0&&_items$item2.length))?(_items$item3=items[item])===null||_items$item3===void 0?void 0:_items$item3.map((data,index)=>/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Draggable,{draggableId:data.id.toString(),index:index,children:(provided,snapshot)=>/*#__PURE__*/_jsx(\"div\",{ref:provided.innerRef,...provided.draggableProps,...provided.dragHandleProps,children:/*#__PURE__*/_jsx(OrderCardWaiter,{data:data,goToShow:goToShow})})},data.id)})):(_mockOrderList$item=mockOrderList[item])===null||_mockOrderList$item===void 0?void 0:_mockOrderList$item.map(()=>/*#__PURE__*/_jsx(OrderCardLoader,{loading:true})),orders[item].loading&&item===key&&/*#__PURE__*/_jsx(Spin,{indicator:/*#__PURE__*/_jsx(LoadingOutlined,{style:{fontSize:24},spin:true})})]})})},item);})})});};export default Incorporate;","map":null,"metadata":{},"sourceType":"module"}