{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = usePlacesAutocompleteService;\n\nvar _react = require(\"react\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.debounce\"));\n\nvar _utils = require(\"./utils\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction usePlacesAutocompleteService(_ref) {\n  var apiKey = _ref.apiKey,\n      _ref$libraries = _ref.libraries,\n      libraries = _ref$libraries === void 0 ? \"places\" : _ref$libraries,\n      _ref$googleMapsScript = _ref.googleMapsScriptBaseUrl,\n      googleMapsScriptBaseUrl = _ref$googleMapsScript === void 0 ? _constants.GOOGLE_MAP_SCRIPT_BASE_URL : _ref$googleMapsScript,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === void 0 ? 300 : _ref$debounce,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      sessionToken = _ref.sessionToken,\n      language = _ref.language;\n  var languageQueryParam = language ? \"&language=\".concat(language) : \"\";\n  var googleMapsScriptUrl = \"\".concat(googleMapsScriptBaseUrl, \"?key=\").concat(apiKey, \"&libraries=\").concat(libraries).concat(languageQueryParam);\n\n  var _useState = (0, _react.useState)([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      placePredictions = _useState2[0],\n      setPlacePredictions = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isPlacePredsLoading = _useState4[0],\n      setIsPlacePredsLoading = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      placeInputValue = _useState6[0],\n      setPlaceInputValue = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isQueryPredsLoading = _useState8[0],\n      setIsQueryPredsLoading = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      queryInputValue = _useState10[0],\n      setQueryInputValue = _useState10[1];\n\n  var _useState11 = (0, _react.useState)([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      queryPredictions = _useState12[0],\n      setQueryPredictions = _useState12[1];\n\n  var placesAutocompleteService = (0, _react.useRef)(null);\n  var placesService = (0, _react.useRef)(null);\n  var autocompleteSession = (0, _react.useRef)(null);\n  var handleLoadScript = (0, _react.useCallback)(function () {\n    return (0, _utils.loadGoogleMapScript)(googleMapsScriptBaseUrl, googleMapsScriptUrl);\n  }, [googleMapsScriptBaseUrl, googleMapsScriptUrl]);\n  var debouncedPlacePredictions = (0, _react.useCallback)((0, _lodash.default)(function (optionsArg) {\n    if (placesAutocompleteService.current && optionsArg.input) placesAutocompleteService.current.getPlacePredictions(_objectSpread(_objectSpread(_objectSpread({}, sessionToken && autocompleteSession.current ? {\n      sessionToken: autocompleteSession.current\n    } : {}), options), optionsArg), function (r) {\n      setIsPlacePredsLoading(false);\n      setPlacePredictions(r || []);\n    });\n  }, debounce), [debounce]);\n  var debouncedQueryPredictions = (0, _react.useCallback)((0, _lodash.default)(function (optionsArg) {\n    if (placesAutocompleteService.current && optionsArg.input) placesAutocompleteService.current.getQueryPredictions(_objectSpread(_objectSpread(_objectSpread({}, sessionToken && autocompleteSession.current ? {\n      sessionToken: autocompleteSession.current\n    } : {}), options), optionsArg), function (r) {\n      setIsQueryPredsLoading(false);\n      setQueryPredictions(r || []);\n    });\n  }, debounce), [debounce]);\n  (0, _react.useEffect)(function () {\n    if (!_utils.isBrowser) return;\n\n    var buildService = function buildService() {\n      // eslint-disable-next-line no-undef\n      if (!google) return console.error(\"Google has not been found. Make sure your provide apiKey prop.\"); // eslint-disable-next-line no-undef\n\n      placesAutocompleteService.current = new google.maps.places.AutocompleteService(); // eslint-disable-next-line no-undef\n\n      placesService.current = new google.maps.places.PlacesService(document.createElement(\"div\"));\n      if (sessionToken) autocompleteSession.current = new google.maps.places.AutocompleteSessionToken();\n    };\n\n    if (apiKey) {\n      handleLoadScript().then(function () {\n        return buildService();\n      });\n    } else {\n      buildService();\n    }\n  }, []);\n  return {\n    placesService: placesService.current,\n    autocompleteSessionToken: autocompleteSession.current,\n    placesAutocompleteService: placesAutocompleteService.current,\n    placePredictions: placeInputValue ? placePredictions : [],\n    isPlacePredictionsLoading: isPlacePredsLoading,\n    getPlacePredictions: function getPlacePredictions(opt) {\n      if (opt.input) {\n        setPlaceInputValue(opt.input);\n        setIsPlacePredsLoading(true);\n        debouncedPlacePredictions(opt);\n        return;\n      }\n\n      setPlacePredictions([]);\n      setPlaceInputValue(null);\n      debouncedPlacePredictions(opt);\n      setIsPlacePredsLoading(false);\n    },\n    queryPredictions: queryInputValue ? queryPredictions : [],\n    isQueryPredictionsLoading: isQueryPredsLoading,\n    getQueryPredictions: function getQueryPredictions(opt) {\n      if (opt.input) {\n        setQueryInputValue(opt.input);\n        setIsQueryPredsLoading(true);\n        debouncedQueryPredictions(opt);\n        return;\n      }\n\n      setQueryPredictions([]);\n      setQueryInputValue(null);\n      debouncedQueryPredictions(opt);\n      setIsQueryPredsLoading(false);\n    },\n    refreshSessionToken: function refreshSessionToken() {\n      autocompleteSession.current = new google.maps.places.AutocompleteSessionToken();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}