{"ast":null,"code":"var _excluded = [\"children\", \"size\", \"className\", \"max\", \"activeIndex\", \"hoverToFront\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { allowedChildren } from \"../utils\";\nimport { prefix } from \"../settings\";\nimport classNames from \"classnames\";\nimport Avatar from \"../Avatar\";\nexport var AvatarGroup = function AvatarGroup(_ref) {\n  var children = _ref.children,\n      size = _ref.size,\n      className = _ref.className,\n      max = _ref.max,\n      activeIndex = _ref.activeIndex,\n      hoverToFront = _ref.hoverToFront,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var cName = \"\".concat(prefix, \"-avatar-group\"); // Reverse because of css\n\n  var avatars = typeof max === \"number\" && React.Children.count(children) > max ? React.Children.toArray(children).reverse().slice(0, max) : React.Children.toArray(children).reverse();\n  var reversedActiveIndex = typeof activeIndex === \"number\" ? avatars.length - activeIndex - 1 : undefined;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: classNames(cName, \"\".concat(cName, \"--\").concat(size), className)\n  }), avatars.map(function (a, i) {\n    var newProps = typeof reversedActiveIndex === \"number\" ? {\n      active: reversedActiveIndex === i\n    } : {};\n\n    if (hoverToFront === true) {\n      newProps.className = classNames(\"\".concat(prefix, \"-avatar--active-on-hover\"), a.props.className);\n    }\n\n    return /*#__PURE__*/React.cloneElement(a, newProps);\n  }));\n};\nAvatarGroup.displayName = \"AvatarGroup\";\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  /**\n   * Primary content.\n   * Allowed node:\n   *\n   * * &lt;Avatar /&gt;\n   */\n  children: allowedChildren([Avatar]),\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Maximum stacked children */\n  max: PropTypes.number,\n\n  /** Size */\n  size: PropTypes.oneOf([\"xs\", \"sm\", \"md\", \"lg\", \"fluid\"]),\n\n  /** Active index.\n   * Active element has higher z-index independent of its order.\n   */\n  activeIndex: PropTypes.number,\n\n  /** Bring to front on hover */\n  hoverToFront: PropTypes.bool\n} : void 0;\nAvatarGroup.defaultProps = {\n  size: \"md\"\n};\nexport default AvatarGroup;","map":null,"metadata":{},"sourceType":"module"}