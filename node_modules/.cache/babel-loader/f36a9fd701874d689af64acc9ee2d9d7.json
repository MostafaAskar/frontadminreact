{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialMenuItem = {\n  name: 'dashboard',\n  url: 'dashboard',\n  id: 1,\n  data: {},\n  refetch: true\n};\nconst initialState = {\n  menuItems: [initialMenuItem],\n  activeMenu: initialMenuItem\n};\nconst Menu = createSlice({\n  name: 'menu',\n  initialState,\n  reducers: {\n    addMenu(state, action) {\n      const existing = state.menuItems.find(item => item.id === action.payload.id);\n\n      if (!!existing) {\n        state.activeMenu = { ...existing,\n          refetch: true\n        };\n      } else {\n        let tempProductItem = { ...action.payload,\n          refetch: true\n        };\n        state.menuItems.push(tempProductItem);\n        state.activeMenu = tempProductItem;\n      }\n    },\n\n    removeFromMenu(state, action) {\n      const {\n        payload\n      } = action;\n      const nextActiveMenu = state.menuItems.find(item => item.url === (payload === null || payload === void 0 ? void 0 : payload.nextUrl));\n\n      if (nextActiveMenu) {\n        state.activeMenu = nextActiveMenu;\n        state.menuItems = state.menuItems.filter(item => item.id !== payload.id);\n      }\n    },\n\n    replaceMenu(state, action) {\n      const {\n        payload\n      } = action;\n      const menuIndex = state.menuItems.findIndex(item => item.id === state.activeMenu.id);\n      state.menuItems[menuIndex] = payload;\n      state.activeMenu = payload;\n    },\n\n    setActiveMenu(state, action) {\n      state.activeMenu = action.payload;\n    },\n\n    setMenu(state, action) {\n      state.menuItems[0] = action.payload;\n      state.activeMenu = action.payload;\n    },\n\n    clearMenu(state, action) {\n      state.menuItems = [initialMenuItem];\n      state.activeMenu = initialMenuItem;\n    },\n\n    setMenuData(state, action) {\n      const {\n        payload\n      } = action;\n      const existingIndex = state.menuItems.findIndex(item => item.id === payload.activeMenu.id);\n\n      if (state.activeMenu.id === payload.activeMenu.id) {\n        state.activeMenu.data = payload.data;\n      }\n\n      if (state.menuItems[existingIndex]) {\n        state.menuItems[existingIndex].data = payload.data;\n      }\n    },\n\n    setRefetch(state, action) {\n      const {\n        payload\n      } = action;\n      const existingIndex = state.menuItems.findIndex(item => item.id === payload.id);\n      state.activeMenu = { ...payload,\n        refetch: true\n      };\n\n      if (state.menuItems[existingIndex]) {\n        state.menuItems[existingIndex].refetch = true;\n      }\n    },\n\n    disableRefetch(state, action) {\n      const {\n        payload\n      } = action;\n      const existingIndex = state.menuItems.findIndex(item => item.id === payload.id);\n      state.activeMenu.refetch = false;\n\n      if (state.menuItems[existingIndex]) {\n        state.menuItems[existingIndex].refetch = false;\n      }\n    }\n\n  }\n});\nexport const {\n  addMenu,\n  removeFromMenu,\n  setActiveMenu,\n  setMenu,\n  clearMenu,\n  setMenuData,\n  setRefetch,\n  disableRefetch,\n  replaceMenu\n} = Menu.actions;\nexport default Menu.reducer;","map":{"version":3,"names":["createSlice","initialMenuItem","name","url","id","data","refetch","initialState","menuItems","activeMenu","Menu","reducers","addMenu","state","action","existing","find","item","payload","tempProductItem","push","removeFromMenu","nextActiveMenu","nextUrl","filter","replaceMenu","menuIndex","findIndex","setActiveMenu","setMenu","clearMenu","setMenuData","existingIndex","setRefetch","disableRefetch","actions","reducer"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/redux/slices/menu.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialMenuItem = {\n  name: 'dashboard',\n  url: 'dashboard',\n  id: 1,\n  data: {},\n  refetch: true,\n};\n\nconst initialState = {\n  menuItems: [initialMenuItem],\n  activeMenu: initialMenuItem,\n};\n\nconst Menu = createSlice({\n  name: 'menu',\n  initialState,\n  reducers: {\n    addMenu(state, action) {\n      const existing = state.menuItems.find(\n        (item) => item.id === action.payload.id\n      );\n\n      if (!!existing) {\n        state.activeMenu = { ...existing, refetch: true };\n      } else {\n        let tempProductItem = { ...action.payload, refetch: true };\n        state.menuItems.push(tempProductItem);\n        state.activeMenu = tempProductItem;\n      }\n    },\n\n    removeFromMenu(state, action) {\n      const { payload } = action;\n      const nextActiveMenu = state.menuItems.find(\n        (item) => item.url === payload?.nextUrl\n      );\n      if (nextActiveMenu) {\n        state.activeMenu = nextActiveMenu;\n        state.menuItems = state.menuItems.filter(\n          (item) => item.id !== payload.id\n        );\n      }\n    },\n\n    replaceMenu(state, action) {\n      const { payload } = action;\n      const menuIndex = state.menuItems.findIndex(\n        (item) => item.id === state.activeMenu.id\n      );\n      state.menuItems[menuIndex] = payload;\n      state.activeMenu = payload;\n    },\n\n    setActiveMenu(state, action) {\n      state.activeMenu = action.payload;\n    },\n\n    setMenu(state, action) {\n      state.menuItems[0] = action.payload;\n      state.activeMenu = action.payload;\n    },\n    clearMenu(state, action) {\n      state.menuItems = [initialMenuItem];\n      state.activeMenu = initialMenuItem;\n    },\n    setMenuData(state, action) {\n      const { payload } = action;\n      const existingIndex = state.menuItems.findIndex(\n        (item) => item.id === payload.activeMenu.id\n      );\n      if (state.activeMenu.id === payload.activeMenu.id) {\n        state.activeMenu.data = payload.data;\n      }\n      if (state.menuItems[existingIndex]) {\n        state.menuItems[existingIndex].data = payload.data;\n      }\n    },\n    setRefetch(state, action) {\n      const { payload } = action;\n      const existingIndex = state.menuItems.findIndex(\n        (item) => item.id === payload.id\n      );\n      state.activeMenu = { ...payload, refetch: true };\n      if (state.menuItems[existingIndex]) {\n        state.menuItems[existingIndex].refetch = true;\n      }\n    },\n    disableRefetch(state, action) {\n      const { payload } = action;\n      const existingIndex = state.menuItems.findIndex(\n        (item) => item.id === payload.id\n      );\n      state.activeMenu.refetch = false;\n      if (state.menuItems[existingIndex]) {\n        state.menuItems[existingIndex].refetch = false;\n      }\n    },\n  },\n});\n\nexport const {\n  addMenu,\n  removeFromMenu,\n  setActiveMenu,\n  setMenu,\n  clearMenu,\n  setMenuData,\n  setRefetch,\n  disableRefetch,\n  replaceMenu,\n} = Menu.actions;\nexport default Menu.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}