{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport ReportService from '../../../services/reports';\nconst initialState = {\n  loading: false,\n  revenueList: [],\n  chartData: [],\n  error: ''\n};\nexport const fetchReportRevenue = createAsyncThunk('report/fetchReportRevenue', function () {\n  let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return ReportService.getRevenueReport(params).then(res => res.data);\n});\nexport const fetchReportRevenueChart = createAsyncThunk('report/fetchReportRevenueChart', function () {\n  let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return ReportService.getOrderChart(params).then(res => res.data);\n});\nconst revenueReportSlice = createSlice({\n  name: 'revenueReport',\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(fetchReportRevenue.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportRevenue.fulfilled, (state, action) => {\n      state.loading = false;\n      state.revenueList = action.payload;\n      state.error = '';\n    });\n    builder.addCase(fetchReportRevenue.rejected, (state, action) => {\n      state.loading = false;\n      state.revenueList = [];\n      state.error = action.error.message;\n    });\n    builder.addCase(fetchReportRevenueChart.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportRevenueChart.fulfilled, (state, action) => {\n      state.loading = false;\n      state.chartData = action.payload;\n      state.error = '';\n    });\n    builder.addCase(fetchReportRevenueChart.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.error = action.error.message;\n    });\n  }\n});\nexport default revenueReportSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","ReportService","initialState","loading","revenueList","chartData","error","fetchReportRevenue","params","getRevenueReport","then","res","data","fetchReportRevenueChart","getOrderChart","revenueReportSlice","name","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/redux/slices/report/revenue.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport ReportService from '../../../services/reports';\n\nconst initialState = {\n  loading: false,\n  revenueList: [],\n  chartData: [],\n  error: '',\n};\n\nexport const fetchReportRevenue = createAsyncThunk(\n  'report/fetchReportRevenue',\n  (params = {}) =>\n    ReportService.getRevenueReport(params).then((res) => res.data)\n);\n\nexport const fetchReportRevenueChart = createAsyncThunk(\n  'report/fetchReportRevenueChart',\n  (params = {}) => ReportService.getOrderChart(params).then((res) => res.data)\n);\n\nconst revenueReportSlice = createSlice({\n  name: 'revenueReport',\n\n  initialState,\n  extraReducers: (builder) => {\n    builder.addCase(fetchReportRevenue.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportRevenue.fulfilled, (state, action) => {\n      state.loading = false;\n      state.revenueList = action.payload;\n      state.error = '';\n    });\n    builder.addCase(fetchReportRevenue.rejected, (state, action) => {\n      state.loading = false;\n      state.revenueList = [];\n      state.error = action.error.message;\n    });\n    builder.addCase(fetchReportRevenueChart.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchReportRevenueChart.fulfilled, (state, action) => {\n      state.loading = false;\n      state.chartData = action.payload;\n      state.error = '';\n    });\n    builder.addCase(fetchReportRevenueChart.rejected, (state, action) => {\n      state.loading = false;\n      state.chartData = [];\n      state.error = action.error.message;\n    });\n  },\n});\n\nexport default revenueReportSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AAEA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,KADU;EAEnBC,WAAW,EAAE,EAFM;EAGnBC,SAAS,EAAE,EAHQ;EAInBC,KAAK,EAAE;AAJY,CAArB;AAOA,OAAO,MAAMC,kBAAkB,GAAGR,gBAAgB,CAChD,2BADgD,EAEhD;EAAA,IAACS,MAAD,uEAAU,EAAV;EAAA,OACEP,aAAa,CAACQ,gBAAd,CAA+BD,MAA/B,EAAuCE,IAAvC,CAA6CC,GAAD,IAASA,GAAG,CAACC,IAAzD,CADF;AAAA,CAFgD,CAA3C;AAMP,OAAO,MAAMC,uBAAuB,GAAGd,gBAAgB,CACrD,gCADqD,EAErD;EAAA,IAACS,MAAD,uEAAU,EAAV;EAAA,OAAiBP,aAAa,CAACa,aAAd,CAA4BN,MAA5B,EAAoCE,IAApC,CAA0CC,GAAD,IAASA,GAAG,CAACC,IAAtD,CAAjB;AAAA,CAFqD,CAAhD;AAKP,MAAMG,kBAAkB,GAAGf,WAAW,CAAC;EACrCgB,IAAI,EAAE,eAD+B;EAGrCd,YAHqC;EAIrCe,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CAACC,OAAR,CAAgBZ,kBAAkB,CAACa,OAAnC,EAA6CC,KAAD,IAAW;MACrDA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;IACD,CAFD;IAGAe,OAAO,CAACC,OAAR,CAAgBZ,kBAAkB,CAACe,SAAnC,EAA8C,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAC/DF,KAAK,CAAClB,OAAN,GAAgB,KAAhB;MACAkB,KAAK,CAACjB,WAAN,GAAoBmB,MAAM,CAACC,OAA3B;MACAH,KAAK,CAACf,KAAN,GAAc,EAAd;IACD,CAJD;IAKAY,OAAO,CAACC,OAAR,CAAgBZ,kBAAkB,CAACkB,QAAnC,EAA6C,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MAC9DF,KAAK,CAAClB,OAAN,GAAgB,KAAhB;MACAkB,KAAK,CAACjB,WAAN,GAAoB,EAApB;MACAiB,KAAK,CAACf,KAAN,GAAciB,MAAM,CAACjB,KAAP,CAAaoB,OAA3B;IACD,CAJD;IAKAR,OAAO,CAACC,OAAR,CAAgBN,uBAAuB,CAACO,OAAxC,EAAkDC,KAAD,IAAW;MAC1DA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;IACD,CAFD;IAGAe,OAAO,CAACC,OAAR,CAAgBN,uBAAuB,CAACS,SAAxC,EAAmD,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACpEF,KAAK,CAAClB,OAAN,GAAgB,KAAhB;MACAkB,KAAK,CAAChB,SAAN,GAAkBkB,MAAM,CAACC,OAAzB;MACAH,KAAK,CAACf,KAAN,GAAc,EAAd;IACD,CAJD;IAKAY,OAAO,CAACC,OAAR,CAAgBN,uBAAuB,CAACY,QAAxC,EAAkD,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MACnEF,KAAK,CAAClB,OAAN,GAAgB,KAAhB;MACAkB,KAAK,CAAChB,SAAN,GAAkB,EAAlB;MACAgB,KAAK,CAACf,KAAN,GAAciB,MAAM,CAACjB,KAAP,CAAaoB,OAA3B;IACD,CAJD;EAKD;AA/BoC,CAAD,CAAtC;AAkCA,eAAeX,kBAAkB,CAACY,OAAlC"},"metadata":{},"sourceType":"module"}