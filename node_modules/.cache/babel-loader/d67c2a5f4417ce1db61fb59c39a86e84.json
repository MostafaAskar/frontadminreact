{"ast":null,"code":"var _jsxFileName = \"/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/views/settings/general-settings/qr-code.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, Col, Form, Input, Modal, Radio, Row } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { setMenuData } from '../../../redux/slices/menu';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\nimport { QrCodeCard } from 'components/qr-code-card';\nimport '../../../assets/scss/components/radio-card.scss';\nimport { ExclamationCircleFilled } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  confirm\n} = Modal;\nconst qrCodeTypes = [{\n  title: 'View 1',\n  value: 'w1',\n  img: '/img/qr-code-type1.png'\n}, {\n  title: 'View 2',\n  value: 'w2',\n  img: '/img/qr-code-type2.png'\n}, {\n  title: 'View 3',\n  value: 'w3',\n  img: '/img/qr-code-type3.png'\n}];\n\nconst QrCode = () => {\n  _s();\n\n  var _activeMenu$data;\n\n  const {\n    t\n  } = useTranslation();\n  const [form] = Form.useForm();\n  const {\n    activeMenu\n  } = useSelector(state => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [value, setValue] = useState(((_activeMenu$data = activeMenu.data) === null || _activeMenu$data === void 0 ? void 0 : _activeMenu$data.qrcode_type) || qrCodeTypes[0].value);\n\n  const showConfirm = type => {\n    confirm({\n      title: t('do_you_want_to_change_qrcode_type'),\n      centered: true,\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleFilled, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this),\n\n      onOk() {\n        setValue(type);\n      }\n\n    });\n  };\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({\n        activeMenu,\n        data\n      }));\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService.update(data).then(() => {\n      toast.success(t('successfully.updated'));\n      dispatch(getSettings());\n    }).finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = values => updateSettings({ ...values,\n    qrcode_type: value\n  });\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    layout: \"vertical\",\n    form: form,\n    name: \"global-settings\",\n    onFinish: onFinish,\n    initialValues: { ...activeMenu.data\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      title: t('qrcode'),\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        gutter: 12,\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 12,\n          children: /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('qrcode.base.url'),\n            name: \"qrcode_base_url\",\n            rules: [{\n              validator(_, value) {\n                if (!value) {\n                  return Promise.reject(new Error(t('required')));\n                } else if (value && (value === null || value === void 0 ? void 0 : value.trim()) === '') {\n                  return Promise.reject(new Error(t('no.empty.space')));\n                } else if ((value === null || value === void 0 ? void 0 : value.length) < 2) {\n                  return Promise.reject(new Error(t('must.be.at.least.2')));\n                }\n\n                return Promise.resolve();\n              }\n\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 24,\n          style: {\n            marginBottom: '20px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('qrcode.type'),\n            children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n              value: value,\n              className: \"cards-container\",\n              children: qrCodeTypes.map(type => /*#__PURE__*/_jsxDEV(Radio, {\n                onClick: () => showConfirm(type.value),\n                value: type.value,\n                className: \"qr-radio-input-card-container\",\n                children: /*#__PURE__*/_jsxDEV(QrCodeCard, {\n                  title: type.title,\n                  checked: value === type.value,\n                  imgPath: type.img\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => form.submit(),\n        loading: loadingBtn,\n        children: t('save')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QrCode, \"e4MwgIvOToB+ZkLbB8WwATBudFM=\", false, function () {\n  return [useTranslation, Form.useForm, useSelector, useDispatch];\n});\n\n_c = QrCode;\nexport default QrCode;\n\nvar _c;\n\n$RefreshReg$(_c, \"QrCode\");","map":{"version":3,"names":["Button","Card","Col","Form","Input","Modal","Radio","Row","React","useState","useEffect","useTranslation","useSelector","useDispatch","shallowEqual","toast","setMenuData","settingService","fetchSettings","getSettings","QrCodeCard","ExclamationCircleFilled","confirm","qrCodeTypes","title","value","img","QrCode","t","form","useForm","activeMenu","state","menu","dispatch","loadingBtn","setLoadingBtn","setValue","data","qrcode_type","showConfirm","type","centered","icon","onOk","getFieldsValue","updateSettings","update","then","success","finally","onFinish","values","validator","_","Promise","reject","Error","trim","length","resolve","marginBottom","map","submit"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/views/settings/general-settings/qr-code.js"],"sourcesContent":["import { Button, Card, Col, Form, Input, Modal, Radio, Row } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { shallowEqual } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { setMenuData } from '../../../redux/slices/menu';\nimport settingService from '../../../services/settings';\nimport { fetchSettings as getSettings } from '../../../redux/slices/globalSettings';\nimport { QrCodeCard } from 'components/qr-code-card';\nimport '../../../assets/scss/components/radio-card.scss';\nimport { ExclamationCircleFilled } from '@ant-design/icons';\n\nconst { confirm } = Modal;\nconst qrCodeTypes = [\n  {\n    title: 'View 1',\n    value: 'w1',\n    img: '/img/qr-code-type1.png',\n  },\n  {\n    title: 'View 2',\n    value: 'w2',\n    img: '/img/qr-code-type2.png',\n  },\n  {\n    title: 'View 3',\n    value: 'w3',\n    img: '/img/qr-code-type3.png',\n  },\n];\n\nconst QrCode = () => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [value, setValue] = useState(\n    activeMenu.data?.qrcode_type || qrCodeTypes[0].value\n  );\n\n  const showConfirm = (type) => {\n    confirm({\n      title: t('do_you_want_to_change_qrcode_type'),\n      centered: true,\n      icon: <ExclamationCircleFilled />,\n      onOk() {\n        setValue(type);\n      },\n    });\n  };\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) =>\n    updateSettings({ ...values, qrcode_type: value });\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{\n        ...activeMenu.data,\n      }}\n    >\n      <Card title={t('qrcode')}>\n        <Row gutter={12}>\n          <Col span={12}>\n            <Form.Item\n              label={t('qrcode.base.url')}\n              name='qrcode_base_url'\n              rules={[\n                {\n                  validator(_, value) {\n                    if (!value) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value?.length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={24} style={{ marginBottom: '20px' }}>\n            <Form.Item label={t('qrcode.type')}>\n              <Radio.Group value={value} className='cards-container'>\n                {qrCodeTypes.map((type) => (\n                  <Radio\n                    onClick={() => showConfirm(type.value)}\n                    value={type.value}\n                    className='qr-radio-input-card-container'\n                  >\n                    <QrCodeCard\n                      title={type.title}\n                      checked={value === type.value}\n                      imgPath={type.img}\n                    />\n                  </Radio>\n                ))}\n              </Radio.Group>\n            </Form.Item>\n          </Col>\n        </Row>\n        <Button\n          type='primary'\n          onClick={() => form.submit()}\n          loading={loadingBtn}\n        >\n          {t('save')}\n        </Button>\n      </Card>\n    </Form>\n  );\n};\n\nexport default QrCode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}