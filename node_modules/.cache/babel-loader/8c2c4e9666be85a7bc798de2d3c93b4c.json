{"ast":null,"code":"var _jsxFileName = \"/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/components/forms/address-form.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useGoogle from 'react-google-autocomplete/lib/usePlacesAutocompleteService';\nimport getAddress from 'helpers/getAddress';\nimport { MAP_API_KEY } from 'configs/app-global';\nimport { shallowEqual } from 'react-redux';\nimport { Form, Select } from 'antd';\nimport { t } from 'i18next';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddressForm = _ref => {\n  _s();\n\n  let {\n    value,\n    setValue,\n    setLocation\n  } = _ref;\n  const {\n    placePredictions,\n    getPlacePredictions,\n    isPlacePredictionsLoading\n  } = useGoogle({\n    apiKey: MAP_API_KEY,\n    libraries: ['places', 'geocode']\n  });\n  const {\n    defaultLang,\n    languages\n  } = useSelector(state => state.formLang, shallowEqual);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: languages.map((item, idx) => /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: t('address'),\n      name: `address[${item.locale}]`,\n      rules: [{\n        required: item.locale === defaultLang,\n        message: t('required')\n      }],\n      hidden: item.locale !== defaultLang,\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        allowClear: true,\n        searchValue: value,\n        showSearch: true,\n        autoClearSearchValue: true,\n        loading: isPlacePredictionsLoading,\n        options: placePredictions === null || placePredictions === void 0 ? void 0 : placePredictions.map(prediction => ({\n          label: prediction.description,\n          value: prediction.description\n        })),\n        onSearch: searchValue => {\n          setValue(searchValue);\n\n          if (searchValue.length > 0) {\n            getPlacePredictions({\n              input: searchValue\n            });\n          }\n        },\n        onSelect: async value => {\n          const address = await getAddress(value);\n          setLocation({\n            lat: address === null || address === void 0 ? void 0 : address.geometry.location.lat,\n            lng: address === null || address === void 0 ? void 0 : address.geometry.location.lng\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, 'address' + idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddressForm, \"8fT1/ZuFC05TTdZYROPdUH2QKio=\", false, function () {\n  return [useGoogle, useSelector];\n});\n\n_c = AddressForm;\nexport default AddressForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressForm\");","map":{"version":3,"names":["React","useGoogle","getAddress","MAP_API_KEY","shallowEqual","Form","Select","t","useSelector","AddressForm","value","setValue","setLocation","placePredictions","getPlacePredictions","isPlacePredictionsLoading","apiKey","libraries","defaultLang","languages","state","formLang","map","item","idx","locale","required","message","prediction","label","description","searchValue","length","input","address","lat","geometry","location","lng"],"sources":["/home/mostafa/Magde/new uzmart/admin/uzmart-admin-main/src/components/forms/address-form.js"],"sourcesContent":["import React from 'react';\nimport useGoogle from 'react-google-autocomplete/lib/usePlacesAutocompleteService';\nimport getAddress from 'helpers/getAddress';\nimport { MAP_API_KEY } from 'configs/app-global';\nimport { shallowEqual } from 'react-redux';\nimport { Form, Select } from 'antd';\nimport { t } from 'i18next';\nimport { useSelector } from 'react-redux';\n\nconst AddressForm = ({ value, setValue, setLocation }) => {\n  const { placePredictions, getPlacePredictions, isPlacePredictionsLoading } =\n    useGoogle({\n      apiKey: MAP_API_KEY,\n      libraries: ['places', 'geocode'],\n    });\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual,\n  );\n\n  return (\n    <div>\n      {languages.map((item, idx) => (\n        <Form.Item\n          key={'address' + idx}\n          label={t('address')}\n          name={`address[${item.locale}]`}\n          rules={[\n            {\n              required: item.locale === defaultLang,\n              message: t('required'),\n            },\n          ]}\n          hidden={item.locale !== defaultLang}\n        >\n          <Select\n            allowClear\n            searchValue={value}\n            showSearch\n            autoClearSearchValue\n            loading={isPlacePredictionsLoading}\n            options={placePredictions?.map((prediction) => ({\n              label: prediction.description,\n              value: prediction.description,\n            }))}\n            onSearch={(searchValue) => {\n              setValue(searchValue);\n              if (searchValue.length > 0) {\n                getPlacePredictions({ input: searchValue });\n              }\n            }}\n            onSelect={async (value) => {\n              const address = await getAddress(value);\n              setLocation({\n                lat: address?.geometry.location.lat,\n                lng: address?.geometry.location.lng,\n              });\n            }}\n          />\n        </Form.Item>\n      ))}\n    </div>\n  );\n};\n\nexport default AddressForm;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,4DAAtB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,MAA7B;AACA,SAASC,CAAT,QAAkB,SAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,WAAW,GAAG,QAAsC;EAAA;;EAAA,IAArC;IAAEC,KAAF;IAASC,QAAT;IAAmBC;EAAnB,CAAqC;EACxD,MAAM;IAAEC,gBAAF;IAAoBC,mBAApB;IAAyCC;EAAzC,IACJd,SAAS,CAAC;IACRe,MAAM,EAAEb,WADA;IAERc,SAAS,EAAE,CAAC,QAAD,EAAW,SAAX;EAFH,CAAD,CADX;EAKA,MAAM;IAAEC,WAAF;IAAeC;EAAf,IAA6BX,WAAW,CAC3CY,KAAD,IAAWA,KAAK,CAACC,QAD2B,EAE5CjB,YAF4C,CAA9C;EAKA,oBACE;IAAA,UACGe,SAAS,CAACG,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACb,QAAC,IAAD,CAAM,IAAN;MAEE,KAAK,EAAEjB,CAAC,CAAC,SAAD,CAFV;MAGE,IAAI,EAAG,WAAUgB,IAAI,CAACE,MAAO,GAH/B;MAIE,KAAK,EAAE,CACL;QACEC,QAAQ,EAAEH,IAAI,CAACE,MAAL,KAAgBP,WAD5B;QAEES,OAAO,EAAEpB,CAAC,CAAC,UAAD;MAFZ,CADK,CAJT;MAUE,MAAM,EAAEgB,IAAI,CAACE,MAAL,KAAgBP,WAV1B;MAAA,uBAYE,QAAC,MAAD;QACE,UAAU,MADZ;QAEE,WAAW,EAAER,KAFf;QAGE,UAAU,MAHZ;QAIE,oBAAoB,MAJtB;QAKE,OAAO,EAAEK,yBALX;QAME,OAAO,EAAEF,gBAAF,aAAEA,gBAAF,uBAAEA,gBAAgB,CAAES,GAAlB,CAAuBM,UAAD,KAAiB;UAC9CC,KAAK,EAAED,UAAU,CAACE,WAD4B;UAE9CpB,KAAK,EAAEkB,UAAU,CAACE;QAF4B,CAAjB,CAAtB,CANX;QAUE,QAAQ,EAAGC,WAAD,IAAiB;UACzBpB,QAAQ,CAACoB,WAAD,CAAR;;UACA,IAAIA,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;YAC1BlB,mBAAmB,CAAC;cAAEmB,KAAK,EAAEF;YAAT,CAAD,CAAnB;UACD;QACF,CAfH;QAgBE,QAAQ,EAAE,MAAOrB,KAAP,IAAiB;UACzB,MAAMwB,OAAO,GAAG,MAAMhC,UAAU,CAACQ,KAAD,CAAhC;UACAE,WAAW,CAAC;YACVuB,GAAG,EAAED,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,QAAT,CAAkBC,QAAlB,CAA2BF,GADtB;YAEVG,GAAG,EAAEJ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,QAAT,CAAkBC,QAAlB,CAA2BC;UAFtB,CAAD,CAAX;QAID;MAtBH;QAAA;QAAA;QAAA;MAAA;IAZF,GACO,YAAYd,GADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AA2CD,CAtDD;;GAAMf,W;UAEFR,S,EAIiCO,W;;;KAN/BC,W;AAwDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}