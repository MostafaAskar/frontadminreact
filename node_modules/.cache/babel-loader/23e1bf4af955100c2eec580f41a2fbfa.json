{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nimport React from \"react\";\n/* eslint-disable  @typescript-eslint/no-empty-function */\n\nexport var noop = function noop() {};\n/**\n * Tests if children are nil in React and Preact.\n * @param {Object} children The children prop of a component.\n * @returns {Boolean}\n */\n\nexport var isChildrenNil = function isChildrenNil(children) {\n  return children === null || children === undefined || Array.isArray(children) && children.length === 0;\n};\n/**\n * Gets only specified types children\n * @param children\n * @param {Array} types\n * @returns {[]}\n */\n\nexport var getChildren = function getChildren(children, types) {\n  var ret = [];\n  var strTypes = types.map(function (t) {\n    return t.displayName || t.name;\n  });\n  React.Children.toArray(children).forEach(function (item) {\n    var idx = types.indexOf(item.type);\n\n    if (idx !== -1) {\n      ret[idx] = item;\n    } else {\n      var _item$props$as, _item$props, _item$props2;\n\n      var is = (_item$props$as = item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.as) !== null && _item$props$as !== void 0 ? _item$props$as : item === null || item === void 0 ? void 0 : (_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.is;\n\n      var typeofIs = _typeof(is);\n\n      if (typeofIs === \"function\") {\n        // Type\n        var fIdx = types.indexOf(is);\n\n        if (fIdx !== -1) {\n          ret[fIdx] = /*#__PURE__*/React.cloneElement(item, _objectSpread(_objectSpread({}, item.props), {}, {\n            as: null\n          })); // Cloning to remove \"as\" attribute, which is not desirable\n        }\n      } else if (typeofIs === \"object\") {\n        // forward ref\n        var typeName = is.name || is.displayName;\n        var tIdx = strTypes.indexOf(typeName);\n\n        if (tIdx !== -1) {\n          ret[tIdx] = /*#__PURE__*/React.cloneElement(item, _objectSpread(_objectSpread({}, item.props), {}, {\n            as: null\n          })); // Cloning to remove \"as\" attribute, which is not desirable\n        }\n      } else if (typeofIs === \"string\") {\n        var sIdx = strTypes.indexOf(is);\n\n        if (sIdx !== -1) {\n          ret[sIdx] = item;\n        }\n      }\n    }\n  });\n  return ret;\n};\nexport var getComponentName = function getComponentName(component) {\n  if (typeof component === \"string\") {\n    return component;\n  }\n\n  if (\"type\" in component) {\n    var componentType = _typeof(component.type);\n\n    if (componentType === \"function\" || componentType === \"object\") {\n      if (\"displayName\" in component.type) {\n        return component.type.displayName;\n      }\n\n      if (\"name\" in component.type) {\n        return component.type.name;\n      }\n    } else if (componentType === \"string\") {\n      return component.type;\n    }\n\n    return \"undefined\";\n  }\n\n  return \"undefined\";\n};\n/**\n * PropTypes validator.\n * Checks if all children is allowed by its types.\n * Empty string nodes are always allowed for convenience.\n * Returns function for propTypes\n * @param {Array} allowedTypes\n * @return {Function}\n */\n\nexport var allowedChildren = function allowedChildren(allowedTypes) {\n  return function (props, propName, componentName) {\n    var allowedTypesAsStrings = allowedTypes.map(function (t) {\n      return t.name || t.displayName;\n    }); // Function as Child is not supported by React.Children... functions\n    // and can be antipattern: https://americanexpress.io/faccs-are-an-antipattern/\n    // But we don't check fd function is passed as children and its intentional\n    // Passing function as children has no effect in chat-ui-kit\n\n    var forbidden = React.Children.toArray(props[propName]).find(function (item) {\n      if (typeof item === \"string\" && item.trim().length === 0) {\n        // Ignore string\n        return false;\n      }\n\n      if (allowedTypes.indexOf(item.type) === -1) {\n        var _item$props3, _item$props4;\n\n        var is = (item === null || item === void 0 ? void 0 : (_item$props3 = item.props) === null || _item$props3 === void 0 ? void 0 : _item$props3.as) || (item === null || item === void 0 ? void 0 : (_item$props4 = item.props) === null || _item$props4 === void 0 ? void 0 : _item$props4.is);\n\n        var typeofIs = _typeof(is);\n\n        if (typeofIs === \"function\") {\n          // Type\n          return allowedTypes.indexOf(is) === -1;\n        } else if (typeofIs === \"object\") {\n          // Forward ref\n          var typeName = is.name || is.displayName;\n          return allowedTypesAsStrings.indexOf(typeName) === -1;\n        } else if (typeofIs === \"string\") {\n          return allowedTypesAsStrings.indexOf(is) === -1;\n        } else {\n          return true;\n        }\n      }\n\n      return undefined;\n    });\n\n    if (typeof forbidden !== \"undefined\") {\n      var typeName = getComponentName(forbidden);\n      var allowedNames = allowedTypes.map(function (t) {\n        return t.name || t.displayName;\n      }).join(\", \");\n      var errMessage = \"\\\"\".concat(typeName, \"\\\" is not a valid child for \").concat(componentName, \". Allowed types: \").concat(allowedNames);\n      return new Error(errMessage);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}