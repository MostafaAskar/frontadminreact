{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nvar _excluded = [\"children\", \"typingIndicator\", \"loading\", \"loadingMore\", \"loadingMorePosition\", \"onYReachStart\", \"onYReachEnd\", \"className\", \"disableOnYReachWhenNoScroll\", \"scrollBehavior\", \"autoScrollToBottom\", \"autoScrollToBottomOnMount\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { forwardRef, useImperativeHandle, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { allowedChildren, getChildren } from \"../utils\";\nimport { prefix } from \"../settings\";\nimport PerfectScrollbar from \"../Scroll\";\nimport Loader from \"../Loader\";\nimport Overlay from \"../Overlay\";\nimport Message from \"../Message\";\nimport MessageGroup from \"../MessageGroup\";\nimport MessageSeparator from \"../MessageSeparator\";\nimport MessageListContent from \"./MessageListContent\";\n\nvar MessageListInner = /*#__PURE__*/function (_React$Component) {\n  _inherits(MessageListInner, _React$Component);\n\n  var _super = _createSuper(MessageListInner);\n\n  function MessageListInner(props) {\n    var _this;\n\n    _classCallCheck(this, MessageListInner);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResize\", function () {\n      // If container is smaller than before resize - scroll to End\n      if (_this.containerRef.current.clientHeight < _this.lastClientHeight) {\n        _this.scrollToEnd(_this.props.scrollBehavior);\n      }\n\n      _this.scrollRef.current.updateScroll();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerResize\", function () {\n      if (_this.resizeTicking === false) {\n        window.requestAnimationFrame(function () {\n          var list = _this.containerRef.current;\n\n          if (list) {\n            var currentHeight = list.clientHeight;\n            var diff = currentHeight - _this.lastClientHeight;\n\n            if (diff >= 1) {\n              // Because fractional\n              if (_this.preventScrollTop === false) {\n                list.scrollTop = Math.round(list.scrollTop) - diff;\n              }\n            } else {\n              list.scrollTop = list.scrollTop - diff;\n            }\n\n            _this.lastClientHeight = list.clientHeight;\n\n            _this.scrollRef.current.updateScroll();\n          }\n\n          _this.resizeTicking = false;\n        });\n        _this.resizeTicking = true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSticked\", function () {\n      var list = _this.containerRef.current;\n      return list.scrollHeight === Math.round(list.scrollTop + list.clientHeight);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      if (_this.scrollTicking === false) {\n        window.requestAnimationFrame(function () {\n          if (_this.noScroll === false) {\n            _this.preventScrollTop = _this.isSticked();\n          } else {\n            _this.noScroll = false;\n          }\n\n          _this.scrollTicking = false;\n        });\n        _this.scrollTicking = true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getLastMessageOrGroup\", function () {\n      var lastElement = _this.containerRef.current.querySelector(\"[data-\".concat(prefix, \"-message-list]>[data-\").concat(prefix, \"-message]:last-of-type,[data-\").concat(prefix, \"-message-list]>[data-\").concat(prefix, \"-message-group]:last-of-type\"));\n\n      var lastMessageInGroup = lastElement === null || lastElement === void 0 ? void 0 : lastElement.querySelector(\"[data-\".concat(prefix, \"-message]:last-of-type\"));\n      return {\n        lastElement: lastElement,\n        lastMessageInGroup: lastMessageInGroup\n      };\n    });\n\n    _this.scrollPointRef = /*#__PURE__*/React.createRef();\n    _this.containerRef = /*#__PURE__*/React.createRef();\n    _this.scrollRef = /*#__PURE__*/React.createRef();\n    _this.lastClientHeight = 0;\n    _this.preventScrollTop = false;\n    _this.resizeObserver = undefined;\n    _this.scrollTicking = false;\n    _this.resizeTicking = false;\n    _this.noScroll = undefined;\n    return _this;\n  }\n\n  _createClass(MessageListInner, [{\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate() {\n      var list = this.containerRef.current;\n      var topHeight = Math.round(list.scrollTop + list.clientHeight); // 1 px fix for firefox\n\n      var sticky = list.scrollHeight === topHeight || list.scrollHeight + 1 === topHeight || list.scrollHeight - 1 === topHeight;\n      return {\n        sticky: sticky,\n        clientHeight: list.clientHeight,\n        scrollHeight: list.scrollHeight,\n        lastMessageOrGroup: this.getLastMessageOrGroup(),\n        diff: list.scrollHeight - list.scrollTop\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set scrollbar to bottom on start (getSnaphotBeforeUpdate is not invoked on mount)\n      if (this.props.autoScrollToBottomOnMount === true) {\n        this.scrollToEnd(this.props.scrollBehavior);\n      }\n\n      this.lastClientHeight = this.containerRef.current.clientHeight;\n      window.addEventListener(\"resize\", this.handleResize);\n\n      if (typeof window.ResizeObserver === \"function\") {\n        this.resizeObserver = new ResizeObserver(this.handleContainerResize);\n        this.resizeObserver.observe(this.containerRef.current);\n      }\n\n      this.containerRef.current.addEventListener(\"scroll\", this.handleScroll);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var autoScrollToBottom = this.props.autoScrollToBottom;\n\n      if (typeof snapshot !== \"undefined\") {\n        var list = this.containerRef.current;\n\n        var _this$getLastMessageO = this.getLastMessageOrGroup(),\n            lastElement = _this$getLastMessageO.lastElement,\n            lastMessageInGroup = _this$getLastMessageO.lastMessageInGroup;\n\n        if (lastElement === snapshot.lastMessageOrGroup.lastElement) {\n          // If lastMessageInGroup is defined last element is MessageGroup otherwise its Message\n          if (typeof lastMessageInGroup === \"undefined\" || lastMessageInGroup === snapshot.lastMessageOrGroup.lastMessageInGroup) {\n            list.scrollTop = list.scrollHeight - snapshot.diff + (this.lastClientHeight - list.clientHeight);\n          }\n        }\n\n        if (snapshot.sticky === true) {\n          if (autoScrollToBottom === true) {\n            this.scrollToEnd(this.props.scrollBehavior);\n          }\n\n          this.preventScrollTop = true;\n        } else {\n          if (snapshot.clientHeight < this.lastClientHeight) {\n            // If was sticky because scrollHeight is not changing, so here will be equal to lastHeight plus current scrollTop\n            // 1px fix id for firefox\n            var sHeight = list.scrollTop + this.lastClientHeight;\n\n            if (list.scrollHeight === sHeight || list.scrollHeight + 1 === sHeight || list.scrollHeight - 1 === sHeight) {\n              if (autoScrollToBottom === true) {\n                this.scrollToEnd(this.props.scrollBehavior);\n                this.preventScrollTop = true;\n              }\n            } else {\n              this.preventScrollTop = false;\n            }\n          } else {\n            this.preventScrollTop = false;\n\n            if (lastElement === snapshot.lastMessageOrGroup.lastElement) {\n              if (typeof lastMessageInGroup === \"undefined\" || lastMessageInGroup === snapshot.lastMessageOrGroup.lastMessageInGroup) {\n                // New elements were not added at end\n                // New elements were added at start\n                if (list.scrollTop === 0 && list.scrollHeight > snapshot.scrollHeight) {\n                  list.scrollTop = list.scrollHeight - snapshot.scrollHeight;\n                }\n              }\n            }\n          }\n        }\n\n        this.lastClientHeight = snapshot.clientHeight;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n\n      if (typeof this.resizeObserver !== \"undefined\") {\n        this.resizeObserver.disconnect();\n      }\n\n      this.containerRef.current.removeEventListener(\"scroll\", this.handleScroll);\n    }\n  }, {\n    key: \"scrollToEnd\",\n    value: function scrollToEnd() {\n      var scrollBehavior = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.scrollBehavior;\n      var list = this.containerRef.current;\n      var scrollPoint = this.scrollPointRef.current; // https://stackoverflow.com/a/45411081/6316091\n\n      var parentRect = list.getBoundingClientRect();\n      var childRect = scrollPoint.getBoundingClientRect(); // Scroll by offset relative to parent\n\n      var scrollOffset = childRect.top + list.scrollTop - parentRect.top;\n\n      if (list.scrollBy) {\n        list.scrollBy({\n          top: scrollOffset,\n          behavior: scrollBehavior\n        });\n      } else {\n        list.scrollTop = scrollOffset;\n      }\n\n      this.lastClientHeight = list.clientHeight; // Important flag! Blocks strange Chrome mobile behaviour - automatic scroll.\n      // Chrome mobile sometimes trigger scroll when new content is entered to MessageInput. It's probably Chrome Bug - sth related with overflow-anchor\n\n      this.noScroll = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          typingIndicator = _this$props.typingIndicator,\n          loading = _this$props.loading,\n          loadingMore = _this$props.loadingMore,\n          loadingMorePosition = _this$props.loadingMorePosition,\n          onYReachStart = _this$props.onYReachStart,\n          onYReachEnd = _this$props.onYReachEnd,\n          className = _this$props.className,\n          disableOnYReachWhenNoScroll = _this$props.disableOnYReachWhenNoScroll,\n          scrollBehavior = _this$props.scrollBehavior,\n          autoScrollToBottom = _this$props.autoScrollToBottom,\n          autoScrollToBottomOnMount = _this$props.autoScrollToBottomOnMount,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var cName = \"\".concat(prefix, \"-message-list\");\n\n      var _getChildren = getChildren(children, [MessageListContent]),\n          _getChildren2 = _slicedToArray(_getChildren, 1),\n          customContent = _getChildren2[0];\n\n      return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n        className: classNames(cName, className)\n      }), loadingMore && /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(\"\".concat(cName, \"__loading-more\"), _defineProperty({}, \"\".concat(cName, \"__loading-more--bottom\"), loadingMorePosition === \"bottom\"))\n      }, /*#__PURE__*/React.createElement(Loader, null)), loading && /*#__PURE__*/React.createElement(Overlay, null, /*#__PURE__*/React.createElement(Loader, null)), /*#__PURE__*/React.createElement(PerfectScrollbar, _extends({\n        onYReachStart: onYReachStart,\n        onYReachEnd: onYReachEnd,\n        onSync: function onSync(ps) {\n          return ps.update(disableOnYReachWhenNoScroll);\n        },\n        className: \"\".concat(cName, \"__scroll-wrapper\"),\n        ref: this.scrollRef,\n        containerRef: function containerRef(ref) {\n          return _this2.containerRef.current = ref;\n        },\n        options: {\n          suppressScrollX: true\n        }\n      }, _defineProperty({}, \"data-\".concat(prefix, \"-message-list\"), \"\"), {\n        style: {\n          overscrollBehaviorY: \"none\",\n          overflowAnchor: \"auto\",\n          touchAction: \"none\"\n        }\n      }), customContent ? customContent : children, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(cName, \"__scroll-to\"),\n        ref: this.scrollPointRef\n      })), typeof typingIndicator !== \"undefined\" && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(cName, \"__typing-indicator-container\")\n      }, typingIndicator));\n    }\n  }]);\n\n  return MessageListInner;\n}(React.Component);\n\nMessageListInner.displayName = \"MessageList\";\n\nfunction MessageListFunc(props, ref) {\n  var msgListRef = useRef();\n\n  var scrollToBottom = function scrollToBottom(scrollBehavior) {\n    return msgListRef.current.scrollToEnd(scrollBehavior);\n  }; // Return object with public Api\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      scrollToBottom: scrollToBottom\n    };\n  });\n  return /*#__PURE__*/React.createElement(MessageListInner, _extends({\n    ref: msgListRef\n  }, props));\n}\n\nvar MessageList = /*#__PURE__*/forwardRef(MessageListFunc);\nMessageList.propTypes = {\n  /**\n   * Primary content. Message elements\n   * Allowed components:\n   *\n   * * &lt;Message /&gt;\n   * * &lt;MessageGroup /&gt;\n   * * &lt;MessageSeparator /&gt;\n   * * &lt;MessageListContent /&gt;\n   */\n  children: allowedChildren([Message, MessageGroup, MessageSeparator, MessageListContent]),\n\n  /** Typing indicator element. */\n  typingIndicator: PropTypes.node,\n\n  /** Loading flag. */\n  loading: PropTypes.bool,\n\n  /** Loading more flag for infinity scroll. */\n  loadingMore: PropTypes.bool,\n\n  /** Loading more loader position. */\n  loadingMorePosition: PropTypes.oneOf([\"top\", \"bottom\"]),\n\n  /**\n   * This is fired when the scrollbar reaches the beginning on the y axis.<br/>\n   * It can be used to load previous messages using the infinite scroll.\n   */\n  onYReachStart: PropTypes.func,\n\n  /**\n   * This is fired when the scrollbar reaches the end on the y axis.<br/>\n   * It can be used to load next messages using the infinite scroll.\n   */\n  onYReachEnd: PropTypes.func,\n\n  /**\n   * Disables onYReachStart and onYReachEnd events from being fired<br />\n   * when the list is not scrollable.\n   * This is set to false by default for backward compatibility.\n   */\n  disableOnYReachWhenNoScroll: PropTypes.bool,\n\n  /**\n   * Auto scroll to bottom\n   */\n  autoScrollToBottom: PropTypes.bool,\n\n  /**\n   * Auto scroll to bottom on mount\n   */\n  autoScrollToBottomOnMount: PropTypes.bool,\n\n  /**\n   * Scroll behavior\n   * https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior\n   */\n  scrollBehavior: PropTypes.oneOf([\"auto\", \"smooth\"]),\n\n  /** Additional classes. */\n  className: PropTypes.string\n};\nMessageList.defaultProps = {\n  typingIndicator: undefined,\n  loading: false,\n  loadingMore: false,\n  loadingMorePosition: \"top\",\n  disableOnYReachWhenNoScroll: false,\n  autoScrollToBottom: true,\n  autoScrollToBottomOnMount: true,\n  scrollBehavior: \"auto\"\n};\nprocess.env.NODE_ENV !== \"production\" ? MessageListInner.propTypes = MessageList.propTypes : void 0;\nMessageListInner.defaultProps = MessageList.defaultProps;\nMessageList.Content = MessageListContent;\nexport default MessageList;","map":null,"metadata":{},"sourceType":"module"}