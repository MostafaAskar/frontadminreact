{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';// import Booking from 'services/booking';\nimport SellerBooking from'services/seller/booking';const initialState={loading:false,booking:[],error:'',params:{page:1,perPage:10},meta:{}};// export const fetchBookingList = createAsyncThunk(\n//   'booking/fetchBookingList',\n//   (params = {}) => {\n//     return Booking.getAll({ ...initialState.params, ...params }).then(\n//       (res) => res\n//     );\n//   }\n// );\nexport const fetchSellerBookingList=createAsyncThunk('booking/fetchSellerBookingList',function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return SellerBooking.getAll({...initialState.params,...params}).then(res=>res);});const bookingListSlice=createSlice({name:'bookingList',initialState,extraReducers:builder=>{// builder.addCase(fetchBookingList.pending, (state) => {\n//   state.loading = true;\n// });\n// builder.addCase(fetchBookingList.fulfilled, (state, action) => {\n//   const { payload } = action;\n//   state.loading = false;\n//   state.booking = payload.data;\n//   state.meta = payload.meta;\n//   state.params.page = payload.meta.current_page;\n//   state.params.perPage = payload.meta.per_page;\n//   state.error = '';\n// });\n// builder.addCase(fetchBookingList.rejected, (state, action) => {\n//   state.loading = false;\n//   state.booking = [];\n//   state.error = action.error.message;\n// });\n// seller\nbuilder.addCase(fetchSellerBookingList.pending,state=>{state.loading=true;});builder.addCase(fetchSellerBookingList.fulfilled,(state,action)=>{const{payload}=action;state.loading=false;state.booking=payload.data;state.meta=payload.meta;state.params.page=payload.meta.current_page;state.params.perPage=payload.meta.per_page;state.error='';});builder.addCase(fetchSellerBookingList.rejected,(state,action)=>{state.loading=false;state.booking=[];state.error=action.error.message;});}});export default bookingListSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}