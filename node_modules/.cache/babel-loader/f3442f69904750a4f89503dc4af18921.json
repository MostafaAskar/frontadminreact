{"ast":null,"code":"var _excluded = [\"className\", \"children\", \"size\", \"selected\", \"onChange\", \"itemsTabIndex\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useImperativeHandle, forwardRef, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { noop, allowedChildren } from \"../utils\";\nimport { SizeEnum, StatusEnum } from \"../enums\";\nimport Status from \"../Status\";\nimport { prefix } from \"../settings\";\n\nfunction StatusListInner(_ref, ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      size = _ref.size,\n      selected = _ref.selected,\n      onChange = _ref.onChange,\n      itemsTabIndex = _ref.itemsTabIndex,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var cName = \"\".concat(prefix, \"-status-list\");\n  var listRef = useRef(); // Return object with public Api\n\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus(idx) {\n        var items = Array.from(listRef.current.querySelectorAll(\"li\")); // For sure filter only direct children because querySelectorAll cant get only direct children\n\n        var directChild = items.filter(function (item) {\n          return item.parentNode === listRef.current;\n        });\n\n        if (typeof directChild[idx] !== \"undefined\") {\n          directChild[idx].focus();\n        }\n      }\n    };\n  });\n  var tabIndex = itemsTabIndex;\n  return /*#__PURE__*/React.createElement(\"ul\", _extends({\n    ref: listRef\n  }, rest, {\n    className: classNames(cName, className, _defineProperty({}, \"\".concat(cName, \"--\").concat(size), size))\n  }), React.Children.map(children, function (item) {\n    // If active argument is set, clear active flag for all elements except desired\n    var newProps = {};\n\n    if (selected) {\n      newProps.selected = item.props.status === selected;\n    }\n\n    if (onChange) {\n      newProps.onClick = function (evt) {\n        onChange(item.props.status);\n\n        if (item.onClick) {\n          item.onClick(evt);\n        }\n      };\n    }\n\n    var onKeyPress = function onKeyPress(evt) {\n      if (onChange) {\n        if (evt.key === \"Enter\" && evt.shiftKey === false && evt.altKey === false) {\n          onChange(item.props.status);\n        }\n      }\n    };\n\n    var tIndex = function () {\n      if (typeof tabIndex === \"number\") {\n        if (tabIndex > 0) {\n          return tabIndex++;\n        } else {\n          return tabIndex;\n        }\n      } else {\n        return undefined;\n      }\n    }();\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      tabIndex: tIndex,\n      onKeyPress: onKeyPress\n    }, /*#__PURE__*/React.cloneElement(item, newProps));\n  }));\n}\n\nvar StatusList = /*#__PURE__*/forwardRef(StatusListInner);\nStatusList.displayName = \"StatusList\";\nStatusList.propTypes = {\n  /**\n   * Primary content.\n   * Allowed components:\n   *\n   * * &lt;Status /&gt;\n   */\n  children: allowedChildren([Status]),\n\n  /** Selected element */\n  selected: PropTypes.oneOf(StatusEnum),\n\n  /** Size */\n  size: PropTypes.oneOf(SizeEnum),\n\n  /** tabindex value for items. Any positive integer will be treated as start index for counting. Zero and negative values will be applied to all items */\n  itemsTabIndex: PropTypes.number,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** onChange handler */\n  onChange: PropTypes.func\n};\nprocess.env.NODE_ENV !== \"production\" ? StatusListInner.propTypes = StatusList.propTypes : void 0;\nStatusList.defaultProps = {\n  onChange: noop\n};\nStatusListInner.defaultProps = StatusList.defaultProps;\nexport { StatusList };\nexport default StatusList;","map":null,"metadata":{},"sourceType":"module"}