{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar replaceCaret = function replaceCaret(el, activateAfterChange) {\n  var isTargetFocused = document.activeElement === el; // Place the caret at the end of the element\n\n  var target = document.createTextNode(\"\"); // Put empty text node at the end of input\n\n  el.appendChild(target); // do not move caret if element was not focused\n\n  if (target !== null && target.nodeValue !== null && (isTargetFocused || activateAfterChange)) {\n    var sel = window.getSelection();\n\n    if (sel !== null) {\n      var range = document.createRange();\n      range.setStart(target, target.nodeValue.length);\n      range.collapse(true);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  }\n};\n\nexport var ContentEditable = /*#__PURE__*/function (_Component) {\n  _inherits(ContentEditable, _Component);\n\n  var _super = _createSuper(ContentEditable);\n\n  function ContentEditable(props) {\n    var _this;\n\n    _classCallCheck(this, ContentEditable);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"innerHTML\", function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          value = _assertThisInitialize.props.value;\n\n      return {\n        __html: typeof value !== \"undefined\" ? value : \"\"\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function (evt) {\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          onKeyPress = _assertThisInitialize2.props.onKeyPress;\n\n      onKeyPress(evt);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInput\", function (evt) {\n      var _assertThisInitialize3 = _assertThisInitialized(_this),\n          onChange = _assertThisInitialize3.props.onChange;\n\n      var target = evt.target;\n      onChange(target.innerHTML, target.textContent, target.innerText);\n    });\n\n    _this.msgRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(ContentEditable, [{\n    key: \"focus\",\n    value: // Public API\n    function focus() {\n      if (typeof this.msgRef.current !== \"undefined\") {\n        this.msgRef.current.focus();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.autoFocus === true) {\n        this.msgRef.current.focus();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var msgRef = this.msgRef,\n          _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          disabled = _this$props.disabled,\n          activateAfterChange = _this$props.activateAfterChange;\n\n      if (typeof msgRef.current === \"undefined\") {\n        return true;\n      }\n\n      if (nextProps.value !== msgRef.current.innerHTML) {\n        return true;\n      } // DO NOT place callbacks here in comparison!\n\n\n      return placeholder !== nextProps.placeholder || disabled !== nextProps.disabled || activateAfterChange !== nextProps.activateAfterChange;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var msgRef = this.msgRef,\n          _this$props2 = this.props,\n          value = _this$props2.value,\n          activateAfterChange = _this$props2.activateAfterChange;\n\n      if (value !== msgRef.current.innerHTML) {\n        msgRef.current.innerHTML = typeof value === \"string\" ? value : \"\";\n      }\n\n      replaceCaret(msgRef.current, activateAfterChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var msgRef = this.msgRef,\n          handleInput = this.handleInput,\n          handleKeyPress = this.handleKeyPress,\n          innerHTML = this.innerHTML,\n          _this$props3 = this.props,\n          placeholder = _this$props3.placeholder,\n          disabled = _this$props3.disabled,\n          className = _this$props3.className,\n          ph = typeof placeholder === \"string\" ? placeholder : \"\";\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: msgRef,\n        className: className,\n        contentEditable: disabled === false,\n        disabled: disabled,\n        \"data-placeholder\": ph,\n        onInput: handleInput,\n        onKeyPress: handleKeyPress,\n        dangerouslySetInnerHTML: innerHTML()\n      });\n    }\n  }]);\n\n  return ContentEditable;\n}(Component);\nprocess.env.NODE_ENV !== \"production\" ? ContentEditable.propTypes = {\n  /** Value. */\n  value: PropTypes.string,\n\n  /** Placeholder. */\n  placeholder: PropTypes.string,\n\n  /** A input can show it is currently unable to be interacted with. */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets focus element and caret at the end of input\n   * when value is changed programmatically (e.g) from button click and element is not active\n   */\n  activateAfterChange: PropTypes.bool,\n\n  /** Set focus after mount. */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * onChange handler<br>\n   * @param {String} value\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * onKeyPress handler<br>\n   * @param {String} value\n   */\n  onKeyPress: PropTypes.func,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : void 0;\nContentEditable.defaultProps = {\n  value: undefined,\n  placeholder: \"\",\n  disabled: false,\n  activateAfterChange: false,\n  autoFocus: false,\n  onChange: function onChange() {},\n  onKeyPress: function onKeyPress() {}\n};\nexport default ContentEditable;","map":null,"metadata":{},"sourceType":"module"}