{"ast":null,"code":"var _excluded = [\"placeholder\", \"value\", \"onChange\", \"onClearClick\", \"className\", \"disabled\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useState, useRef, useMemo, useImperativeHandle, forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { prefix } from \"../settings\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nvar useControlledOrNot = function useControlledOrNot(initialValue, value) {\n  if (typeof value === \"undefined\") {\n    // Uncontrolled\n    return useState(initialValue);\n  } else {\n    // Controlled\n    return [value, function () {}];\n  }\n};\n\nfunction SearchInner(_ref, ref) {\n  var placeholder = _ref.placeholder,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      onClearClick = _ref.onClearClick,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var cName = \"\".concat(prefix, \"-search\");\n  var isControlled = useMemo(function () {\n    return typeof value !== \"undefined\";\n  }, []);\n\n  var _useControlledOrNot = useControlledOrNot(\"\", value),\n      _useControlledOrNot2 = _slicedToArray(_useControlledOrNot, 2),\n      searchValue = _useControlledOrNot2[0],\n      setSearchValue = _useControlledOrNot2[1];\n\n  var _useState = useState(isControlled ? searchValue.length > 0 : false),\n      _useState2 = _slicedToArray(_useState, 2),\n      clearActive = _useState2[0],\n      setClearActive = _useState2[1];\n\n  if (isControlled !== (typeof value !== \"undefined\")) {\n    throw \"Search: Changing from controlled to uncontrolled component and vice versa is not allowed\";\n  }\n\n  var inputRef = useRef(undefined); // Public API\n\n  var focus = function focus() {\n    if (typeof inputRef.current !== \"undefined\") {\n      inputRef.current.focus();\n    }\n  }; // Return object with public Api\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      focus: focus\n    };\n  });\n\n  var handleChange = function handleChange(e) {\n    var value = e.target.value;\n    setClearActive(value.length > 0);\n\n    if (isControlled === false) {\n      setSearchValue(value);\n    }\n\n    onChange(value);\n  };\n\n  var handleClearClick = function handleClearClick() {\n    if (isControlled === false) {\n      setSearchValue(\"\");\n    }\n\n    setClearActive(false);\n    onClearClick();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: classNames(cName, _defineProperty({}, \"\".concat(cName, \"--disabled\"), disabled), className)\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSearch,\n    className: \"\".concat(cName, \"__search-icon\")\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef,\n    type: \"text\",\n    className: \"\".concat(cName, \"__input\"),\n    placeholder: placeholder,\n    onChange: handleChange,\n    disabled: disabled,\n    value: searchValue\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faTimes,\n    className: classNames(\"\".concat(cName, \"__clear-icon\"), _defineProperty({}, \"\".concat(cName, \"__clear-icon--active\"), clearActive)),\n    onClick: handleClearClick\n  }));\n}\n\nvar Search = /*#__PURE__*/forwardRef(SearchInner);\nSearch.displayName = \"Search\";\nSearch.propTypes = {\n  /** Placeholder. */\n  placeholder: PropTypes.string,\n\n  /** Current value of the search input. Creates a controlled component */\n  value: PropTypes.string,\n\n  /** OnInput handler. */\n  onChange: PropTypes.func,\n\n  /** OnClearClick handler. */\n  onClearClick: PropTypes.func,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Disabled */\n  disabled: PropTypes.bool\n};\nprocess.env.NODE_ENV !== \"production\" ? SearchInner.propTypes = Search.propTypes : void 0;\nSearch.defaultProps = {\n  placeholder: \"\",\n  value: undefined,\n  onChange: function onChange() {},\n  onClearClick: function onClearClick() {},\n  disabled: false\n};\nSearchInner.defaultProps = Search.defaultProps;\nexport { Search };\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}